<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Solarex's Blog]]></title>
  <link href="http://Solarex.github.io/atom.xml" rel="self"/>
  <link href="http://Solarex.github.io/"/>
  <updated>2019-04-18T16:40:12+08:00</updated>
  <id>http://Solarex.github.io/</id>
  <author>
    <name><![CDATA[Solarex]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kotlin是如何实现方法默认参数的]]></title>
    <link href="http://Solarex.github.io/blog/2019/04/18/how-kotlin-generate-method-default-arguments/"/>
    <updated>2019-04-18T10:36:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2019/04/18/how-kotlin-generate-method-default-arguments</id>
    <content type="html"><![CDATA[<p>学习Kotlin的时候，发现可以给方法设置默认参数，Java是不支持给方法设置默认参数的，那Kotin是如何实现的呢？不妨看下下面的kotlin文件，kotlin允许这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nf">frob</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">fred</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">300</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">frob</span> <span class="p">=</span> <span class="n">mkfrob</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;${this}${x}${y}&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">mkfrob</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">frob</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">boobar</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fred</span><span class="p">();</span>
</span><span class='line'>        <span class="n">fred</span><span class="p">(</span><span class="m">100</span><span class="p">);</span>
</span><span class='line'>        <span class="n">fred</span><span class="p">(</span><span class="m">100</span><span class="p">,</span> <span class="n">frob</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用<code>kotlinc</code>编译成class文件之后，我们使用<code>cfr</code>反编译一下class文件看下编译器帮我们做了什么黑魔法。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.PrintStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">kotlin.Metadata</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">kotlin.jvm.internal.Intrinsics</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.jetbrains.annotations.NotNull</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Metadata</span><span class="o">(</span><span class="n">mv</span><span class="o">={</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">13</span><span class="o">},</span> <span class="n">bv</span><span class="o">={</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">3</span><span class="o">},</span> <span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">d1</span><span class="o">={</span><span class="s">&quot;\u0000\u001c\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0002\n\u0002\u0010\b\n\u0002\b\u0002\u0018\u00002\u00020\u0001B\u0005\u00a2\u0006\u0002\u0010\u0002J\u0006\u0010\u0003\u001a\u00020\u0004J\u001a\u0010\u0005\u001a\u00020\u00042\b\b\u0002\u0010\u0006\u001a\u00020\u00072\b\b\u0002\u0010\b\u001a\u00020\u0000J\u000e\u0010\t\u001a\u00020\u00002\u0006\u0010\u0006\u001a\u00020\u0007&quot;</span><span class="o">},</span> <span class="n">d2</span><span class="o">={</span><span class="s">&quot;Lfrob;&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;()V&quot;</span><span class="o">,</span> <span class="s">&quot;boobar&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;fred&quot;</span><span class="o">,</span> <span class="s">&quot;x&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;y&quot;</span><span class="o">,</span> <span class="s">&quot;mkfrob&quot;</span><span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">frob</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">fred</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="nd">@NotNull</span> <span class="n">frob</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">((</span><span class="n">Object</span><span class="o">)</span><span class="n">y</span><span class="o">,</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="s">&quot;y&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">string</span> <span class="o">=</span> <span class="s">&quot;&quot;</span> <span class="o">+</span> <span class="k">this</span> <span class="o">+</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">((</span><span class="n">Object</span><span class="o">)</span><span class="n">string</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="cm">/* synthetic */</span> <span class="kt">void</span> <span class="n">fred$default</span><span class="o">(</span><span class="n">frob</span> <span class="n">frob2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="n">frob</span> <span class="n">frob3</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n2</span><span class="o">,</span> <span class="n">Object</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">((</span><span class="n">n2</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">n</span> <span class="o">=</span> <span class="mi">300</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">((</span><span class="n">n2</span> <span class="o">&amp;</span> <span class="mi">2</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">frob3</span> <span class="o">=</span> <span class="n">frob2</span><span class="o">.</span><span class="na">mkfrob</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">frob2</span><span class="o">.</span><span class="na">fred</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">frob3</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@NotNull</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="n">frob</span> <span class="nf">mkfrob</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">boobar</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">frob</span><span class="o">.</span><span class="na">fred</span><span class="n">$default</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="n">frob</span><span class="o">.</span><span class="na">fred</span><span class="n">$default</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="mi">100</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">fred</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="k">new</span> <span class="n">frob</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到编译器底层自动为我们生成了一个<code>static</code>,<code>synthetic</code>的方法，在这个方法中，第一个参数是对象接收者，第二个和第三个参数和我们声明的<code>fred</code>方法相同，第四个参数<code>n2</code>从方法体可以看出是一个bitmask。</p>

<p>从生成的方法<code>fred$default</code>实现来看，每个可以有默认参数的位置的参数有个mask值，为<code>2^x</code>，x为参数出现的顺序，如果方法调用的时候用到了某个位置上的默认参数，<code>fred$default</code>方法的第四个参数<code>n2</code>就会加上<code>2^x</code>。</p>

<p>在Java中是不能使用默认参数调用<code>fred</code>这种方法的，如果想要在Java中调用，需要给方法加上<code>@JvmOverloads</code>注解，我们加上这个注解再去反编译一下看下有什么变化。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nf">frob</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">@JvmOverloads</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">fred</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">300</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">frob</span> <span class="p">=</span> <span class="n">mkfrob</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;${this}${x}${y}&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">mkfrob</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">frob</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">boobar</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fred</span><span class="p">();</span>
</span><span class='line'>        <span class="n">fred</span><span class="p">(</span><span class="m">100</span><span class="p">);</span>
</span><span class='line'>        <span class="n">fred</span><span class="p">(</span><span class="m">100</span><span class="p">,</span> <span class="n">frob</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再反编译一下我们看下有什么变化：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.PrintStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">kotlin.Metadata</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">kotlin.jvm.JvmOverloads</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">kotlin.jvm.internal.Intrinsics</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.jetbrains.annotations.NotNull</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Metadata</span><span class="o">(</span><span class="n">mv</span><span class="o">={</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">13</span><span class="o">},</span> <span class="n">bv</span><span class="o">={</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">3</span><span class="o">},</span> <span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">d1</span><span class="o">={</span><span class="s">&quot;\u0000\u001c\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0002\n\u0002\u0010\b\n\u0002\b\u0002\u0018\u00002\u00020\u0001B\u0005\u00a2\u0006\u0002\u0010\u0002J\u0006\u0010\u0003\u001a\u00020\u0004J\u001c\u0010\u0005\u001a\u00020\u00042\b\b\u0002\u0010\u0006\u001a\u00020\u00072\b\b\u0002\u0010\b\u001a\u00020\u0000H\u0007J\u000e\u0010\t\u001a\u00020\u00002\u0006\u0010\u0006\u001a\u00020\u0007&quot;</span><span class="o">},</span> <span class="n">d2</span><span class="o">={</span><span class="s">&quot;Lfrob;&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;()V&quot;</span><span class="o">,</span> <span class="s">&quot;boobar&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;fred&quot;</span><span class="o">,</span> <span class="s">&quot;x&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;y&quot;</span><span class="o">,</span> <span class="s">&quot;mkfrob&quot;</span><span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">frob</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@JvmOverloads</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">fred</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="nd">@NotNull</span> <span class="n">frob</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">((</span><span class="n">Object</span><span class="o">)</span><span class="n">y</span><span class="o">,</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="s">&quot;y&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">string</span> <span class="o">=</span> <span class="s">&quot;&quot;</span> <span class="o">+</span> <span class="k">this</span> <span class="o">+</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">((</span><span class="n">Object</span><span class="o">)</span><span class="n">string</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@JvmOverloads</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="cm">/* synthetic */</span> <span class="kt">void</span> <span class="n">fred$default</span><span class="o">(</span><span class="n">frob</span> <span class="n">frob2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="n">frob</span> <span class="n">frob3</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n2</span><span class="o">,</span> <span class="n">Object</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">((</span><span class="n">n2</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">n</span> <span class="o">=</span> <span class="mi">300</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">((</span><span class="n">n2</span> <span class="o">&amp;</span> <span class="mi">2</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">frob3</span> <span class="o">=</span> <span class="n">frob2</span><span class="o">.</span><span class="na">mkfrob</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">frob2</span><span class="o">.</span><span class="na">fred</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">frob3</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@JvmOverloads</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">fred</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">frob</span><span class="o">.</span><span class="na">fred</span><span class="n">$default</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">x</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@JvmOverloads</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">fred</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">frob</span><span class="o">.</span><span class="na">fred</span><span class="n">$default</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@NotNull</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="n">frob</span> <span class="nf">mkfrob</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">boobar</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">frob</span><span class="o">.</span><span class="na">fred</span><span class="n">$default</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="n">frob</span><span class="o">.</span><span class="na">fred</span><span class="n">$default</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="mi">100</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">fred</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="k">new</span> <span class="n">frob</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到比上面多生成了几个重载的方法，在重载的方法内部调用了生成方法<code>fred$default</code>。</p>

<h3>reference</h3>

<ul>
<li><a href="https://www.benf.org/other/cfr/kotlin-defaults.html">How does Kotlin generate default arguments?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义View总结三]]></title>
    <link href="http://Solarex.github.io/blog/2019/03/12/summary-of-custom-views-part-iii/"/>
    <updated>2019-03-12T00:34:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2019/03/12/summary-of-custom-views-part-iii</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义View总结二]]></title>
    <link href="http://Solarex.github.io/blog/2019/02/12/summary-of-custom-views-part-ii/"/>
    <updated>2019-02-12T00:34:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2019/02/12/summary-of-custom-views-part-ii</id>
    <content type="html"><![CDATA[<h3>自定义View总结 &ndash; 布局</h3>

<h4>布局基础</h4>

<p>布局过程，就是程序在运行时利用布局文件中的代码来计算出实际尺寸和位置的过程。有两个阶段，测量阶段和布局阶段，分别对应<code>measure</code>和<code>layout</code>。</p>

<p>对于一个<code>View</code>而言，默认的<code>onMeasure</code>实现是：</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * &lt;p&gt;</span>
</span><span class='line'><span class="cm"> * Measure the view and its content to determine the measured width and the</span>
</span><span class='line'><span class="cm"> * measured height. This method is invoked by {@link #measure(int, int)} and</span>
</span><span class='line'><span class="cm"> * should be overridden by subclasses to provide accurate and efficient</span>
</span><span class='line'><span class="cm"> * measurement of their contents.</span>
</span><span class='line'><span class="cm"> * &lt;/p&gt;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;p&gt;</span>
</span><span class='line'><span class="cm"> * &lt;strong&gt;CONTRACT:&lt;/strong&gt; When overriding this method, you</span>
</span><span class='line'><span class="cm"> * &lt;em&gt;must&lt;/em&gt; call {@link #setMeasuredDimension(int, int)} to store the</span>
</span><span class='line'><span class="cm"> * measured width and height of this view. Failure to do so will trigger an</span>
</span><span class='line'><span class="cm"> * &lt;code&gt;IllegalStateException&lt;/code&gt;, thrown by</span>
</span><span class='line'><span class="cm"> * {@link #measure(int, int)}. Calling the superclass&#39;</span>
</span><span class='line'><span class="cm"> * {@link #onMeasure(int, int)} is a valid use.</span>
</span><span class='line'><span class="cm"> * &lt;/p&gt;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;p&gt;</span>
</span><span class='line'><span class="cm"> * The base class implementation of measure defaults to the background size,</span>
</span><span class='line'><span class="cm"> * unless a larger size is allowed by the MeasureSpec. Subclasses should</span>
</span><span class='line'><span class="cm"> * override {@link #onMeasure(int, int)} to provide better measurements of</span>
</span><span class='line'><span class="cm"> * their content.</span>
</span><span class='line'><span class="cm"> * &lt;/p&gt;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;p&gt;</span>
</span><span class='line'><span class="cm"> * If this method is overridden, it is the subclass&#39;s responsibility to make</span>
</span><span class='line'><span class="cm"> * sure the measured height and width are at least the view&#39;s minimum height</span>
</span><span class='line'><span class="cm"> * and width ({@link #getSuggestedMinimumHeight()} and</span>
</span><span class='line'><span class="cm"> * {@link #getSuggestedMinimumWidth()}).</span>
</span><span class='line'><span class="cm"> * &lt;/p&gt;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param widthMeasureSpec horizontal space requirements as imposed by the parent.</span>
</span><span class='line'><span class="cm"> *                         The requirements are encoded with</span>
</span><span class='line'><span class="cm"> *                         {@link android.view.View.MeasureSpec}.</span>
</span><span class='line'><span class="cm"> * @param heightMeasureSpec vertical space requirements as imposed by the parent.</span>
</span><span class='line'><span class="cm"> *                         The requirements are encoded with</span>
</span><span class='line'><span class="cm"> *                         {@link android.view.View.MeasureSpec}.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @see #getMeasuredWidth()</span>
</span><span class='line'><span class="cm"> * @see #getMeasuredHeight()</span>
</span><span class='line'><span class="cm"> * @see #setMeasuredDimension(int, int)</span>
</span><span class='line'><span class="cm"> * @see #getSuggestedMinimumHeight()</span>
</span><span class='line'><span class="cm"> * @see #getSuggestedMinimumWidth()</span>
</span><span class='line'><span class="cm"> * @see android.view.View.MeasureSpec#getMode(int)</span>
</span><span class='line'><span class="cm"> * @see android.view.View.MeasureSpec#getSize(int)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onMeasure</span><span class="o">(</span><span class="kt">int</span> <span class="n">widthMeasureSpec</span><span class="o">,</span> <span class="kt">int</span> <span class="n">heightMeasureSpec</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">setMeasuredDimension</span><span class="o">(</span><span class="n">getDefaultSize</span><span class="o">(</span><span class="n">getSuggestedMinimumWidth</span><span class="o">(),</span> <span class="n">widthMeasureSpec</span><span class="o">),</span>
</span><span class='line'>            <span class="n">getDefaultSize</span><span class="o">(</span><span class="n">getSuggestedMinimumHeight</span><span class="o">(),</span> <span class="n">heightMeasureSpec</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Utility to return a default size. Uses the supplied size if the</span>
</span><span class='line'><span class="cm"> * MeasureSpec imposed no constraints. Will get larger if allowed</span>
</span><span class='line'><span class="cm"> * by the MeasureSpec.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param size Default size for this view</span>
</span><span class='line'><span class="cm"> * @param measureSpec Constraints imposed by the parent</span>
</span><span class='line'><span class="cm"> * @return The size this view should be.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getDefaultSize</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">,</span> <span class="kt">int</span> <span class="n">measureSpec</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">specMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">getMode</span><span class="o">(</span><span class="n">measureSpec</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">specSize</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">getSize</span><span class="o">(</span><span class="n">measureSpec</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">switch</span> <span class="o">(</span><span class="n">specMode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">UNSPECIFIED</span><span class="o">:</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">:</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">:</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">specSize</span><span class="o">;</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Returns the suggested minimum width that the view should use. This</span>
</span><span class='line'><span class="cm"> * returns the maximum of the view&#39;s minimum width</span>
</span><span class='line'><span class="cm"> * and the background&#39;s minimum width</span>
</span><span class='line'><span class="cm"> *  ({@link android.graphics.drawable.Drawable#getMinimumWidth()}).</span>
</span><span class='line'><span class="cm"> * &lt;p&gt;</span>
</span><span class='line'><span class="cm"> * When being used in {@link #onMeasure(int, int)}, the caller should still</span>
</span><span class='line'><span class="cm"> * ensure the returned width is within the requirements of the parent.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @return The suggested minimum width of the view.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">int</span> <span class="nf">getSuggestedMinimumWidth</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">(</span><span class="n">mBackground</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="n">mMinWidth</span> <span class="o">:</span> <span class="n">max</span><span class="o">(</span><span class="n">mMinWidth</span><span class="o">,</span> <span class="n">mBackground</span><span class="o">.</span><span class="na">getMinimumWidth</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到在<code>getDefault</code>方法中对<code>AT_MOST</code>(<code>wrap_content</code>)和<code>EXACTLY</code>(<code>match_parent</code>)的处理都是用父View的size来作为了子View的size，这种处理有的时候是不合适的，需要我们额外做些处理，下面是一个在写自定义View的时候的一个utils方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">measure</span><span class="o">(</span><span class="kt">int</span> <span class="n">measureSpec</span><span class="o">,</span> <span class="kt">int</span> <span class="n">defaultSize</span><span class="o">){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">defaultSize</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">specMode</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">MeasureSpec</span><span class="o">.</span><span class="na">getMode</span><span class="o">(</span><span class="n">measureSpec</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">specSize</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">MeasureSpec</span><span class="o">.</span><span class="na">getSize</span><span class="o">(</span><span class="n">measureSpec</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">specMode</span> <span class="o">==</span> <span class="n">View</span><span class="o">.</span><span class="na">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">){</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">specSize</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">specMode</span> <span class="o">==</span> <span class="n">View</span><span class="o">.</span><span class="na">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">){</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">specSize</span><span class="o">,</span> <span class="n">defaultSize</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>测量阶段，<code>measure()</code>方法被父View调用，在<code>measure()</code>中做一些准备和优化工作后，调用<code>onMeasure()</code>来进行实际的自我测量。<code>onMeasure()</code>中做的事，<code>View</code>和<code>ViewGroup</code>不太一样：</p>

<ul>
<li><code>View</code>在<code>onMeasure()</code>中根据父View传过来的MeasureSpec约束计算自己的大小并调用<code>setMeasuredDimension</code>保存下来。</li>
<li><code>ViewGroup</code>在<code>onMeasure</code>中调用<code>measureChildren</code>测量子View，并根据子View计算出的期望大小来计算出它们的实际尺寸和位置然后保存。同时根据子View的尺寸和位置来计算出自己的尺寸并保存。</li>
</ul>


<p>在<code>ViewGroup</code>测量子View的时候，也就是调用<code>childView.measure()</code>的时候需要将自己的约束MeasureSpec传递给子View，这个MeasureSpec如何计算，下面会说。回到最顶层的父View，也即<code>DecorView</code>，它的MeasureSpec是<code>LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT</code>。</p>

<p>布局过程，<code>layout()</code>方法被父View调用，在<code>layout()</code>方法中它会保存父View传进来的自己的位置和尺寸，并且调用<code>onLayout</code>来进行实际的内部布局。<code>onLayout</code>中做的事，<code>View</code>和<code>ViewGroup</code>也不一样：</p>

<ul>
<li><code>View</code>由于没有子View，它的<code>onLayout</code>什么也不做</li>
<li><code>ViewGroup</code>在<code>onLayout</code>中会调用自己所有子View的<code>layout</code>方法，把它们的尺寸和位置传给它们，让它们完成自我的内部布局。</li>
</ul>


<h4>全新定义 View 的尺寸</h4>

<p>子View在计算的时候需要保证计算结果满足父View MeasureSpec对自己的尺寸限制。<code>ViewGroup</code>提供了几个工具方法供我们调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Ask all of the children of this view to measure themselves, taking into</span>
</span><span class='line'><span class="cm"> * account both the MeasureSpec requirements for this view and its padding.</span>
</span><span class='line'><span class="cm"> * We skip children that are in the GONE state The heavy lifting is done in</span>
</span><span class='line'><span class="cm"> * getChildMeasureSpec.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param widthMeasureSpec The width requirements for this view</span>
</span><span class='line'><span class="cm"> * @param heightMeasureSpec The height requirements for this view</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">measureChildren</span><span class="o">(</span><span class="kt">int</span> <span class="n">widthMeasureSpec</span><span class="o">,</span> <span class="kt">int</span> <span class="n">heightMeasureSpec</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">mChildrenCount</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">View</span><span class="o">[]</span> <span class="n">children</span> <span class="o">=</span> <span class="n">mChildren</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">View</span> <span class="n">child</span> <span class="o">=</span> <span class="n">children</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">((</span><span class="n">child</span><span class="o">.</span><span class="na">mViewFlags</span> <span class="o">&amp;</span> <span class="n">VISIBILITY_MASK</span><span class="o">)</span> <span class="o">!=</span> <span class="n">GONE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">measureChild</span><span class="o">(</span><span class="n">child</span><span class="o">,</span> <span class="n">widthMeasureSpec</span><span class="o">,</span> <span class="n">heightMeasureSpec</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Ask one of the children of this view to measure itself, taking into</span>
</span><span class='line'><span class="cm"> * account both the MeasureSpec requirements for this view and its padding.</span>
</span><span class='line'><span class="cm"> * The heavy lifting is done in getChildMeasureSpec.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param child The child to measure</span>
</span><span class='line'><span class="cm"> * @param parentWidthMeasureSpec The width requirements for this view</span>
</span><span class='line'><span class="cm"> * @param parentHeightMeasureSpec The height requirements for this view</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">measureChild</span><span class="o">(</span><span class="n">View</span> <span class="n">child</span><span class="o">,</span> <span class="kt">int</span> <span class="n">parentWidthMeasureSpec</span><span class="o">,</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">parentHeightMeasureSpec</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">LayoutParams</span> <span class="n">lp</span> <span class="o">=</span> <span class="n">child</span><span class="o">.</span><span class="na">getLayoutParams</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">childWidthMeasureSpec</span> <span class="o">=</span> <span class="n">getChildMeasureSpec</span><span class="o">(</span><span class="n">parentWidthMeasureSpec</span><span class="o">,</span>
</span><span class='line'>            <span class="n">mPaddingLeft</span> <span class="o">+</span> <span class="n">mPaddingRight</span><span class="o">,</span> <span class="n">lp</span><span class="o">.</span><span class="na">width</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">childHeightMeasureSpec</span> <span class="o">=</span> <span class="n">getChildMeasureSpec</span><span class="o">(</span><span class="n">parentHeightMeasureSpec</span><span class="o">,</span>
</span><span class='line'>            <span class="n">mPaddingTop</span> <span class="o">+</span> <span class="n">mPaddingBottom</span><span class="o">,</span> <span class="n">lp</span><span class="o">.</span><span class="na">height</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">child</span><span class="o">.</span><span class="na">measure</span><span class="o">(</span><span class="n">childWidthMeasureSpec</span><span class="o">,</span> <span class="n">childHeightMeasureSpec</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Does the hard part of measureChildren: figuring out the MeasureSpec to</span>
</span><span class='line'><span class="cm"> * pass to a particular child. This method figures out the right MeasureSpec</span>
</span><span class='line'><span class="cm"> * for one dimension (height or width) of one child view.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * The goal is to combine information from our MeasureSpec with the</span>
</span><span class='line'><span class="cm"> * LayoutParams of the child to get the best possible results. For example,</span>
</span><span class='line'><span class="cm"> * if the this view knows its size (because its MeasureSpec has a mode of</span>
</span><span class='line'><span class="cm"> * EXACTLY), and the child has indicated in its LayoutParams that it wants</span>
</span><span class='line'><span class="cm"> * to be the same size as the parent, the parent should ask the child to</span>
</span><span class='line'><span class="cm"> * layout given an exact size.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param spec The requirements for this view</span>
</span><span class='line'><span class="cm"> * @param padding The padding of this view for the current dimension and</span>
</span><span class='line'><span class="cm"> *        margins, if applicable</span>
</span><span class='line'><span class="cm"> * @param childDimension How big the child wants to be in the current</span>
</span><span class='line'><span class="cm"> *        dimension</span>
</span><span class='line'><span class="cm"> * @return a MeasureSpec integer for the child</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getChildMeasureSpec</span><span class="o">(</span><span class="kt">int</span> <span class="n">spec</span><span class="o">,</span> <span class="kt">int</span> <span class="n">padding</span><span class="o">,</span> <span class="kt">int</span> <span class="n">childDimension</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">specMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">getMode</span><span class="o">(</span><span class="n">spec</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">specSize</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">getSize</span><span class="o">(</span><span class="n">spec</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">specSize</span> <span class="o">-</span> <span class="n">padding</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">resultSize</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">resultMode</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">switch</span> <span class="o">(</span><span class="n">specMode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Parent has imposed an exact size on us</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">childDimension</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to be our size. So be it.</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to determine its own size. It can&#39;t be</span>
</span><span class='line'>            <span class="c1">// bigger than us.</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Parent has imposed a maximum size on us</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants a specific size... so be it</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">childDimension</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to be our size, but our size is not fixed.</span>
</span><span class='line'>            <span class="c1">// Constrain child to not be bigger than us.</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to determine its own size. It can&#39;t be</span>
</span><span class='line'>            <span class="c1">// bigger than us.</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Parent asked to see how big we want to be</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">UNSPECIFIED</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants a specific size... let him have it</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">childDimension</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to be our size... find out how big it should</span>
</span><span class='line'>            <span class="c1">// be</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">sUseZeroUnspecifiedMeasureSpec</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">UNSPECIFIED</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to determine its own size.... find out how</span>
</span><span class='line'>            <span class="c1">// big it should be</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">sUseZeroUnspecifiedMeasureSpec</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">UNSPECIFIED</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">//noinspection ResourceType</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">makeMeasureSpec</span><span class="o">(</span><span class="n">resultSize</span><span class="o">,</span> <span class="n">resultMode</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到子View<code>MeasureSpec</code>是由3个因素共同决定的，父View的<code>MeasureSpec</code>，<code>padding</code>，<code>LayoutParams</code>中的值，其中父View的<code>MeasureSpec</code>是从<code>DecorView</code>一层层约束下来得到的，不难理解，那<code>LayoutParams</code>是从哪里来的呢？ 其实<code>LayoutParams</code>是在<code>LayoutInflater</code>解析xml布局的时候，父布局会根据xml中的<code>layout_width</code>和<code>layout_height</code>来给子View<code>generateLayoutParams</code>保存在子View中，所以，可以认为子View的<code>LayoutParams</code>实际上保存的是布局中的开发者对View的要求。</p>

<p>着重看下&#8220;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Ask all of the children of this view to measure themselves, taking into</span>
</span><span class='line'><span class="cm"> * account both the MeasureSpec requirements for this view and its padding.</span>
</span><span class='line'><span class="cm"> * We skip children that are in the GONE state The heavy lifting is done in</span>
</span><span class='line'><span class="cm"> * getChildMeasureSpec.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param widthMeasureSpec The width requirements for this view</span>
</span><span class='line'><span class="cm"> * @param heightMeasureSpec The height requirements for this view</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">measureChildren</span><span class="o">(</span><span class="kt">int</span> <span class="n">widthMeasureSpec</span><span class="o">,</span> <span class="kt">int</span> <span class="n">heightMeasureSpec</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">mChildrenCount</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">View</span><span class="o">[]</span> <span class="n">children</span> <span class="o">=</span> <span class="n">mChildren</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">View</span> <span class="n">child</span> <span class="o">=</span> <span class="n">children</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">((</span><span class="n">child</span><span class="o">.</span><span class="na">mViewFlags</span> <span class="o">&amp;</span> <span class="n">VISIBILITY_MASK</span><span class="o">)</span> <span class="o">!=</span> <span class="n">GONE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">measureChild</span><span class="o">(</span><span class="n">child</span><span class="o">,</span> <span class="n">widthMeasureSpec</span><span class="o">,</span> <span class="n">heightMeasureSpec</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Ask one of the children of this view to measure itself, taking into</span>
</span><span class='line'><span class="cm"> * account both the MeasureSpec requirements for this view and its padding.</span>
</span><span class='line'><span class="cm"> * The heavy lifting is done in getChildMeasureSpec.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param child The child to measure</span>
</span><span class='line'><span class="cm"> * @param parentWidthMeasureSpec The width requirements for this view</span>
</span><span class='line'><span class="cm"> * @param parentHeightMeasureSpec The height requirements for this view</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">measureChild</span><span class="o">(</span><span class="n">View</span> <span class="n">child</span><span class="o">,</span> <span class="kt">int</span> <span class="n">parentWidthMeasureSpec</span><span class="o">,</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">parentHeightMeasureSpec</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">LayoutParams</span> <span class="n">lp</span> <span class="o">=</span> <span class="n">child</span><span class="o">.</span><span class="na">getLayoutParams</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">childWidthMeasureSpec</span> <span class="o">=</span> <span class="n">getChildMeasureSpec</span><span class="o">(</span><span class="n">parentWidthMeasureSpec</span><span class="o">,</span>
</span><span class='line'>            <span class="n">mPaddingLeft</span> <span class="o">+</span> <span class="n">mPaddingRight</span><span class="o">,</span> <span class="n">lp</span><span class="o">.</span><span class="na">width</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">childHeightMeasureSpec</span> <span class="o">=</span> <span class="n">getChildMeasureSpec</span><span class="o">(</span><span class="n">parentHeightMeasureSpec</span><span class="o">,</span>
</span><span class='line'>            <span class="n">mPaddingTop</span> <span class="o">+</span> <span class="n">mPaddingBottom</span><span class="o">,</span> <span class="n">lp</span><span class="o">.</span><span class="na">height</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">child</span><span class="o">.</span><span class="na">measure</span><span class="o">(</span><span class="n">childWidthMeasureSpec</span><span class="o">,</span> <span class="n">childHeightMeasureSpec</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Does the hard part of measureChildren: figuring out the MeasureSpec to</span>
</span><span class='line'><span class="cm"> * pass to a particular child. This method figures out the right MeasureSpec</span>
</span><span class='line'><span class="cm"> * for one dimension (height or width) of one child view.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * The goal is to combine information from our MeasureSpec with the</span>
</span><span class='line'><span class="cm"> * LayoutParams of the child to get the best possible results. For example,</span>
</span><span class='line'><span class="cm"> * if the this view knows its size (because its MeasureSpec has a mode of</span>
</span><span class='line'><span class="cm"> * EXACTLY), and the child has indicated in its LayoutParams that it wants</span>
</span><span class='line'><span class="cm"> * to be the same size as the parent, the parent should ask the child to</span>
</span><span class='line'><span class="cm"> * layout given an exact size.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param spec The requirements for this view</span>
</span><span class='line'><span class="cm"> * @param padding The padding of this view for the current dimension and</span>
</span><span class='line'><span class="cm"> *        margins, if applicable</span>
</span><span class='line'><span class="cm"> * @param childDimension How big the child wants to be in the current</span>
</span><span class='line'><span class="cm"> *        dimension</span>
</span><span class='line'><span class="cm"> * @return a MeasureSpec integer for the child</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getChildMeasureSpec</span><span class="o">(</span><span class="kt">int</span> <span class="n">spec</span><span class="o">,</span> <span class="kt">int</span> <span class="n">padding</span><span class="o">,</span> <span class="kt">int</span> <span class="n">childDimension</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">specMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">getMode</span><span class="o">(</span><span class="n">spec</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">specSize</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">getSize</span><span class="o">(</span><span class="n">spec</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">specSize</span> <span class="o">-</span> <span class="n">padding</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">resultSize</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">resultMode</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">switch</span> <span class="o">(</span><span class="n">specMode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Parent has imposed an exact size on us</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">childDimension</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to be our size. So be it.</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to determine its own size. It can&#39;t be</span>
</span><span class='line'>            <span class="c1">// bigger than us.</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Parent has imposed a maximum size on us</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants a specific size... so be it</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">childDimension</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to be our size, but our size is not fixed.</span>
</span><span class='line'>            <span class="c1">// Constrain child to not be bigger than us.</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to determine its own size. It can&#39;t be</span>
</span><span class='line'>            <span class="c1">// bigger than us.</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Parent asked to see how big we want to be</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">UNSPECIFIED</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants a specific size... let him have it</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">childDimension</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to be our size... find out how big it should</span>
</span><span class='line'>            <span class="c1">// be</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">sUseZeroUnspecifiedMeasureSpec</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">UNSPECIFIED</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to determine its own size.... find out how</span>
</span><span class='line'>            <span class="c1">// big it should be</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">sUseZeroUnspecifiedMeasureSpec</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">UNSPECIFIED</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">//noinspection ResourceType</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">makeMeasureSpec</span><span class="o">(</span><span class="n">resultSize</span><span class="o">,</span> <span class="n">resultMode</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到子View<code>MeasureSpec</code>是由3个因素共同决定的，父View的<code>MeasureSpec</code>，<code>padding</code>，<code>LayoutParams</code>中的值，其中父View的<code>MeasureSpec</code>是从<code>DecorView</code>一层层约束下来得到的，不难理解，那<code>LayoutParams</code>是从哪里来的呢？   其实<code>LayoutParams</code>是在<code>LayoutInflater</code>解析xml布局的时候，父布局会根据xml中的<code>layout_width</code>和<code>layout_height</code>来给子View<code>generateLayoutParams</code>保存在子View中，所以，可以认为子View的<code>LayoutParams</code>实际上保存的是布局中的开发者对View的要求。</p>

<p>着重看下<code>getChildMeasureSpec</code>这个方法，这个方法对父View尺寸有无限制的情况下子View的大小应该如何进行了处理，注释的比较清楚，就不解释了。</p>

<h4>定制 Layout(ViewGroup) 的内部布局</h4>

<p>通过重写<code>onMeasure()</code>来计算内部布局，重写<code>onLayout</code>来摆放子View。</p>

<p>重写<code>onMeasure()</code>的三个步骤：</p>

<ul>
<li>调用每个子View的<code>measure</code>方法来计算子View的尺寸</li>
<li>计算子View的位置并保存子View的位置和尺寸</li>
<li>计算自己的尺寸并用<code>setMeasuredDimension()</code>保存</li>
</ul>


<p>计算子View尺寸的关键在于<code>measure()</code>方法的两个MeasureSpec参数的计算。子View的<code>MeasureSpec</code>的计算方式：</p>

<ul>
<li>结合开发者的要求（xml中的layout_打头的属性）和自己的可用空间（自己的尺寸上限-已用尺寸）</li>
<li>尺寸上限根据自己的<code>MeasureSpec</code>中的mode而定，<code>EXACTLY/AT_MOST</code>尺寸上限为<code>MeasureSpec</code>中的size，<code>UNSPECIFIED</code>尺寸无上限。</li>
</ul>


<p>重写<code>onLayout</code>的方式，在<code>onLayout</code>里调用每个子View的<code>layout()</code>。</p>

<h4>reference</h4>

<ul>
<li><a href="https://hencoder.com/tag/bu-ju/">自定义 View &ndash; 布局</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义View总结一]]></title>
    <link href="http://Solarex.github.io/blog/2019/01/12/summary-of-custom-views-part-i/"/>
    <updated>2019-01-12T00:33:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2019/01/12/summary-of-custom-views-part-i</id>
    <content type="html"><![CDATA[<h2>自定义View总结 &ndash; 绘制</h2>

<h3>绘制基础</h3>

<ul>
<li><code>Canvas.drawColor(@ColorInt int color)</code> 颜色填充</li>
<li><code>drawCircle(float centerX, float centerY, float radius, Paint paint)</code> 画圆</li>
<li><code>Paint.setColor(int color)</code>,<code>Paint.setStyle(Paint.Style style)</code>,<code>Paint.setStrokeWidth(float width)</code>,<code>Paint.setAntiAlias(boolean aa)</code></li>
<li><code>drawRect(float left, float top, float right, float bottom, Paint paint)</code> 画矩形</li>
<li><code>drawPoint(float x, float y, Paint paint)</code> 画点</li>
<li><code>drawPoints(float[] pts, int offset, int count, Paint paint) / drawPoints(float[] pts, Paint paint)</code> 画点（批量）</li>
<li><code>drawOval(float left, float top, float right, float bottom, Paint paint)</code>画椭圆</li>
<li><code>drawLine(float startX, float startY, float stopX, float stopY, Paint paint)</code> 画线</li>
<li><code>drawLines(float[] pts, int offset, int count, Paint paint) / drawLines(float[] pts, Paint paint)</code> 画线（批量）</li>
<li><code>drawRoundRect(float left, float top, float right, float bottom, float rx, float ry, Paint paint)</code> 画圆角矩形</li>
<li><code>drawArc(float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean useCenter, Paint paint)</code> 绘制弧形或扇形</li>
<li><code>drawPath(Path path, Paint paint)</code> 画自定义图形</li>
<li><code>drawBitmap(Bitmap bitmap, float left, float top, Paint paint)</code> 画 Bitmap</li>
<li><code>drawText(String text, float x, float y, Paint paint)</code>绘制文字</li>
</ul>


<!-- more -->


<h4>Path</h4>

<ul>
<li><code>addCircle(float x, float y, float radius, Direction dir)</code> 添加圆</li>
<li><code>addOval(float left, float top, float right, float bottom, Direction dir) / addOval(RectF oval, Direction dir)</code>添加椭圆</li>
<li><code>addRect(float left, float top, float right, float bottom, Direction dir) / addRect(RectF rect, Direction dir)</code>添加矩形</li>
<li><code>addRoundRect(RectF rect, float rx, float ry, Direction dir) / addRoundRect(float left, float top, float right, float bottom, float rx, float ry, Direction dir) / addRoundRect(RectF rect, float[] radii, Direction dir) / addRoundRect(float left, float top, float right, float bottom, float[] radii, Direction dir)</code>添加圆角矩形</li>
<li><code>addPath(Path path)</code> 添加另一个 Path</li>
<li><code>lineTo(float x, float y) / rLineTo(float x, float y)</code>画直线</li>
<li><code>quadTo(float x1, float y1, float x2, float y2) / rQuadTo(float dx1, float dy1, float dx2, float dy2)</code>画二次贝塞尔曲线</li>
<li><code>cubicTo(float x1, float y1, float x2, float y2, float x3, float y3) / rCubicTo(float x1, float y1, float x2, float y2, float x3, float y3)</code> 画三次贝塞尔曲线</li>
<li><code>moveTo(float x, float y) / rMoveTo(float x, float y)</code>移动到目标位置</li>
<li><code>arcTo(RectF oval, float startAngle, float sweepAngle, boolean forceMoveTo) / arcTo(float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean forceMoveTo) / arcTo(RectF oval, float startAngle, float sweepAngle)</code> 画弧形</li>
<li><code>addArc(float left, float top, float right, float bottom, float startAngle, float sweepAngle) / addArc(RectF oval, float startAngle, float sweepAngle)</code>,<code>addArc()</code> 只是一个直接使用了 <code>forceMoveTo = true</code> 的简化版 <code>arcTo()</code></li>
<li><code>close()</code>封闭当前子图形</li>
<li><code>Path.setFillType(Path.FillType ft)</code> 设置填充方式</li>
</ul>


<h3>Paint详解</h3>

<center><p><img src="http://Solarex.github.io/images/canvas-color.jpg" alt="Canvas绘制的内容，有三层对颜色的处理"></p></center>


<h4>颜色</h4>

<table>
<thead>
<tr>
<th></th>
<th align="center">     canvas 方法      </th>
<th> 像素颜色的设置方式 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center"> drawColor/RGB/ARGB() </td>
<td> 直接作为参数传入   |</td>
</tr>
<tr>
<td></td>
<td align="center"> drawBitmap() </td>
<td> 与<code>bitmap</code>参数的像素颜色相同 |</td>
</tr>
<tr>
<td></td>
<td align="center"> 图形和文字(drawCircle()/drawPath()/drawText()&hellip;) </td>
<td> 在<code>paint</code>参数中设置 |</td>
</tr>
</tbody>
</table>


<h5>直接设置颜色<code>Paint.setColor(int color)</code>,<code>Paint.setARGB(int a,int r,int g,int b)</code></h5>

<h5>setShader(Shader shader) 设置shader</h5>

<ul>
<li><p>shader着色器，它和直接设置颜色的区别是，着色器设置的是一个颜色方案，或者说是一套着色规则。</p></li>
<li><p>LinearGradient 线性渐变</p></li>
<li><p>RadialGradient 辐射渐变，辐射渐变很好理解，就是从中心向周围辐射状的渐变。</p></li>
<li><p>SweepGradient 扫描渐变</p></li>
<li><p>BitmapShader 用 Bitmap 来着色，其实也就是用 Bitmap 的像素来作为图形或文字的填充。</p></li>
<li><p>ComposeShader 混合着色器 所谓混合，就是把两个 Shader 一起使用。</p></li>
</ul>


<h5>setColorFilter(ColorFilter colorFilter)</h5>

<p>为绘制设置颜色过滤。颜色过滤的意思，就是为绘制的内容设置一个统一的过滤策略，然后 Canvas.drawXXX() 方法会对每个像素都进行过滤后再绘制出来。</p>

<ul>
<li><code>LightingColorFilter(int mul, int add)</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">R</span><span class="err">&#39;</span> <span class="o">=</span> <span class="n">R</span> <span class="o">*</span> <span class="n">mul</span><span class="o">.</span><span class="na">R</span> <span class="o">/</span> <span class="mh">0xff</span> <span class="o">+</span> <span class="n">add</span><span class="o">.</span><span class="na">R</span>
</span><span class='line'><span class="n">G</span><span class="err">&#39;</span> <span class="o">=</span> <span class="n">G</span> <span class="o">*</span> <span class="n">mul</span><span class="o">.</span><span class="na">G</span> <span class="o">/</span> <span class="mh">0xff</span> <span class="o">+</span> <span class="n">add</span><span class="o">.</span><span class="na">G</span>
</span><span class='line'><span class="n">B</span><span class="err">&#39;</span> <span class="o">=</span> <span class="n">B</span> <span class="o">*</span> <span class="n">mul</span><span class="o">.</span><span class="na">B</span> <span class="o">/</span> <span class="mh">0xff</span> <span class="o">+</span> <span class="n">add</span><span class="o">.</span><span class="na">B</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>PorterDuffColorFilter(int color, PorterDuff.Mode mode)</code></li>
<li><code>ColorMatrixColorFilter</code></li>
</ul>


<p><code>ColorMatrixColorFilter</code> 使用一个 <code>ColorMatrix</code> 来对颜色进行处理。 <code>ColorMatrix</code> 这个类，内部是一个 4x5 的矩阵：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span> <span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">c</span><span class="o">,</span> <span class="n">d</span><span class="o">,</span> <span class="n">e</span><span class="o">,</span>
</span><span class='line'>  <span class="n">f</span><span class="o">,</span> <span class="n">g</span><span class="o">,</span> <span class="n">h</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">,</span>
</span><span class='line'>  <span class="n">k</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">n</span><span class="o">,</span> <span class="n">o</span><span class="o">,</span>
</span><span class='line'>  <span class="n">p</span><span class="o">,</span> <span class="n">q</span><span class="o">,</span> <span class="n">r</span><span class="o">,</span> <span class="n">s</span><span class="o">,</span> <span class="n">t</span> <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">R</span><span class="err">’</span> <span class="o">=</span> <span class="n">a</span><span class="o">*</span><span class="n">R</span> <span class="o">+</span> <span class="n">b</span><span class="o">*</span><span class="n">G</span> <span class="o">+</span> <span class="n">c</span><span class="o">*</span><span class="n">B</span> <span class="o">+</span> <span class="n">d</span><span class="o">*</span><span class="n">A</span> <span class="o">+</span> <span class="n">e</span><span class="o">;</span>
</span><span class='line'><span class="n">G</span><span class="err">’</span> <span class="o">=</span> <span class="n">f</span><span class="o">*</span><span class="n">R</span> <span class="o">+</span> <span class="n">g</span><span class="o">*</span><span class="n">G</span> <span class="o">+</span> <span class="n">h</span><span class="o">*</span><span class="n">B</span> <span class="o">+</span> <span class="n">i</span><span class="o">*</span><span class="n">A</span> <span class="o">+</span> <span class="n">j</span><span class="o">;</span>
</span><span class='line'><span class="n">B</span><span class="err">’</span> <span class="o">=</span> <span class="n">k</span><span class="o">*</span><span class="n">R</span> <span class="o">+</span> <span class="n">l</span><span class="o">*</span><span class="n">G</span> <span class="o">+</span> <span class="n">m</span><span class="o">*</span><span class="n">B</span> <span class="o">+</span> <span class="n">n</span><span class="o">*</span><span class="n">A</span> <span class="o">+</span> <span class="n">o</span><span class="o">;</span>
</span><span class='line'><span class="n">A</span><span class="err">’</span> <span class="o">=</span> <span class="n">p</span><span class="o">*</span><span class="n">R</span> <span class="o">+</span> <span class="n">q</span><span class="o">*</span><span class="n">G</span> <span class="o">+</span> <span class="n">r</span><span class="o">*</span><span class="n">B</span> <span class="o">+</span> <span class="n">s</span><span class="o">*</span><span class="n">A</span> <span class="o">+</span> <span class="n">t</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/chengdazhi/StyleImageView">StyleImageView</a></p>

<h5>setXfermode(Xfermode xfermode)</h5>

<ul>
<li><p>使用离屏缓冲（Off-screen Buffer）</p></li>
<li><p>控制好透明区域</p></li>
</ul>


<h4>效果</h4>

<h5>setAntiAlias (boolean aa) 设置抗锯齿</h5>

<h5>setStyle(Paint.Style style)</h5>

<h5>线条形状</h5>

<ul>
<li><p><code>setStrokeWidth(float width)</code></p></li>
<li><p><code>setStrokeCap(Paint.Cap cap)</code></p></li>
<li><p><code>setStrokeJoin(Paint.Join join)</code></p></li>
<li><p><code>setStrokeMiter(float miter)</code></p></li>
</ul>


<h5>色彩优化</h5>

<ul>
<li><p><code>setDither(boolean dither)</code> 设置图像的抖动</p></li>
<li><p><code>setFilterBitmap(boolean filter)</code> 设置是否使用双线性过滤来绘制 Bitmap</p></li>
</ul>


<h5>setPathEffect(PathEffect effect)</h5>

<p>使用 <code>PathEffect</code> 来给图形的轮廓设置效果。对 Canvas 所有的图形绘制有效，也就是  <code>drawLine() drawCircle() drawPath()</code> 这些方法。</p>

<ul>
<li><p><code>CornerPathEffect</code> 把所有拐角变成圆角</p></li>
<li><p><code>DiscretePathEffect</code> 把线条进行随机的偏离，让轮廓变得乱七八糟。</p></li>
<li><p><code>DashPathEffect</code> 使用虚线来绘制线条</p></li>
<li><p><code>PathDashPathEffect</code> 这个方法比 DashPathEffect 多一个前缀 Path ，所以顾名思义，它是使用一个 Path 来绘制「虚线」。</p></li>
<li><p><code>SumPathEffect</code> 这是一个组合效果类的 PathEffect 。它的行为特别简单，就是分别按照两种 PathEffect 分别对目标进行绘制。</p></li>
<li><p><code>ComposePathEffect</code> 这也是一个组合效果类的 PathEffect 。不过它是先对目标 Path 使用一个 PathEffect，然后再对这个改变后的 Path 使用另一个 PathEffect。它的构造方法 <code>ComposePathEffect(PathEffect outerpe, PathEffect innerpe)</code> 中的两个  PathEffect 参数， innerpe 是先应用的， outerpe 是后应用的。</p></li>
</ul>


<h5>setShadowLayer(float radius, float dx, float dy, int shadowColor)</h5>

<p>在之后的绘制内容下面加一层阴影。如果要清除阴影层，使用 clearShadowLayer() 。</p>

<ul>
<li><p>在硬件加速开启的情况下， setShadowLayer() 只支持文字的绘制，文字之外的绘制必须关闭硬件加速才能正常绘制阴影。</p></li>
<li><p>如果 shadowColor 是半透明的，阴影的透明度就使用 shadowColor 自己的透明度；而如果 shadowColor 是不透明的，阴影的透明度就使用 paint 的透明度。</p></li>
</ul>


<h5>setMaskFilter(MaskFilter maskfilter)</h5>

<p>为之后的绘制设置 <code>MaskFilter</code>。上一个方法 <code>setShadowLayer()</code> 是设置的在绘制层下方的附加效果；而这个 <code>MaskFilter</code> 和它相反，设置的是在绘制层上方的附加效果。</p>

<ul>
<li><p><code>BlurMaskFilter</code> 模糊效果的 MaskFilter。<code>BlurMaskFilter(float radius, BlurMaskFilter.Blur style)</code> 中， radius 参数是模糊的范围， style 是模糊的类型。NORMAL: 内外都模糊绘制，SOLID: 内部正常绘制，外部模糊，INNER: 内部模糊，外部不绘制，OUTER: 内部不绘制，外部模糊。</p></li>
<li><p><code>EmbossMaskFilter</code> 浮雕效果的 MaskFilter。</p></li>
</ul>


<h5>获取绘制的 Path</h5>

<p>根据 paint 的设置，计算出绘制 Path 或文字时的实际 Path。所谓实际 Path ，指的就是 drawPath() 的绘制内容的轮廓，要算上线条宽度和设置的 PathEffect。</p>

<ul>
<li><p><code>getFillPath(Path src, Path dst)</code>，<code>getFillPath(src, dst)</code> 方法就能获取这个实际 Path。方法的参数里，src 是原 Path ，而 dst 就是实际 Path 的保存位置。 <code>getFillPath(src, dst)</code> 会计算出实际 Path，然后把结果保存在 dst 里。</p></li>
<li><p><code>getTextPath(String text, int start, int end, float x, float y, Path path) / getTextPath(char[] text, int index, int count, float x, float y, Path path)</code> 文字的绘制，虽然是使用 Canvas.drawText() 方法，但其实在下层，文字信息全是被转化成图形，对图形进行绘制的。  getTextPath() 方法，获取的就是目标文字所对应的 Path</p></li>
</ul>


<h4>Paint初始化类</h4>

<ul>
<li><p><code>reset()</code></p></li>
<li><p><code>set(Paint src)</code></p></li>
<li><p><code>setFlags(int flags)</code></p></li>
</ul>


<h3>文字的绘制</h3>

<h5>Canvas 绘制文字的方式</h5>

<ul>
<li><p><code>drawText(String text, float x, float y, Paint paint)</code></p></li>
<li><p><code>drawTextRun()</code></p></li>
<li><p><code>drawTextOnPath()</code></p></li>
<li><p><code>StaticLayout</code></p></li>
</ul>


<h5>Paint 对文字绘制的辅助</h5>

<ul>
<li><p><code>setTextSize(float textSize)</code></p></li>
<li><p><code>setTypeface(Typeface typeface)</code></p></li>
<li><p><code>setFakeBoldText(boolean fakeBoldText)</code> 伪粗体（ fake bold ），因为它并不是通过选用更高 weight 的字体让文字变粗，而是通过程序在运行时把文字给「描粗」了</p></li>
<li><p><code>setStrikeThruText(boolean strikeThruText)</code> 是否加删除线</p></li>
<li><p><code>setUnderlineText(boolean underlineText)</code> 是否加下划线</p></li>
<li><p><code>setTextSkewX(float skewX)</code> 设置文字横向错切角度。其实就是文字倾斜度的啦。</p></li>
<li><p><code>setTextScaleX(float scaleX)</code> 设置文字横向放缩。也就是文字变胖变瘦。</p></li>
<li><p><code>setLetterSpacing(float letterSpacing)</code> 设置字符间距。默认值是 0。</p></li>
<li><p><code>setFontFeatureSettings(String settings)</code></p></li>
<li><p><code>setTextAlign(Paint.Align align)</code> 设置文字的对齐方式。一共有三个值：LEFT CETNER 和 RIGHT。默认值为 LEFT。</p></li>
<li><p><code>setTextLocale(Locale locale) / setTextLocales(LocaleList locales)</code> 设置绘制所使用的 Locale。</p></li>
<li><p><code>setHinting(int mode)</code> 设置是否启用字体的 hinting （字体微调）。</p></li>
<li><p><code>setElegantTextHeight(boolean elegant)</code> 设置是否开启文字的 elegant height 。开启之后，文字的高度就变优雅了</p></li>
<li><p><code>setSubpixelText(boolean subpixelText)</code> 是否开启次像素级的抗锯齿（ sub-pixel anti-aliasing ）。</p></li>
<li><p><code>setLinearText(boolean linearText)</code></p></li>
<li><p><code>hasGlyph(String string)</code> 检查指定的字符串中是否是一个单独的字形 (glyph）。</p></li>
</ul>


<h5>测量文字尺寸类</h5>

<ul>
<li><p><code>float getFontSpacing()</code> 获取推荐的行距。</p></li>
<li><p><code>FontMetircs getFontMetrics()</code> 获取 Paint 的 FontMetrics。<code>FontMetrics</code> 是个相对专业的工具类，它提供了几个文字排印方面的数值：<code>ascent</code>,  <code>descent</code>, <code>top</code>, <code>bottom</code>, <code>leading</code>。<code>ascent</code> 和 <code>descent</code> 这两个值还可以通过 <code>Paint.ascent()</code> 和 <code>Paint.descent()</code> 来快捷获取。</p></li>
<li><p><code>getTextBounds(String text, int start, int end, Rect bounds)</code> 获取文字的显示范围。</p></li>
<li><p><code>float measureText(String text)</code> 测量文字的宽度并返回。</p></li>
</ul>


<p>如果你用代码分别使用 getTextBounds() 和 measureText() 来测量文字的宽度，你会发现  measureText() 测出来的宽度总是比 getTextBounds() 大一点点。这是因为这两个方法其实测量的是两个不一样的东西。getTextBounds: 它测量的是文字的显示范围（关键词：显示）。形象点来说，你这段文字外放置一个可变的矩形，然后把矩形尽可能地缩小，一直小到这个矩形恰好紧紧包裹住文字，那么这个矩形的范围，就是这段文字的 bounds。measureText(): 它测量的是文字绘制时所占用的宽度（关键词：占用）。前面已经讲过，一个文字在界面中，往往需要占用比他的实际显示宽度更多一点的宽度，以此来让文字和文字之间保留一些间距，不会显得过于拥挤。</p>

<ul>
<li><p><code>getTextWidths(String text, float[] widths)</code> 获取字符串中每个字符的宽度，并把结果填入参数 widths。</p></li>
<li><p><code>int breakText(String text, boolean measureForwards, float maxWidth, float[] measuredWidth)</code> 这个方法也是用来测量文字宽度的。但和 measureText() 的区别是， breakText() 是在给出宽度上限的前提下测量文字的宽度。如果文字的宽度超出了上限，那么在临近超限的位置截断文字。</p></li>
</ul>


<h5>光标相关</h5>

<ul>
<li><p><code>getRunAdvance(CharSequence text, int start, int end, int contextStart, int contextEnd, boolean isRtl, int offset)</code> 对于一段文字，计算出某个字符处光标的 x 坐标。</p></li>
<li><p><code>getOffsetForAdvance(CharSequence text, int start, int end, int contextStart, int contextEnd, boolean isRtl, float advance)</code> 给出一个位置的像素值，计算出文字中最接近这个位置的字符偏移量</p></li>
</ul>


<h3>Canvas 对绘制的辅助 clipXXX() 和 Matrix</h3>

<h5>范围裁切</h5>

<p>范围裁切有两个方法： <code>clipRect()</code> 和 <code>clipPath()</code>。裁切方法之后的绘制代码，都会被限制在裁切范围内。</p>

<ul>
<li><p><code>clipRect()</code></p></li>
<li><p><code>clipPath()</code></p></li>
</ul>


<h5>几何变换</h5>

<p>几何变换的使用大概分为三类：</p>

<ul>
<li>使用 Canvas 来做常见的二维变换；</li>
<li>使用 Matrix 来做常见和不常见的二维变换；</li>
<li>使用 Camera 来做三维变换。</li>
</ul>


<h6>使用 Canvas 来做常见的二维变换</h6>

<ul>
<li><p><code>Canvas.translate(float dx, float dy)</code> 平移</p></li>
<li><p><code>Canvas.rotate(float degrees, float px, float py)</code> 旋转</p></li>
<li><p><code>Canvas.scale(float sx, float sy, float px, float py)</code> 放缩</p></li>
<li><p><code>skew(float sx, float sy)</code> 错切</p></li>
</ul>


<h6>使用 Matrix 来做变换</h6>

<p>Matrix 做常见变换的方式：</p>

<ul>
<li>创建 Matrix 对象；</li>
<li>调用 Matrix 的 <code>pre/postTranslate/Rotate/Scale/Skew()</code> 方法来设置几何变换；</li>
<li>使用 <code>Canvas.setMatrix(matrix)</code> 或 <code>Canvas.concat(matrix)</code> 来把几何变换应用到 Canvas。</li>
</ul>


<p>把 Matrix 应用到 Canvas 有两个方法： <code>Canvas.setMatrix(matrix)</code> 和 <code>Canvas.concat(matrix)</code>。</p>

<ul>
<li><code>Canvas.setMatrix(matrix)</code>：用 Matrix 直接替换 Canvas 当前的变换矩阵，即抛弃 Canvas 当前的变换，改用 Matrix 的变换（注：根据下面评论里以及我在微信公众号中收到的反馈，不同的系统中 setMatrix(matrix) 的行为可能不一致，所以还是尽量用  concat(matrix) 吧）；</li>
<li><code>Canvas.concat(matrix)</code>：用 Canvas 当前的变换矩阵和 Matrix 相乘，即基于 Canvas 当前的变换，叠加上 Matrix 中的变换。</li>
</ul>


<p>使用 Matrix 来做自定义变换</p>

<ul>
<li><code>Matrix.setPolyToPoly(float[] src, int srcIndex, float[] dst, int dstIndex, int pointCount)</code> 用点对点映射的方式设置变换。poly 就是「多」的意思。setPolyToPoly() 的作用是通过多点的映射的方式来直接设置变换。「多点映射」的意思就是把指定的点移动到给出的位置，从而发生形变。例如：(0, 0) &ndash;> (100, 100) 表示把 (0, 0) 位置的像素移动到 (100, 100) 的位置，这个是单点的映射，单点映射可以实现平移。而多点的映射，就可以让绘制内容任意地扭曲。</li>
</ul>


<h6>使用 Camera 来做三维变换</h6>

<p>Camera 的三维变换有三类：旋转、平移、移动相机。</p>

<ul>
<li><p><code>Camera.rotate*()</code> 三维旋转 <code>Camera.rotate*()</code> 一共有四个方法： <code>rotateX(deg) rotateY(deg) rotateZ(deg) rotate(x, y, z)</code>。</p></li>
<li><p><code>Camera.translate(float x, float y, float z)</code> 移动</p></li>
<li><p><code>Camera.setLocation(x, y, z)</code> 设置虚拟相机的位置。在 Camera 中，相机的默认位置是 (0, 0, -8)（英寸）。8 x 72 = 576，所以它的默认位置是 (0, 0, -576)（像素）。</p></li>
</ul>


<h3>绘制顺序</h3>

<h5>super.onDraw() 前 or 后？</h5>

<h5><code>dispatchDraw()</code>：绘制子 View 的方法</h5>

<h5>绘制过程简述</h5>

<p>绘制过程中最典型的两个部分是上面讲到的主体和子 View，但它们并不是绘制过程的全部。除此之外，绘制过程还包含一些其他内容的绘制。具体来讲，一个完整的绘制过程会依次绘制以下几个内容：</p>

<ul>
<li>背景</li>
<li>主体（onDraw()）</li>
<li>子 View（dispatchDraw()）</li>
<li>滑动边缘渐变和滑动条</li>
<li>前景</li>
</ul>


<center><p><img src="http://Solarex.github.io/images/canvas-draw-process.jpg"/></p></center>


<h5>onDrawForeground()</h5>

<p>在 onDrawForeground() 中，会依次绘制滑动边缘渐变、滑动条和前景。</p>

<h5>draw() 总调度方法</h5>

<center><p><img src="http://Solarex.github.io/images/canvas-draw.jpg"/></p></center>


<p>关于绘制方法，有两点需要注意一下：</p>

<ul>
<li><p>出于效率的考虑，ViewGroup 默认会绕过 <code>draw()</code> 方法，换而直接执行  <code>dispatchDraw()</code>，以此来简化绘制流程。所以如果你自定义了某个 ViewGroup 的子类（比如 LinearLayout）并且需要在它的除 <code>dispatchDraw()</code> 以外的任何一个绘制方法内绘制内容，你可能会需要调用 <code>View.setWillNotDraw(false)</code> 这行代码来切换到完整的绘制流程（是「可能」而不是「必须」的原因是，有些 ViewGroup 是已经调用过  setWillNotDraw(false) 了的，例如 ScrollView）。</p></li>
<li><p>有的时候，一段绘制代码写在不同的绘制方法中效果是一样的，这时你可以选一个自己喜欢或者习惯的绘制方法来重写。但有一个例外：如果绘制代码既可以写在  <code>onDraw()</code> 里，也可以写在其他绘制方法里，那么优先写在 <code>onDraw()</code> ，因为 Android 有相关的优化，可以在不需要重绘的时候自动跳过 <code>onDraw()</code> 的重复执行，以提升开发效率。享受这种优化的只有 <code>onDraw()</code> 一个方法。</p></li>
</ul>


<h3>属性动画 Property Animation</h3>

<p> Android 里动画是有一些分类的：动画可以分为两类：Animation 和 Transition；其中 Animation 又可以再分为 View Animation 和 Property Animation 两类： View Animation 是纯粹基于 framework 的绘制转变，Property Animation，属性动画，这是在 Android 3.0 开始引入的新的动画形式。</p>

<p> ##### ViewPropertyAnimator</p>

<p> <center><p><img src="http://Solarex.github.io/images/view-animate.jpg"/></p></center></p>

<p> ##### ObjectAnimator</p>

<p>使用方式：</p>

<ul>
<li>如果是自定义控件，需要添加 setter / getter 方法；</li>
<li>用 ObjectAnimator.ofXXX() 创建 ObjectAnimator 对象；</li>
<li>用 start() 方法执行动画。</li>
</ul>


<h5>通用方法</h5>

<ul>
<li><p><code>setDuration(int duration)</code> 设置动画时长</p></li>
<li><p><code>setInterpolator(Interpolator interpolator)</code> 设置 Interpolator,<code>AccelerateDecelerateInterpolator</code>,<code>LinearInterpolator</code>,<code>AccelerateInterpolator</code>,<code>DecelerateInterpolator</code>,<code>AnticipateInterpolator</code>,<code>OvershootInterpolator</code>,<code>AnticipateOvershootInterpolator</code>,<code>BounceInterpolator</code>,<code>CycleInterpolator</code>,<code>PathInterpolator</code>,<code>FastOutLinearInInterpolator</code>,<code>FastOutSlowInInterpolator</code>,<code>LinearOutSlowInInterpolator</code></p></li>
</ul>


<h5>设置监听器</h5>

<p>设置监听器的方法， ViewPropertyAnimator 和 ObjectAnimator 略微不一样：  ViewPropertyAnimator 用的是 setListener() 和 setUpdateListener() 方法，可以设置一个监听器，要移除监听器时通过 set[Update]Listener(null) 填 null 值来移除；而  ObjectAnimator 则是用 addListener() 和 addUpdateListener() 来添加一个或多个监听器，移除监听器则是通过 remove[Update]Listener() 来指定移除对象。另外，由于 ObjectAnimator 支持使用 pause() 方法暂停，所以它还多了一个  addPauseListener() / removePauseListener() 的支持；而 ViewPropertyAnimator 则独有  withStartAction() 和 withEndAction() 方法，可以设置一次性的动画开始或结束的监听。</p>

<p>AnimatorListener 共有 4 个回调方法：</p>

<ul>
<li><p><code>onAnimationStart(Animator animation)</code></p></li>
<li><p><code>onAnimationEnd(Animator animation)</code></p></li>
<li><p><code>onAnimationCancel(Animator animation)</code></p></li>
<li><p><code>onAnimationRepeat(Animator animation)</code></p></li>
</ul>


<p><code>AnimatorUpdateListener</code>它只有一个回调方法：<code>onAnimationUpdate(ValueAnimator animation)</code></p>

<p><code>ViewPropertyAnimator.withStartAction/EndAction()</code>，<code>withStartAction() / withEndAction()</code> 是一次性的，在动画执行结束后就自动弃掉了，就算之后再重用 <code>ViewPropertyAnimator</code> 来做别的动画，用它们设置的回调也不会再被调用。而 <code>set/addListener()</code> 所设置的 <code>AnimatorListener</code> 是持续有效的，当动画重复执行时，回调总会被调用。<code>withEndAction()</code> 设置的回调只有在动画正常结束时才会被调用，而在动画被取消时不会被执行。这点和 <code>AnimatorListener.onAnimationEnd()</code> 的行为是不一致的。</p>

<h5>TypeEvaluator</h5>

<ul>
<li><p><code>ArgbEvaluator</code></p></li>
<li><p>自定义 Evaluator</p></li>
</ul>


<p>借助于 TypeEvaluator，属性动画就可以通过 ofObject() 来对不限定类型的属性做动画了。方式很简单：</p>

<ul>
<li><p>为目标属性写一个自定义的 TypeEvaluator</p></li>
<li><p>使用 ofObject() 来创建 Animator，并把自定义的 TypeEvaluator 作为参数填入</p></li>
</ul>


<h5>PropertyValuesHolder 同一个动画中改变多个属性</h5>

<h5>AnimatorSet 多个动画配合执行</h5>

<h5>PropertyValuesHolders.ofKeyframe() 把同一个属性拆分</h5>

<h3>硬件加速</h3>

<ul>
<li><p><a href="https://developer.android.google.cn/guide/topics/graphics/hardware-accel.html">Hardware Acceleration | Android Developers</a></p></li>
<li><p><a href="https://www.youtube.com/watch?v=v9S5EO7CLjo">Google I/O 2011: Accelerated Android Rendering</a></p></li>
</ul>


<p>所谓硬件加速，指的是把某些计算工作交给专门的硬件来做，而不是和普通的计算工作一样交给 CPU 来处理。这样不仅减轻了 CPU 的压力，而且由于有了「专人」的处理，这份计算工作的速度也被加快了。这就是「硬件加速」。</p>

<p>而对于 Android 来说，硬件加速有它专属的意思：在 Android 里，硬件加速专指把 View 中绘制的计算工作交给 GPU 来处理。进一步地再明确一下，这个「绘制的计算工作」指的就是把绘制方法中的那些 Canvas.drawXXX() 变成实际的像素这件事。</p>

<p>在硬件加速关闭的时候，Canvas 绘制的工作方式是：把要绘制的内容写进一个  Bitmap，然后在之后的渲染过程中，这个 Bitmap 的像素内容被直接用于渲染到屏幕。这种绘制方式的主要计算工作在于把绘制操作转换为像素的过程（例如由一句  Canvas.drawCircle() 来获得一个具体的圆的像素信息），这个过程的计算是由 CPU 来完成的。而在硬件加速开启时，Canvas 的工作方式改变了：它只是把绘制的内容转换为 GPU 的操作保存了下来，然后就把它交给 GPU，最终由 GPU 来完成实际的显示工作。</p>

<p>硬件加速不只是好处，也有它的限制：受到 GPU 绘制方式的限制，Canvas 的有些方法在硬件加速开启式会失效或无法正常工作。比如，在硬件加速开启时， clipPath() 在 API 18 及以上的系统中才有效。具体的 API 限制和 API 版本的关系如下图：</p>

<center><p><img src="http://Solarex.github.io/images/hardware-acceleration.jpg"></p></center>


<h5>View Layer</h5>

<p>setLayerType() 这个方法，它的作用其实就是名字里的意思：设置 View Layer 的类型。所谓 View Layer，又称为离屏缓冲（Off-screen Buffer），它的作用是单独启用一块地方来绘制这个 View ，而不是使用软件绘制的 Bitmap 或者通过硬件加速的 GPU。这块「地方」可能是一块单独的 Bitmap，也可能是一块 OpenGL 的纹理（texture，OpenGL 的纹理可以简单理解为图像的意思），具体取决于硬件加速是否开启。采用什么来绘制 View 不是关键，关键在于当设置了 View Layer 的时候，它的绘制会被缓存下来，而且缓存的是最终的绘制结果，而不是像硬件加速那样只是把 GPU 的操作保存下来再交给 GPU 去计算。通过这样更进一步的缓存方式，View 的重绘效率进一步提高了：只要绘制的内容没有变，那么不论是 CPU 绘制还是 GPU 绘制，它们都不用重新计算，而只要只用之前缓存的绘制结果就可以了。</p>

<p>基于这样的原理，在进行移动、旋转等（无需调用 invalidate()）的属性动画的时候开启 Hardware Layer 将会极大地提升动画的效率，因为在动画过程中 View 本身并没有发生改变，只是它的位置或角度改变了，而这种改变是可以由 GPU 通过简单计算就完成的，并不需要重绘整个 View。所以在这种动画的过程中开启 Hardware Layer，可以让本来就依靠硬件加速而变流畅了的动画变得更加流畅。</p>

<p>不过一定要注意，只有你在对 translationX translationY rotation alpha 等无需调用  invalidate() 的属性做动画的时候，这种方法才适用，因为这种方法本身利用的就是当界面不发生时，缓存未更新所带来的时间的节省。所以简单地说——这种方式不适用于基于自定义属性绘制的动画。</p>

<p>另外，由于设置了 View Layer 后，View 在初次绘制时以及每次 invalidate() 后重绘时，需要进行两次的绘制工作（一次绘制到 Layer，一次从 Layer 绘制到显示屏），所以其实它的每次绘制的效率是被降低了的。所以一定要慎重使用 View Layer，在需要用到它的时候再去使用。</p>

<h3>reference</h3>

<ul>
<li><a href="https://github.com/xinghongfei/awesome-view">awesome-view</a></li>
<li><a href="https://github.com/GcsSloop/AndroidNote/tree/master/CustomView">GcsSloop CustomView</a></li>
<li><a href="https://blog.csdn.net/aigestudio/column/info/androidcustomview">Android自定义控件其实很简单</a></li>
<li><a href="https://hencoder.com/tag/hui-zhi/">自定义View-绘制</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[碎碎念]]></title>
    <link href="http://Solarex.github.io/blog/2018/09/12/a-few-lately-thoughts/"/>
    <updated>2018-09-12T21:51:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2018/09/12/a-few-lately-thoughts</id>
    <content type="html"><![CDATA[<p>最近项目不太忙，解bug的间隙把百合仙子最近几年的博客翻看了一下，想起很多往事，权且把应该放到饭否的一些碎碎念放到这里吧。</p>

<ul>
<li><p>仙子现在还在坚持使用InoReader，自从Google Reader关闭之后，我也尝试过几种替代工具，feedly，inoreader，QQ邮箱的阅读空间，把从Google Reader导出的OPML导入了进去，我登录了InoReader和feedly账号看了下，大部分博客都已经停更了，一片红，QQ邮箱阅读空间里面也一片狼藉，也懒得删，反正现在已经不用了。之前上大学的时候不像现在专一一个方向，订阅了好多博客，现在有了好多垂直的网站或者App来获取专一方向的信息，比如开发者头条，Gank.io，AndroidWeekly等。QQ邮箱的阅读空间被张小龙搬到微信弄成了公众号，不知不觉间订阅了好多公众号，直到上周微信弹出公众号订阅已达上限才发现原来自己订阅了这么多，可自从订阅号改版后打开更少了，有些公众号直接快捷方式放到了Launcher上，可也很少打开查看，sigh。</p>

<p><!-- more --></p></li>
<li><p>订阅号订阅了很多，可很少打开看，现在每天除了上班的时候在地铁上看会书或者听一下视频课程，感觉很少有提升自己的动作了，这样很不好，2018年已经过去了一大半，然而年前给自己定的计划还有很大一部分没有完成，还有许多是只有输入没有输出，有些知识只是看一遍学习一遍就过去了，没有把原理吃透，写成blog输出出来，现在要抓紧时间赶了。已经入秋了，天气慢慢转凉了，晚上不开空调都可以睡觉了，正好心不那么浮躁，适合整理总结提升。</p></li>
<li><p>在饭否上看到一位大学同学在腾讯已经升到T3了，sigh，回顾自己过去几年，走了好多弯路，现在要慢慢补上了。看到这位同学使用的饭否客户端是Twidere，开源的，于是想看下饭否API授权相关的源码，下载源码下来导入到Android Studio提示没有google-services.json文件，去Google Cloud Platform上下载生成的json文件时发现要自己创建工程，然而我的Google Cloud Platform上已经有好几个大学时候创建的僵尸project了，全部清理了一下，等到周末研究下google-services.json怎么从Google Cloud Platform上生成下载。</p></li>
<li><p>Google Cloud Platform上的project应该还是在上大学的时候建的，那时候还叫Google App Engine，就用App Engine的python sdk deploy了几个project到appspot上，google 收费政策改变之后，之前的都访问不了了，看v2ex都从app engine撤了，也就没管，一直保留到现在，没啥用，全删了。</p></li>
<li><p>Mac上的ShadowsocksX-NG客户端好像不太稳定，看log总是显示TCP Connection Timeout，还是换回了shadowsocks-libev的ss-local命令行和polipo配合。用Proxifier代理了Reeder，Telegram，Slack，Lepton，OhMyStar2。Lepton是管理gist的，OhMyStar2是管理github star repo的，github总算被管理起来了。Telegram上加了几个bot，感觉挺有意思的，第一次接触bot应该是在Gtalk群组里面仙子写的Lisa，可Gtalk也没了，群组里的小伙伴也都不见了。什么时候自己也写个Telegram bot，感觉应该不难，主要是没时间，今年是肯定不行了，等明年吧，拿Python练练手。</p></li>
<li><p>之前也看了python官方doc照着写了几个demo，现在服务器上还在跑着readfree的自动签到脚本，可总感觉没入python的门，归根结底还是写的少，现在机器学习很火，底层用的语言就是Python，感觉要好好补一下Python了，可又总没时间，不知道把这块安排到什么时间。</p></li>
<li><p>现在看一个语言的学习，抛开C语言的基础，循环啊什么基础的其实最主要的就是语言的基础类库的使用了，先做几个练手的项目把基础类库用起来再说，慢慢就熟练了，至于语法糖底层的原理，语言底层的机制，可以留到以后慢慢看。Java语言用了那么久，也是现在才开始看深入理解JVM，把深入理解JVM看完了，就要看Kotlin实战了，准备把Kotlin用起来。</p></li>
<li><p>Android学习方面的roadmap有了，可进展不是太如意，要抓紧一些时间了。</p></li>
<li><p>弟弟开学回学校了，第三年是实习，跟着学校去了外地实习。想想弟弟深圳的日子，每天下班到家就有热汤饭吃，而且是家乡的饭菜，想吃什么发个菜谱链接给弟弟就行了，真幸福啊。希望明年弟弟实习完了回校拿到毕业证之后能在深圳找到合适的工作，这样我和妈跟弟弟就又可以在一起了。十一本来妈准备回老家一趟的，可黄牛没抢到返程的票，跟妈商量了一下，不回去了，等到过年的时候一起回去。辛苦老爸一个人在家收玉米了，老家天气也不太好，跟爸商量好几次不种地的事了，可爸不同意，今年就剩爸一个人在家忙活，辛苦他了。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EffectiveJava2nd读书笔记]]></title>
    <link href="http://Solarex.github.io/blog/2018/07/12/notes-on-effective-java/"/>
    <updated>2018-07-12T14:30:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2018/07/12/notes-on-effective-java</id>
    <content type="html"><![CDATA[<p>已迁移到gitbook，请访问<a href="https://solarex.github.io/reading-notes/effective-java/readme.html">EffectiveJava笔记</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入理解Java虚拟机读书笔记]]></title>
    <link href="http://Solarex.github.io/blog/2018/07/11/notes-on-jvm/"/>
    <updated>2018-07-11T14:28:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2018/07/11/notes-on-jvm</id>
    <content type="html"><![CDATA[<p>已迁移到gitbook，请访问<a href="https://solarex.github.io/reading-notes/deep-into-jvm/readme.html">深入理解Java虚拟机笔记</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java泛型语法糖]]></title>
    <link href="http://Solarex.github.io/blog/2018/07/10/java-generics-syntactic-sugar/"/>
    <updated>2018-07-10T14:24:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2018/07/10/java-generics-syntactic-sugar</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java枚举语法糖]]></title>
    <link href="http://Solarex.github.io/blog/2018/07/10/java-enum-syntactic-sugar/"/>
    <updated>2018-07-10T14:24:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2018/07/10/java-enum-syntactic-sugar</id>
    <content type="html"><![CDATA[<p>Java从1.5引入枚举类型，EffectiveJava第2版item 30也建议我们使用枚举来代替int常量。我们从下面的<code>Enum</code>示例中看下枚举类型到底是什么。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">enum</span> <span class="n">ExceptionHandleStrategy</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">IGNORE</span><span class="o">,</span>
</span><span class='line'>        <span class="n">LOG</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getLocalizedMessage</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">},</span>
</span><span class='line'>        <span class="n">THROW</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ExceptionHandleStrategy</span><span class="o">.</span><span class="na">IGNORE</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ExceptionHandleStrategy</span><span class="o">.</span><span class="na">LOG</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ExceptionHandleStrategy</span><span class="o">.</span><span class="na">THROW</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">EnumWithoutMethod</span><span class="o">.</span><span class="na">A</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">EnumWithoutMethod</span><span class="o">.</span><span class="na">B</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">EnumWithoutMethod</span><span class="o">.</span><span class="na">C</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">EnumWithVariable</span><span class="o">.</span><span class="na">A</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">EnumWithVariable</span><span class="o">.</span><span class="na">B</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">EnumWithVariable</span><span class="o">.</span><span class="na">C</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">EnumWithVariable</span><span class="o">.</span><span class="na">A</span><span class="o">.</span><span class="na">name</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">EnumWithVariable</span><span class="o">.</span><span class="na">A</span><span class="o">.</span><span class="na">getxxx</span><span class="o">());</span>
</span><span class='line'>        <span class="n">ExceptionHandleStrategy</span><span class="o">.</span><span class="na">LOG</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span><span class="s">&quot;system just broken&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">enum</span> <span class="n">EnumWithoutMethod</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">A</span><span class="o">,</span>
</span><span class='line'>        <span class="n">B</span><span class="o">,</span>
</span><span class='line'>        <span class="n">C</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">enum</span> <span class="n">EnumWithVariable</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">A</span><span class="o">(</span><span class="s">&quot;wristband&quot;</span><span class="o">),</span>
</span><span class='line'>        <span class="n">B</span><span class="o">(</span><span class="s">&quot;glucometer&quot;</span><span class="o">),</span>
</span><span class='line'>        <span class="n">C</span><span class="o">(</span><span class="s">&quot;fit&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">getxxx</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">EnumWithVariable</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">){</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>执行<code>java -jar ~/Software/confs/cfr-0.140.jar --sugarenums false Main.class</code>后我们得到如下结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.PrintStream</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">arrstring</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(((</span><span class="n">Object</span><span class="o">)((</span><span class="n">Object</span><span class="o">)</span><span class="n">ExceptionHandleStrategy</span><span class="o">.</span><span class="na">IGNORE</span><span class="o">)).</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(((</span><span class="n">Object</span><span class="o">)((</span><span class="n">Object</span><span class="o">)</span><span class="n">ExceptionHandleStrategy</span><span class="o">.</span><span class="na">LOG</span><span class="o">)).</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(((</span><span class="n">Object</span><span class="o">)((</span><span class="n">Object</span><span class="o">)</span><span class="n">ExceptionHandleStrategy</span><span class="o">.</span><span class="na">THROW</span><span class="o">)).</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(((</span><span class="n">Object</span><span class="o">)((</span><span class="n">Object</span><span class="o">)</span><span class="n">EnumWithoutMethod</span><span class="o">.</span><span class="na">A</span><span class="o">)).</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(((</span><span class="n">Object</span><span class="o">)((</span><span class="n">Object</span><span class="o">)</span><span class="n">EnumWithoutMethod</span><span class="o">.</span><span class="na">B</span><span class="o">)).</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(((</span><span class="n">Object</span><span class="o">)((</span><span class="n">Object</span><span class="o">)</span><span class="n">EnumWithoutMethod</span><span class="o">.</span><span class="na">C</span><span class="o">)).</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(((</span><span class="n">Object</span><span class="o">)((</span><span class="n">Object</span><span class="o">)</span><span class="n">EnumWithVariable</span><span class="o">.</span><span class="na">A</span><span class="o">)).</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(((</span><span class="n">Object</span><span class="o">)((</span><span class="n">Object</span><span class="o">)</span><span class="n">EnumWithVariable</span><span class="o">.</span><span class="na">B</span><span class="o">)).</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(((</span><span class="n">Object</span><span class="o">)((</span><span class="n">Object</span><span class="o">)</span><span class="n">EnumWithVariable</span><span class="o">.</span><span class="na">C</span><span class="o">)).</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">EnumWithVariable</span><span class="o">.</span><span class="na">A</span><span class="o">.</span><span class="na">name</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">EnumWithVariable</span><span class="o">.</span><span class="na">A</span><span class="o">.</span><span class="na">getxxx</span><span class="o">());</span>
</span><span class='line'>        <span class="n">ExceptionHandleStrategy</span><span class="o">.</span><span class="na">LOG</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span><span class="s">&quot;system just broken&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">EnumWithVariable</span>
</span><span class='line'>    <span class="kd">extends</span> <span class="n">Enum</span><span class="o">&lt;</span><span class="n">EnumWithVariable</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="cm">/* enum */</span> <span class="n">EnumWithVariable</span> <span class="n">A</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EnumWithVariable</span><span class="o">(</span><span class="s">&quot;A&quot;</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="s">&quot;wristband&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="cm">/* enum */</span> <span class="n">EnumWithVariable</span> <span class="n">B</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EnumWithVariable</span><span class="o">(</span><span class="s">&quot;B&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="s">&quot;glucometer&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="cm">/* enum */</span> <span class="n">EnumWithVariable</span> <span class="n">C</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EnumWithVariable</span><span class="o">(</span><span class="s">&quot;C&quot;</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="s">&quot;fit&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="cm">/* synthetic */</span> <span class="n">EnumWithVariable</span><span class="o">[]</span> <span class="n">$VALUES</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="n">EnumWithVariable</span><span class="o">[]</span> <span class="nf">values</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">(</span><span class="n">EnumWithVariable</span><span class="o">[])</span><span class="n">$VALUES</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="n">EnumWithVariable</span> <span class="nf">valueOf</span><span class="o">(</span><span class="n">String</span> <span class="n">string</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Enum</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">EnumWithVariable</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">string</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">getxxx</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="nf">EnumWithVariable</span><span class="o">(</span><span class="n">String</span> <span class="n">string</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="n">String</span> <span class="n">string2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">(</span><span class="n">string</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">string2</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">$VALUES</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EnumWithVariable</span><span class="o">[]{</span><span class="n">A</span><span class="o">,</span> <span class="n">B</span><span class="o">,</span> <span class="n">C</span><span class="o">};</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">EnumWithoutMethod</span>
</span><span class='line'>    <span class="kd">extends</span> <span class="n">Enum</span><span class="o">&lt;</span><span class="n">EnumWithoutMethod</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="cm">/* enum */</span> <span class="n">EnumWithoutMethod</span> <span class="n">A</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EnumWithoutMethod</span><span class="o">(</span><span class="s">&quot;A&quot;</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="cm">/* enum */</span> <span class="n">EnumWithoutMethod</span> <span class="n">B</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EnumWithoutMethod</span><span class="o">(</span><span class="s">&quot;B&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="cm">/* enum */</span> <span class="n">EnumWithoutMethod</span> <span class="n">C</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EnumWithoutMethod</span><span class="o">(</span><span class="s">&quot;C&quot;</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="cm">/* synthetic */</span> <span class="n">EnumWithoutMethod</span><span class="o">[]</span> <span class="n">$VALUES</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="n">EnumWithoutMethod</span><span class="o">[]</span> <span class="nf">values</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">(</span><span class="n">EnumWithoutMethod</span><span class="o">[])</span><span class="n">$VALUES</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="n">EnumWithoutMethod</span> <span class="nf">valueOf</span><span class="o">(</span><span class="n">String</span> <span class="n">string</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Enum</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">EnumWithoutMethod</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">string</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="nf">EnumWithoutMethod</span><span class="o">(</span><span class="n">String</span> <span class="n">string</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">(</span><span class="n">string</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">$VALUES</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EnumWithoutMethod</span><span class="o">[]{</span><span class="n">A</span><span class="o">,</span> <span class="n">B</span><span class="o">,</span> <span class="n">C</span><span class="o">};</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ExceptionHandleStrategy</span>
</span><span class='line'>    <span class="kd">extends</span> <span class="n">Enum</span><span class="o">&lt;</span><span class="n">ExceptionHandleStrategy</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="cm">/* enum */</span> <span class="n">ExceptionHandleStrategy</span> <span class="n">IGNORE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ExceptionHandleStrategy</span><span class="o">(</span><span class="s">&quot;IGNORE&quot;</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="cm">/* enum */</span> <span class="n">ExceptionHandleStrategy</span> <span class="n">LOG</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ExceptionHandleStrategy</span><span class="o">(</span><span class="s">&quot;LOG&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">){</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">exception</span><span class="o">.</span><span class="na">getLocalizedMessage</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="cm">/* enum */</span> <span class="n">ExceptionHandleStrategy</span> <span class="n">THROW</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ExceptionHandleStrategy</span><span class="o">(</span><span class="s">&quot;THROW&quot;</span><span class="o">,</span> <span class="mi">2</span><span class="o">){</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">exception</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="cm">/* synthetic */</span> <span class="n">ExceptionHandleStrategy</span><span class="o">[]</span> <span class="n">$VALUES</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="n">ExceptionHandleStrategy</span><span class="o">[]</span> <span class="nf">values</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">(</span><span class="n">ExceptionHandleStrategy</span><span class="o">[])</span><span class="n">$VALUES</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="n">ExceptionHandleStrategy</span> <span class="nf">valueOf</span><span class="o">(</span><span class="n">String</span> <span class="n">string</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Enum</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">ExceptionHandleStrategy</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">string</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="nf">ExceptionHandleStrategy</span><span class="o">(</span><span class="n">String</span> <span class="n">string</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">(</span><span class="n">string</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">$VALUES</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ExceptionHandleStrategy</span><span class="o">[]{</span><span class="n">IGNORE</span><span class="o">,</span> <span class="n">LOG</span><span class="o">,</span> <span class="n">THROW</span><span class="o">};</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到我们的枚举类型都继承了<code>Enum</code>，编译器为我们生成了<code>$VALUES</code>类型数组，并在<code>static</code>静态块中进行了初始化。每个枚举类型实际上是个继承了<code>Enum</code>的类，并在类初始化的时候实例化了枚举类型的实例，可以看到非常重量级，实际上在Android开发中Google已经建议不要使用<code>Enum</code>，改而使用<code>@IntDef</code>之类的注解进行约束。</p>

<p>在看EffectiveJava的时候，看到作者认为Enum是实现单例的一种方式，<code>Enum</code>实现的单例帮我们处理了反射和序列化相关的问题，那它是怎么处理的呢？我们不妨看下源码来找下答案。</p>

<p>首先看下<code>Enum</code>类的<code>readObject</code>方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">  * prevent default deserialization</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">readObject</span><span class="o">(</span><span class="n">ObjectInputStream</span> <span class="n">in</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span>
</span><span class='line'>    <span class="n">ClassNotFoundException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">InvalidObjectException</span><span class="o">(</span><span class="s">&quot;can&#39;t deserialize enum&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到这个方法直接抛出了一个异常来阻止反序列化。</p>

<p>再来看下如果我们想要使用反射来实例化一个枚举实例的时候会遇到什么问题，我们看下<code>Constructor</code>类的<code>newInstance</code>方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">T</span> <span class="nf">newInstance</span><span class="o">(</span><span class="n">Object</span> <span class="o">...</span> <span class="n">initargs</span><span class="o">)</span>
</span><span class='line'>        <span class="kd">throws</span> <span class="n">InstantiationException</span><span class="o">,</span> <span class="n">IllegalAccessException</span><span class="o">,</span>
</span><span class='line'>               <span class="n">IllegalArgumentException</span><span class="o">,</span> <span class="n">InvocationTargetException</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">override</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">Reflection</span><span class="o">.</span><span class="na">quickCheckMemberAccess</span><span class="o">(</span><span class="n">clazz</span><span class="o">,</span> <span class="n">modifiers</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">caller</span> <span class="o">=</span> <span class="n">Reflection</span><span class="o">.</span><span class="na">getCallerClass</span><span class="o">();</span>
</span><span class='line'>                <span class="n">checkAccess</span><span class="o">(</span><span class="n">caller</span><span class="o">,</span> <span class="n">clazz</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">modifiers</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">// 阻止了通过反射来实例化Enum实例</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">((</span><span class="n">clazz</span><span class="o">.</span><span class="na">getModifiers</span><span class="o">()</span> <span class="o">&amp;</span> <span class="n">Modifier</span><span class="o">.</span><span class="na">ENUM</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;Cannot reflectively create enum objects&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">ConstructorAccessor</span> <span class="n">ca</span> <span class="o">=</span> <span class="n">constructorAccessor</span><span class="o">;</span>   <span class="c1">// read volatile</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">ca</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">ca</span> <span class="o">=</span> <span class="n">acquireConstructorAccessor</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;unchecked&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">T</span> <span class="n">inst</span> <span class="o">=</span> <span class="o">(</span><span class="n">T</span><span class="o">)</span> <span class="n">ca</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">initargs</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">inst</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到在方法内如果发现要反射类的Modifier中有<code>Enum</code>标志，会直接抛出异常表示无法通过反射的方式来创建<code>Enum</code>实例。</p>

<h3>reference</h3>

<ul>
<li><a href="https://www.benf.org/other/cfr/how-are-enums-implemented.html">How are Enums implemented?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HashMap源码分析]]></title>
    <link href="http://Solarex.github.io/blog/2018/07/02/analysis-of-hashmap/"/>
    <updated>2018-07-02T19:31:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2018/07/02/analysis-of-hashmap</id>
    <content type="html"><![CDATA[<p><code>HashMap</code>是存储key-value的集合，底层采用<code>Node&lt;K,V&gt;[] table</code>实现，初始大小为2<sup>4</sup>即16。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">V</span> <span class="nf">put</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">table</span> <span class="o">==</span> <span class="n">EMPTY_TABLE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">inflateTable</span><span class="o">(</span><span class="n">threshold</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">putForNullKey</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">hash</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">indexFor</span><span class="o">(</span><span class="n">hash</span><span class="o">,</span> <span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">table</span><span class="o">[</span><span class="n">i</span><span class="o">];</span> <span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">next</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Object</span> <span class="n">k</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">hash</span> <span class="o">==</span> <span class="n">hash</span> <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="n">k</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">key</span><span class="o">)</span> <span class="o">==</span> <span class="n">key</span> <span class="o">||</span> <span class="n">key</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">k</span><span class="o">)))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">V</span> <span class="n">oldValue</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">recordAccess</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">oldValue</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">modCount</span><span class="o">++;</span>
</span><span class='line'>        <span class="n">addEntry</span><span class="o">(</span><span class="n">hash</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>put</code>操作首先根据<code>key</code>的hash值来找到要插入的<code>index</code>，如果存在相同<code>key</code>的元素则替换，否则插入。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="kt">int</span> <span class="nf">hash</span><span class="o">(</span><span class="n">Object</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="n">hashSeed</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="mi">0</span> <span class="o">!=</span> <span class="n">h</span> <span class="o">&amp;&amp;</span> <span class="n">k</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">sun</span><span class="o">.</span><span class="na">misc</span><span class="o">.</span><span class="na">Hashing</span><span class="o">.</span><span class="na">stringHash32</span><span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">k</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">h</span> <span class="o">^=</span> <span class="n">k</span><span class="o">.</span><span class="na">hashCode</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// This function ensures that hashCodes that differ only by</span>
</span><span class='line'>        <span class="c1">// constant multiples at each bit position have a bounded</span>
</span><span class='line'>        <span class="c1">// number of collisions (approximately 8 at default load factor).</span>
</span><span class='line'>        <span class="n">h</span> <span class="o">^=</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">20</span><span class="o">)</span> <span class="o">^</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">12</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">h</span> <span class="o">^</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">7</span><span class="o">)</span> <span class="o">^</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">4</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>hash</code>方法采用的是<code>sun.misc.Hashing</code>中的方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">addEntry</span><span class="o">(</span><span class="kt">int</span> <span class="n">hash</span><span class="o">,</span> <span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">bucketIndex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">((</span><span class="n">size</span> <span class="o">&gt;=</span> <span class="n">threshold</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">table</span><span class="o">[</span><span class="n">bucketIndex</span><span class="o">]))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">resize</span><span class="o">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>            <span class="n">hash</span> <span class="o">=</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">key</span><span class="o">)</span> <span class="o">?</span> <span class="n">hash</span><span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>            <span class="n">bucketIndex</span> <span class="o">=</span> <span class="n">indexFor</span><span class="o">(</span><span class="n">hash</span><span class="o">,</span> <span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">createEntry</span><span class="o">(</span><span class="n">hash</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">bucketIndex</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">resize</span><span class="o">(</span><span class="kt">int</span> <span class="n">newCapacity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Entry</span><span class="o">[]</span> <span class="n">oldTable</span> <span class="o">=</span> <span class="n">table</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">oldCapacity</span> <span class="o">=</span> <span class="n">oldTable</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">oldCapacity</span> <span class="o">==</span> <span class="n">MAXIMUM_CAPACITY</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">threshold</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Entry</span><span class="o">[]</span> <span class="n">newTable</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Entry</span><span class="o">[</span><span class="n">newCapacity</span><span class="o">];</span>
</span><span class='line'>        <span class="n">transfer</span><span class="o">(</span><span class="n">newTable</span><span class="o">,</span> <span class="n">initHashSeedAsNeeded</span><span class="o">(</span><span class="n">newCapacity</span><span class="o">));</span>
</span><span class='line'>        <span class="n">table</span> <span class="o">=</span> <span class="n">newTable</span><span class="o">;</span>
</span><span class='line'>        <span class="n">threshold</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">newCapacity</span> <span class="o">*</span> <span class="n">loadFactor</span><span class="o">,</span> <span class="n">MAXIMUM_CAPACITY</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>添加元素的时候会检查是否需要扩容，如果需要会将数组大小增大一倍，同时进行<code>rehash</code>来将之前的元素转移到现在的数组中来。</p>

<p>如果不需要扩容，直接添加元素</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">createEntry</span><span class="o">(</span><span class="kt">int</span> <span class="n">hash</span><span class="o">,</span> <span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">bucketIndex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">table</span><span class="o">[</span><span class="n">bucketIndex</span><span class="o">];</span>
</span><span class='line'>        <span class="n">table</span><span class="o">[</span><span class="n">bucketIndex</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Entry</span><span class="o">&lt;&gt;(</span><span class="n">hash</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="n">size</span><span class="o">++;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>将<code>table</code>数组<code>index</code>位置元素指向插入元素，插入元素作为链表头。</p>

<p><code>get</code>操作和<code>put</code>操作差不多，根据<code>key</code>查找<code>Entry</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">getEntry</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">hash</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">table</span><span class="o">[</span><span class="n">indexFor</span><span class="o">(</span><span class="n">hash</span><span class="o">,</span> <span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">)];</span>
</span><span class='line'>             <span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>             <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">next</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Object</span> <span class="n">k</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">hash</span> <span class="o">==</span> <span class="n">hash</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                <span class="o">((</span><span class="n">k</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">key</span><span class="o">)</span> <span class="o">==</span> <span class="n">key</span> <span class="o">||</span> <span class="o">(</span><span class="n">key</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">key</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">k</span><span class="o">))))</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">e</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>table</code>数组的长度是2<sup>n</sup>，这样2<sup>n</sup>-1的二进制表示每一位都是1，方便进行index计算。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kt">int</span> <span class="nf">indexFor</span><span class="o">(</span><span class="kt">int</span> <span class="n">h</span><span class="o">,</span> <span class="kt">int</span> <span class="n">length</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// assert Integer.bitCount(length) == 1 : &quot;length must be a non-zero power of 2&quot;;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">h</span> <span class="o">&amp;</span> <span class="o">(</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>LinkedHashMap</code>的<code>Entry</code>除了有一个<code>next</code>来处理冲突，还有<code>before</code>和<code>after</code>来将所有元素连接成一个双向循环链表。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// LinkedHashMap</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">createEntry</span><span class="o">(</span><span class="kt">int</span> <span class="n">hash</span><span class="o">,</span> <span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">bucketIndex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">HashMap</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">old</span> <span class="o">=</span> <span class="n">table</span><span class="o">[</span><span class="n">bucketIndex</span><span class="o">];</span>
</span><span class='line'>        <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Entry</span><span class="o">&lt;&gt;(</span><span class="n">hash</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">old</span><span class="o">);</span>
</span><span class='line'>        <span class="n">table</span><span class="o">[</span><span class="n">bucketIndex</span><span class="o">]</span> <span class="o">=</span> <span class="n">e</span><span class="o">;</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">addBefore</span><span class="o">(</span><span class="n">header</span><span class="o">);</span>
</span><span class='line'>        <span class="n">size</span><span class="o">++;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Inserts this entry before the specified existing entry in the list.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kt">void</span> <span class="nf">addBefore</span><span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">existingEntry</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">after</span>  <span class="o">=</span> <span class="n">existingEntry</span><span class="o">;</span>
</span><span class='line'>            <span class="n">before</span> <span class="o">=</span> <span class="n">existingEntry</span><span class="o">.</span><span class="na">before</span><span class="o">;</span>
</span><span class='line'>            <span class="n">before</span><span class="o">.</span><span class="na">after</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>            <span class="n">after</span><span class="o">.</span><span class="na">before</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * This method is invoked by the superclass whenever the value</span>
</span><span class='line'><span class="cm">         * of a pre-existing entry is read by Map.get or modified by Map.set.</span>
</span><span class='line'><span class="cm">         * If the enclosing Map is access-ordered, it moves the entry</span>
</span><span class='line'><span class="cm">         * to the end of the list; otherwise, it does nothing.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kt">void</span> <span class="nf">recordAccess</span><span class="o">(</span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">LinkedHashMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">lm</span> <span class="o">=</span> <span class="o">(</span><span class="n">LinkedHashMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;)</span><span class="n">m</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">lm</span><span class="o">.</span><span class="na">accessOrder</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">lm</span><span class="o">.</span><span class="na">modCount</span><span class="o">++;</span>
</span><span class='line'>                <span class="n">remove</span><span class="o">();</span>
</span><span class='line'>                <span class="n">addBefore</span><span class="o">(</span><span class="n">lm</span><span class="o">.</span><span class="na">header</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Entry</code>的<code>addBefore</code>将元素添加至双向循环链表的尾部，<code>recordAccess</code>将元素从双向循环链表原来的位置移除，重新添加到链表尾部。如果key元素已经存在Map中，在<code>put</code>时会替换value，同时<code>recordAccess</code>，<code>recordAccess</code>在<code>HashMap</code>的<code>Entry</code>中是空实现，在<code>LinkedHashMap</code>中进行移除到链表尾部的操作。<code>recordAccess</code>还在<code>LinkedHashMap</code>的<code>get</code>方法中被调用，这样每次执行<code>get</code>操作返回元素的同时将<code>Entry</code>移动到链表尾部。</p>

<p><code>WeakHashMap</code>的<code>Entry</code>是<code>WeakReference</code>的子类，创建的时候和<code>ReferenceQueue</code>进行关联，referent是key，当key被回收时将移除key对应的entry。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Expunges stale entries from the table.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">expungeStaleEntries</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Object</span> <span class="n">x</span><span class="o">;</span> <span class="o">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">poll</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">queue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;unchecked&quot;</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;)</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">indexFor</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">hash</span><span class="o">,</span> <span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">prev</span> <span class="o">=</span> <span class="n">table</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>                <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">prev</span><span class="o">;</span>
</span><span class='line'>                <span class="k">while</span> <span class="o">(</span><span class="n">p</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">p</span> <span class="o">==</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">prev</span> <span class="o">==</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>                            <span class="n">table</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>                        <span class="k">else</span>
</span><span class='line'>                            <span class="n">prev</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>                        <span class="c1">// Must not null out e.next;</span>
</span><span class='line'>                        <span class="c1">// stale entries may be in use by a HashIterator</span>
</span><span class='line'>                        <span class="n">e</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">// Help GC</span>
</span><span class='line'>                        <span class="n">size</span><span class="o">--;</span>
</span><span class='line'>                        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                    <span class="n">prev</span> <span class="o">=</span> <span class="n">p</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">p</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>key被回收时<code>Entry</code>会被放入<code>ReferenceQueue</code>中。在调用<code>size()</code>和<code>resize()</code>方法时会调用<code>expungeStaleEntries</code>方法。</p>

<p>一般情况下，一个对象被标记为垃圾（并不代表被回收了）后会被加入引用队列。</p>

<p>对于虚引用来说，它指向的对象只有被回收后才会加入引用队列，所以可以作为记录该引用指向的对象是否被回收。</p>

<h2>reference</h2>

<ul>
<li><a href="https://android.googlesource.com/platform/libcore/+/8f9c9cae00ad906c39891890f7b9d7a0bc453c0a%5E2..8f9c9cae00ad906c39891890f7b9d7a0bc453c0a/">Android Hashing.java</a></li>
<li><a href="http://hg.openjdk.java.net/jdk7u/jdk7u6/jdk/file/8c2c5d63a17e/src/share/classes/sun/misc/Hashing.java">JDK Hashing.java</a></li>
<li><a href="http://learningviacode.blogspot.com/2014/02/reference-queues.html">Reference Queues</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据结构与算法]]></title>
    <link href="http://Solarex.github.io/blog/2018/07/01/datastructure-and-algorithms/"/>
    <updated>2018-07-01T19:06:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2018/07/01/datastructure-and-algorithms</id>
    <content type="html"><![CDATA[<h2>ArrayList</h2>

<ul>
<li>尾插效率高，支持随机访问</li>
<li>中间插入或者删除效率低</li>
<li>空间不够用时，自动增长为现有空间的1.5倍</li>
<li>底层使用Object数组来存储数据，使用System.arrayCopy来移动元素</li>
</ul>


<h2>LinkedList</h2>

<ul>
<li>头插，中间插，删除效率高</li>
<li>不支持随机访问</li>
<li>MessageQueue中Message根据msg.when来进行插入，mMessages指向头结点</li>
</ul>


<h2>Vector</h2>

<ul>
<li>底层使用数组实现，增长看<code>capacityIncrement</code>，若<code>capacityIncrement</code>小于0，翻倍增长</li>
<li>方法有<code>synchronized</code>修饰，线程安全</li>
<li><code>Stack</code>栈底层实现使用的<code>Vector</code></li>
<li><code>Stack</code>在同一端进行插入和删除，<code>FILO</code></li>
<li>队列<code>Queue</code>是只允许在一端进行插入操作，而在另一端进行删除操作的线性表，插入的一端称为队尾，删除的一端称为队头</li>
<li>把队列的头尾相接的顺序存储结构称为循环队列</li>
<li>双端队列<code>Deque</code>是一种具有队列和栈的性质的数据结构，双端队列中的元素可以从两端弹出，其限定插入和删除操作在队列的两端进行。<code>LinkedList</code>，<code>ArrayDeque</code>实现了<code>Deque</code>接口,<code>LinkedBlockingQueue</code>实现了<code>BlockingDeque</code>接口</li>
<li>优先级队列，<code>PriorityQueue</code>，<code>MessageQueue</code>根据<code>Message.when</code>来进行插入</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么String要被设计成final的]]></title>
    <link href="http://Solarex.github.io/blog/2018/06/18/why-java-string-designed-as-final/"/>
    <updated>2018-06-18T09:53:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2018/06/18/why-java-string-designed-as-final</id>
    <content type="html"><![CDATA[<h2>Reference</h2>

<ul>
<li><a href="https://javarevisited.blogspot.com/2010/10/why-string-is-immutable-or-final-in-java.html">Why String is Immutable or Final in Java</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java并发编程的艺术笔记]]></title>
    <link href="http://Solarex.github.io/blog/2018/06/15/the-art-of-java-concurrency-programming-notes/"/>
    <updated>2018-06-15T23:04:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2018/06/15/the-art-of-java-concurrency-programming-notes</id>
    <content type="html"><![CDATA[<p>已迁移到gitbook，请访问<a href="https://solarex.github.io/reading-notes/the-art-of-java-concurrency-programming/readme.html">Java并发编程的艺术笔记</a>。</p>

<!-- more -->


<ul>
<li><a href="#ch01">并发编程的挑战</a></li>
<li><a href="#ch02">Java并发机制的底层实现原理</a></li>
<li><a href="#ch03">Java内存模型</a></li>
<li><a href="#ch04">Java并发编程基础</a></li>
<li><a href="#ch05">Java中的锁</a></li>
<li><a href="#ch06">Java并发容器和框架</a></li>
<li><a href="#ch07">Java中的13个原子操作类</a></li>
<li><a href="#ch08">Java中的并发工具类</a></li>
<li><a href="#ch09">Java中的线程池</a></li>
<li><a href="#ch10">Executor框架</a></li>
<li><a href="#ch11">Java并发编程实践</a></li>
</ul>


<!-- more -->




<h2 id="ch01">并发编程的挑战</h2>


<p>利用<code>vmstat</code>测量上下文切换次数。CS(Context Switch)</p>

<p>减少上下文切换的方法有无锁并发编程、CAS算法、使用最少线程和使用协程。</p>

<ul>
<li>无锁并发编程。多线程竞争锁时，会引起上下文切换，所以多线程处理数据时，可以用一些办法来避免使用锁，如将数据的ID按照Hash算法取模分段，不同的线程处理不同段的数据。</li>
<li>CAS算法。Java的Atomic包使用CAS算法来更新数据，而不需要加锁。</li>
<li>使用最少线程。避免创建不需要的线程，比如任务很少，但是创建了很多线程来处理，这样会使大量线程处于等待状态。</li>
<li>协程：在单线程里实现多任务的调度，并在单线程里维持多个任务间的切换。</li>
</ul>


<p><code>sudo -u admin jstack {pid}</code></p>

<p>避免死锁的几种常见方法：</p>

<ul>
<li>避免一个线程同时获取多个锁</li>
<li>避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源</li>
<li>尝试使用定时锁，使用<code>lock.tryLock(timeout)</code>来替代使用内置锁机制</li>
<li>对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况</li>
</ul>


<h2 id="ch02">Java并发机制的底层实现原理</h2>


<p>如果一个字段被声明为<code>volatile</code>，Java线程内存模型确保所有线程看到这个变量的值是一致的。有<code>volatile</code>变量修饰的共享变量进行写操作的时候会多出<code>lock</code>指令的汇编代码。<code>lock</code>前缀的指令在多核处理器下会引发两件事情。</p>

<ul>
<li>将当前处理器缓存行的数据写回到系统内存</li>
<li>这个写回内存的操作会使在其他CPU里缓存了改内存地址的数据无效</li>
</ul>


<p><code>synchronized</code>实现同步的基础：Java中每一个对象都可以作为锁。具体表现为3中形式：</p>

<ul>
<li>对于普通同步方法，锁是当前实例对象</li>
<li>对于静态同步方法，锁时当前类的Class对象</li>
<li>对于同步方法块，锁是<code>synchronized</code>括号里配置的对象。</li>
</ul>


<p>当一个线程试图访问同步代码块时，它首先必须得到锁，退出或抛出异常时必须释放锁。</p>

<p>代码块的同步是使用<code>monitorenter</code>和<code>monitorexit</code>指令实现的。</p>

<p><code>synchronized</code>用的锁是存在Java对象头里的。如果对象是数组类型，则虚拟机用3个字宽Word存储对象头，如果对象是非数组类型，则用2字宽存储对象头。在32位虚拟机中，1字宽等于4字节，即32bit。</p>

<p>Java对象头里的Mark Word里默认存储对象的hashcode、分代年龄、锁标记位。</p>

<p>JVM中CAS操作正是利用了处理器提供的<code>CMPXCHG</code>指令实现的。自旋CAS实现的基本思路就是循环进行CAS操作直到成功为止。</p>

<p>使用CAS实现原子操作的三大问题：</p>

<ul>
<li>ABA问题。<code>AtomicStampedReference</code>可以用来解决ABA问题。</li>
<li>循环时间开销大</li>
<li>只能保证一个共享变量的原子操作。从Java 1.5开始，JDK提供了<code>AtomicReference</code>类来保证引用对象之间的原子性，就可以把多个变量放在一个对象里来进行CAS操作。</li>
</ul>


<h2 id="ch03">Java内存模型</h2>


<p>在Java中，所有实例域、静态域和数组元素都存储在堆内存中，堆内存在线程之间共享。局部变量，方法定义参数和异常处理器参数不会再线程之间共享，他们不会有内存可见性问题，也不受内存模型的影响。Java线程之间的通信由Java内存模型JMM控制，JMM决定一个线程对共享变量的写入何时对另一个线程可见。从抽象的角度来看，JMM定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存（Main Memory）中，每个线程都有一个私有的本地内存（Local Memory），本地内存中存储了该线程以读/写共享变量的副本。本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了缓存、写缓冲区、寄存器以及其他的硬件和编译器优化。</p>

<p>在执行程序时，为了提高性能，编译器和处理器常常会对指令做重排序。重排序分3中类型：</p>

<ul>
<li>编译器优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</li>
<li>指令级并行的重排序。</li>
<li>内存系统的重排序。</li>
</ul>


<p>为了保证内存可见性，Java编译器在生成指令序列的适当位置会插入内存屏障指令来禁止特定类型的处理器重排序。JMM把内存屏障指令分为4类：</p>

<ul>
<li>LoadLoad Barriers</li>
<li>StoreStore Barriers</li>
<li>LoadStore Barriers</li>
<li>StoreLoad Barriers</li>
</ul>


<p>JSR-133 使用happens-before的概念来阐述操作之间的内存可见性。在JMM中，如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须要存在happens-before关系。</p>

<ul>
<li>程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作</li>
<li>监视器锁规则：对一个锁的解锁，happens-before于随后对这个所得加锁</li>
<li>volatile变量规则：对于一个volatile域的写，happens-before于任意后续对这个volatile域的读</li>
<li>传递性：如果A happens-before B，且 B happens-before C，那么A happens-before C</li>
</ul>


<p>对于final域，编译器和处理器要遵守两个重排序规则。</p>

<ul>
<li>在构造函数内对一个final域的写入，与随后把这个被构造对象的引用赋值给一个引用变量，这两个操作之间不能重排序。</li>
<li>初次读一个包含final域的对象的引用，与随后初次读这个final域，这两个操作之间不能重排序。</li>
</ul>


<h2 id="ch04">Java并发编程基础</h2>


<p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fv3mv5q2gsj31400u00tz.jpg" alt="" /></p>

<p>中断可以理解为线程的一个标识位属性，它表示一个运行中的线程是否被其他线程进行了中断操作。中断好比其他线程对该线程打了个招呼，其他线程通过调用该线程的<code>interrupt</code>方法对其进行中断操作。线程通过检查自身是否被中断来进行响应，线程通过方法<code>isInterrupted</code>来进行判断是否被中断，也可以调用静态方法<code>Thread.interrupted()</code>对当前线程的中断标识位进行复位。</p>

<p>等待通知的经典范式，该范式分为两部分，分别针对等待方（消费者）和通知方（生产者）。</p>

<p>等待方遵循如下原则：</p>

<ul>
<li>获取对象的锁</li>
<li>如果条件不满足，那么调用对象的wait()方法，被通知后仍要检查条件</li>
<li>条件满足时则执行对应的逻辑</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">synchronized</span><span class="o">(</span><span class="err">对象</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">while</span><span class="o">(</span><span class="err">条件不满足</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="err">对象</span><span class="o">.</span><span class="na">wait</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="err">对应的处理逻辑</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通知方遵循如下原则：</p>

<ul>
<li>获得对象的锁</li>
<li>改变条件</li>
<li>通知所有等待在对象上的线程</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">synchronized</span><span class="o">(</span><span class="err">对象</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="err">改变条件</span>
</span><span class='line'>    <span class="err">对象</span><span class="o">.</span><span class="na">notifyAll</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ThreadLocal</code>，即线程变量，是一个以<code>ThreadLocal</code>对象为键、任意对象为值的存储结构。这个结构被附带在线程上，也就是说一个线程可以根据一个<code>ThreadLocal</code>对象查询到绑定在这个线程上的一个值。</p>

<p>等待超时模式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 对当前对象加锁</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">synchronized</span> <span class="n">Object</span> <span class="nf">get</span><span class="o">(</span><span class="kt">long</span> <span class="n">mills</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">future</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">+</span> <span class="n">mills</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">remaining</span> <span class="o">=</span> <span class="n">mills</span><span class="o">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">((</span><span class="n">result</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">remaining</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">wait</span><span class="o">(</span><span class="n">remaining</span><span class="o">);</span>
</span><span class='line'>        <span class="n">remaining</span> <span class="o">=</span> <span class="n">future</span> <span class="o">-</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<h2 id="ch05">Java中的锁</h2>


<p>Java 1.5之后，并发包中新增了Lock接口以及相关实现类用来实现锁功能，它提供了与<code>synchronized</code>关键字类似的同步功能，只是在使用时需要显式地获取锁和释放锁。虽然他缺少了通过synchronized块或者方法提供的隐式获取释放锁的便捷性，但是却拥有了锁获取与释放的可操作性、可中断的获取锁以及超时获取锁等多种synchronized关键字所不具备的同步特性。</p>

<p>AQS的主要使用方式是继承，子类通过继承AQS并实现它的抽象方法来管理同步状态，在抽象方法的实现过程中免不了要对同步状态进行更改，这时就需要使用AQS提供的3个方法——<code>getState()</code>,<code>setState(int newState)</code>,<code>compareAndSetState(int expect, int update)</code>来进行操作，因为他们能够保证状态的改变是安全的。</p>

<p>当需要阻塞或唤醒一个线程的时候，都会使用<code>LockSupport</code>工具类来完成相应工作。<code>LockSupport</code>定义了一组公共静态方法，这些方法提供了最基本的线程阻塞和唤醒功能，而LockSupport也成为构建同步组件的基础工具。</p>

<p>任意一个Java对象，都拥有一组监视器方法（定义在java.lang.Object上），主要包括<code>wait()</code>,<code>wait(long timeout)</code>,<code>notify()</code>和<code>notifyAll()</code>方法，这些方法和<code>synchronized</code>关键字配合，可以实现等待、通知模式。</p>

<p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fv3ogb2axgj31kw16okjm.jpg" alt="" /></p>

<h2 id="ch06">Java并发容器和框架</h2>


<p>ConcurrentHashMap 分段锁</p>

<p>ConcurrentHashMap的size操作，先尝试2次不锁住Segment的方式来统计各个Segment的大小，如果统计的过程中，容器的count发生了变化，则再采用加锁的方式来统计所有Segment的大小。</p>

<p>ConcurrentLinkedQueue</p>

<p>阻塞队列</p>

<h2 id="ch07">Java中的13个原子操作类</h2>


<p>原子更新基本类型类：<code>AtomicBoolean</code>，<code>AtomicInteger</code>，<code>AtomicLong</code></p>

<p>原子更新数组：<code>AtomicIntegerArray</code>,<code>AtomicLongArray</code>,<code>AtomicReferenceArray</code></p>

<p>原子更新引用类型：<code>AtomicReference</code>,<code>AtomicReferenceFieldUpdater</code>,<code>AtomicMarkableReference</code></p>

<p>原子更新字段类：<code>AtomicIntegerFieldUpdater</code>，<code>AtomicLongFieldUpdater</code>,<code>AtomicStampedReference</code></p>

<h2 id="ch08">Java中的并发工具类</h2>


<p>等待多线程完成的<code>CountDownLatch</code></p>

<p>同步屏障<code>CyclicBarrier</code></p>

<p><code>CountDownLatch</code>的计数器只能使用一次，而<code>CyclicBarrier</code>的计数器可以使用<code>reset()</code>方法重置。所以<code>CyclicBarrier</code>能处理更为复杂的业务场景。例如，如果计算发生错误，可以重置计数器，并让线程重新执行一次。<code>CyclicBarrier</code>还提供其他有用的方法，比如<code>getNumberWaiting</code>方法可以获得<code>CyclicBarrier</code>阻塞的线程数量，<code>isBroken</code>方法用来了解阻塞的线程是否被中断。</p>

<p>控制并发线程数的<code>Semaphore</code></p>

<p>线程间交换数据的<code>Exchanger</code></p>

<h2 id="ch09">Java中的线程池</h2>


<p>当提交一个新任务到线程池时，线程池的处理流程如下：</p>

<ul>
<li>线程池判断核心线程池里的线程是否都在执行任务，如果不是，则创建一个新的工作线程来执行任务。如果核心线程池里的线程都在执行任务，则进入下个流程。</li>
<li>线程池判断工作队列是否已满，如果工作队列没有满，则将新提交的任务存储在这个工作队列里。如果工作队列满了，则进入下个流程。</li>
<li>线程池判断线程池的线程数是否小于maxPoolSize，如果没有，则创建一个新的工作线程来执行任务。如果已经满了，则交给饱和策略来处理这个任务。</li>
</ul>


<p><code>ThreadPoolExecutor(corePoolSize, maxPoolSize, keepAliveTime, milliseconds, runnableTaskQueue, handler)</code></p>

<ul>
<li>corePoolSize 核心线程数</li>
<li>runnableTaskQueue任务队列，用于保存等待执行的任务的阻塞队列，可以选择<code>ArrayBlockingQueue</code>,<code>LinkedBlockingQueue</code>,<code>SynchronousQueue</code>,<code>PriorityBlockingQueue</code></li>
<li>maxPoolSize 线程池允许创建的最大线程数</li>
<li>ThreadFactory 创建线程的工厂</li>
<li>RejectExecutionHandler 饱和策略 <code>AbortPolicy</code>,<code>CallerRunsPolicy</code>,<code>DiscardOldestPolicy</code>,<code>DiscardPolicy</code></li>
</ul>


<h2 id="ch10">Executor框架</h2>


<p>Executor框架主要由3大部分组成如下：</p>

<ul>
<li>任务。包括被执行任务需要实现的接口：Runnable或Callable</li>
<li>任务的执行。包括任务执行机制的核心接口Executor，以及继承自Executor的ExecutorService接口。Executor框架有两个</li>
</ul>


<h2 id="ch11">Java并发编程实践</h2>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java并发编程实战笔记]]></title>
    <link href="http://Solarex.github.io/blog/2018/06/03/java-concurrency-in-practice-notes/"/>
    <updated>2018-06-03T21:43:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2018/06/03/java-concurrency-in-practice-notes</id>
    <content type="html"><![CDATA[<p>已迁移到gitbook，请访问<a href="https://solarex.github.io/reading-notes/jcip/readme.html">Java并发编程实战笔记</a>。</p>

<!-- more -->


<ul>
<li><a href="#ch01">简介</a></li>
<li><a href="#ch02">线程安全性</a></li>
<li><a href="#ch03">对象的共享</a></li>
<li><a href="#ch04">对象的组合</a></li>
<li><a href="#ch05">基础构建模块</a></li>
<li><a href="#ch06">任务执行</a></li>
<li><a href="#ch07">取消与关闭</a></li>
<li><a href="#ch08">线程池的使用</a></li>
<li><a href="#ch09">图形用户界面应用程序</a></li>
<li><a href="#ch10">避免活跃性危险</a></li>
<li><a href="#ch11">性能和可伸缩性</a></li>
<li><a href="#ch12">并发程序的测试</a></li>
<li><a href="#ch13">显式锁</a></li>
<li><a href="#ch14">构建自定义的同步工具</a></li>
<li><a href="#ch15">原子变量与非阻塞同步机制</a></li>
<li><a href="#ch16">Java内存模型</a></li>
</ul>


<h2 id="ch01">简介</h2>


<p>操作系统的出现使得计算机每次能运行多个程序，并且不同的程序都在单独的进程中运行：操作系统为每个独立执行的进程分配各种资源，包括内存，文件句柄以及安全证书等。如果需要的话，在不同的进程之间可以通过一些粗粒度的通信机制来交换数据，包括：套接字、信号处理器、共享内存、信号量以及文件等。</p>

<p>进程会共享进程范围内的资源，例如内存句柄和文件句柄，但每个线程都有各自的程序计数器、栈以及局部变量等。线程还提供了一种直观的分解模式来充分利用多处理器系统中的硬件并行性，而在同一个程序中的多个线程也可以被同时调度到多个CPU上运行。线程也被称为轻量级进程。在大多数操作系统上，都是以线程为基本的调度单位。</p>

<p>在设计良好的并发应用程序中，并发能提升程序的性能，但无论如何，线程总会带来某种程度的运行时开销。在多线程程序中，当线程调度器临时挂起活跃线程并转而运行另一个线程时，就会频繁地出现上下文切换操作，这种操作将带来极大的开销：保存和恢复执行上下文，丢失局部性，并且CPU时间将更多地话再线程调度而不是线程运行上。当线程共享数据时，必须使用同步机制，而这些同步机制往往会抑制某些编译器优化，使内存缓存区的数据无效，以及增加共享内存总线的同步流量。</p>

<h2 id="ch02">线程安全性</h2>


<p>要编写线程安全的代码，其核心在于要对状态访问操作进行管理，特别是对共享（shared）的和可变的（mutable）状态的访问。</p>

<p>如果当多个线程访问同一个可变的状态变量时没有使用合适的同步，那么程序就会出现错误。有三种方式可以修复这个问题：</p>

<ul>
<li>不在线程之间共享该状态变量</li>
<li>将状态变量修改为不可变的变量</li>
<li>在访问状态变量时使用同步</li>
</ul>


<p>在并发编程中，这种由于不恰当的执行时序而出现不正确的结果是一种非常重要的情况，他有一个正式的名字：竞态条件（race condition）。</p>

<p>要避免竞态条件问题，就必须在某个线程修改该变量时，通过某种方式防止其他线程使用这个变量，从而确保其他线程只能在修改操作完成之前或之后读取和修改状态，而不是在修改状态的过程中。</p>

<p>Java提供了一种内置的锁机制来支持原子性：同步代码块（synchronized block）。同步代码块包括两部分：一个作为锁的对象引用，一个作为由这个锁保护的代码块。以关键字<code>synchronized</code>来修饰的方法就是一种横跨整个方法体的同步代码块，其中该同步代码块的锁就是方法调用所在的对象。静态的synchronized方法以class对象作为锁。</p>

<p>每个Java对象都可以用做一个可以实现同步的锁，这些锁被称为内置锁（intrinsic lock）或监视器锁（monitor lock）。线程在进入同步代码块之前会自动获取锁，并且在退出代码块时自动释放锁，而无论是通过正常的控制路径退出还是通过从代码块中抛出异常退出。获取内置锁的唯一途径是进入由这个锁保护的同步代码块或方法。Java内置锁相当于一种互斥体（或互斥锁），这意味着最多只有一个线程能持有这种锁。当线程A尝试获取一个由线程B持有的锁时，线程A必须等待或者阻塞，直到线程B释放这个锁。如果B永远不释放锁，那么A也将永远地等下去。</p>

<p>当某个线程请求一个由其他线程持有的锁时，发出请求的线程就会阻塞。然而，由于内置锁是可重入的，因此如果某个线程师徒获取一个已经由他自己持有的锁，那么这个请求就会成功。重入意味着获取锁的操作的粒度是线程而不是调用。重入的一种实现方法是，为每个锁关联一个获取计数值和一个所有者线程。当计数值为0时，这个锁就被认为是没有被任何线程持有。当线程请求一个未被持有的锁时，JVM将记下锁的持有者，并且将获取计数值置为1。如果同一个线程再次获取这个锁，计数值将递增，而当线程退出同步代码块时，计数值会相应地递减。当计数值为0时，这个锁将被释放。Java对象头的mark word会保存这些信息。</p>

<p>对于可能被多个线程同时访问的可变状态变量，在访问它的时候都需要持有同一个锁，在这种情况下，我们称状态变量是由这个锁保护的。一种常见的加锁约定是，将所有的可变状态都封装在对象内部，并通过对象的内置锁对所有访问可变状态的代码路径进行同步，是的在该对象上不会发生并发访问。在许多线程安全类中都使用了这种模式，例如Vector、Hashtable等其他同步集合类。</p>

<p>当执行时间较长的计算或者可能无法快速完成的操作时（例如，网络I/O或者控制台I/O），一定不要持有锁。</p>

<h2 id="ch03">对象的共享</h2>


<p>在没有同步的情况下，编译器、处理器以及运行时等都可能对操作的执行顺序进行一些意想不到的调整（重排序）。在缺乏足够同步的多线程程序中，要相对内存操作的执行顺序进行判断，几乎无法得出正确的结论。</p>

<p>Java内存模型要求，变量的读取操作和写入操作都必须是原子操作，但对于非volatile类型的long和double变量，JVM允许将64位的读操作或写操作分解为两个32位的操作。当读取一个非volatile类型的long变量时，如果对该变量的读操作和写操作是在不同的线程中执行，那么很可能读取到某个值的高32位和另一个值的低32位，因此，即使不考虑失效数据问题，在多线程程序中使用共享且可变的long和double等类型的变量也是不安全的，除非用volatile关键字来声明他们或者用锁保护起来。</p>

<p>Java提供了一种稍弱的同步机制，即volatile变量，用来确保将变量的更新操作通知到其他线程。当把变量声明为volatile类型后，编译器和运行时都会注意到这个变量是共享的，因此不会将该变量上的操作与其他内存操作一起重排序。volatile变量不会被缓存在寄存器或者对其他处理器不可见的地方，因此在读取volatile变量时总是返回最新写入的值。对volatile变量的写总是happens before对volatile变量的读。对volatile变量的写会导致其他处理器缓存行失效，会从内存中重新读取值。volatile变量通常用作某个操作完成、发生中断或者状态的标志。</p>

<p>加锁机制既可以保证可见性又可以保证原子性，而volatile变量只能保证可见性。volatile语义不足以确保递增操作的原子性。</p>

<p>当且仅当满足以下所有条件时，才应该使用volatile变量：</p>

<ul>
<li>对变量的写入操作不依赖变量的当前值，或者你能保证只有单个线程更新变量的值。</li>
<li>该变量不会与其他状态变量一起纳入不可变条件中。</li>
<li>在访问变量时不需要加锁。</li>
</ul>


<p>当且仅当对象的构造函数返回时，对象才处于可预测的和一致的状态。因此，当从对象的构造函数中发布对象时，只是发布了一个尚未构造完成的对象。如果this引用在构造过程中逸出，那么这种对象就被认为是不正确构造。<code>不要在构造过程中使this引用逸出</code></p>

<p>不可变对象一定是线程安全的。</p>

<p>当满足以下条件时，对象才是不可变的：</p>

<ul>
<li>对象创建之后其状态就不能修改</li>
<li>对象的所有域都是final类型</li>
<li>对象是正确创建的（在对象的创建期间，this引用没有逸出）</li>
</ul>


<p>final类型的域是不能修改的（但如果final域引用的对象是可变的，那么这些被引用的对象是可以修改的）。Java内存模型中，final域还有着特殊的语义。final域能确保初始化过程的安全性，从而可以不受限制地访问不可变对象，并在共享这些对象时无需使用同步。</p>

<p>要安全地发布一个对象，对象的引用以及对象的状态必须同时对其他线程可见。一个正确构造的对象可以通过以下方式来安全地发布：</p>

<ul>
<li>在静态初始化函数中初始化一个对象引用</li>
<li>将对象的引用保存到volatile类型的域或者AtomicReference对象中</li>
<li>将对象的引用保存到某个正确构造对象的final域中</li>
<li>将对象的引用保存到一个由锁保护的域中</li>
</ul>


<p>在并发程序中使用和共享对象时，可以使用一些实用的策略，包括：</p>

<ul>
<li>线程封闭。线程封闭的对象只能由一个线程拥有，对象被封闭在该线程中，并且只能由这个线程修改，如ThreadLocal对象</li>
<li>只读共享。在没有额外同步的情况下，共享的只读对象可以由多个线程并发访问，但任何线程都不能修改它。共享的只读对象包括不可变对象和事实不可变对象。final对象</li>
<li>线程安全的共享。线程安全的对象在其内部实现同步，因此多个线程可以通过对象的公有接口来进行访问而不需要进一步的同步。如使用线程安全的容器</li>
<li>保护对象。被保护的对象只能通过持有特定的锁来访问。保护对象包括封装在其他线程安全对象中的对象，以及已发布的并且由某个特定锁保护的对象。</li>
</ul>


<h2 id="ch04">对象的组合</h2>


<p>在设计线程安全类的过程中，需要包含以下三个基本要素：</p>

<ul>
<li>找出构成对象状态的所有变量</li>
<li>找出约束状态变量的不变性条件</li>
<li>建立对象状态的并发访问管理策略</li>
</ul>


<p>如果不了解对象的不变性条件与后验条件，那么就不能确保线程安全性。要满足在状态变量的有效值或状态转换上的各种约束条件，就需要借助于原子性与封装性。</p>

<h2 id="ch05">基础构建模块</h2>


<p>同步容器类包括Vector和Hashtable，二者是早期JDK的一部分，此外还包括在JDK1.2中添加的一些功能相似的类，这些同步的封装器类是由<code>Collections.synchronizedXXX</code>等工厂方法创建的。这些类实现线程安全的方式是：将他们的状态封装起来，并对每个公有方法都进行同步，使得每次只有一个线程能访问容器的状态。</p>

<p>同步容器类都是线程安全的，但在某些情况下可能需要额外的客户端加锁来保护复合操作。容器上常见的复合操作包括：迭代（反复访问元素，直到遍历完容器中所有元素）、跳转（根据指定顺序找到当前元素的下一个元素）以及条件运算（如“若没有就添加”，检查Map中是否存在键值K，如果没有，就加入二元组(K,V)）。在同步容器类中，这些复合操作在没有客户端加锁的情况下仍然是线程安全的，但当其他线程并发地修改容器时，它们可能会表现出意料之外的行为。</p>

<p>许多现代的容器类也并没有消除复合操作中的问题。无论在直接迭代还是在Java5.0引入的for-each循环语句中，对容器类进行迭代的标准方式都是使用Iterator。然而，如果有其他线程并发地修改容器，那么即使是使用迭代器也无法避免在迭代期间对容器加锁。在设计同步容器类的迭代器时并没有考虑到并发修改的问题，并且他们表现出的行为是及时失败fail-fast的。这意味着，当他们发现容器在迭代过程中被修改时，就会抛出一个ConcurrentModificationException异常。</p>

<p>容器的toString、hashCode、equals等方法也会间接地执行迭代操作，当容器作为另一个容器的元素或键值时，就会出现这种情况。同样，containsAll、removeAll、retainAll等方法，以及把容器作为参数的构造函数，都会对容器进行迭代。所有这些间接的迭代操作都可能抛出ConcurrentModificationException。</p>

<p>通过并发容器来代替同步容器，可以极大地提高伸缩性并降低风险。</p>

<p>Java5.0增加了两种新的容器类型：Queue和BlockingQueue。Queue用来临时保存一组等待处理的元素。它提供了几种实现，包括ConcurrentLinkedQueue，这是一个传统的先进先出队列，以及PriorityQueue，这是一个非并发优先队列。Queue上的操作不会阻塞，如果队列为空，那么获取元素的操作将返回空值。虽然可以用List来模拟Queue的行为——事实上，正是通过LinkedList来实现Queue的，但还需要一个Queue的类，因为它能去掉List的随机访问需求，从而实现更高效的并发。</p>

<p>BlockingQueue扩展了Queue，增加了可阻塞的插入和获取等操作。如果队列为空，那么获取元素的操作将一直阻塞，知道队列中出现一个可用的元素。如果队列已满（对于有界队列来说），那么插入操作将一直阻塞，只到队列中出现ke&#8217;yong的空间。</p>

<p>正如ConcurrentHashMap用于代替基于散列的同步Map，Java6也引入了ConcurrentSkipListMap和ConcurrentSkipListSet，分别作为同步的SortedMap和SortedSet的并发替代品（例如用synchronizedMap包装起来的TreeMap或TreeSet）。</p>

<p>ConcurrentHashMap使用分段锁来实现更大程度的共享，任意数量的读线程可以并发地访问Map，执行读取操作的线程和执行写入操作的线程可以并发的访问Map，并且一定数量的写入线程可以并发地修改Map。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ConcurrentMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//仅当K没有相应的映射值时才插入</span>
</span><span class='line'>    <span class="n">V</span> <span class="nf">putIfAbsent</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span><span class="n">V</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">//仅当K被映射到V时才移除</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">remove</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span><span class="n">V</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">//仅当K被映射到oldValue时才替换为newValue</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">replace</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span><span class="n">V</span> <span class="n">oldValue</span><span class="o">,</span><span class="n">V</span> <span class="n">newValue</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">//仅当K被映射到某个值时才替换为newValue</span>
</span><span class='line'>    <span class="n">V</span> <span class="nf">replace</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">newValue</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>阻塞队列提供了可阻塞的put和take方法，以及支持定时的offer和poll方法。</p>

<p>Java6增加了两种容器类型，Deque和BlockingDeque，他们分别对Queue和BlockingQueue进行了扩展。Deque是一个双端队列，实现了在队列头和队列尾的高效插入和移除。具体实现包括ArrayDeque和LinkedBlockingDeque。正如阻塞队列适用于生产者&mdash;消费者模式，双端队列同样适用于另一种相关模式，即工作密取。在生产者——消费者设计中，所有消费者有一个共享的工作队列，而在工作密取中，每个消费者都有各自的双端队列。如果一个消费者完成了自己双端队列中的全部工作，那么它可以从其他消费者双端队列末尾秘密地获取工作。密取工作模式比传统的生产者——消费者模式具有更高的可伸缩性，这是因为工作者线程不会在单个共享的任务队列上发生竞争。大多数时候，它们都只是访问自己的双端队列，从而极大地减少了竞争。当工作者线程需要访问另一个队列时，它会从队列的尾部而不是头部获取工作，因此进一步降低了队列上的竞争。工作密取非常适用于既是消费者也是生产者问题——当执行某个工作时可能导致出现更多的工作。例如，在网页爬虫程序中处理一个页面时，通常会发现有更多的页面需要处理。</p>

<p>线程可能会阻塞或暂停执行，原因有多种：等待I/O操作结束，等待获取一个锁，等待从Thread.sleep方法中醒来，或是等待另一个线程的计算结果。当线程阻塞时，它通常被挂起，并处于某种阻塞状态(Blocked、Waiting、Timed_Waiting)。阻塞操作与执行时间很长的普通操作的差别在于，被阻塞的线程必须等待某个不受它控制的事件发生后才能继续执行，例如等待I/O操作完成，等待某个锁变成可用，或者等待外部计算的结束。当某个外部事件发生时，线程被置回Runnable，并可以再次被调度执行。</p>

<p>当某方法抛出InterruptException时，表示该方法是一个阻塞方法，如果这个方法被中断，那么它将努力提前结束阻塞状态。Thread提供了interrupt方法，用于中断线程或查询线程是否已经被中断。每个线程都有一个boolean类型的属性，表示线程的中断状态，当中断线程时将设置这个状态。</p>

<p>当在代码中调用了一个将抛出InterruptException异常的方法时，你自己的方法也就变成了一个阻塞方法，并且必须要处理对中断的响应。有两种基本选择：</p>

<ul>
<li>传递InterruptException</li>
<li>恢复中断，有时候不能抛出InterruptException,例如当代码是Runnable的一部分时，在这些情况下，必须捕获InterruptException，并通过调用当前线程上的interrupt方法恢复中断状态，这样在调用栈中更高层的代码将看到引发了一个中断。</li>
</ul>


<p>阻塞队列可以作为同步工具类，其他类型的同步工具类还包括信号量(Semaphore)、栅栏（Barrier）、以及闭锁（Latch）。</p>

<p>所有的同步工具类都包含一些特定的结构化属性：它们封装了一些状态，这些状态将决定执行同步工具类的线程是继续执行还是等待，此外还提供了一些方法对状态进行操作，以及另一些方法用于高效地等待同步工具类进入到预期状态。</p>

<p>闭锁是一种同步工具类，可以延迟线程的进度直到其到达终止状态。闭锁的作用相当于一扇门：在闭锁到达结束状态之前，这扇门一直是关闭的，并且没有任何线程能通过，当到达结束状态时，这扇门会打开并允许所有线程通过。当闭锁到达结束状态后，将不会再改变状态，隐藏这扇门将永远保持打开状态。闭锁可以用来确保某些活动指导其他活动都完成后才继续执行。</p>

<p>CountDownLatch是一种灵活的闭锁实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">timeTasks</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Runnable</span> <span class="n">task</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span><span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">CountDownLatch</span> <span class="n">startGate</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CountDownLatch</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">CountDownLatch</span> <span class="n">endGate</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CountDownLatch</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="nd">@Override</span>
</span><span class='line'>                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">startGate</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
</span><span class='line'>                        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">task</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>                        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">endGate</span><span class="o">.</span><span class="na">countDown</span><span class="o">();</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>            <span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
</span><span class='line'>        <span class="n">startGate</span><span class="o">.</span><span class="na">countDown</span><span class="o">();</span>
</span><span class='line'>        <span class="n">endGate</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>FutureTask也可以用作闭锁。FutureTask实现了Future语义，表示一种抽象的可生成结果的计算。FutureTask表示的计算是通过Callable来实现的，相当于一种可生成结果的Runnable，并且可以处于以下3种状态：等待运行Waiting to run，正在运行Running，运行完成Completed。运行完成表示计算的所有可能结束方式，包括正常结束、由于取消而结束和由于异常而结束等。FutureTask进入完成状态后，它会永远停留在这个状态上。</p>

<p>计数信号量（Counting Semaphore）用来控制同时访问某个资源的操作数量，或者同时执行某个特定操作的数量。计数信号量还可以用来实现某种资源池，或者对容器施加边界。Semaphore中管理着一组虚拟的许可，许可的初始数量可通过构造函数来指定。在执行操作时可以首先获取许可（只要还有剩余的许可），并在使用以后释放许可。如果没有许可，那么acquire将阻塞直到有许可（或者直到被中断或者操作超时）。release方法将返回一个许可给Semaphore。计数信号量的一种简化形式是二值信号量，即初始值为1的Semaphore，二值信号量可以用作互斥体Mutex，并具备不可重入的加锁语义：谁拥有这个唯一的许可，谁就拥有了互斥锁。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BoundedHashSet</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">set</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Semaphore</span> <span class="n">semaphore</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">BoundedHashSet</span><span class="o">(</span><span class="kt">int</span> <span class="n">bound</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">set</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">synchronizedSet</span><span class="o">(</span><span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;());</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">semaphore</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Semaphore</span><span class="o">(</span><span class="n">bound</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="n">T</span> <span class="n">o</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">semaphore</span><span class="o">.</span><span class="na">acquire</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">wasAdded</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">wasAdded</span> <span class="o">=</span> <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">o</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">wasAdded</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">wasAdded</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">semaphore</span><span class="o">.</span><span class="na">release</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">remove</span><span class="o">(</span><span class="n">T</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">wasRemoved</span> <span class="o">=</span> <span class="n">set</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">o</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">wasRemoved</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">semaphore</span><span class="o">.</span><span class="na">release</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">wasRemoved</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>闭锁是一次性对象，一旦进入终止状态，就不能被重置。栅栏（Barrier）类似于闭锁，它能一直阻塞一组线程直到某个事件发生。栅栏与闭锁的关键区别在于，所有线程必须同时到达栅栏位置，才能继续执行。闭锁用于等待事件，而栅栏用于等待其他线程。</p>

<p>CyclicBarrier可以使一定数量的参与方反复地在栅栏位置汇集，它在并行迭代算法中非常有用：这种算法通常将一个问题拆分成一系列相互独立的子问题。当线程到达栅栏位置时将调用await方法，这个方法将阻塞直到所有线程都到达栅栏位置。如果所有线程都到达了栅栏位置，那么栅栏将打开，此时所有线程都被释放，而栅栏将被重置以便下次使用。如果对await的调用超时，或者await阻塞的线程被中断，那么栅栏就被认为是打破了，所有阻塞的await调用都将终止并抛出BrokenBarrierException。如果成功地通过栅栏，那么await将为每个线程返回一个唯一的到达索引号，我们可以利用这些索引来选举产生一个领导线程，并在下一次迭代中由该领导线程执行一些特殊的工作。CyclicBarrier还可以使你将一个栅栏操作传递给构造函数，这是一个Runnable，当成功通过栅栏时会在一个子任务线程中执行它，但在阻塞线程被释放之前是不能执行的。</p>

<p>另一种形式的栅栏是Exchanger，它是一种两方栅栏，各方在栅栏位置上交换数据。当两方执行不对称的操作时，Exchanger会非常有用，例如当一个线程向缓冲区写入数据，而另一个线程从缓冲区读取数据。这些线程可以使用Exchanger来汇合，并将满的缓冲区与空的缓冲区交换。当两个线程通过Exchanger交换对象时，这种交换就把这两个对象安全地发布给另一方。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Memoizer</span><span class="o">&lt;</span><span class="n">A</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">Computable</span><span class="o">&lt;</span><span class="n">A</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;</span><span class="n">A</span><span class="o">,</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;&gt;</span> <span class="n">cache</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Computable</span><span class="o">&lt;</span><span class="n">A</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">delegate</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Memoizer</span><span class="o">(</span><span class="n">Computable</span><span class="o">&lt;</span><span class="n">A</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="n">delegate</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">delegate</span> <span class="o">=</span> <span class="n">delegate</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">V</span> <span class="nf">compute</span><span class="o">(</span><span class="n">A</span> <span class="n">arg</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Future</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">arg</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">f</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Callable</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">eval</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>                    <span class="nd">@Override</span>
</span><span class='line'>                    <span class="kd">public</span> <span class="n">V</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>                        <span class="k">return</span> <span class="n">delegate</span><span class="o">.</span><span class="na">compute</span><span class="o">(</span><span class="n">arg</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">};</span>
</span><span class='line'>                <span class="n">FutureTask</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">ft</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FutureTask</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;(</span><span class="n">eval</span><span class="o">);</span>
</span><span class='line'>                <span class="n">f</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="na">putIfAbsent</span><span class="o">(</span><span class="n">arg</span><span class="o">,</span> <span class="n">ft</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">f</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">f</span> <span class="o">=</span> <span class="n">ft</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">ft</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">f</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">CancellationException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">cache</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">arg</span><span class="o">,</span> <span class="n">f</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ExecutionException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">interface</span> <span class="nc">Computable</span><span class="o">&lt;</span><span class="n">A</span><span class="o">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">V</span> <span class="nf">compute</span><span class="o">(</span><span class="n">A</span> <span class="n">arg</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>并发技巧清单：</p>

<ul>
<li>可变状态是至关重要的。所有的并发问题都可以归结为如何协调对并发状态的访问。可变状态越少，就越容易确保线程安全性。</li>
<li>尽量将域声明为final类型，除非需要他们是可变的。</li>
<li>不可变对象一定是线程安全的。不可变对象能极大地降低并发编程的复杂性。它们更为简单而且安全，可以任意共享而无需使用加锁或保护性复制等机制。</li>
<li>封装有助于管理复杂性。在编写线程安全的程序时，虽然可以将所有数据都保存在全局变量中，但为什么要这么做？将数据封装在对象中，更易于维持不变性条件：将同步机制封装在对象中，更易于遵循同步策略。</li>
<li>用锁来保护每个可变变量。</li>
<li>当保护同一个不变性条件中的所有变量时，要使用同一把锁。</li>
<li>在执行复合操作期间，要持有锁。</li>
<li>如果从多个线程中访问同一个可变变量时没有使用同步机制，那么线程会出现问题。</li>
</ul>


<h2 id="ch06">任务执行</h2>


<ul>
<li>线程生命周期的开销非常高。线程的创建和销毁并不是没有代价的，根据平台的不同，实际的开销也有所不同，单线程的创建过程都会需要时间，延迟处理的请求，并且需要JVM和操作系统提供一些辅助操作。</li>
<li>资源消耗，活跃的线程会消耗系统资源，尤其是内存。如果可运行的线程数量多于可用处理器的数量，那么有些线程将被闲置。大量空闲的线程会占用许多内存，给垃圾回收器带来压力，而且大量线程在竞争CPU资源还将产生其他的性能开销。</li>
<li>稳定性，在创建线程的数量上存在一个限制。这个限制值将随着平台的不同而不同，并且受多个因素制约，包括JVM的启动参数，Thread构造函数中请求的栈大小，以及底层操作系统对线程的限制等。在32位机器上，其中一个主要的限制因素是线程栈的地址空间。每个线程都维护两个执行栈，一个用于Java代码，一个用于Native代码。通常，JVM在默认情况下会生成一个复合的栈，大小约为0.5MB。可以通过JVM标志-Xss或者通过Thread的构造函数来修改这个值。如果将2<sup>32</sup>处以每个线程的栈大小，那么线程数量将被限制为几千到几万。如果破坏了这些限制，那么很可能抛出OutOfMemoryError异常。</li>
</ul>


<p>Timer类负责管理延迟任务以及周期任务。然而，Timer存在一些缺陷，应该考虑使用ScheduledThreadPoolExecutor来代替它。</p>

<ul>
<li>Timer在执行所有的定时任务时只会创建一个线程。如果某个任务的执行时间过长，那么将破坏其他TimerTask的定时准确性。</li>
<li>如果TimerTask抛出了一个未检查的异常，那么Timer将表现出糟糕的行为。Timer线程并不捕获异常，因此当TimerTask抛出未检查的异常时将终止定时线程。这种情况下，Timer也不会恢复线程的执行，而是会错误地认为整个Timer都被取消了。因此，已经被调度但尚未执行的TimerTask将不会再执行，新的任务也不能被调度。</li>
</ul>


<p>如果要构建自己的调度服务，那么可以使用DelayQueue，它实现了BlockingQueue，并为ScheduledThreadPoolExecutor提供调度功能。DelayQueue管理着一组Delayed对象。每个Delayed对象都有一个相应的延迟时间：在DelayQueue中，只有某个元素逾期后，才能从DelayQueue中执行take操作。从DelayQueue中返回的对象将根据他们的延迟时间进行排序。</p>

<p>如果向Executor提交了一组计算任务，并且希望在计算完成后获得结果，那么可以保留与每个任务关联的Future，然后反复使用get方法，同时将参数timeout指定为0，从而通过轮询来判断任务是否完成。这种方法虽然可行，但却有些繁琐。幸运的是，还有一种更好的方法：CompletionService。CompletionService将Executor和BlockingQueue的功能融合在一起。可以将Callable任务提交给他来执行，然后使用类似于队列操作的take和poll等方法来获得已完成的结果，而这些结果会在完成时将被封装为Future。ExecutorCompletionService实现了CompletionService，并将计算部分委托给一个Executor。</p>

<p>ExecutorCompletionService的实现非常简单。在构造函数中创建一个BlockingQueue来保存计算完成的结果。当计算完成时，调用FutureTask中的done方法。当提交任务时，任务将首先被包装为一个QueueingFuture，这是FutureTask的一个子类，然后再改写子类的done方法，并将结果放入BlockingQueue中。</p>

<h2 id="ch07">取消与关闭</h2>


<p>每个线程都有一个boolean类型的中断状态。当中断线程时，这个线程的中断状态将被设置为true。在Thread中包含了中断线程以及查询线程中断状态的方法。<code>interrupt</code>方法能中断目标线程，而<code>isInterrupted</code>方法能返回目标线程的中断状态。静态的<code>interrupted</code>方法将
清除当前线程的中断状态，并返回它之前的状态，这也是清除中断状态的唯一方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Thread</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">interrupt</span><span class="o">()</span> <span class="o">{...}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isInterrupted</span><span class="o">()</span> <span class="o">{...}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">interrupted</span><span class="o">()</span> <span class="o">{...}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>阻塞库方法，例如<code>Thread.sleep</code>和<code>Object.wait</code>等，都会检查线程何时中断，并且在发现中断时提前返回。它们在响应中断时执行的操作包括：清除中断状态，抛出InterruptedException，表示阻塞操作由于中断而提前结束。</p>

<p>对中断操作的正确理解是：它并不会真正地中断一个正在运行的线程，而只是发出中断请求，然后由线程在下一个合适的时刻中断自己。有些方法，例如wait、sleep、join等，都严格地处理这种请求，当它们收到中断请求或者在开始执行时发现某个已被设置好的中断状态时，将抛出一个异常。设计良好的方法可以完全忽略这种请求，只要它们能使调用代码对中断请求进行某种处理。设计糟糕的方法可能会屏蔽中断请求，从而导致调用栈中的其他代码无法对中断请求做出响应。</p>

<p>在使用静态的interrupted时应该小心，因为它会清除当前线程的中断状态。如果在调用interrupted时返回了true，那么除非你想屏蔽这个中断，否则必须对它进行处理——可以抛出InterruptedException，或者通过再次调用interrupt来恢复中断状态。</p>

<p>ExecutorService.submit将返回一个Future来描述任务。Future拥有一个cancel方法，该方法带有一个boolean类型的参数mayInterruptIfRunning，表示取消操作是否成功（这只是表示任务是否能够接收中断，而不是表示任务是否能检测并处理中断）。如果这个参数为false，那么意味着“如果任务还没有启动，就不要运行它”，这种方式应该用于那些不处理中断的任务中。</p>

<p>ExecutorService提供了两种关闭方法，使用shutdown正常关闭，以及使用shutdownNow强行关闭。在进行强行关闭时，shutdownNow首先关闭当前正在执行的任务，然后返回所有尚未启动的任务清单。</p>

<h2 id="ch08">线程池的使用</h2>


<p>线程池的基本大小Core Pool Size、最大大小Max Pool Size以及存活时间等因素共同负责线程的创建和销毁。基本大小就是线程池的目标大小，即在没有任务执行时线程池的大小，并且只有在工作队列满了的情况下才会创建超出这个数量的线程。线程池的最大大小表示可同时活动的线程数量的上限。如果某个线程的空闲时间超过了存活时间，那么将被标记为可回收的，并且当线程池的当前大小超过了基本大小时，这个线程将被终止。</p>

<p>ThreadPoolExecutor允许提供一个BlockingQueue来保存等待执行的任务。基本的任务排队方法有3种：无界队列、有界队列和同步移交（Synchronous Handoff）。</p>

<p>newFixedThreadPool和newSingleThreadPoolExecutor在默认情况下将使用一个无界的LinkedBlockingQueue。如果所有工作者线程都处于忙碌状态，那么任务将在队列中等待。如果任务持续快速的到达，并且超过了线程池处理他们的速度，那么队列将无限制的增加。</p>

<p>一种更稳妥的资源管理策略是使用有界队列，例如ArrayBlockingQueue、有界的LinkedBlockingQueue、PriorityBlockingQueue。</p>

<p>对于非常大的或者无界的线程池，可以通过使用SynchronousQueue来避免任务排队，以及直接将任务从生产者移交给工作者线程。SynchronousQueue不是一个真正的队列，而是一种在线程之间进行移交的机制。要将一个元素放入SynchronousQueue中，必须有另一个线程正在等待接收这个元素，如果没有线程正在等待，并且线程池的当先大小小于最大值，那么ThreadPoolExecutor将创建一个新的线程，否则根据饱和策略，这个任务将被拒绝。使用直接一脚将更高效，因为任务会直接移交给执行它的线程，而不是被首先放到队列中。只有当线程池是无界的或者可以拒绝任务时，SynchronousQueue才有实际价值。在newCachedThreadPool工厂方法中就使用了SynchronousQueue。</p>

<p>当有界队列被填满后，饱和策略开始发挥作用。JDK提供了几种不同的RejectedExecutionHandler实现，有AbortPolicy、CallerRunsPolicy、DiscardPolicy、DiscardOldestPolicy。</p>

<h2 id="ch09">图形用户界面应用程序</h2>


<h2 id="ch10">避免活跃性危险</h2>


<p>我们使用加锁机制来确保线程安全，单如果过度地使用加锁，则可能导致锁顺序死锁。同样，使用线程池和信号量来限制对资源的使用，单这些被限制的行为可能会导致资源死锁。</p>

<p>在制定锁的顺序时，可以使用System.identityHashCode方法，该方法将返回由Object.hashCode返回的值。在极少数的情况下，两个对象可能拥有相同的散列值，此时必须通过某种任意的方法来决定锁的顺序，而这可能又会重新引入死锁。为了避免这种情况，可以使用“加时赛”锁。在获得两个Account锁之前，首先获得这个“加时赛”锁，从而保证每次只有一个线程以未知的顺序获得这两个锁，从而消除了死锁发生的可能性。</p>

<p>当使用内置锁的时候，只要没有获取锁，就会永远等待下去，而显式锁则可以指定一个超时时限，在等待超过该时间后tryLock会返回一个失败信息。</p>

<p>当线程由于无法访问它所需要的资源而不能继续执行时，就发生了饥饿。</p>

<p>活锁时另一种形式的活跃性问题，该问题尽管不会阻塞线程，但也不能继续执行，因为线程将不断重复执行相同的操作，而且总会失败。活锁通常发生在处理事务消息的应用程序中：如果不能成功地处理某个信息，那么消息处理机制将回滚整个事务，并将它重新放到队列的开头。如果消息处理器在处理某种特定类型的消息时存在错误并导致它失败，那么每当这个消息从队列中取出并传递到存在错误的处理器时，都会发生事务回滚。由于这条消息又被放回到队列开头，隐藏处理器将被反复调用，并返回相同的结果（有时候也被称为毒丸消息）。虽然处理消息的线程并没有阻塞，但也无法继续执行下去。这种形式的活锁通常是由过度的错误恢复代码造成的，因为它错误地将不可修复的错误作为可修复的错误。要解决这种活锁问题，需要在重试机制中引入随机性。在并发应用程序中，通过等待随机长度的时间和回退可以有效地避免活锁的发生。</p>

<h2 id="ch11">性能和可伸缩性</h2>


<p>同步操作的性能开销包括多个方面。在synchronized和volatile提供的可见性保证中可能会使用一些特殊指令，即内存栅栏。内存栅栏可以刷新缓存，使缓存无效，刷新硬件的写缓冲，以及停止执行管道。内存栅栏可能同样会对性能带来间接地影响，因为他们将抑制一些编译器优化操作。在内存栅栏中，大多数操作都是不能被重排序的。</p>

<p>缩小所得范围，快进快出。</p>

<p>减小锁的粒度，锁分段。</p>

<h2 id="ch12">并发程序的测试</h2>


<h2 id="ch13">显式锁</h2>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Lock</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">lock</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">lockInterruptibly</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">InterruptedException</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">tryLock</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">tryLock</span><span class="o">(</span><span class="kt">long</span> <span class="n">timeout</span><span class="o">,</span> <span class="n">TimeUnit</span> <span class="n">unit</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">unlock</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Condition</span> <span class="nf">newCondition</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在大多数情况下：内置锁都能很好地工作，但在功能上存在一些局限性，例如，无法中断一个正在等待获得锁的线程，或者无法在请求获取一个锁时无限地等待下去。内置锁必须在等待获取所得代码块中释放，这就简化了编码工作，并且与异常处理操作实现了很好地交互，但却无法实现非阻塞结构的加锁规则。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Lock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ReentrantLock</span><span class="o">();</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// 更新对象状态</span>
</span><span class='line'>    <span class="c1">// 捕获异常，并在必要时恢复不变性条件</span>
</span><span class='line'><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ReentrantLock的构造函数中提供了两种公平性选择：创建一个非公平的锁（默认）或者一个公平的锁。在公平的锁上，线程将按照他们发出请求的顺序来获得锁，但在非公平的锁上，则允许插队：当一个线程请求非公平的锁时，如果在发出请求的同时该锁的状态变为可用，那么这个线程将跳过队列中所有的等待线程并获得这个锁。（在Semaphore中同样可以选择采用公平的或者非公平的获取顺序）非公平的ReentrantLock并不提倡插队行为，但无法防止某个线程在合适的时候进行插队。在公平的锁中，如果有另一个线程持有这个锁或者有其他线程在队列中等待这个锁，那么发出请求的线程将被放入队列中。在非公平的锁中，只有当锁被某个线程持有时，新发出请求的线程才会被放入队列中。</p>

<p>在大多数情况下，非公平锁的性能要高于公平锁的性能。</p>

<p>当持有锁的时间相对较长，或者请求锁的平均时间间隔较长，那么应该使用公平锁。在这些情况下，插队带来的吞吐量提升（当锁处于可用状态时，线程还处于被唤醒的过程中）则可能不会出现。</p>

<p>在一些内置锁无法满足需求的情况下，ReentrantLock可以作为一种高级工具。当需要一些高级功能时才应该使用ReentrantLock，这些功能包括：可定时的、可轮询的与可中断的锁获取操作，公平队列，以及非块结构的锁。否则，还是应该优先使用synchronized。</p>

<p>读写锁：一个资源可以被多个读操作访问，或者被一个写操作访问，但两者不能同时进行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ReadWriterLock</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Lock</span> <span class="nf">readLock</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Lock</span> <span class="nf">writeLock</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ReentrantReadWriteLock为这两种锁都提供了可重入的加锁语义。与ReentrantLock泪水，ReentrantReadWriteLock在构造时也可以选择是一个非公平的锁（默认）还是一个公平的锁。在公平锁上，等待时间最长的线程将优先获得锁。如果这个锁由读线程持有，而另一个线程请求写入锁，那么其他读线程都不能获得读取锁，直到写线程使用完并释放了写入锁。在非公平的锁中，线程获得访问许可的顺序是不确定的。写线程可以降级为读线程，但从读线程升级为写线程是不可以的（这样做会导致死锁）。与ReentrantLock类似的是，ReentrantReadWriteLock中的写入锁只能有唯一的所有者，并且只能由获得该锁的线程来释放。在Java5.0中，读取锁的行为更类似于一个Semaphore而不是锁，它只维护活跃的读线程的数量，而不考虑它们的标识。在Java6.0中修改了这个行为：记录那些线程已经获得了读者锁。做出这种修改的原因是：在Java5.0的锁实现中，无法区别一个线程是首次请求读取锁，还是可重入锁请求，从而可能使公平的读——写锁发生死锁。</p>

<p>当锁的持有时间较长并且大部分操作都不会修改被守护的资源时，那么读——写锁能提高并发性。</p>

<h2 id="ch14">构建自定义的同步工具</h2>


<p>要想正确地使用条件队列，关键是找出对象在哪个条件谓词上等待。条件谓词是使某个操作成为状态依赖操作的前提条件。在有界缓存中，只有当缓存不为空时，take方法才能执行，否则必须等待。对take方法来说，它的条件谓词就是“缓存不为空”，take方法在执行之前必须首先测试该条件谓词。同样，put方法的条件谓词是“缓存不满”。条件谓词是由类中各个状态变量构成的表达式。</p>

<p>当使用条件等待时（例如Object.wait或Condition.await）:</p>

<ul>
<li>通常都有一个条件谓词——包括一些对象状态的测试，线程在执行前必须首先通过这些测试。</li>
<li>在调用wait之前测试条件谓词，并且从wait中返回时再次进行测试</li>
<li>在一个循环中调用wait</li>
<li>确保使用与条件队列相关的锁来保护构成条件谓词的各个状态变量</li>
<li>当调用wait、notify、notifyAll等方法时，一定要持有与条件队列相关的锁</li>
<li>在检查条件谓词之后以及开始执行相应的操作之前，不要释放锁。</li>
</ul>


<p>在等待一个条件时，一定要确保在条件谓词变为真时通过某种方式发出通知。</p>

<p>在条件队列API中有两个发出通知的方法，即notify和notifyAll。无论调用哪一个，都必须持有与条件队列对象相关联的锁。在调用notify时，JVM会从这个条件队列上等待的多个线程中选择一个唤醒，而调用notifyAll则会唤醒所有在这个条件队列上等待的线程。由于在调用notify或notifyAll时必须持有条件队列对象的锁，而如果这些等待中线程此时不能重新获得锁，那么无法从wait返回，因此发出通知的线程应该尽快地释放锁，从而确保正在等待的线程尽可能快地解除阻塞。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConditionBoundedBuffer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">BUFFER_SIZE</span> <span class="o">=</span> <span class="mi">50</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kd">final</span> <span class="n">Lock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ReentrantLock</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">// 条件谓词 notFull (count &lt; items.length)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Condition</span> <span class="n">notFull</span> <span class="o">=</span> <span class="n">lock</span><span class="o">.</span><span class="na">newCondition</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">// 条件谓词 notEmpty (count &gt; 0)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Condition</span> <span class="n">notEmpty</span> <span class="o">=</span> <span class="n">lock</span><span class="o">.</span><span class="na">newCondition</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">T</span><span class="o">[]</span> <span class="n">items</span> <span class="o">=</span> <span class="o">(</span><span class="n">T</span><span class="o">[])</span><span class="k">new</span> <span class="n">Object</span><span class="o">[</span><span class="n">BUFFER_SIZE</span><span class="o">];</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">tail</span><span class="o">,</span><span class="n">head</span><span class="o">,</span><span class="n">count</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 阻塞并直到notFull</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">T</span> <span class="n">x</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">while</span> <span class="o">(</span><span class="n">count</span> <span class="o">==</span> <span class="n">items</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">notFull</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">items</span><span class="o">[</span><span class="n">tail</span><span class="o">]</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(++</span><span class="n">tail</span> <span class="o">==</span> <span class="n">items</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">tail</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="o">++</span><span class="n">count</span><span class="o">;</span>
</span><span class='line'>            <span class="n">notEmpty</span><span class="o">.</span><span class="na">signal</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 阻塞直到notEmpty</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">T</span> <span class="nf">take</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">while</span> <span class="o">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">notEmpty</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">T</span> <span class="n">x</span> <span class="o">=</span> <span class="n">items</span><span class="o">[</span><span class="n">head</span><span class="o">];</span>
</span><span class='line'>            <span class="n">items</span><span class="o">[</span><span class="n">head</span><span class="o">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(++</span><span class="n">head</span> <span class="o">==</span> <span class="n">items</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">head</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="o">--</span><span class="n">count</span><span class="o">;</span>
</span><span class='line'>            <span class="n">notFull</span><span class="o">.</span><span class="na">signal</span><span class="o">();</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在基于AQS构建的同步器类中，最基本的操作包括各种形式的获取操作和释放操作。获取操作时一种依赖状态的操作，通常会阻塞。当使用锁或信号量时，获取操作的含义就很直观，即获取的是锁或者许可，并且调用者可能会一直等待直到同步器类处于可被获取的状态。在使用CountDownLatch时，获取操作意味着“等待并直到闭锁到达结束状态”，而在使用FutureTask时，则意味着“等待并直到任务已经完成”。“释放”并不是一个可阻塞的操作，当执行“释放”操作时，所有在请求时被阻塞的线程都会开始执行。</p>

<p>如果一个类想成为状态依赖的类，那么它必须拥有一些状态。AQS负责管理同步器类中的状态，它管理了一个整数状态信息，可以通过getState，setState以及compareAndSetState等protected类型方法来进行操作。这个整数可以用于表示任意状态。例如，ReentrantLock用它来表示所有者线程已经重复获取该锁的次数，Semaphore用它来表示剩余的许可数量，FutureTask用它来表示任务的状态（尚未开始、正在运行、已完成以及已取消）。在同步器类中还可以自行管理一些额外的状态变量，例如，ReentrantLock保存了锁的当前所有者的信息，这样就能区分某个获取操作时重入的还是竞争的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">boolean</span> <span class="nf">acquire</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="err">当前状态不允许获取操作</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="err">需要阻塞获取请求</span><span class="o">){</span>
</span><span class='line'>            <span class="err">如果当前线程不在队列中，则将其插入队列</span>
</span><span class='line'>            <span class="err">阻塞当前线程</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="err">返回失败</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="err">可能更新同步器的状态</span>
</span><span class='line'>    <span class="err">如果线程位于队列中，则将其移出队列</span>
</span><span class='line'>    <span class="err">返回成功</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">release</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="err">更新同步器的状态</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="err">新的状态允许某个被阻塞的线程获取成功</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="err">解除队列中一个或多个线程的阻塞状态</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ReadWriteLock接口表示存在两个锁：一个读取锁和一个写入锁，但在基于AQS实现的ReentrantReadWriteLock中，单个AQS子类将同时管理读取加锁和写入加锁。ReentrantReadWriteLock使用了一个16位的状态来表示写入锁的计数，并且使用了另一个16位的状态来表示读取锁的计数。在读取锁上的操作将使用共享的获取方式与释放方法，在写入锁上的操作将使用独占的获取方法与释放方法。</p>

<p>在AQS内部维护一个等待线程队列，其中记录了某个线程请求的事独占访问还是共享访问。在ReentrantReadWriteLock中，当锁可用时，如果位于队列头部的线程执行写入操作，那么线程会得到这个锁，如果位于队列头部的线程执行读取访问，那么队列中在第一个写入线程之前的所有都将获取这个锁。</p>

<h2 id="ch15">原子变量与非阻塞同步机制</h2>


<p>原子变量提供了与volatile类型变量相同的内存语义，此外还支持原子的更新操作，从而使他们更适用于实现计数器、序列发生器和统计数据收集等，同时还能比基于锁的方法提供更高的可伸缩性。</p>

<p>CAS包含了3个操作数——需要读写的内存位置V、进行比较的值A和拟写入的新值B，当且仅当V的值等于A时，CAS才会通过原子方式用新值B来更新V的值，否则不会执行任何操作。无论位置V的值是否等于A，都将返回V原有的值。</p>

<p>当多个线程尝试使用CAS同时更新同一个变量时，只有一个线程能更新变量的值，而其他的线程都将失败。然而，失败的线程并不会被挂起（这与获取锁的情况不同：当获取锁失败时，线程将被挂起），而是被告知在这次竞争中失败，并可以再次尝试。由于一个线程在竞争CAS时失败不会阻塞，因此它可以决定是否重新尝试，或者执行一些恢复操作，也或者不执行任何操作。</p>

<p>CAS的主要缺点是，它将使调用者处理竞争问题（通过重试、回退、放弃），而在锁中能自动处理竞争问题（线程获取锁之前将一直阻塞）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConcurrentStack</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Node</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">final</span> <span class="n">E</span> <span class="n">item</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="nf">Node</span><span class="o">(</span><span class="n">E</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">item</span> <span class="o">=</span> <span class="n">item</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">AtomicReference</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;&gt;</span> <span class="n">top</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicReference</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span><span class="n">E</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Node</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">newHead</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;&gt;(</span><span class="n">item</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Node</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">oldHead</span><span class="o">;</span>
</span><span class='line'>        <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">oldHead</span> <span class="o">=</span> <span class="n">top</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>            <span class="n">newHead</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">oldHead</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">while</span> <span class="o">(!</span><span class="n">top</span><span class="o">.</span><span class="na">compareAndSet</span><span class="o">(</span><span class="n">oldHead</span><span class="o">,</span> <span class="n">newHead</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">E</span> <span class="nf">pop</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Node</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">oldHead</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Node</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">newHead</span><span class="o">;</span>
</span><span class='line'>        <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">oldHead</span> <span class="o">=</span> <span class="n">top</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">oldHead</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">newHead</span> <span class="o">=</span> <span class="n">oldHead</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">while</span> <span class="o">(!</span><span class="n">top</span><span class="o">.</span><span class="na">compareAndSet</span><span class="o">(</span><span class="n">oldHead</span><span class="o">,</span> <span class="n">newHead</span><span class="o">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">oldHead</span><span class="o">.</span><span class="na">item</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LinkedQueue</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Node</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">E</span> <span class="n">item</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">AtomicReference</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;&gt;</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="nf">Node</span><span class="o">(</span><span class="n">E</span> <span class="n">item</span><span class="o">,</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">item</span> <span class="o">=</span> <span class="n">item</span><span class="o">;</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicReference</span><span class="o">&lt;&gt;(</span><span class="n">next</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">dummy</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;(</span><span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">AtomicReference</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;&gt;</span> <span class="n">head</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicReference</span><span class="o">&lt;&gt;(</span><span class="n">dummy</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">AtomicReference</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;&gt;</span> <span class="n">tail</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicReference</span><span class="o">&lt;&gt;(</span><span class="n">dummy</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">put</span><span class="o">(</span><span class="n">E</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Node</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">newNode</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;&gt;(</span><span class="n">item</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Node</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">curTail</span> <span class="o">=</span> <span class="n">tail</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Node</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">curTailNext</span> <span class="o">=</span> <span class="n">curTail</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">curTail</span> <span class="o">==</span> <span class="n">tail</span><span class="o">.</span><span class="na">get</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">curTailNext</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">tail</span><span class="o">.</span><span class="na">compareAndSet</span><span class="o">(</span><span class="n">curTail</span><span class="o">,</span> <span class="n">curTailNext</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">curTail</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">compareAndSet</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="n">newNode</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">tail</span><span class="o">.</span><span class="na">compareAndSet</span><span class="o">(</span><span class="n">curTail</span><span class="o">,</span> <span class="n">newNode</span><span class="o">);</span>
</span><span class='line'>                        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>解决ABA问题，不是更新某个引用的值，而是更新两个值，包括一个引用和一个版本号。</p>

<p>在基于锁的算法中可能会发生活跃性故障。如果线程在持有锁时由于阻塞I/O，内存也缺失或其他延迟而导致推迟执行，那么很可能所有线程都不能继续执行下去。如果在某种算法中，一个线程的失败或挂起不会导致其他线程也失败或挂起，那么这种算法就被称为非阻塞算法。如果在算法的每个步骤中都存在某个线程能够执行下去，那么这种算法也被称为无锁算法。如果在算法中仅将CAS用于协调线程之间的操作，并且能正确地实现，那么它既是一种无阻塞算法又是一种无锁算法。</p>

<h2 id="ch16">Java内存模型</h2>


<p>Java内存模型是通过各种操作来定义的，包括对变量的读、写操作，监视器的加锁和释放操作，以及线程的启动和合并操作。JMM为程序中所有的操作定义了一个偏序关系，称之为Happens-Before。</p>

<p>Happens-Before的规则包括：</p>

<ul>
<li>程序顺序规则。如果程序中操作A在操作B之前，那么在线程中A操作将在B操作之前执行。</li>
<li>监视器锁规则。在监视器上的解锁操作必须在同一个监视器锁上的加锁操作之前执行。显式锁和内置锁在加锁和解锁等操作上有着相同的内存语义</li>
<li>volatile变量规则。对volatile变量的写入操作必须在对该变量的读操作之前执行。</li>
<li>线程启动规则。在线程上对Thread.start的调用必须在该线程中执行任何操作之前执行。</li>
<li>线程结束规则。线程中的任何操作都必须在其他线程检测到该线程已经结束之前执行，或者从Thread.join中成功返回，或者在调用Thread.isAlive时返回false</li>
<li>中断规则。当一个线程在另一个线程上调用interrupt时，必须在被中断线程检测到interrupt调用之前执行（通过抛出InterruptedException，或者调用isInterrupted和interrupted）。</li>
<li>终结器规则。对象的构造函数必须在启动该对象的终结器之前执行完成。</li>
<li>传递性。如果操作A在操作B之前执行，并且操作B在操作C之前执行，那么操作A必须在操作C之前执行。</li>
</ul>


<p>在类库中提供的其他Happens-Before排序包括：</p>

<ul>
<li>将一个元素放入一个线程安全容器的操作将在另一个线程从该容器中获取这个元素的操作之前执行</li>
<li>在CountDownLatch上的倒数操作将在线程从闭锁上的await方法中返回之前执行</li>
<li>释放Semaphore许可的操作将在从该Semaphore上获取一个许可之前执行。</li>
<li>Future表示的任务的所有操作将在从Future.get中返回之前执行。</li>
<li>向Executor提交一个Runnable或Callable的操作将在任务开始执行之前执行</li>
<li>一个线程到达CyclicBarrier或Exchanger的操作将在其他到达该栅栏或交换点的线程被释放之前执行。如果CyclicBarrier使用一个栅栏操作，那么到达栅栏的操作将在栅栏操作之前执行，而栅栏操作又会在线程从栅栏中释放之前执行。</li>
</ul>


<p>延迟初始化占位。JVM将推迟ResourceHolder的初始化操作，知道开始使用这个类时才初始化，并且由于通过一个静态初始化来初始化Resource，因此不需要额外的同步。当任何一个线程第一次调用getResource时，都会使ResourceHolder被加载和被初始化，此时静态初始化器将执行Resource的初始化操作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResourceFactory</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ResourceHolder</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="n">Resource</span> <span class="n">resource</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Resource</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Resource</span> <span class="nf">getResource</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">ResourceHolder</span><span class="o">.</span><span class="na">resource</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DoubleCheckedLocking</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">volatile</span> <span class="n">Resource</span> <span class="n">resource</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Resource</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">resource</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">synchronized</span><span class="o">(</span><span class="n">DoubleCheckedLocking</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span><span class="o">(</span><span class="n">resource</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">resource</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Resource</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">resource</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>DCL的真正问题在于：当在没有同步的情况下读取一个共享对象时，可能发生的最糟糕事情只是看到一个失效值（在这种情况下是一个空值），此时DCL方法将通过在持有锁的情况下再次尝试来避免这种风险。然而，实际情况远比这种情况糟糕——线程可能看到引用的当前值，但对象的状态值却是失效的，这意味着线程可以看到对象处于无效或错误的状态。在JMM的后续版本（Java5.0以及更高的版本）中，如果把resource声明为volatile类型，那么就能启用DCL，并且这种方式对性能的影响很小。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RecyclerView平滑滑动到指定位置]]></title>
    <link href="http://Solarex.github.io/blog/2018/05/30/recyclerview-smooth-scoll-to-position/"/>
    <updated>2018-05-30T14:33:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2018/05/30/recyclerview-smooth-scoll-to-position</id>
    <content type="html"><![CDATA[<p>最近在做一个周日历的新需求，其中有个要求是要RecyclerView平滑的滑动到指定位置，刚开始的时候我以为只要调用<code>smoothScrollToPosition</code>这个方法就可以了，测试的时候发现，<code>smoothScrollToPosition</code>只会对不可见的item有效，对于已经可见的item滑动没有效果，于是翻看了一下<code>smoothScrollToPosition</code>的源码，发现是调用了<code>LayoutManger</code>的<code>smoothScrollToPosition</code>方法。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// LinearLayoutManager</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">smoothScrollToPosition</span><span class="o">(</span><span class="n">RecyclerView</span> <span class="n">recyclerView</span><span class="o">,</span> <span class="n">RecyclerView</span><span class="o">.</span><span class="na">State</span> <span class="n">state</span><span class="o">,</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">LinearSmoothScroller</span> <span class="n">linearSmoothScroller</span> <span class="o">=</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">LinearSmoothScroller</span><span class="o">(</span><span class="n">recyclerView</span><span class="o">.</span><span class="na">getContext</span><span class="o">());</span>
</span><span class='line'>        <span class="n">linearSmoothScroller</span><span class="o">.</span><span class="na">setTargetPosition</span><span class="o">(</span><span class="n">position</span><span class="o">);</span>
</span><span class='line'>        <span class="n">startSmoothScroll</span><span class="o">(</span><span class="n">linearSmoothScroller</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>发现其实是实例化了一个<code>LinearSmoothScroller</code>，然后调用<code>startSmoothScroll</code>将<code>LinearSmoothScroller</code>传入进去。在<a href="https://stackoverflow.com/questions/31235183/recyclerview-how-to-smooth-scroll-to-top-of-item-on-a-certain-position/32819067">StackOverflow</a>上看到一个回答，复写了<code>getVerticalSnapPreference</code>方法，返回<code>SNAP_START</code>，由于我的<code>RecyclerView</code>是水平滑动的，于是复写了<code>getHorizontalSnapPreference</code>返回<code>SNAP_START</code>，测试发现对可见的item也有滑动效果了，可是会有闪烁的现象。</p>

<p>继续看<code>LinearSmoothScroller</code>源码，发现有<code>calculateSpeedPerPixel</code>方法，默认是用<code>25</code>去计算，复写这个方法，换一个大点的数去计算，发现滑动的速度慢下来了，闪烁的现象消失了。具体的代码可以参考<a href="https://github.com/flyfire/WeeklyCalendarViewDemo/blob/master/weeklycalendarview/src/main/java/com/solarexsoft/weeklycalendarview/WeeklyCalendarView.java">WeeklyCalendarView</a>。</p>

<p>问题虽然解决了，但是<code>RecyclerView</code>与各个插件的协同工作机制，<code>LayoutManager</code>,<code>SmoothScroller</code>原理没来的及分析，这个留待以后分析。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java代理]]></title>
    <link href="http://Solarex.github.io/blog/2018/04/26/java-proxy/"/>
    <updated>2018-04-26T10:07:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2018/04/26/java-proxy</id>
    <content type="html"><![CDATA[<p>Java代理有静态代理和动态代理之分。</p>

<h4>静态代理</h4>

<p>静态代理类图如下：</p>

<p><center><img src="http://Solarex.github.io/images/java-proxy-static.png" width=225 height=225/></center></p>


<p><code>ProxyObject</code>持有<code>RealObject</code>的引用，在<code>someOperation</code>方法中可以代理<code>RealObject</code>做操作。</p>

<!-- more -->


<h4>动态代理</h4>

<p>动态代理有Java的InvocationHandler实现方式和CGLib实现方式，我没用过CGLib，这里只讨论<code>InvocationHandler</code>实现方式。主要有三个步骤，代码示例可以在<a href="https://github.com/flyfire/YouDontKnowJava/tree/master/src/com/solarexsoft/test/proxy">github</a>上面看</p>

<ul>
<li>定义一个interface</li>
<li>定义一个InvocationHandler实现类，将要代理的对象传入InvocationHandler中，也即让InvocationHandler实现类代理传入的对象</li>
<li>调用Proxy.newProxyInstance</li>
</ul>


<p>动态代理的秘密主要是藏在<code>Proxy.newProxyInstance</code>当中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Object</span> <span class="nf">newProxyInstance</span><span class="o">(</span><span class="n">ClassLoader</span> <span class="n">loader</span><span class="o">,</span><span class="n">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">interfaces</span><span class="o">,</span><span class="n">InvocationHandler</span> <span class="n">h</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IllegalArgumentException</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * Look up or generate the designated proxy class.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">cl</span> <span class="o">=</span> <span class="n">getProxyClass0</span><span class="o">(</span><span class="n">loader</span><span class="o">,</span> <span class="n">intfs</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Constructor</span><span class="o">&lt;?&gt;</span> <span class="n">cons</span> <span class="o">=</span> <span class="n">cl</span><span class="o">.</span><span class="na">getConstructor</span><span class="o">(</span><span class="n">constructorParams</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">InvocationHandler</span> <span class="n">ih</span> <span class="o">=</span> <span class="n">h</span><span class="o">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cons</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="k">new</span> <span class="n">Object</span><span class="o">[]{</span><span class="n">h</span><span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看出它先调用<code>getProxyClass(loader, interfaces)</code>得到动态代理类，然后将<code>InvocationHandler</code>作为代理类构造函数入参新建代理类对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Returns the {@code java.lang.Class} object for a proxy class</span>
</span><span class='line'><span class="cm"> * given a class loader and an array of interfaces.  The proxy class</span>
</span><span class='line'><span class="cm"> * will be defined by the specified class loader and will implement</span>
</span><span class='line'><span class="cm"> * all of the supplied interfaces.  If any of the given interfaces</span>
</span><span class='line'><span class="cm"> * is non-public, the proxy class will be non-public. If a proxy class</span>
</span><span class='line'><span class="cm"> * for the same permutation of interfaces has already been defined by the</span>
</span><span class='line'><span class="cm"> * class loader, then the existing proxy class will be returned; otherwise,</span>
</span><span class='line'><span class="cm"> * a proxy class for those interfaces will be generated dynamically</span>
</span><span class='line'><span class="cm"> * and defined by the class loader.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;p&gt;There are several restrictions on the parameters that may be</span>
</span><span class='line'><span class="cm"> * passed to {@code Proxy.getProxyClass}:</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;ul&gt;</span>
</span><span class='line'><span class="cm"> * &lt;li&gt;All of the {@code Class} objects in the</span>
</span><span class='line'><span class="cm"> * {@code interfaces} array must represent interfaces, not</span>
</span><span class='line'><span class="cm"> * classes or primitive types.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;li&gt;No two elements in the {@code interfaces} array may</span>
</span><span class='line'><span class="cm"> * refer to identical {@code Class} objects.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;li&gt;All of the interface types must be visible by name through the</span>
</span><span class='line'><span class="cm"> * specified class loader.  In other words, for class loader</span>
</span><span class='line'><span class="cm"> * {@code cl} and every interface {@code i}, the following</span>
</span><span class='line'><span class="cm"> * expression must be true:</span>
</span><span class='line'><span class="cm"> * &lt;pre&gt;</span>
</span><span class='line'><span class="cm"> *     Class.forName(i.getName(), false, cl) == i</span>
</span><span class='line'><span class="cm"> * &lt;/pre&gt;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;li&gt;All non-public interfaces must be in the same package;</span>
</span><span class='line'><span class="cm"> * otherwise, it would not be possible for the proxy class to</span>
</span><span class='line'><span class="cm"> * implement all of the interfaces, regardless of what package it is</span>
</span><span class='line'><span class="cm"> * defined in.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;li&gt;For any set of member methods of the specified interfaces</span>
</span><span class='line'><span class="cm"> * that have the same signature:</span>
</span><span class='line'><span class="cm"> * &lt;ul&gt;</span>
</span><span class='line'><span class="cm"> * &lt;li&gt;If the return type of any of the methods is a primitive</span>
</span><span class='line'><span class="cm"> * type or void, then all of the methods must have that same</span>
</span><span class='line'><span class="cm"> * return type.</span>
</span><span class='line'><span class="cm"> * &lt;li&gt;Otherwise, one of the methods must have a return type that</span>
</span><span class='line'><span class="cm"> * is assignable to all of the return types of the rest of the</span>
</span><span class='line'><span class="cm"> * methods.</span>
</span><span class='line'><span class="cm"> * &lt;/ul&gt;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;li&gt;The resulting proxy class must not exceed any limits imposed</span>
</span><span class='line'><span class="cm"> * on classes by the virtual machine.  For example, the VM may limit</span>
</span><span class='line'><span class="cm"> * the number of interfaces that a class may implement to 65535; in</span>
</span><span class='line'><span class="cm"> * that case, the size of the {@code interfaces} array must not</span>
</span><span class='line'><span class="cm"> * exceed 65535.</span>
</span><span class='line'><span class="cm"> * &lt;/ul&gt;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;p&gt;If any of these restrictions are violated,</span>
</span><span class='line'><span class="cm"> * {@code Proxy.getProxyClass} will throw an</span>
</span><span class='line'><span class="cm"> * {@code IllegalArgumentException}.  If the {@code interfaces}</span>
</span><span class='line'><span class="cm"> * array argument or any of its elements are {@code null}, a</span>
</span><span class='line'><span class="cm"> * {@code NullPointerException} will be thrown.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;p&gt;Note that the order of the specified proxy interfaces is</span>
</span><span class='line'><span class="cm"> * significant: two requests for a proxy class with the same combination</span>
</span><span class='line'><span class="cm"> * of interfaces but in a different order will result in two distinct</span>
</span><span class='line'><span class="cm"> * proxy classes.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 得到代理类，不存在则动态生成</span>
</span><span class='line'><span class="cm"> * @param loader 代理类所属 ClassLoader</span>
</span><span class='line'><span class="cm"> * @param interfaces 代理类需要实现的接口</span>
</span><span class='line'><span class="cm"> * @return</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">getProxyClass</span><span class="o">(</span><span class="n">ClassLoader</span> <span class="n">loader</span><span class="o">,</span>
</span><span class='line'>                                 <span class="n">Class</span><span class="o">&lt;?&gt;...</span> <span class="n">interfaces</span><span class="o">)</span>
</span><span class='line'><span class="kd">throws</span> <span class="n">IllegalArgumentException</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">interfaces</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">65535</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;interface limit exceeded&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">// 代理类类对象</span>
</span><span class='line'><span class="n">Class</span> <span class="n">proxyClass</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* collect interface names to use as key for proxy class cache */</span>
</span><span class='line'><span class="n">String</span><span class="o">[]</span> <span class="n">interfaceNames</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">interfaces</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">Set</span> <span class="n">interfaceSet</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">();</span>       <span class="c1">// for detecting duplicates</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 入参 interfaces 检验，包含三部分</span>
</span><span class='line'><span class="cm"> * （1）是否在入参指定的 ClassLoader 内</span>
</span><span class='line'><span class="cm"> * （2）是否是 Interface</span>
</span><span class='line'><span class="cm"> * （3）interfaces 中是否有重复</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">interfaces</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">interfaceName</span> <span class="o">=</span> <span class="n">interfaces</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Class</span> <span class="n">interfaceClass</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">interfaceClass</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">interfaceName</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">loader</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClassNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">interfaceClass</span> <span class="o">!=</span> <span class="n">interfaces</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span>
</span><span class='line'>            <span class="n">interfaces</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="s">&quot; is not visible from class loader&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">interfaceClass</span><span class="o">.</span><span class="na">isInterface</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span>
</span><span class='line'>            <span class="n">interfaceClass</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; is not an interface&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">interfaceSet</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">interfaceClass</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span>
</span><span class='line'>            <span class="s">&quot;repeated interface: &quot;</span> <span class="o">+</span> <span class="n">interfaceClass</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">interfaceSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">interfaceClass</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">interfaceNames</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">interfaceName</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 以接口名对应的 List 作为缓存的 key</span>
</span><span class='line'><span class="n">Object</span> <span class="n">key</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">interfaceNames</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * loaderToCache 是个双层的 Map</span>
</span><span class='line'><span class="cm"> * 第一层 key 为 ClassLoader，第二层 key 为 上面的 List，value 为代理类的弱引用</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">Map</span> <span class="n">cache</span><span class="o">;</span>
</span><span class='line'><span class="kd">synchronized</span> <span class="o">(</span><span class="n">loaderToCache</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">cache</span> <span class="o">=</span> <span class="o">(</span><span class="n">Map</span><span class="o">)</span> <span class="n">loaderToCache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">loader</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">cache</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">cache</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">();</span>
</span><span class='line'>        <span class="n">loaderToCache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">loader</span><span class="o">,</span> <span class="n">cache</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 以上面的接口名对应的 List 为 key 查找代理类，如果结果为：</span>
</span><span class='line'><span class="cm"> * (1) 弱引用，表示代理类已经在缓存中</span>
</span><span class='line'><span class="cm"> * (2) pendingGenerationMarker 对象，表示代理类正在生成中，等待生成完成通知。</span>
</span><span class='line'><span class="cm"> * (3) null 表示不在缓存中且没有开始生成，添加标记到缓存中，继续生成代理类</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">synchronized</span> <span class="o">(</span><span class="n">cache</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="n">Reference</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">proxyClass</span> <span class="o">=</span> <span class="o">(</span><span class="n">Class</span><span class="o">)</span> <span class="o">((</span><span class="n">Reference</span><span class="o">)</span> <span class="n">value</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">proxyClass</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// proxy class already generated: return it</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">proxyClass</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="n">pendingGenerationMarker</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// proxy class being generated: wait for it</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">cache</span><span class="o">.</span><span class="na">wait</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">cache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">pendingGenerationMarker</span><span class="o">);</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">proxyPkg</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>     <span class="c1">// package to define proxy class in</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * 如果 interfaces 中存在非 public 的接口，则所有非 public 接口必须在同一包下面，后续生成的代理类也会在该包下面</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">interfaces</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">flags</span> <span class="o">=</span> <span class="n">interfaces</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">getModifiers</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">Modifier</span><span class="o">.</span><span class="na">isPublic</span><span class="o">(</span><span class="n">flags</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">interfaces</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">name</span><span class="o">.</span><span class="na">lastIndexOf</span><span class="o">(</span><span class="sc">&#39;.&#39;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">pkg</span> <span class="o">=</span> <span class="o">((</span><span class="n">n</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">?</span> <span class="s">&quot;&quot;</span> <span class="o">:</span> <span class="n">name</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="o">));</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">proxyPkg</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">proxyPkg</span> <span class="o">=</span> <span class="n">pkg</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(!</span><span class="n">pkg</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">proxyPkg</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span>
</span><span class='line'>                    <span class="s">&quot;non-public interfaces from different packages&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">proxyPkg</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>     <span class="c1">// if no non-public proxy interfaces,</span>
</span><span class='line'>        <span class="n">proxyPkg</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>          <span class="c1">// use the unnamed package</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="c1">// 得到代理类的类名，jdk 1.6 版本中缺少对这个生成类已经存在的处理。</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">num</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="n">nextUniqueNumberLock</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">num</span> <span class="o">=</span> <span class="n">nextUniqueNumber</span><span class="o">++;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">proxyName</span> <span class="o">=</span> <span class="n">proxyPkg</span> <span class="o">+</span> <span class="n">proxyClassNamePrefix</span> <span class="o">+</span> <span class="n">num</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 动态生成代理类的字节码</span>
</span><span class='line'>        <span class="c1">// 最终调用 sun.misc.ProxyGenerator.generateClassFile() 得到代理类相关信息写入 DataOutputStream 实现</span>
</span><span class='line'>        <span class="kt">byte</span><span class="o">[]</span> <span class="n">proxyClassFile</span> <span class="o">=</span> <span class="n">ProxyGenerator</span><span class="o">.</span><span class="na">generateProxyClass</span><span class="o">(</span>
</span><span class='line'>            <span class="n">proxyName</span><span class="o">,</span> <span class="n">interfaces</span><span class="o">);</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// native 层实现，虚拟机加载代理类并返回其类对象</span>
</span><span class='line'>            <span class="n">proxyClass</span> <span class="o">=</span> <span class="n">defineClass0</span><span class="o">(</span><span class="n">loader</span><span class="o">,</span> <span class="n">proxyName</span><span class="o">,</span>
</span><span class='line'>                <span class="n">proxyClassFile</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">proxyClassFile</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClassFormatError</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// add to set of all generated proxy classes, for isProxyClass</span>
</span><span class='line'>    <span class="n">proxyClasses</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">proxyClass</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// 代理类生成成功则保存到缓存，否则从缓存中删除，然后通知等待的调用</span>
</span><span class='line'>    <span class="kd">synchronized</span> <span class="o">(</span><span class="n">cache</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">proxyClass</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">cache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="k">new</span> <span class="n">WeakReference</span><span class="o">(</span><span class="n">proxyClass</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">cache</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">cache</span><span class="o">.</span><span class="na">notifyAll</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">proxyClass</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>函数主要包括三部分：</p>

<ul>
<li>入参 interfaces 检验，包含是否在入参指定的 ClassLoader 内、是否是 Interface、interfaces 中是否有重复
以接口名对应的 List 为 key 查找代理类，如果结果为：

<ul>
<li>弱引用，表示代理类已经在缓存中；</li>
<li>pendingGenerationMarker 对象，表示代理类正在生成中，等待生成完成返回；</li>
<li>null 表示不在缓存中且没有开始生成，添加标记到缓存中，继续生成代理类。</li>
</ul>
</li>
<li>如果代理类不存在调用ProxyGenerator.generateProxyClass(…)生成代理类并存入缓存，通知在等待的缓存。</li>
</ul>


<p>函数中几个注意的地方：</p>

<ul>
<li>代理类的缓存 key 为接口名对应的 List，接口顺序不同表示不同的 key 即不同的代理类。</li>
<li>如果 interfaces 中存在非 public 的接口，则所有非 public 接口必须在同一包下面，后续生成的代理类也会在该包下面。</li>
<li>代理类如果在 ClassLoader 中已经存在的情况没有做处理。</li>
</ul>


<p>可以开启 System Properties 的<code>sun.misc.ProxyGenerator.saveGeneratedFiles</code>开关，保存动态类到目的地址。</p>

<p>Java 1.7 的实现略有不同，通过<code>getProxyClass0(…)</code>函数实现，实现中调用代理类的缓存，判断代理类在缓存中是否已经存在，存在直接返回，不存在则调用proxyClassCache的valueFactory属性进行动态生成，valueFactory的apply函数与上面的<code>getProxyClass(…)</code>函数逻辑类似。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.lang.reflect.InvocationHandler</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.reflect.Method</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.reflect.Proxy</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.reflect.UndeclaredThrowableException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="err">$</span><span class="nc">Proxy0</span> <span class="kd">extends</span> <span class="n">Proxy</span>
</span><span class='line'>  <span class="kd">implements</span> <span class="n">Operate</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">Method</span> <span class="n">m4</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">Method</span> <span class="n">m1</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">Method</span> <span class="n">m5</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">Method</span> <span class="n">m0</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">Method</span> <span class="n">m3</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">Method</span> <span class="n">m2</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">$Proxy0</span><span class="o">(</span><span class="n">InvocationHandler</span> <span class="n">paramInvocationHandler</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">throws</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">(</span><span class="n">paramInvocationHandler</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">operateMethod1</span><span class="o">()</span>
</span><span class='line'>    <span class="kd">throws</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="n">h</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">m4</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">catch</span> <span class="o">(</span><span class="n">Error</span><span class="o">|</span><span class="n">RuntimeException</span> <span class="n">localError</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="n">localError</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">localThrowable</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">UndeclaredThrowableException</span><span class="o">(</span><span class="n">localThrowable</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">paramObject</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">throws</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">((</span><span class="n">Boolean</span><span class="o">)</span><span class="n">h</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">m1</span><span class="o">,</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="n">paramObject</span> <span class="o">})).</span><span class="na">booleanValue</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">catch</span> <span class="o">(</span><span class="n">Error</span><span class="o">|</span><span class="n">RuntimeException</span> <span class="n">localError</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="n">localError</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">localThrowable</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">UndeclaredThrowableException</span><span class="o">(</span><span class="n">localThrowable</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">operateMethod2</span><span class="o">()</span>
</span><span class='line'>    <span class="kd">throws</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="n">h</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">m5</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">catch</span> <span class="o">(</span><span class="n">Error</span><span class="o">|</span><span class="n">RuntimeException</span> <span class="n">localError</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="n">localError</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">localThrowable</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">UndeclaredThrowableException</span><span class="o">(</span><span class="n">localThrowable</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span>
</span><span class='line'>    <span class="kd">throws</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">((</span><span class="n">Integer</span><span class="o">)</span><span class="n">h</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">m0</span><span class="o">,</span> <span class="kc">null</span><span class="o">)).</span><span class="na">intValue</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">catch</span> <span class="o">(</span><span class="n">Error</span><span class="o">|</span><span class="n">RuntimeException</span> <span class="n">localError</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="n">localError</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">localThrowable</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">UndeclaredThrowableException</span><span class="o">(</span><span class="n">localThrowable</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">operateMethod3</span><span class="o">()</span>
</span><span class='line'>    <span class="kd">throws</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="n">h</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">m3</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">catch</span> <span class="o">(</span><span class="n">Error</span><span class="o">|</span><span class="n">RuntimeException</span> <span class="n">localError</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="n">localError</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">localThrowable</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">UndeclaredThrowableException</span><span class="o">(</span><span class="n">localThrowable</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span>
</span><span class='line'>    <span class="kd">throws</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="n">h</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">m2</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">catch</span> <span class="o">(</span><span class="n">Error</span><span class="o">|</span><span class="n">RuntimeException</span> <span class="n">localError</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="n">localError</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">localThrowable</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">UndeclaredThrowableException</span><span class="o">(</span><span class="n">localThrowable</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">static</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="n">m4</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;com.codekk.java.test.dynamicproxy.Operate&quot;</span><span class="o">).</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&quot;operateMethod1&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>      <span class="n">m1</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;java.lang.Object&quot;</span><span class="o">).</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&quot;equals&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[]</span> <span class="o">{</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;java.lang.Object&quot;</span><span class="o">)</span> <span class="o">});</span>
</span><span class='line'>      <span class="n">m5</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;com.codekk.java.test.dynamicproxy.Operate&quot;</span><span class="o">).</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&quot;operateMethod2&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>      <span class="n">m0</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;java.lang.Object&quot;</span><span class="o">).</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&quot;hashCode&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>      <span class="n">m3</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;com.codekk.java.test.dynamicproxy.Operate&quot;</span><span class="o">).</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&quot;operateMethod3&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>      <span class="n">m2</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;java.lang.Object&quot;</span><span class="o">).</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&quot;toString&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>      <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchMethodException</span> <span class="n">localNoSuchMethodException</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">NoSuchMethodError</span><span class="o">(</span><span class="n">localNoSuchMethodException</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">catch</span> <span class="o">(</span><span class="n">ClassNotFoundException</span> <span class="n">localClassNotFoundException</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">NoClassDefFoundError</span><span class="o">(</span><span class="n">localClassNotFoundException</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到实际上在底层生成了一个class的字节流，并且被ClassLoader加载了，生成了一个继承<code>Proxy</code>实现了接口的类，这个类以<code>InvocationHandler</code>为构造函数参数，所以实际上是在调用方法时，生成的<code>$Proxy0</code>对象代理了<code>InvocationHandler</code>实现对象，<code>InvocationHandler</code>对象代理了实际的对象。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[okhttp3源码分析]]></title>
    <link href="http://Solarex.github.io/blog/2018/04/23/okhttp3-source-analysis/"/>
    <updated>2018-04-23T16:43:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2018/04/23/okhttp3-source-analysis</id>
    <content type="html"><![CDATA[<p>周末在家断点调试了一下okhttp的执行流程，翻看了一下okhttp的源码，对okhttp有了一个大致的了解，在这记录一下。okhttp的精髓是<code>Dispatcher</code>和<code>Interceptor</code>，这里主要分析这两个。</p>

<h1>Dispatcher</h1>

<p><code>Dispatcher</code>是在<code>OkHttpClient.Builder</code>中实例化的，主要维护了<code>runningSyncCalls</code>，<code>runningAsyncCalls</code>,<code>readyAsyncCalls</code>三个队列。</p>

<p>同步的请求在执行<code>execute</code>方法时会将<code>RealCall</code>对象添加到<code>runningSyncCalls</code>队列中去，然后调用<code>getResponseWithInterceptorChain</code>去获取<code>Response</code>，不管成功失败，在<code>finally</code>块中都会执行<code>runningSyncCalls.remove(realcall)</code>将<code>RealCall</code>对象移除出队列。类似于一个生产者消费者系统。</p>

<p>异步的请求会将请求包装成一个<code>AsyncCall</code>，实际上就是一个Runnable，然后看<code>runningAsyncCalls</code>队列的长度是否小于<code>maxRequests</code>也即64并且同一个host的请求是否小于<code>maxRequestsPerHost</code>,如果满足则添加到<code>runningAsyncCalls</code>队列中去，并且调用线程池执行，否则添加到<code>readyAsyncCalls</code>队列中去。在<code>AsyncCall</code>这个<code>Runnable</code>的<code>run</code>方法中又会去调用<code>getResponseWithInterceptorChain</code>去获取<code>Response</code>，值得注意的是在<code>finally</code>块中，将<code>AsyncCall</code>移除出队列的时候会调用<code>promoteCalls</code>方法。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">enqueue</span><span class="o">(</span><span class="n">AsyncCall</span> <span class="n">call</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">runningAsyncCalls</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">maxRequests</span> <span class="o">&amp;&amp;</span> <span class="n">runningCallsForHost</span><span class="o">(</span><span class="n">call</span><span class="o">)</span> <span class="o">&lt;</span> <span class="n">maxRequestsPerHost</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">runningAsyncCalls</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">call</span><span class="o">);</span>
</span><span class='line'>      <span class="n">executorService</span><span class="o">().</span><span class="na">execute</span><span class="o">(</span><span class="n">call</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">readyAsyncCalls</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">call</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">finished</span><span class="o">(</span><span class="n">Deque</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">calls</span><span class="o">,</span> <span class="n">T</span> <span class="n">call</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">promoteCalls</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">runningCallsCount</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Runnable</span> <span class="n">idleCallback</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(!</span><span class="n">calls</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">call</span><span class="o">))</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">AssertionError</span><span class="o">(</span><span class="s">&quot;Call wasn&#39;t in-flight!&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">promoteCalls</span><span class="o">)</span> <span class="n">promoteCalls</span><span class="o">();</span>
</span><span class='line'>      <span class="n">runningCallsCount</span> <span class="o">=</span> <span class="n">runningCallsCount</span><span class="o">();</span>
</span><span class='line'>      <span class="n">idleCallback</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">idleCallback</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">runningCallsCount</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">idleCallback</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">idleCallback</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">promoteCalls</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">runningAsyncCalls</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="n">maxRequests</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span> <span class="c1">// Already running max capacity.</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">readyAsyncCalls</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="k">return</span><span class="o">;</span> <span class="c1">// No ready calls to promote.</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">Iterator</span><span class="o">&lt;</span><span class="n">AsyncCall</span><span class="o">&gt;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">readyAsyncCalls</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span> <span class="n">i</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">AsyncCall</span> <span class="n">call</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">runningCallsForHost</span><span class="o">(</span><span class="n">call</span><span class="o">)</span> <span class="o">&lt;</span> <span class="n">maxRequestsPerHost</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">i</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
</span><span class='line'>        <span class="n">runningAsyncCalls</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">call</span><span class="o">);</span>
</span><span class='line'>        <span class="n">executorService</span><span class="o">().</span><span class="na">execute</span><span class="o">(</span><span class="n">call</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">runningAsyncCalls</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="n">maxRequests</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span> <span class="c1">// Reached max capacity.</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在<code>promoteCalls</code>方法中会将<code>AsyncCall</code>从<code>readyAsyncCalls</code>队列中移除，添加到<code>runningAsyncCalls</code>中并调用线程池执行。</p>

<p>下面就开始<code>getResponseWithInterceptorChain</code>的分析了。</p>

<h1>Interceptor</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Response</span> <span class="nf">getResponseWithInterceptorChain</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Build a full stack of interceptors.</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Interceptor</span><span class="o">&gt;</span> <span class="n">interceptors</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="n">interceptors</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">client</span><span class="o">.</span><span class="na">interceptors</span><span class="o">());</span>
</span><span class='line'>    <span class="n">interceptors</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">retryAndFollowUpInterceptor</span><span class="o">);</span>
</span><span class='line'>    <span class="n">interceptors</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">BridgeInterceptor</span><span class="o">(</span><span class="n">client</span><span class="o">.</span><span class="na">cookieJar</span><span class="o">()));</span>
</span><span class='line'>    <span class="n">interceptors</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">CacheInterceptor</span><span class="o">(</span><span class="n">client</span><span class="o">.</span><span class="na">internalCache</span><span class="o">()));</span>
</span><span class='line'>    <span class="n">interceptors</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">ConnectInterceptor</span><span class="o">(</span><span class="n">client</span><span class="o">));</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">forWebSocket</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">interceptors</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">client</span><span class="o">.</span><span class="na">networkInterceptors</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">interceptors</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">CallServerInterceptor</span><span class="o">(</span><span class="n">forWebSocket</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Interceptor</span><span class="o">.</span><span class="na">Chain</span> <span class="n">chain</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RealInterceptorChain</span><span class="o">(</span><span class="n">interceptors</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span>
</span><span class='line'>        <span class="n">originalRequest</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="n">eventListener</span><span class="o">,</span> <span class="n">client</span><span class="o">.</span><span class="na">connectTimeoutMillis</span><span class="o">(),</span>
</span><span class='line'>        <span class="n">client</span><span class="o">.</span><span class="na">readTimeoutMillis</span><span class="o">(),</span> <span class="n">client</span><span class="o">.</span><span class="na">writeTimeoutMillis</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">chain</span><span class="o">.</span><span class="na">proceed</span><span class="o">(</span><span class="n">originalRequest</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到在<code>getResponseWithInterceptorChain</code>方法中只是把各种<code>Interceptor</code>添加到集合中去，并且实例化了一个<code>RealInterceptorChain</code>,调用了一下<code>chain.proceed</code>方法。</p>

<h2>RealInterceptorChain</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Call the next interceptor in the chain.</span>
</span><span class='line'><span class="n">RealInterceptorChain</span> <span class="n">next</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RealInterceptorChain</span><span class="o">(</span><span class="n">interceptors</span><span class="o">,</span> <span class="n">streamAllocation</span><span class="o">,</span> <span class="n">httpCodec</span><span class="o">,</span>
</span><span class='line'>    <span class="n">connection</span><span class="o">,</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">call</span><span class="o">,</span> <span class="n">eventListener</span><span class="o">,</span> <span class="n">connectTimeout</span><span class="o">,</span> <span class="n">readTimeout</span><span class="o">,</span>
</span><span class='line'>    <span class="n">writeTimeout</span><span class="o">);</span>
</span><span class='line'><span class="n">Interceptor</span> <span class="n">interceptor</span> <span class="o">=</span> <span class="n">interceptors</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class='line'><span class="n">Response</span> <span class="n">response</span> <span class="o">=</span> <span class="n">interceptor</span><span class="o">.</span><span class="na">intercept</span><span class="o">(</span><span class="n">next</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>在<code>proceed</code>方法中实例化一个新的<code>RealInterceptorChain</code>对象<code>next</code>,注意参数中<code>index+1</code>，取出<code>index</code>对应的<code>Interceptor</code>，调用<code>Interceptor</code>的<code>intercept</code>方法将<code>next</code>对象传入。实际上就是按照<code>Interceptor</code>添加的顺序去掉用各个<code>Interceptor</code>的<code>intercept</code>方法了。</p>

<p>先不管<code>OkHttpClient</code>Build的时候配置的<code>interceptors</code>和<code>networkInterceptors</code>，着重看看内置的几个<code>Interceptor</code>。</p>

<h2>RetryAndFollowUpInterceptor</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">StreamAllocation</span> <span class="n">streamAllocation</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StreamAllocation</span><span class="o">(</span><span class="n">client</span><span class="o">.</span><span class="na">connectionPool</span><span class="o">(),</span>
</span><span class='line'>    <span class="n">createAddress</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">url</span><span class="o">()),</span> <span class="n">call</span><span class="o">,</span> <span class="n">eventListener</span><span class="o">,</span> <span class="n">callStackTrace</span><span class="o">);</span>
</span><span class='line'><span class="k">this</span><span class="o">.</span><span class="na">streamAllocation</span> <span class="o">=</span> <span class="n">streamAllocation</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">followUpCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="n">Response</span> <span class="n">priorResponse</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">canceled</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">streamAllocation</span><span class="o">.</span><span class="na">release</span><span class="o">();</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">&quot;Canceled&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Response</span> <span class="n">response</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="n">releaseConnection</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">realChain</span><span class="o">.</span><span class="na">proceed</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">streamAllocation</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="n">releaseConnection</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RouteException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// The attempt to connect via a route failed. The request will not have been sent.</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">recover</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getLastConnectException</span><span class="o">(),</span> <span class="n">streamAllocation</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">request</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="n">e</span><span class="o">.</span><span class="na">getLastConnectException</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">releaseConnection</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// An attempt to communicate with a server failed. The request may have been sent.</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">requestSendStarted</span> <span class="o">=</span> <span class="o">!(</span><span class="n">e</span> <span class="k">instanceof</span> <span class="n">ConnectionShutdownException</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">recover</span><span class="o">(</span><span class="n">e</span><span class="o">,</span> <span class="n">streamAllocation</span><span class="o">,</span> <span class="n">requestSendStarted</span><span class="o">,</span> <span class="n">request</span><span class="o">))</span> <span class="k">throw</span> <span class="n">e</span><span class="o">;</span>
</span><span class='line'>    <span class="n">releaseConnection</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// We&#39;re throwing an unchecked exception. Release any resources.</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">releaseConnection</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">streamAllocation</span><span class="o">.</span><span class="na">streamFailed</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>      <span class="n">streamAllocation</span><span class="o">.</span><span class="na">release</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Attach the prior response if it exists. Such responses never have a body.</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">priorResponse</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">priorResponse</span><span class="o">(</span><span class="n">priorResponse</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">build</span><span class="o">())</span>
</span><span class='line'>        <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Request</span> <span class="n">followUp</span> <span class="o">=</span> <span class="n">followUpRequest</span><span class="o">(</span><span class="n">response</span><span class="o">,</span> <span class="n">streamAllocation</span><span class="o">.</span><span class="na">route</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">followUp</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">forWebSocket</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">streamAllocation</span><span class="o">.</span><span class="na">release</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">response</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">closeQuietly</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">body</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(++</span><span class="n">followUpCount</span> <span class="o">&gt;</span> <span class="n">MAX_FOLLOW_UPS</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">streamAllocation</span><span class="o">.</span><span class="na">release</span><span class="o">();</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">ProtocolException</span><span class="o">(</span><span class="s">&quot;Too many follow-up requests: &quot;</span> <span class="o">+</span> <span class="n">followUpCount</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">followUp</span><span class="o">.</span><span class="na">body</span><span class="o">()</span> <span class="k">instanceof</span> <span class="n">UnrepeatableRequestBody</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">streamAllocation</span><span class="o">.</span><span class="na">release</span><span class="o">();</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">HttpRetryException</span><span class="o">(</span><span class="s">&quot;Cannot retry streamed HTTP body&quot;</span><span class="o">,</span> <span class="n">response</span><span class="o">.</span><span class="na">code</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(!</span><span class="n">sameConnection</span><span class="o">(</span><span class="n">response</span><span class="o">,</span> <span class="n">followUp</span><span class="o">.</span><span class="na">url</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">streamAllocation</span><span class="o">.</span><span class="na">release</span><span class="o">();</span>
</span><span class='line'>    <span class="n">streamAllocation</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StreamAllocation</span><span class="o">(</span><span class="n">client</span><span class="o">.</span><span class="na">connectionPool</span><span class="o">(),</span>
</span><span class='line'>        <span class="n">createAddress</span><span class="o">(</span><span class="n">followUp</span><span class="o">.</span><span class="na">url</span><span class="o">()),</span> <span class="n">call</span><span class="o">,</span> <span class="n">eventListener</span><span class="o">,</span> <span class="n">callStackTrace</span><span class="o">);</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">streamAllocation</span> <span class="o">=</span> <span class="n">streamAllocation</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">streamAllocation</span><span class="o">.</span><span class="na">codec</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;Closing the body of &quot;</span> <span class="o">+</span> <span class="n">response</span>
</span><span class='line'>        <span class="o">+</span> <span class="s">&quot; didn&#39;t close its backing stream. Bad interceptor?&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">request</span> <span class="o">=</span> <span class="n">followUp</span><span class="o">;</span>
</span><span class='line'>  <span class="n">priorResponse</span> <span class="o">=</span> <span class="n">response</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>主要实例化了一个<code>StreamAllocation</code>对象，并调用了<code>chain.proceed</code>方法。对连接的重定向也做了处理。<code>chain.proceed</code>方法会接着调用下一个<code>Interceptor</code>的<code>intercept</code>方法。</p>

<h2>BridgeIntercepto</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span> <span class="kd">public</span> <span class="n">Response</span> <span class="n">intercept</span><span class="o">(</span><span class="n">Chain</span> <span class="n">chain</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'><span class="n">Request</span> <span class="n">userRequest</span> <span class="o">=</span> <span class="n">chain</span><span class="o">.</span><span class="na">request</span><span class="o">();</span>
</span><span class='line'><span class="n">Request</span><span class="o">.</span><span class="na">Builder</span> <span class="n">requestBuilder</span> <span class="o">=</span> <span class="n">userRequest</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">RequestBody</span> <span class="n">body</span> <span class="o">=</span> <span class="n">userRequest</span><span class="o">.</span><span class="na">body</span><span class="o">();</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">body</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">MediaType</span> <span class="n">contentType</span> <span class="o">=</span> <span class="n">body</span><span class="o">.</span><span class="na">contentType</span><span class="o">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">contentType</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">requestBuilder</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;Content-Type&quot;</span><span class="o">,</span> <span class="n">contentType</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">long</span> <span class="n">contentLength</span> <span class="o">=</span> <span class="n">body</span><span class="o">.</span><span class="na">contentLength</span><span class="o">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">contentLength</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">requestBuilder</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;Content-Length&quot;</span><span class="o">,</span> <span class="n">Long</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">contentLength</span><span class="o">));</span>
</span><span class='line'>    <span class="n">requestBuilder</span><span class="o">.</span><span class="na">removeHeader</span><span class="o">(</span><span class="s">&quot;Transfer-Encoding&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">requestBuilder</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;Transfer-Encoding&quot;</span><span class="o">,</span> <span class="s">&quot;chunked&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">requestBuilder</span><span class="o">.</span><span class="na">removeHeader</span><span class="o">(</span><span class="s">&quot;Content-Length&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">userRequest</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;Host&quot;</span><span class="o">)</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">requestBuilder</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;Host&quot;</span><span class="o">,</span> <span class="n">hostHeader</span><span class="o">(</span><span class="n">userRequest</span><span class="o">.</span><span class="na">url</span><span class="o">(),</span> <span class="kc">false</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">userRequest</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;Connection&quot;</span><span class="o">)</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">requestBuilder</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;Connection&quot;</span><span class="o">,</span> <span class="s">&quot;Keep-Alive&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If we add an &quot;Accept-Encoding: gzip&quot; header field we&#39;re responsible for also decompressing</span>
</span><span class='line'><span class="c1">// the transfer stream.</span>
</span><span class='line'><span class="kt">boolean</span> <span class="n">transparentGzip</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">userRequest</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;Accept-Encoding&quot;</span><span class="o">)</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">userRequest</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;Range&quot;</span><span class="o">)</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">transparentGzip</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="n">requestBuilder</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;Accept-Encoding&quot;</span><span class="o">,</span> <span class="s">&quot;gzip&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Cookie</span><span class="o">&gt;</span> <span class="n">cookies</span> <span class="o">=</span> <span class="n">cookieJar</span><span class="o">.</span><span class="na">loadForRequest</span><span class="o">(</span><span class="n">userRequest</span><span class="o">.</span><span class="na">url</span><span class="o">());</span>
</span><span class='line'><span class="k">if</span> <span class="o">(!</span><span class="n">cookies</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">requestBuilder</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;Cookie&quot;</span><span class="o">,</span> <span class="n">cookieHeader</span><span class="o">(</span><span class="n">cookies</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">userRequest</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;User-Agent&quot;</span><span class="o">)</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">requestBuilder</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;User-Agent&quot;</span><span class="o">,</span> <span class="n">Version</span><span class="o">.</span><span class="na">userAgent</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Response</span> <span class="n">networkResponse</span> <span class="o">=</span> <span class="n">chain</span><span class="o">.</span><span class="na">proceed</span><span class="o">(</span><span class="n">requestBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">HttpHeaders</span><span class="o">.</span><span class="na">receiveHeaders</span><span class="o">(</span><span class="n">cookieJar</span><span class="o">,</span> <span class="n">userRequest</span><span class="o">.</span><span class="na">url</span><span class="o">(),</span> <span class="n">networkResponse</span><span class="o">.</span><span class="na">headers</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">Response</span><span class="o">.</span><span class="na">Builder</span> <span class="n">responseBuilder</span> <span class="o">=</span> <span class="n">networkResponse</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">request</span><span class="o">(</span><span class="n">userRequest</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">transparentGzip</span>
</span><span class='line'>    <span class="o">&amp;&amp;</span> <span class="s">&quot;gzip&quot;</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">networkResponse</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;Content-Encoding&quot;</span><span class="o">))</span>
</span><span class='line'>    <span class="o">&amp;&amp;</span> <span class="n">HttpHeaders</span><span class="o">.</span><span class="na">hasBody</span><span class="o">(</span><span class="n">networkResponse</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">GzipSource</span> <span class="n">responseBody</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GzipSource</span><span class="o">(</span><span class="n">networkResponse</span><span class="o">.</span><span class="na">body</span><span class="o">().</span><span class="na">source</span><span class="o">());</span>
</span><span class='line'>  <span class="n">Headers</span> <span class="n">strippedHeaders</span> <span class="o">=</span> <span class="n">networkResponse</span><span class="o">.</span><span class="na">headers</span><span class="o">().</span><span class="na">newBuilder</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.</span><span class="na">removeAll</span><span class="o">(</span><span class="s">&quot;Content-Encoding&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">removeAll</span><span class="o">(</span><span class="s">&quot;Content-Length&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>  <span class="n">responseBuilder</span><span class="o">.</span><span class="na">headers</span><span class="o">(</span><span class="n">strippedHeaders</span><span class="o">);</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">contentType</span> <span class="o">=</span> <span class="n">networkResponse</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;Content-Type&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">responseBuilder</span><span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="k">new</span> <span class="n">RealResponseBody</span><span class="o">(</span><span class="n">contentType</span><span class="o">,</span> <span class="o">-</span><span class="mi">1L</span><span class="o">,</span> <span class="n">Okio</span><span class="o">.</span><span class="na">buffer</span><span class="o">(</span><span class="n">responseBody</span><span class="o">)));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">responseBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>BridgeIntercepto</code>主要是给<code>Request</code>添加一些头部信息，如<code>connection:keep-alive</code>,<code>accept-encoding:gzip</code>等等，对返回回来的<code>Response</code>如果是经过<code>gzip</code>压缩的，会进行一个解压缩。</p>

<h2>CacheInterceptor</h2>

<p><code>CacheInterceptor</code>new的时候将<code>client.internalCache()</code>作为参数传递了过来。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="n">InternalCache</span> <span class="nf">internalCache</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">cache</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">cache</span><span class="o">.</span><span class="na">internalCache</span> <span class="o">:</span> <span class="n">internalCache</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面主要看下<code>Cache</code>类</p>

<h3>Cache</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="n">Cache</span><span class="o">(</span><span class="n">File</span> <span class="n">directory</span><span class="o">,</span> <span class="kt">long</span> <span class="n">maxSize</span><span class="o">,</span> <span class="n">FileSystem</span> <span class="n">fileSystem</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">cache</span> <span class="o">=</span> <span class="n">DiskLruCache</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">fileSystem</span><span class="o">,</span> <span class="n">directory</span><span class="o">,</span> <span class="n">VERSION</span><span class="o">,</span> <span class="n">ENTRY_COUNT</span><span class="o">,</span> <span class="n">maxSize</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到<code>Cache</code>底层实际上是使用了<code>DiskLruCache</code>。</p>

<p>主要看下<code>get</code>和<code>put</code>方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Nullable</span> <span class="n">Response</span> <span class="n">get</span><span class="o">(</span><span class="n">Request</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">key</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">url</span><span class="o">());</span>
</span><span class='line'><span class="n">DiskLruCache</span><span class="o">.</span><span class="na">Snapshot</span> <span class="n">snapshot</span><span class="o">;</span>
</span><span class='line'><span class="n">Entry</span> <span class="n">entry</span><span class="o">;</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">snapshot</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">snapshot</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// Give up because the cache cannot be read.</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">entry</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Entry</span><span class="o">(</span><span class="n">snapshot</span><span class="o">.</span><span class="na">getSource</span><span class="o">(</span><span class="n">ENTRY_METADATA</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Util</span><span class="o">.</span><span class="na">closeQuietly</span><span class="o">(</span><span class="n">snapshot</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Response</span> <span class="n">response</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">response</span><span class="o">(</span><span class="n">snapshot</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(!</span><span class="n">entry</span><span class="o">.</span><span class="na">matches</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Util</span><span class="o">.</span><span class="na">closeQuietly</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">body</span><span class="o">());</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">response</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Nullable</span> <span class="n">CacheRequest</span> <span class="n">put</span><span class="o">(</span><span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">String</span> <span class="n">requestMethod</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">request</span><span class="o">().</span><span class="na">method</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">invalidatesCache</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">request</span><span class="o">().</span><span class="na">method</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">remove</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">request</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">ignored</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// The cache cannot be written.</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">if</span> <span class="o">(!</span><span class="n">requestMethod</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;GET&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// Don&#39;t cache non-GET responses. We&#39;re technically allowed to cache</span>
</span><span class='line'>  <span class="c1">// HEAD requests and some POST requests, but the complexity of doing</span>
</span><span class='line'>  <span class="c1">// so is high and the benefit is low.</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">HttpHeaders</span><span class="o">.</span><span class="na">hasVaryAll</span><span class="o">(</span><span class="n">response</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">// 注意这里</span>
</span><span class='line'><span class="n">Entry</span> <span class="n">entry</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Entry</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
</span><span class='line'><span class="n">DiskLruCache</span><span class="o">.</span><span class="na">Editor</span> <span class="n">editor</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">editor</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="na">edit</span><span class="o">(</span><span class="n">key</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">request</span><span class="o">().</span><span class="na">url</span><span class="o">()));</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">editor</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">entry</span><span class="o">.</span><span class="na">writeTo</span><span class="o">(</span><span class="n">editor</span><span class="o">);</span>
</span><span class='line'>  <span class="c1">//注意这里</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nf">CacheRequestImpl</span><span class="o">(</span><span class="n">editor</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">abortQuietly</span><span class="o">(</span><span class="n">editor</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Entry</span><span class="o">(</span><span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">url</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">request</span><span class="o">().</span><span class="na">url</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">varyHeaders</span> <span class="o">=</span> <span class="n">HttpHeaders</span><span class="o">.</span><span class="na">varyHeaders</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">requestMethod</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">request</span><span class="o">().</span><span class="na">method</span><span class="o">();</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">protocol</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">protocol</span><span class="o">();</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">code</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">code</span><span class="o">();</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">message</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">message</span><span class="o">();</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">responseHeaders</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">headers</span><span class="o">();</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">handshake</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">handshake</span><span class="o">();</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">sentRequestMillis</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">sentRequestAtMillis</span><span class="o">();</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">receivedResponseMillis</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">receivedResponseAtMillis</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">writeTo</span><span class="o">(</span><span class="n">DiskLruCache</span><span class="o">.</span><span class="na">Editor</span> <span class="n">editor</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">BufferedSink</span> <span class="n">sink</span> <span class="o">=</span> <span class="n">Okio</span><span class="o">.</span><span class="na">buffer</span><span class="o">(</span><span class="n">editor</span><span class="o">.</span><span class="na">newSink</span><span class="o">(</span><span class="n">ENTRY_METADATA</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sink</span><span class="o">.</span><span class="na">writeUtf8</span><span class="o">(</span><span class="n">url</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">writeByte</span><span class="o">(</span><span class="sc">&#39;\n&#39;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">sink</span><span class="o">.</span><span class="na">writeUtf8</span><span class="o">(</span><span class="n">requestMethod</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">writeByte</span><span class="o">(</span><span class="sc">&#39;\n&#39;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">sink</span><span class="o">.</span><span class="na">writeDecimalLong</span><span class="o">(</span><span class="n">varyHeaders</span><span class="o">.</span><span class="na">size</span><span class="o">())</span>
</span><span class='line'>      <span class="o">.</span><span class="na">writeByte</span><span class="o">(</span><span class="sc">&#39;\n&#39;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">size</span> <span class="o">=</span> <span class="n">varyHeaders</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">sink</span><span class="o">.</span><span class="na">writeUtf8</span><span class="o">(</span><span class="n">varyHeaders</span><span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="n">i</span><span class="o">))</span>
</span><span class='line'>        <span class="o">.</span><span class="na">writeUtf8</span><span class="o">(</span><span class="s">&quot;: &quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">writeUtf8</span><span class="o">(</span><span class="n">varyHeaders</span><span class="o">.</span><span class="na">value</span><span class="o">(</span><span class="n">i</span><span class="o">))</span>
</span><span class='line'>        <span class="o">.</span><span class="na">writeByte</span><span class="o">(</span><span class="sc">&#39;\n&#39;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sink</span><span class="o">.</span><span class="na">writeUtf8</span><span class="o">(</span><span class="k">new</span> <span class="n">StatusLine</span><span class="o">(</span><span class="n">protocol</span><span class="o">,</span> <span class="n">code</span><span class="o">,</span> <span class="n">message</span><span class="o">).</span><span class="na">toString</span><span class="o">())</span>
</span><span class='line'>      <span class="o">.</span><span class="na">writeByte</span><span class="o">(</span><span class="sc">&#39;\n&#39;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">sink</span><span class="o">.</span><span class="na">writeDecimalLong</span><span class="o">(</span><span class="n">responseHeaders</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">+</span> <span class="mi">2</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">writeByte</span><span class="o">(</span><span class="sc">&#39;\n&#39;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">size</span> <span class="o">=</span> <span class="n">responseHeaders</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">sink</span><span class="o">.</span><span class="na">writeUtf8</span><span class="o">(</span><span class="n">responseHeaders</span><span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="n">i</span><span class="o">))</span>
</span><span class='line'>        <span class="o">.</span><span class="na">writeUtf8</span><span class="o">(</span><span class="s">&quot;: &quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">writeUtf8</span><span class="o">(</span><span class="n">responseHeaders</span><span class="o">.</span><span class="na">value</span><span class="o">(</span><span class="n">i</span><span class="o">))</span>
</span><span class='line'>        <span class="o">.</span><span class="na">writeByte</span><span class="o">(</span><span class="sc">&#39;\n&#39;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">sink</span><span class="o">.</span><span class="na">writeUtf8</span><span class="o">(</span><span class="n">SENT_MILLIS</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">writeUtf8</span><span class="o">(</span><span class="s">&quot;: &quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">writeDecimalLong</span><span class="o">(</span><span class="n">sentRequestMillis</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">writeByte</span><span class="o">(</span><span class="sc">&#39;\n&#39;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">sink</span><span class="o">.</span><span class="na">writeUtf8</span><span class="o">(</span><span class="n">RECEIVED_MILLIS</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">writeUtf8</span><span class="o">(</span><span class="s">&quot;: &quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">writeDecimalLong</span><span class="o">(</span><span class="n">receivedResponseMillis</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">writeByte</span><span class="o">(</span><span class="sc">&#39;\n&#39;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">isHttps</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">sink</span><span class="o">.</span><span class="na">writeByte</span><span class="o">(</span><span class="sc">&#39;\n&#39;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">sink</span><span class="o">.</span><span class="na">writeUtf8</span><span class="o">(</span><span class="n">handshake</span><span class="o">.</span><span class="na">cipherSuite</span><span class="o">().</span><span class="na">javaName</span><span class="o">())</span>
</span><span class='line'>        <span class="o">.</span><span class="na">writeByte</span><span class="o">(</span><span class="sc">&#39;\n&#39;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">writeCertList</span><span class="o">(</span><span class="n">sink</span><span class="o">,</span> <span class="n">handshake</span><span class="o">.</span><span class="na">peerCertificates</span><span class="o">());</span>
</span><span class='line'>    <span class="n">writeCertList</span><span class="o">(</span><span class="n">sink</span><span class="o">,</span> <span class="n">handshake</span><span class="o">.</span><span class="na">localCertificates</span><span class="o">());</span>
</span><span class='line'>    <span class="n">sink</span><span class="o">.</span><span class="na">writeUtf8</span><span class="o">(</span><span class="n">handshake</span><span class="o">.</span><span class="na">tlsVersion</span><span class="o">().</span><span class="na">javaName</span><span class="o">()).</span><span class="na">writeByte</span><span class="o">(</span><span class="sc">&#39;\n&#39;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">sink</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在<code>Cache</code>的<code>put</code>方法中<code>Entry</code>写入到<code>DiskLruCache</code>的只是请求头，url，响应头之类的信息，同时返回了一个<code>CacheRequestImpl(editor)</code>对象，Find Usage之后发现是在<code>CacheInterceptor</code>的<code>intercept</code>中被调用的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span> <span class="kd">public</span> <span class="n">Response</span> <span class="n">intercept</span><span class="o">(</span><span class="n">Chain</span> <span class="n">chain</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'><span class="n">Response</span> <span class="n">cacheCandidate</span> <span class="o">=</span> <span class="n">cache</span> <span class="o">!=</span> <span class="kc">null</span>
</span><span class='line'>    <span class="o">?</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">chain</span><span class="o">.</span><span class="na">request</span><span class="o">())</span>
</span><span class='line'>    <span class="o">:</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">long</span> <span class="n">now</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">CacheStrategy</span> <span class="n">strategy</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CacheStrategy</span><span class="o">.</span><span class="na">Factory</span><span class="o">(</span><span class="n">now</span><span class="o">,</span> <span class="n">chain</span><span class="o">.</span><span class="na">request</span><span class="o">(),</span> <span class="n">cacheCandidate</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'><span class="n">Request</span> <span class="n">networkRequest</span> <span class="o">=</span> <span class="n">strategy</span><span class="o">.</span><span class="na">networkRequest</span><span class="o">;</span>
</span><span class='line'><span class="n">Response</span> <span class="n">cacheResponse</span> <span class="o">=</span> <span class="n">strategy</span><span class="o">.</span><span class="na">cacheResponse</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">cache</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">cache</span><span class="o">.</span><span class="na">trackResponse</span><span class="o">(</span><span class="n">strategy</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">cacheCandidate</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">cacheResponse</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">closeQuietly</span><span class="o">(</span><span class="n">cacheCandidate</span><span class="o">.</span><span class="na">body</span><span class="o">());</span> <span class="c1">// The cache candidate wasn&#39;t applicable. Close it.</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If we&#39;re forbidden from using the network and the cache is insufficient, fail.</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">networkRequest</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">cacheResponse</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="n">Response</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.</span><span class="na">request</span><span class="o">(</span><span class="n">chain</span><span class="o">.</span><span class="na">request</span><span class="o">())</span>
</span><span class='line'>      <span class="o">.</span><span class="na">protocol</span><span class="o">(</span><span class="n">Protocol</span><span class="o">.</span><span class="na">HTTP_1_1</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">code</span><span class="o">(</span><span class="mi">504</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">message</span><span class="o">(</span><span class="s">&quot;Unsatisfiable Request (only-if-cached)&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="n">Util</span><span class="o">.</span><span class="na">EMPTY_RESPONSE</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">sentRequestAtMillis</span><span class="o">(-</span><span class="mi">1L</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">receivedResponseAtMillis</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">())</span>
</span><span class='line'>      <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If we don&#39;t need the network, we&#39;re done.</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">networkRequest</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">cacheResponse</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.</span><span class="na">cacheResponse</span><span class="o">(</span><span class="n">stripBody</span><span class="o">(</span><span class="n">cacheResponse</span><span class="o">))</span>
</span><span class='line'>      <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Response</span> <span class="n">networkResponse</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">networkResponse</span> <span class="o">=</span> <span class="n">chain</span><span class="o">.</span><span class="na">proceed</span><span class="o">(</span><span class="n">networkRequest</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// If we&#39;re crashing on I/O or otherwise, don&#39;t leak the cache body.</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">networkResponse</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">cacheCandidate</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">closeQuietly</span><span class="o">(</span><span class="n">cacheCandidate</span><span class="o">.</span><span class="na">body</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If we have a cache response too, then we&#39;re doing a conditional get.</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">cacheResponse</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">networkResponse</span><span class="o">.</span><span class="na">code</span><span class="o">()</span> <span class="o">==</span> <span class="n">HTTP_NOT_MODIFIED</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Response</span> <span class="n">response</span> <span class="o">=</span> <span class="n">cacheResponse</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">headers</span><span class="o">(</span><span class="n">combine</span><span class="o">(</span><span class="n">cacheResponse</span><span class="o">.</span><span class="na">headers</span><span class="o">(),</span> <span class="n">networkResponse</span><span class="o">.</span><span class="na">headers</span><span class="o">()))</span>
</span><span class='line'>        <span class="o">.</span><span class="na">sentRequestAtMillis</span><span class="o">(</span><span class="n">networkResponse</span><span class="o">.</span><span class="na">sentRequestAtMillis</span><span class="o">())</span>
</span><span class='line'>        <span class="o">.</span><span class="na">receivedResponseAtMillis</span><span class="o">(</span><span class="n">networkResponse</span><span class="o">.</span><span class="na">receivedResponseAtMillis</span><span class="o">())</span>
</span><span class='line'>        <span class="o">.</span><span class="na">cacheResponse</span><span class="o">(</span><span class="n">stripBody</span><span class="o">(</span><span class="n">cacheResponse</span><span class="o">))</span>
</span><span class='line'>        <span class="o">.</span><span class="na">networkResponse</span><span class="o">(</span><span class="n">stripBody</span><span class="o">(</span><span class="n">networkResponse</span><span class="o">))</span>
</span><span class='line'>        <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>    <span class="n">networkResponse</span><span class="o">.</span><span class="na">body</span><span class="o">().</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Update the cache after combining headers but before stripping the</span>
</span><span class='line'>    <span class="c1">// Content-Encoding header (as performed by initContentStream()).</span>
</span><span class='line'>    <span class="n">cache</span><span class="o">.</span><span class="na">trackConditionalCacheHit</span><span class="o">();</span>
</span><span class='line'>    <span class="n">cache</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">cacheResponse</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">response</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">closeQuietly</span><span class="o">(</span><span class="n">cacheResponse</span><span class="o">.</span><span class="na">body</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Response</span> <span class="n">response</span> <span class="o">=</span> <span class="n">networkResponse</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">cacheResponse</span><span class="o">(</span><span class="n">stripBody</span><span class="o">(</span><span class="n">cacheResponse</span><span class="o">))</span>
</span><span class='line'>    <span class="o">.</span><span class="na">networkResponse</span><span class="o">(</span><span class="n">stripBody</span><span class="o">(</span><span class="n">networkResponse</span><span class="o">))</span>
</span><span class='line'>    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">cache</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">HttpHeaders</span><span class="o">.</span><span class="na">hasBody</span><span class="o">(</span><span class="n">response</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">CacheStrategy</span><span class="o">.</span><span class="na">isCacheable</span><span class="o">(</span><span class="n">response</span><span class="o">,</span> <span class="n">networkRequest</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Offer this request to the cache.</span>
</span><span class='line'>    <span class="c1">// *****注意这里*****</span>
</span><span class='line'>    <span class="n">CacheRequest</span> <span class="n">cacheRequest</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">cacheWritingResponse</span><span class="o">(</span><span class="n">cacheRequest</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">invalidatesCache</span><span class="o">(</span><span class="n">networkRequest</span><span class="o">.</span><span class="na">method</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">cache</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">networkRequest</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">ignored</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// The cache cannot be written.</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">response</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到主要是对<code>cacheResponse</code>和<code>networkResponse</code>进行的一些处理，比如返回304 not modified之类的处理结果。然后将<code>Response</code>写入缓存中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Returns a new source that writes bytes to {@code cacheRequest} as they are read by the source</span>
</span><span class='line'><span class="cm">   * consumer. This is careful to discard bytes left over when the stream is closed; otherwise we</span>
</span><span class='line'><span class="cm">   * may never exhaust the source stream and therefore not complete the cached response.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Response</span> <span class="nf">cacheWritingResponse</span><span class="o">(</span><span class="kd">final</span> <span class="n">CacheRequest</span> <span class="n">cacheRequest</span><span class="o">,</span> <span class="n">Response</span> <span class="n">response</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'><span class="c1">// Some apps return a null body; for compatibility we treat that like a null cache request.</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">cacheRequest</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="n">response</span><span class="o">;</span>
</span><span class='line'><span class="n">Sink</span> <span class="n">cacheBodyUnbuffered</span> <span class="o">=</span> <span class="n">cacheRequest</span><span class="o">.</span><span class="na">body</span><span class="o">();</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">cacheBodyUnbuffered</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="n">response</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">final</span> <span class="n">BufferedSource</span> <span class="n">source</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">body</span><span class="o">().</span><span class="na">source</span><span class="o">();</span>
</span><span class='line'><span class="kd">final</span> <span class="n">BufferedSink</span> <span class="n">cacheBody</span> <span class="o">=</span> <span class="n">Okio</span><span class="o">.</span><span class="na">buffer</span><span class="o">(</span><span class="n">cacheBodyUnbuffered</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Source</span> <span class="n">cacheWritingSource</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Source</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="n">cacheRequestClosed</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">long</span> <span class="n">read</span><span class="o">(</span><span class="n">Buffer</span> <span class="n">sink</span><span class="o">,</span> <span class="kt">long</span> <span class="n">byteCount</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">bytesRead</span><span class="o">;</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">bytesRead</span> <span class="o">=</span> <span class="n">source</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">sink</span><span class="o">,</span> <span class="n">byteCount</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(!</span><span class="n">cacheRequestClosed</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">cacheRequestClosed</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="n">cacheRequest</span><span class="o">.</span><span class="na">abort</span><span class="o">();</span> <span class="c1">// Failed to write a complete cache response.</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">throw</span> <span class="n">e</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">bytesRead</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(!</span><span class="n">cacheRequestClosed</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">cacheRequestClosed</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="n">cacheBody</span><span class="o">.</span><span class="na">close</span><span class="o">();</span> <span class="c1">// The cache response is complete!</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sink</span><span class="o">.</span><span class="na">copyTo</span><span class="o">(</span><span class="n">cacheBody</span><span class="o">.</span><span class="na">buffer</span><span class="o">(),</span> <span class="n">sink</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="n">bytesRead</span><span class="o">,</span> <span class="n">bytesRead</span><span class="o">);</span>
</span><span class='line'>    <span class="n">cacheBody</span><span class="o">.</span><span class="na">emitCompleteSegments</span><span class="o">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">bytesRead</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span> <span class="kd">public</span> <span class="n">Timeout</span> <span class="n">timeout</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">source</span><span class="o">.</span><span class="na">timeout</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="n">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">cacheRequestClosed</span>
</span><span class='line'>        <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">discard</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">HttpCodec</span><span class="o">.</span><span class="na">DISCARD_STREAM_TIMEOUT_MILLIS</span><span class="o">,</span> <span class="n">MILLISECONDS</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">cacheRequestClosed</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="n">cacheRequest</span><span class="o">.</span><span class="na">abort</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">source</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span> <span class="n">contentType</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;Content-Type&quot;</span><span class="o">);</span>
</span><span class='line'><span class="kt">long</span> <span class="n">contentLength</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">body</span><span class="o">().</span><span class="na">contentLength</span><span class="o">();</span>
</span><span class='line'><span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="k">new</span> <span class="n">RealResponseBody</span><span class="o">(</span><span class="n">contentType</span><span class="o">,</span> <span class="n">contentLength</span><span class="o">,</span> <span class="n">Okio</span><span class="o">.</span><span class="na">buffer</span><span class="o">(</span><span class="n">cacheWritingSource</span><span class="o">)))</span>
</span><span class='line'>    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">CacheRequestImpl</span> <span class="kd">implements</span> <span class="n">CacheRequest</span> <span class="o">{</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">DiskLruCache</span><span class="o">.</span><span class="na">Editor</span> <span class="n">editor</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Sink</span> <span class="n">cacheOut</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Sink</span> <span class="n">body</span><span class="o">;</span>
</span><span class='line'><span class="kt">boolean</span> <span class="n">done</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">CacheRequestImpl</span><span class="o">(</span><span class="kd">final</span> <span class="n">DiskLruCache</span><span class="o">.</span><span class="na">Editor</span> <span class="n">editor</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">editor</span> <span class="o">=</span> <span class="n">editor</span><span class="o">;</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">cacheOut</span> <span class="o">=</span> <span class="n">editor</span><span class="o">.</span><span class="na">newSink</span><span class="o">(</span><span class="n">ENTRY_BODY</span><span class="o">);</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">body</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ForwardingSink</span><span class="o">(</span><span class="n">cacheOut</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="n">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">synchronized</span> <span class="o">(</span><span class="n">Cache</span><span class="o">.</span><span class="na">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">done</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">done</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="n">writeSuccessCount</span><span class="o">++;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>      <span class="n">editor</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">};</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="n">abort</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">synchronized</span> <span class="o">(</span><span class="n">Cache</span><span class="o">.</span><span class="na">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">done</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">done</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="n">writeAbortCount</span><span class="o">++;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">Util</span><span class="o">.</span><span class="na">closeQuietly</span><span class="o">(</span><span class="n">cacheOut</span><span class="o">);</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">editor</span><span class="o">.</span><span class="na">abort</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">ignored</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span> <span class="kd">public</span> <span class="n">Sink</span> <span class="n">body</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">body</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到调用了okio的<code>Sink</code>和<code>Source</code>进行了copy。</p>

<h2>ConnectInterceptor</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// We need the network to satisfy this request. Possibly for validating a conditional GET.</span>
</span><span class='line'><span class="kt">boolean</span> <span class="n">doExtensiveHealthChecks</span> <span class="o">=</span> <span class="o">!</span><span class="n">request</span><span class="o">.</span><span class="na">method</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;GET&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">HttpCodec</span> <span class="n">httpCodec</span> <span class="o">=</span> <span class="n">streamAllocation</span><span class="o">.</span><span class="na">newStream</span><span class="o">(</span><span class="n">client</span><span class="o">,</span> <span class="n">chain</span><span class="o">,</span> <span class="n">doExtensiveHealthChecks</span><span class="o">);</span>
</span><span class='line'><span class="n">RealConnection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">streamAllocation</span><span class="o">.</span><span class="na">connection</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ConnectInterceptor</code>主要就是调用了<code>streamAllocation</code>的<code>newStream</code>方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">HttpCodec</span> <span class="nf">newStream</span><span class="o">(</span>
</span><span class='line'>  <span class="n">OkHttpClient</span> <span class="n">client</span><span class="o">,</span> <span class="n">Interceptor</span><span class="o">.</span><span class="na">Chain</span> <span class="n">chain</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">doExtensiveHealthChecks</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="kt">int</span> <span class="n">connectTimeout</span> <span class="o">=</span> <span class="n">chain</span><span class="o">.</span><span class="na">connectTimeoutMillis</span><span class="o">();</span>
</span><span class='line'><span class="kt">int</span> <span class="n">readTimeout</span> <span class="o">=</span> <span class="n">chain</span><span class="o">.</span><span class="na">readTimeoutMillis</span><span class="o">();</span>
</span><span class='line'><span class="kt">int</span> <span class="n">writeTimeout</span> <span class="o">=</span> <span class="n">chain</span><span class="o">.</span><span class="na">writeTimeoutMillis</span><span class="o">();</span>
</span><span class='line'><span class="kt">int</span> <span class="n">pingIntervalMillis</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">pingIntervalMillis</span><span class="o">();</span>
</span><span class='line'><span class="kt">boolean</span> <span class="n">connectionRetryEnabled</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">retryOnConnectionFailure</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">RealConnection</span> <span class="n">resultConnection</span> <span class="o">=</span> <span class="n">findHealthyConnection</span><span class="o">(</span><span class="n">connectTimeout</span><span class="o">,</span> <span class="n">readTimeout</span><span class="o">,</span>
</span><span class='line'>      <span class="n">writeTimeout</span><span class="o">,</span> <span class="n">pingIntervalMillis</span><span class="o">,</span> <span class="n">connectionRetryEnabled</span><span class="o">,</span> <span class="n">doExtensiveHealthChecks</span><span class="o">);</span>
</span><span class='line'>  <span class="n">HttpCodec</span> <span class="n">resultCodec</span> <span class="o">=</span> <span class="n">resultConnection</span><span class="o">.</span><span class="na">newCodec</span><span class="o">(</span><span class="n">client</span><span class="o">,</span> <span class="n">chain</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">synchronized</span> <span class="o">(</span><span class="n">connectionPool</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">codec</span> <span class="o">=</span> <span class="n">resultCodec</span><span class="o">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">resultCodec</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">throw</span> <span class="k">new</span> <span class="nf">RouteException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Finds a connection and returns it if it is healthy. If it is unhealthy the process is repeated</span>
</span><span class='line'><span class="cm">   * until a healthy connection is found.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">RealConnection</span> <span class="nf">findHealthyConnection</span><span class="o">(</span><span class="kt">int</span> <span class="n">connectTimeout</span><span class="o">,</span> <span class="kt">int</span> <span class="n">readTimeout</span><span class="o">,</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">writeTimeout</span><span class="o">,</span> <span class="kt">int</span> <span class="n">pingIntervalMillis</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">connectionRetryEnabled</span><span class="o">,</span>
</span><span class='line'>  <span class="kt">boolean</span> <span class="n">doExtensiveHealthChecks</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'><span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">RealConnection</span> <span class="n">candidate</span> <span class="o">=</span> <span class="n">findConnection</span><span class="o">(</span><span class="n">connectTimeout</span><span class="o">,</span> <span class="n">readTimeout</span><span class="o">,</span> <span class="n">writeTimeout</span><span class="o">,</span>
</span><span class='line'>      <span class="n">pingIntervalMillis</span><span class="o">,</span> <span class="n">connectionRetryEnabled</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// If this is a brand new connection, we can skip the extensive health checks.</span>
</span><span class='line'>  <span class="kd">synchronized</span> <span class="o">(</span><span class="n">connectionPool</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">candidate</span><span class="o">.</span><span class="na">successCount</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">candidate</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Do a (potentially slow) check to confirm that the pooled connection is still good. If it</span>
</span><span class='line'>  <span class="c1">// isn&#39;t, take it out of the pool and start again.</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(!</span><span class="n">candidate</span><span class="o">.</span><span class="na">isHealthy</span><span class="o">(</span><span class="n">doExtensiveHealthChecks</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">noNewStreams</span><span class="o">();</span>
</span><span class='line'>    <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">candidate</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Returns a connection to host a new stream. This prefers the existing connection if it exists,</span>
</span><span class='line'><span class="cm">   * then the pool, finally building a new connection.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">RealConnection</span> <span class="nf">findConnection</span><span class="o">(</span><span class="kt">int</span> <span class="n">connectTimeout</span><span class="o">,</span> <span class="kt">int</span> <span class="n">readTimeout</span><span class="o">,</span> <span class="kt">int</span> <span class="n">writeTimeout</span><span class="o">,</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">pingIntervalMillis</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">connectionRetryEnabled</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'><span class="kt">boolean</span> <span class="n">foundPooledConnection</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="n">RealConnection</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="n">Route</span> <span class="n">selectedRoute</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="n">Connection</span> <span class="n">releasedConnection</span><span class="o">;</span>
</span><span class='line'><span class="n">Socket</span> <span class="n">toClose</span><span class="o">;</span>
</span><span class='line'><span class="kd">synchronized</span> <span class="o">(</span><span class="n">connectionPool</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">released</span><span class="o">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalStateException</span><span class="o">(</span><span class="s">&quot;released&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">codec</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalStateException</span><span class="o">(</span><span class="s">&quot;codec != null&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">canceled</span><span class="o">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">IOException</span><span class="o">(</span><span class="s">&quot;Canceled&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Attempt to use an already-allocated connection. We need to be careful here because our</span>
</span><span class='line'>  <span class="c1">// already-allocated connection may have been restricted from creating new streams.</span>
</span><span class='line'>  <span class="n">releasedConnection</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">connection</span><span class="o">;</span>
</span><span class='line'>  <span class="n">toClose</span> <span class="o">=</span> <span class="n">releaseIfNoNewStreams</span><span class="o">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">connection</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// We had an already-allocated connection and it&#39;s good.</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">connection</span><span class="o">;</span>
</span><span class='line'>    <span class="n">releasedConnection</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(!</span><span class="n">reportedAcquired</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// If the connection was never reported acquired, don&#39;t report it as released!</span>
</span><span class='line'>    <span class="n">releasedConnection</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Attempt to get a connection from the pool.</span>
</span><span class='line'>    <span class="c1">// 注意这里，从ConnectionPool中找Connection</span>
</span><span class='line'>    <span class="n">Internal</span><span class="o">.</span><span class="na">instance</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">connectionPool</span><span class="o">,</span> <span class="n">address</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">connection</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">foundPooledConnection</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="n">connection</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">selectedRoute</span> <span class="o">=</span> <span class="n">route</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">closeQuietly</span><span class="o">(</span><span class="n">toClose</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">releasedConnection</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">eventListener</span><span class="o">.</span><span class="na">connectionReleased</span><span class="o">(</span><span class="n">call</span><span class="o">,</span> <span class="n">releasedConnection</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">foundPooledConnection</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">eventListener</span><span class="o">.</span><span class="na">connectionAcquired</span><span class="o">(</span><span class="n">call</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// If we found an already-allocated or pooled connection, we&#39;re done.</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If we need a route selection, make one. This is a blocking operation.</span>
</span><span class='line'><span class="kt">boolean</span> <span class="n">newRouteSelection</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">selectedRoute</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">routeSelection</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="o">!</span><span class="n">routeSelection</span><span class="o">.</span><span class="na">hasNext</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">newRouteSelection</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="n">routeSelection</span> <span class="o">=</span> <span class="n">routeSelector</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">synchronized</span> <span class="o">(</span><span class="n">connectionPool</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">canceled</span><span class="o">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">IOException</span><span class="o">(</span><span class="s">&quot;Canceled&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">newRouteSelection</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Now that we have a set of IP addresses, make another attempt at getting a connection from</span>
</span><span class='line'>    <span class="c1">// the pool. This could match due to connection coalescing.</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Route</span><span class="o">&gt;</span> <span class="n">routes</span> <span class="o">=</span> <span class="n">routeSelection</span><span class="o">.</span><span class="na">getAll</span><span class="o">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">size</span> <span class="o">=</span> <span class="n">routes</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Route</span> <span class="n">route</span> <span class="o">=</span> <span class="n">routes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Internal</span><span class="o">.</span><span class="na">instance</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">connectionPool</span><span class="o">,</span> <span class="n">address</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="n">route</span><span class="o">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">connection</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">foundPooledConnection</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">connection</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">route</span> <span class="o">=</span> <span class="n">route</span><span class="o">;</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(!</span><span class="n">foundPooledConnection</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">selectedRoute</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">selectedRoute</span> <span class="o">=</span> <span class="n">routeSelection</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Create a connection and assign it to this allocation immediately. This makes it possible</span>
</span><span class='line'>    <span class="c1">// for an asynchronous cancel() to interrupt the handshake we&#39;re about to do.</span>
</span><span class='line'>    <span class="n">route</span> <span class="o">=</span> <span class="n">selectedRoute</span><span class="o">;</span>
</span><span class='line'>    <span class="n">refusedStreamCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RealConnection</span><span class="o">(</span><span class="n">connectionPool</span><span class="o">,</span> <span class="n">selectedRoute</span><span class="o">);</span>
</span><span class='line'>    <span class="n">acquire</span><span class="o">(</span><span class="n">result</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If we found a pooled connection on the 2nd time around, we&#39;re done.</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">foundPooledConnection</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">eventListener</span><span class="o">.</span><span class="na">connectionAcquired</span><span class="o">(</span><span class="n">call</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Do TCP + TLS handshakes. This is a blocking operation.</span>
</span><span class='line'><span class="c1">// 进行tcp握手</span>
</span><span class='line'><span class="n">result</span><span class="o">.</span><span class="na">connect</span><span class="o">(</span><span class="n">connectTimeout</span><span class="o">,</span> <span class="n">readTimeout</span><span class="o">,</span> <span class="n">writeTimeout</span><span class="o">,</span> <span class="n">pingIntervalMillis</span><span class="o">,</span>
</span><span class='line'>    <span class="n">connectionRetryEnabled</span><span class="o">,</span> <span class="n">call</span><span class="o">,</span> <span class="n">eventListener</span><span class="o">);</span>
</span><span class='line'><span class="n">routeDatabase</span><span class="o">().</span><span class="na">connected</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">route</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">Socket</span> <span class="n">socket</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="kd">synchronized</span> <span class="o">(</span><span class="n">connectionPool</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">reportedAcquired</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Pool the connection.</span>
</span><span class='line'>  <span class="c1">// 把connection放到ConnectionPool中</span>
</span><span class='line'>  <span class="n">Internal</span><span class="o">.</span><span class="na">instance</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">connectionPool</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// If another multiplexed connection to the same address was created concurrently, then</span>
</span><span class='line'>  <span class="c1">// release this connection and acquire that one.</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">isMultiplexed</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">socket</span> <span class="o">=</span> <span class="n">Internal</span><span class="o">.</span><span class="na">instance</span><span class="o">.</span><span class="na">deduplicate</span><span class="o">(</span><span class="n">connectionPool</span><span class="o">,</span> <span class="n">address</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">connection</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">closeQuietly</span><span class="o">(</span><span class="n">socket</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">eventListener</span><span class="o">.</span><span class="na">connectionAcquired</span><span class="o">(</span><span class="n">call</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span> <span class="kd">public</span> <span class="n">RealConnection</span> <span class="n">get</span><span class="o">(</span><span class="n">ConnectionPool</span> <span class="n">pool</span><span class="o">,</span> <span class="n">Address</span> <span class="n">address</span><span class="o">,</span>
</span><span class='line'>      <span class="n">StreamAllocation</span> <span class="n">streamAllocation</span><span class="o">,</span> <span class="n">Route</span> <span class="n">route</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">pool</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">address</span><span class="o">,</span> <span class="n">streamAllocation</span><span class="o">,</span> <span class="n">route</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Returns a recycled connection to {@code address}, or null if no such connection exists. The</span>
</span><span class='line'><span class="cm">   * route is null if the address has not yet been routed.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="nd">@Nullable</span> <span class="n">RealConnection</span> <span class="n">get</span><span class="o">(</span><span class="n">Address</span> <span class="n">address</span><span class="o">,</span> <span class="n">StreamAllocation</span> <span class="n">streamAllocation</span><span class="o">,</span> <span class="n">Route</span> <span class="n">route</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="k">assert</span> <span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">holdsLock</span><span class="o">(</span><span class="k">this</span><span class="o">));</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">RealConnection</span> <span class="n">connection</span> <span class="o">:</span> <span class="n">connections</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">connection</span><span class="o">.</span><span class="na">isEligible</span><span class="o">(</span><span class="n">address</span><span class="o">,</span> <span class="n">route</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">streamAllocation</span><span class="o">.</span><span class="na">acquire</span><span class="o">(</span><span class="n">connection</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">connection</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Returns true if this connection can carry a stream allocation to {@code address}. If non-null</span>
</span><span class='line'><span class="cm">   * {@code route} is the resolved route for a connection.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isEligible</span><span class="o">(</span><span class="n">Address</span> <span class="n">address</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="n">Route</span> <span class="n">route</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="c1">// If this connection is not accepting new streams, we&#39;re done.</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">allocations</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="n">allocationLimit</span> <span class="o">||</span> <span class="n">noNewStreams</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If the non-host fields of the address don&#39;t overlap, we&#39;re done.</span>
</span><span class='line'><span class="k">if</span> <span class="o">(!</span><span class="n">Internal</span><span class="o">.</span><span class="na">instance</span><span class="o">.</span><span class="na">equalsNonHost</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">route</span><span class="o">.</span><span class="na">address</span><span class="o">(),</span> <span class="n">address</span><span class="o">))</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If the host exactly matches, we&#39;re done: this connection can carry the address.</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">address</span><span class="o">.</span><span class="na">url</span><span class="o">().</span><span class="na">host</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">route</span><span class="o">().</span><span class="na">address</span><span class="o">().</span><span class="na">url</span><span class="o">().</span><span class="na">host</span><span class="o">()))</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">true</span><span class="o">;</span> <span class="c1">// This connection is a perfect match.</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// At this point we don&#39;t have a hostname match. But we still be able to carry the request if</span>
</span><span class='line'><span class="c1">// our connection coalescing requirements are met. See also:</span>
</span><span class='line'><span class="c1">// https://hpbn.co/optimizing-application-delivery/#eliminate-domain-sharding</span>
</span><span class='line'><span class="c1">// https://daniel.haxx.se/blog/2016/08/18/http2-connection-coalescing/</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 1. This connection must be HTTP/2.</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">http2Connection</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 2. The routes must share an IP address. This requires us to have a DNS address for both</span>
</span><span class='line'><span class="c1">// hosts, which only happens after route planning. We can&#39;t coalesce connections that use a</span>
</span><span class='line'><span class="c1">// proxy, since proxies don&#39;t tell us the origin server&#39;s IP address.</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">route</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">route</span><span class="o">.</span><span class="na">proxy</span><span class="o">().</span><span class="na">type</span><span class="o">()</span> <span class="o">!=</span> <span class="n">Proxy</span><span class="o">.</span><span class="na">Type</span><span class="o">.</span><span class="na">DIRECT</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">route</span><span class="o">.</span><span class="na">proxy</span><span class="o">().</span><span class="na">type</span><span class="o">()</span> <span class="o">!=</span> <span class="n">Proxy</span><span class="o">.</span><span class="na">Type</span><span class="o">.</span><span class="na">DIRECT</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="k">if</span> <span class="o">(!</span><span class="k">this</span><span class="o">.</span><span class="na">route</span><span class="o">.</span><span class="na">socketAddress</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">route</span><span class="o">.</span><span class="na">socketAddress</span><span class="o">()))</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 3. This connection&#39;s server certificate&#39;s must cover the new host.</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">route</span><span class="o">.</span><span class="na">address</span><span class="o">().</span><span class="na">hostnameVerifier</span><span class="o">()</span> <span class="o">!=</span> <span class="n">OkHostnameVerifier</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="k">if</span> <span class="o">(!</span><span class="n">supportsUrl</span><span class="o">(</span><span class="n">address</span><span class="o">.</span><span class="na">url</span><span class="o">()))</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 4. Certificate pinning must match the host.</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">address</span><span class="o">.</span><span class="na">certificatePinner</span><span class="o">().</span><span class="na">check</span><span class="o">(</span><span class="n">address</span><span class="o">.</span><span class="na">url</span><span class="o">().</span><span class="na">host</span><span class="o">(),</span> <span class="n">handshake</span><span class="o">().</span><span class="na">peerCertificates</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">SSLPeerUnverifiedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="kc">true</span><span class="o">;</span> <span class="c1">// The caller&#39;s address can be carried by this connection.</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Use this allocation to hold {@code connection}. Each call to this must be paired with a call to</span>
</span><span class='line'><span class="cm">   * {@link #release} on the same connection.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">acquire</span><span class="o">(</span><span class="n">RealConnection</span> <span class="n">connection</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">reportedAcquired</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">assert</span> <span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">holdsLock</span><span class="o">(</span><span class="n">connectionPool</span><span class="o">));</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">connection</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalStateException</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">connection</span> <span class="o">=</span> <span class="n">connection</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">reportedAcquired</span> <span class="o">=</span> <span class="n">reportedAcquired</span><span class="o">;</span>
</span><span class='line'>    <span class="n">connection</span><span class="o">.</span><span class="na">allocations</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">StreamAllocationReference</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">callStackTrace</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>StreamAllocation.acquire(connection, true)</code>的时候将<code>StreamAllocaion</code>的弱引用加入到<code>connection.allocations</code>集合中，这将在释放<code>Connection</code>的时候用到。</p>

<p>在将<code>Connection</code>放入<code>ConnectionPool</code>中时，调用了<code>ConnectionPool</code>的<code>put</code>方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">RealConnection</span> <span class="n">connection</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">assert</span> <span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">holdsLock</span><span class="o">(</span><span class="k">this</span><span class="o">));</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">cleanupRunning</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">cleanupRunning</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="n">executor</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">cleanupRunnable</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">connections</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">connection</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>线程池执行<code>cleanupRunnable</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">Runnable</span> <span class="n">cleanupRunnable</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="n">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">waitNanos</span> <span class="o">=</span> <span class="n">cleanup</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">());</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">waitNanos</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">waitNanos</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">long</span> <span class="n">waitMillis</span> <span class="o">=</span> <span class="n">waitNanos</span> <span class="o">/</span> <span class="mi">1000000L</span><span class="o">;</span>
</span><span class='line'>      <span class="n">waitNanos</span> <span class="o">-=</span> <span class="o">(</span><span class="n">waitMillis</span> <span class="o">*</span> <span class="mi">1000000L</span><span class="o">);</span>
</span><span class='line'>      <span class="kd">synchronized</span> <span class="o">(</span><span class="n">ConnectionPool</span><span class="o">.</span><span class="na">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">ConnectionPool</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">wait</span><span class="o">(</span><span class="n">waitMillis</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">waitNanos</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">ignored</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>  <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">long</span> <span class="nf">cleanup</span><span class="o">(</span><span class="kt">long</span> <span class="n">now</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="kt">int</span> <span class="n">inUseConnectionCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">idleConnectionCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="n">RealConnection</span> <span class="n">longestIdleConnection</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="kt">long</span> <span class="n">longestIdleDurationNs</span> <span class="o">=</span> <span class="n">Long</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Find either a connection to evict, or the time that the next eviction is due.</span>
</span><span class='line'><span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="n">Iterator</span><span class="o">&lt;</span><span class="n">RealConnection</span><span class="o">&gt;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">connections</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span> <span class="n">i</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">RealConnection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// If the connection is in use, keep searching.</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">pruneAndGetAllocationCount</span><span class="o">(</span><span class="n">connection</span><span class="o">,</span> <span class="n">now</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">inUseConnectionCount</span><span class="o">++;</span>
</span><span class='line'>      <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">idleConnectionCount</span><span class="o">++;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// If the connection is ready to be evicted, we&#39;re done.</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">idleDurationNs</span> <span class="o">=</span> <span class="n">now</span> <span class="o">-</span> <span class="n">connection</span><span class="o">.</span><span class="na">idleAtNanos</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">idleDurationNs</span> <span class="o">&gt;</span> <span class="n">longestIdleDurationNs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">longestIdleDurationNs</span> <span class="o">=</span> <span class="n">idleDurationNs</span><span class="o">;</span>
</span><span class='line'>      <span class="n">longestIdleConnection</span> <span class="o">=</span> <span class="n">connection</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">longestIdleDurationNs</span> <span class="o">&gt;=</span> <span class="k">this</span><span class="o">.</span><span class="na">keepAliveDurationNs</span>
</span><span class='line'>      <span class="o">||</span> <span class="n">idleConnectionCount</span> <span class="o">&gt;</span> <span class="k">this</span><span class="o">.</span><span class="na">maxIdleConnections</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// We&#39;ve found a connection to evict. Remove it from the list, then close it below (outside</span>
</span><span class='line'>    <span class="c1">// of the synchronized block).</span>
</span><span class='line'>    <span class="n">connections</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">longestIdleConnection</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">idleConnectionCount</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// A connection will be ready to evict soon.</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">keepAliveDurationNs</span> <span class="o">-</span> <span class="n">longestIdleDurationNs</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">inUseConnectionCount</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// All connections are in use. It&#39;ll be at least the keep alive duration &#39;til we run again.</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">keepAliveDurationNs</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// No connections, idle or in use.</span>
</span><span class='line'>    <span class="n">cleanupRunning</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">closeQuietly</span><span class="o">(</span><span class="n">longestIdleConnection</span><span class="o">.</span><span class="na">socket</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Cleanup again immediately.</span>
</span><span class='line'><span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Prunes any leaked allocations and then returns the number of remaining live allocations on</span>
</span><span class='line'><span class="cm">   * {@code connection}. Allocations are leaked if the connection is tracking them but the</span>
</span><span class='line'><span class="cm">   * application code has abandoned them. Leak detection is imprecise and relies on garbage</span>
</span><span class='line'><span class="cm">   * collection.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="nf">pruneAndGetAllocationCount</span><span class="o">(</span><span class="n">RealConnection</span> <span class="n">connection</span><span class="o">,</span> <span class="kt">long</span> <span class="n">now</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Reference</span><span class="o">&lt;</span><span class="n">StreamAllocation</span><span class="o">&gt;&gt;</span> <span class="n">references</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">allocations</span><span class="o">;</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">references</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Reference</span><span class="o">&lt;</span><span class="n">StreamAllocation</span><span class="o">&gt;</span> <span class="n">reference</span> <span class="o">=</span> <span class="n">references</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">reference</span><span class="o">.</span><span class="na">get</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">i</span><span class="o">++;</span>
</span><span class='line'>    <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// We&#39;ve discovered a leaked allocation. This is an application bug.</span>
</span><span class='line'>  <span class="n">StreamAllocation</span><span class="o">.</span><span class="na">StreamAllocationReference</span> <span class="n">streamAllocRef</span> <span class="o">=</span>
</span><span class='line'>      <span class="o">(</span><span class="n">StreamAllocation</span><span class="o">.</span><span class="na">StreamAllocationReference</span><span class="o">)</span> <span class="n">reference</span><span class="o">;</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&quot;A connection to &quot;</span> <span class="o">+</span> <span class="n">connection</span><span class="o">.</span><span class="na">route</span><span class="o">().</span><span class="na">address</span><span class="o">().</span><span class="na">url</span><span class="o">()</span>
</span><span class='line'>      <span class="o">+</span> <span class="s">&quot; was leaked. Did you forget to close a response body?&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="n">Platform</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">logCloseableLeak</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">streamAllocRef</span><span class="o">.</span><span class="na">callStackTrace</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">references</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>  <span class="n">connection</span><span class="o">.</span><span class="na">noNewStreams</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// If this was the last allocation, the connection is eligible for immediate eviction.</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">references</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">connection</span><span class="o">.</span><span class="na">idleAtNanos</span> <span class="o">=</span> <span class="n">now</span> <span class="o">-</span> <span class="n">keepAliveDurationNs</span><span class="o">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">references</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">StreamAllocationReference</span> <span class="kd">extends</span> <span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">StreamAllocation</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Captures the stack trace at the time the Call is executed or enqueued. This is helpful for</span>
</span><span class='line'><span class="cm"> * identifying the origin of connection leaks.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="n">Object</span> <span class="n">callStackTrace</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">StreamAllocationReference</span><span class="o">(</span><span class="n">StreamAllocation</span> <span class="n">referent</span><span class="o">,</span> <span class="n">Object</span> <span class="n">callStackTrace</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">(</span><span class="n">referent</span><span class="o">);</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">callStackTrace</span> <span class="o">=</span> <span class="n">callStackTrace</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过判断<code>connection.allocations</code>的集合元素的弱引用指向是否为空来判断<code>connection</code>是否应该被释放。</p>

<h2>CallServerInterceptor</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span> <span class="kd">public</span> <span class="n">Response</span> <span class="n">intercept</span><span class="o">(</span><span class="n">Chain</span> <span class="n">chain</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'><span class="n">RealInterceptorChain</span> <span class="n">realChain</span> <span class="o">=</span> <span class="o">(</span><span class="n">RealInterceptorChain</span><span class="o">)</span> <span class="n">chain</span><span class="o">;</span>
</span><span class='line'><span class="n">HttpCodec</span> <span class="n">httpCodec</span> <span class="o">=</span> <span class="n">realChain</span><span class="o">.</span><span class="na">httpStream</span><span class="o">();</span>
</span><span class='line'><span class="n">StreamAllocation</span> <span class="n">streamAllocation</span> <span class="o">=</span> <span class="n">realChain</span><span class="o">.</span><span class="na">streamAllocation</span><span class="o">();</span>
</span><span class='line'><span class="n">RealConnection</span> <span class="n">connection</span> <span class="o">=</span> <span class="o">(</span><span class="n">RealConnection</span><span class="o">)</span> <span class="n">realChain</span><span class="o">.</span><span class="na">connection</span><span class="o">();</span>
</span><span class='line'><span class="n">Request</span> <span class="n">request</span> <span class="o">=</span> <span class="n">realChain</span><span class="o">.</span><span class="na">request</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="kt">long</span> <span class="n">sentRequestMillis</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">realChain</span><span class="o">.</span><span class="na">eventListener</span><span class="o">().</span><span class="na">requestHeadersStart</span><span class="o">(</span><span class="n">realChain</span><span class="o">.</span><span class="na">call</span><span class="o">());</span>
</span><span class='line'><span class="n">httpCodec</span><span class="o">.</span><span class="na">writeRequestHeaders</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span><span class='line'><span class="n">realChain</span><span class="o">.</span><span class="na">eventListener</span><span class="o">().</span><span class="na">requestHeadersEnd</span><span class="o">(</span><span class="n">realChain</span><span class="o">.</span><span class="na">call</span><span class="o">(),</span> <span class="n">request</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Response</span><span class="o">.</span><span class="na">Builder</span> <span class="n">responseBuilder</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">permitsRequestBody</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">method</span><span class="o">())</span> <span class="o">&amp;&amp;</span> <span class="n">request</span><span class="o">.</span><span class="na">body</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// If there&#39;s a &quot;Expect: 100-continue&quot; header on the request, wait for a &quot;HTTP/1.1 100</span>
</span><span class='line'>  <span class="c1">// Continue&quot; response before transmitting the request body. If we don&#39;t get that, return</span>
</span><span class='line'>  <span class="c1">// what we did get (such as a 4xx response) without ever transmitting the request body.</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="s">&quot;100-continue&quot;</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;Expect&quot;</span><span class="o">)))</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">httpCodec</span><span class="o">.</span><span class="na">flushRequest</span><span class="o">();</span>
</span><span class='line'>    <span class="n">realChain</span><span class="o">.</span><span class="na">eventListener</span><span class="o">().</span><span class="na">responseHeadersStart</span><span class="o">(</span><span class="n">realChain</span><span class="o">.</span><span class="na">call</span><span class="o">());</span>
</span><span class='line'>    <span class="n">responseBuilder</span> <span class="o">=</span> <span class="n">httpCodec</span><span class="o">.</span><span class="na">readResponseHeaders</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">responseBuilder</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Write the request body if the &quot;Expect: 100-continue&quot; expectation was met.</span>
</span><span class='line'>    <span class="n">realChain</span><span class="o">.</span><span class="na">eventListener</span><span class="o">().</span><span class="na">requestBodyStart</span><span class="o">(</span><span class="n">realChain</span><span class="o">.</span><span class="na">call</span><span class="o">());</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">contentLength</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">body</span><span class="o">().</span><span class="na">contentLength</span><span class="o">();</span>
</span><span class='line'>    <span class="n">CountingSink</span> <span class="n">requestBodyOut</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">CountingSink</span><span class="o">(</span><span class="n">httpCodec</span><span class="o">.</span><span class="na">createRequestBody</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">contentLength</span><span class="o">));</span>
</span><span class='line'>    <span class="n">BufferedSink</span> <span class="n">bufferedRequestBody</span> <span class="o">=</span> <span class="n">Okio</span><span class="o">.</span><span class="na">buffer</span><span class="o">(</span><span class="n">requestBodyOut</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">request</span><span class="o">.</span><span class="na">body</span><span class="o">().</span><span class="na">writeTo</span><span class="o">(</span><span class="n">bufferedRequestBody</span><span class="o">);</span>
</span><span class='line'>    <span class="n">bufferedRequestBody</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>    <span class="n">realChain</span><span class="o">.</span><span class="na">eventListener</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">requestBodyEnd</span><span class="o">(</span><span class="n">realChain</span><span class="o">.</span><span class="na">call</span><span class="o">(),</span> <span class="n">requestBodyOut</span><span class="o">.</span><span class="na">successfulCount</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(!</span><span class="n">connection</span><span class="o">.</span><span class="na">isMultiplexed</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// If the &quot;Expect: 100-continue&quot; expectation wasn&#39;t met, prevent the HTTP/1 connection</span>
</span><span class='line'>    <span class="c1">// from being reused. Otherwise we&#39;re still obligated to transmit the request body to</span>
</span><span class='line'>    <span class="c1">// leave the connection in a consistent state.</span>
</span><span class='line'>    <span class="n">streamAllocation</span><span class="o">.</span><span class="na">noNewStreams</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">httpCodec</span><span class="o">.</span><span class="na">finishRequest</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">responseBuilder</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">realChain</span><span class="o">.</span><span class="na">eventListener</span><span class="o">().</span><span class="na">responseHeadersStart</span><span class="o">(</span><span class="n">realChain</span><span class="o">.</span><span class="na">call</span><span class="o">());</span>
</span><span class='line'>  <span class="n">responseBuilder</span> <span class="o">=</span> <span class="n">httpCodec</span><span class="o">.</span><span class="na">readResponseHeaders</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Response</span> <span class="n">response</span> <span class="o">=</span> <span class="n">responseBuilder</span>
</span><span class='line'>    <span class="o">.</span><span class="na">request</span><span class="o">(</span><span class="n">request</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">handshake</span><span class="o">(</span><span class="n">streamAllocation</span><span class="o">.</span><span class="na">connection</span><span class="o">().</span><span class="na">handshake</span><span class="o">())</span>
</span><span class='line'>    <span class="o">.</span><span class="na">sentRequestAtMillis</span><span class="o">(</span><span class="n">sentRequestMillis</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">receivedResponseAtMillis</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">())</span>
</span><span class='line'>    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">code</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">code</span><span class="o">();</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">code</span> <span class="o">==</span> <span class="mi">100</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// server sent a 100-continue even though we did not request one.</span>
</span><span class='line'>  <span class="c1">// try again to read the actual response</span>
</span><span class='line'>  <span class="n">responseBuilder</span> <span class="o">=</span> <span class="n">httpCodec</span><span class="o">.</span><span class="na">readResponseHeaders</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="n">responseBuilder</span>
</span><span class='line'>          <span class="o">.</span><span class="na">request</span><span class="o">(</span><span class="n">request</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="na">handshake</span><span class="o">(</span><span class="n">streamAllocation</span><span class="o">.</span><span class="na">connection</span><span class="o">().</span><span class="na">handshake</span><span class="o">())</span>
</span><span class='line'>          <span class="o">.</span><span class="na">sentRequestAtMillis</span><span class="o">(</span><span class="n">sentRequestMillis</span><span class="o">)</span>
</span><span class='line'>          <span class="o">.</span><span class="na">receivedResponseAtMillis</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">())</span>
</span><span class='line'>          <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">code</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">code</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">realChain</span><span class="o">.</span><span class="na">eventListener</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">responseHeadersEnd</span><span class="o">(</span><span class="n">realChain</span><span class="o">.</span><span class="na">call</span><span class="o">(),</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">forWebSocket</span> <span class="o">&amp;&amp;</span> <span class="n">code</span> <span class="o">==</span> <span class="mi">101</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// Connection is upgrading, but we need to ensure interceptors see a non-null response body.</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="n">Util</span><span class="o">.</span><span class="na">EMPTY_RESPONSE</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="n">httpCodec</span><span class="o">.</span><span class="na">openResponseBody</span><span class="o">(</span><span class="n">response</span><span class="o">))</span>
</span><span class='line'>      <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="s">&quot;close&quot;</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">request</span><span class="o">().</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;Connection&quot;</span><span class="o">))</span>
</span><span class='line'>    <span class="o">||</span> <span class="s">&quot;close&quot;</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">header</span><span class="o">(</span><span class="s">&quot;Connection&quot;</span><span class="o">)))</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">streamAllocation</span><span class="o">.</span><span class="na">noNewStreams</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">((</span><span class="n">code</span> <span class="o">==</span> <span class="mi">204</span> <span class="o">||</span> <span class="n">code</span> <span class="o">==</span> <span class="mi">205</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">response</span><span class="o">.</span><span class="na">body</span><span class="o">().</span><span class="na">contentLength</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">throw</span> <span class="k">new</span> <span class="nf">ProtocolException</span><span class="o">(</span>
</span><span class='line'>      <span class="s">&quot;HTTP &quot;</span> <span class="o">+</span> <span class="n">code</span> <span class="o">+</span> <span class="s">&quot; had non-zero Content-Length: &quot;</span> <span class="o">+</span> <span class="n">response</span><span class="o">.</span><span class="na">body</span><span class="o">().</span><span class="na">contentLength</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">response</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>分别调用<code>httpCodec.writeRequestHeaders(request);</code>写请求头部，<code>request.body().writeTo(bufferedRequestBody);</code>写请求body，<code>httpCodec.readResponseHeaders(false);</code>读响应头部，<code>httpCodec.openResponseBody(response)</code>读响应body。</p>

<p>至此，所有<code>interceptor</code>分析完毕。</p>

<p>接下来会写一下关于okhttp的扩展，比如如何监听下载进度，appliation interceptor与network interceptor的区别，如何设置断网情况下的缓存等等。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[View绘制流程分析]]></title>
    <link href="http://Solarex.github.io/blog/2018/04/15/android-view-system/"/>
    <updated>2018-04-15T16:34:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2018/04/15/android-view-system</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NestedScrolling分析]]></title>
    <link href="http://Solarex.github.io/blog/2018/04/08/nestedscrolling-analysis/"/>
    <updated>2018-04-08T16:32:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2018/04/08/nestedscrolling-analysis</id>
    <content type="html"><![CDATA[<h2>reference</h2>

<ul>
<li><a href="https://mp.weixin.qq.com/s/jD2zuLth197tBiVbYfjP8w"></a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoordinatorLayout Behavior分析]]></title>
    <link href="http://Solarex.github.io/blog/2018/04/03/coordinatelayout-behavior-analysis/"/>
    <updated>2018-04-03T16:29:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2018/04/03/coordinatelayout-behavior-analysis</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
