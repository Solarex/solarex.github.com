<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Solarex's Blog]]></title>
  <link href="http://Solarex.github.io/atom.xml" rel="self"/>
  <link href="http://Solarex.github.io/"/>
  <updated>2017-08-30T11:37:40+08:00</updated>
  <id>http://Solarex.github.io/</id>
  <author>
    <name><![CDATA[Solarex]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Writing Better Adapters]]></title>
    <link href="http://Solarex.github.io/blog/2016/12/26/writing-better-adapters/"/>
    <updated>2016-12-26T16:11:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2016/12/26/writing-better-adapters</id>
    <content type="html"><![CDATA[<p>Implementing adapters is one of the most frequent tasks for an Android developer. It’s the base for every list. Looking at apps, lists are the base of most apps.</p>

<p>The schema we follow to implement list views is often the same: a View with an adapter that holds the data. Doing this all the time can make us blind to what we are writing, even to ugly code. Even worse, we end up repeating that ugly code.</p>

<p>It’s time to take a close look into adapters.</p>

<h2>RecyclerView Basics</h2>

<p>The basic operations for RecyclerViews (but also applicable for ListView) are:</p>

<ul>
<li>Creating the view and the ViewHolder that holds the view information.</li>
<li>Binding the ViewHolder to the data that the adapter holds, probably a list of model classes.</li>
</ul>


<p>Implementing this is pretty straightforward and not much can be done wrong here.</p>

<!-- more -->


<h2>RecyclerView With Different Types</h2>

<p>It gets trickier when you need to have different kind of items in your views. It might be different kind of cards in case you use CardViews or could be ads stitched in between your elements. You might even have a list of completely different kind of objects (this article uses Kotlin but it can be easily applied to Java as no language specific feature are used)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>interface Animal
</span><span class='line'>class Mouse: Animal
</span><span class='line'>class Duck: Animal
</span><span class='line'>class Dog: Animal
</span><span class='line'>class Car</span></code></pre></td></tr></table></div></figure>


<p>You have various animals and then suddenly something like a car that is totally unrelated.</p>

<p>In those use cases you have probably different view types you need to show. Means you need to create different ViewHolders and probably inflate different layouts in each. The API defines type identifier as integers, that’s where the ugliness starts!</p>

<p>But let’s look at some code. When you have more than one item type you announce this by overriding:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>override fun getItemViewType(position: Int) : Int</span></code></pre></td></tr></table></div></figure>


<p>as the default implementation always returns zero. The implementer needs to translate the types into Integer values.</p>

<p>Next step: create the ViewHolders. So you have to implement:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder</span></code></pre></td></tr></table></div></figure>


<p>In this method the API tells the Integer type you passed earlier as parameter.
The implementation is pretty trivial: a switch statement, or something similar, can be used to create ViewHolders for every given type.</p>

<p>The difference comes when binding the newly created (or recycled) ViewHolder:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>override fun onBindViewHolder(holder: ViewHolder, position: Int): Any</span></code></pre></td></tr></table></div></figure>


<p>Notice that here there is no type parameter. You could use getItemViewType if needed but normally it’s not needed. You could have some bind() method in a base class of all our different ViewHolders that you can call.</p>

<h2>The Uglyness</h2>

<p>So what is the problem now? Looks straightforward to implement, isn’t it?</p>

<p>Let’s look once again into getItemViewType().</p>

<p>The system needs the type for every position. So you have to translate an item in your backing model list to a view type.</p>

<p>You might want to write something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if (things.get(position) is Duck) {
</span><span class='line'>    return TYPE_DUCK
</span><span class='line'>} else if (things.get(position) is Mouse) {
</span><span class='line'>    return TYPE_MOUSE
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Can we agree on how ugly this is?</p>

<p>It might get even worse if your ViewHolders don’t share a common base class. If they are totally different types, in your lists you have the same ugly code when binding the ViewHolder:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {
</span><span class='line'>    val thing = things.get(position)
</span><span class='line'>    if (thing is Animal) {
</span><span class='line'>        (holder as AnimalViewHolder).bind(thing as Animal)
</span><span class='line'>    } else if (thing is Car) {
</span><span class='line'>        (holder as CarViewHolder).bind(thing as Car)
</span><span class='line'>    }
</span><span class='line'>...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>This is a mess. instance-of checks and dozens of casting. Both are code smells and should be even considered anti-patterns.</p>

<p>Many years ago I had a couple of quotes attached to my monitor. One of them was from Effective C++ by Scott Meyers (one of the best IT books ever written) and goes like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Anytime you find yourself writing code of the form “if the object is of type T1, then do something, but if it’s of type T2, then do something else,” slap yourself.</span></code></pre></td></tr></table></div></figure>


<p>If you look at those adapter implementation, there is a lot of slapping to be done.</p>

<ul>
<li>We have type checks and we have lots of ugly casts!</li>
<li>This is simply not object orientated code! OO just celebrated its 50th birthday so we should try to use more of its strengths.</li>
<li>In addition, the way we implemented those adapters is a violation of the “Open-Closed” rule from the SOLID principles. It says: “open for extension but closed for modifications”.</li>
</ul>


<p>But when we would add another type to our classes, another Model, let’s say Rabbit and therefore RabbitViewHolder, we have to change lots of methods in the adapter. A clear violation of the principle. A new kind of object should not lead to modifications in existing methods.</p>

<p>So let’s try to solve this.</p>

<h2>Let’s Fix It</h2>

<p>One alternative would be to put something in the middle to do the translation for us. It could be as simple as putting your Class types in some Map and retrieve the type with one call. It would be something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>override fun getItemViewType(position: Int) : Int 
</span><span class='line'>   = types.get(things.javaClass)</span></code></pre></td></tr></table></div></figure>


<p>It’s much better now isn’t it?
The sad answer is: not really! In the end this just hides instance-of.</p>

<p>How would you implement the onBindViewholder() we’ve seen above? It would be something like: if object is of type T1 then do.. else… so still slapping to be done here.</p>

<p>The goal should be to be able to <strong>add new view types without even touching the adapter</strong>.</p>

<p>Therefore: don’t create your own type mapping in the adapter between the models and the views in the first place. Google suggests using layout ids. With this trick you don’t need the artificial type mappings by simply using the layout id you’re inflating. And of course you probably save another enum as #perfmatters.</p>

<p>But still you need to map those to each other? How?</p>

<p>In the end end you need to map models to views. Could this knowledge move to the model?</p>

<p>It would be tempting to put the type into your model, something like.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fun getType() : Int = R.layout.item_duck</span></code></pre></td></tr></table></div></figure>


<p>This way the adapter implementation for type could be totally generic:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>override fun getItemViewType(pos: Int) = things[pos].getType()</span></code></pre></td></tr></table></div></figure>


<p>Open-Closed principle is applied, no changes needed when adding new models.</p>

<p>But now you totally mixed our layers and indeed broke the complete architecture. Entities know about presentation, arrows pointing into the wrong direction. This must be unacceptable for us.</p>

<p>And again: adding a method into an object to asks for it’s type is not object orientated. You again would just hide the instance-of check.</p>

<h2>The ViewModel</h2>

<p>One way to approach this, is to have separat ViewModels instead of using our Model directly. In the end our problem was that our models are disjoint, they don’t share a common base: a car is not an animal. And this is correct. Only for the presentation layer you need to show them in on list. So when you introduce models for this layer you don’t have this problem, they can have a common base.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>abstract class ViewModel {
</span><span class='line'>    abstract fun type(): Int
</span><span class='line'>}
</span><span class='line'>class DuckViewModel(val duck: Duck): ViewModel() {
</span><span class='line'>    override fun type() = R.layout.duck
</span><span class='line'>}
</span><span class='line'>class CarViewModel(val car: Car): ViewModel() {
</span><span class='line'>    override fun type() = R.layout.car
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>So you simply wrapped the models. You don’t need to modify them at all and keep view specific code in those new ViewModels.</p>

<p>This way you can also add all formatting logic into there and use Android’s new Data Binding Library.</p>

<p>The idea of using list of ViewModels in the adapter instead of the Models helps especially when you need artificial items like dividers, section headers or simply advertisement items.</p>

<p>This is one approach to solve the problem. But not the only one.</p>

<h2>The Visitor</h2>

<p>Let’s go back to our initial idea of only using the Model. If you would have lots of model classes, maybe you don’t want to create lots of ViewModel one each.</p>

<p>Thinking of the type() method that you added in the first place into the model, you missed some decoupling. You need to avoid having the presentation code in there directly. You need to indirect it, move the actual type knowledge to somewhere else. How about adding an interface into this type() method:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>interface Visitable {
</span><span class='line'>    fun type(typeFactory: TypeFactory) : Int
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Now you might ask what have you won here as the factory would still need to branch between types like the adapter did in the first place, right?</p>

<p>No it does not! This approach will be based on the Visitor pattern, one of the classic Gang-of-Four pattern. All the model will do, is forwarding this type call:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>interface Animal : Visitable
</span><span class='line'>interface Car : Visitable
</span><span class='line'>class Mouse: Animal {
</span><span class='line'>    override fun type(typeFactory: TypeFactory) 
</span><span class='line'>        = typeFactory.type(this)
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The factory has variations you need:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>interface TypeFactory {
</span><span class='line'>    fun type(duck: Duck): Int
</span><span class='line'>    fun type(mouse: Mouse): Int
</span><span class='line'>    fun type(dog: Dog): Int
</span><span class='line'>    fun type(car: Car): Int
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>This way it’s totally type safe, no instance-of, no casts needed at all.</p>

<p>And the responsibility of the factory is clear: it knows about the view types:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class TypeFactoryForList : TypeFactory {
</span><span class='line'>    override fun type(duck: Duck) = R.layout.duck
</span><span class='line'>    override fun type(mouse: Mouse) = R.layout.mouse
</span><span class='line'>    override fun type(dog: Dog) = R.layout.dog
</span><span class='line'>    override fun type(car: Car) = R.layout.car</span></code></pre></td></tr></table></div></figure>


<p>I could even also create ViewHolders to keep the knowledge about the ids in one place. So when adding a new view, this is the place to add. This should be pretty SOLID. You might need another method for new types but not modify any existing method: Open for Extension, Closed for Modification.</p>

<p>Now you might ask: why not use the factory directly from adapter instead using the indirection of the model?</p>

<p>Only with this path you get the type safety without need of casts and type checks. Take a moment to realize this here, there is not a single cast needed!This indirection is the magic behind Visitor Pattern.</p>

<p>Following this approach leaves the adapter with a very generic implementation that hardly ever needs to be changed.</p>

<h2>Conclusion</h2>

<ul>
<li>Try to keep your presentation code clean.</li>
<li>Instance-of checks should be a red flag!</li>
<li>Look out for down casting as it’s a code smell.</li>
<li>Try to replace those two with correct OO usage. Think about interfaces and inheritance.</li>
<li>Try to use generics to prevent castings.</li>
<li>Use ViewModels.</li>
<li>Check out for usages for the Visitor pattern.</li>
</ul>


<p>I would be happy to learn other ideas to make our Adapters cleaner.</p>

<p>PS: thanks to Jan M and Dmitri Kudrenko who crated examples on Github for Java and Kotlin:
<a href="https://github.com/dmitrikudrenko/BetterAdapters">https://github.com/dmitrikudrenko/BetterAdapters</a>
<a href="https://github.com/meierjan/BetterAdapters">https://github.com/meierjan/BetterAdapters</a></p>

<h2>reference</h2>

<ul>
<li><a href="https://medium.com/@dpreussler/writing-better-adapters-1b09758407d2#.vc2pos5tm">Writing Better Adapters</a></li>
<li><a href="https://juejin.im/entry/57fda1fe5bbb50005b3fef76?utm_source=gold-miner&amp;utm_medium=readme&amp;utm_campaign=github">关于 Android Adapter，你的实现方式可能一直都有问题</a></li>
<li><a href="http://github.com/flyfire/MultitypeBaseAdapter">MultitypeBaseAdapter</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Choreographer in Android]]></title>
    <link href="http://Solarex.github.io/blog/2016/10/10/choreographer-in-android/"/>
    <updated>2016-10-10T20:38:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2016/10/10/choreographer-in-android</id>
    <content type="html"><![CDATA[<p>Choreographer is the one which acts like a interface between application view system and lower layer display system for rendering the views.</p>

<p>ViewRootImpl is the ViewParent or root below which only Activity window DecorView will be attached. All the view layouts set by the activity through <code>setContentView()</code> will attached the DecorView whose parent is ViewRootImpl. Actually ViewRootImpl is not a View its just a ViewParent which handled and manages the View Hierarchies for displaying, handling input events etc.</p>

<p>The number of root views that are active in your process. Each root view is associated with a window, so this can help you identify memory leaks involving dialogs or other windows.</p>

<!-- more -->


<p>ViewRootImpl will get the requests for refresh or view update from its child and interact with Choreographer for drawing the view hierarchy to the display system.</p>

<p>Choreographer instance will be created for each thread wise. Each application thread will have separate instance of Choreographer. When this instance is created then it itself register to for VSYNC event to the lower layer and now it ready to handle the ViewRootImpl/Application refresh request and interaction with the lower layer.</p>

<p>When ever ViewRootImpl got request from View hierarchy to refresh or update or invalidate then it request Choreographer for refresh by registering a callback. When Choreographer got any request then it request for next VSYNC event from the lower layer and when it got he VSYNC event then it asks ViewRootImpl by calling the registered Callback to handle the drawing accordingly. Also when ever ViewRootImpl wants to redraw the view then this thing will repeat.</p>

<p>When Choreographer receives VSYNC event then it handled the below event handling in order to handle the drawing or display.</p>

<ul>
<li><p>Input  handling : All received input event received and maintained in the query and all these input event will be processed now only.</p></li>
<li><p>Animation : Handle all the registered animations from ViewRootImpl or from Application or Activity.</p></li>
<li><p>View Traversal (Drawing/Rendering of Views) : Handles the View drawing if ViewRootImpl has registered for refresh.</p></li>
</ul>


<p>Choreographer is the main component which registers application main thread to display system and coordinate between the application view drawing component to the display system for synchronizing VSYNC with the application event, animation and draw handling.</p>

<h2>reference</h2>

<ul>
<li><a href="https://nayaneshguptetechstuff.wordpress.com/2014/07/01/what-is-choreographeri-in-android/">WHAT IS CHOREOGRAPHER IN ANDROID?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VSYNC in Android]]></title>
    <link href="http://Solarex.github.io/blog/2016/10/09/vsync-in-android/"/>
    <updated>2016-10-09T20:43:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2016/10/09/vsync-in-android</id>
    <content type="html"><![CDATA[<h2>In Android What is VSYNC and its usage?</h2>

<p>VSYNC is the event posted periodically by the kernal at fixed interval where the input handling, Animation and Window drawing happening synchroniiously at the same VSYNC interval. Below have given the detail explanation about the VSYNC event before VSYNC is introduced and after VSYNC is introduced.</p>

<!-- more -->


<h3>Before VSYNC is introduced:</h3>

<p>Before VSYNC is introduced then there was no synchronization happening for Input, animation and draw. As when there is an input it will be handled, also as when there is an animation or change in view then it will be drawn which results in too many CPU operations and some complex animations where some time operations or drawing happens exceeds human identifcatrion of view change. Suppose human eye can see clearly and differentiate 60FPS / seconds. In this case it might happen more then 60FPS some time.</p>

<p>As there is no sync happens between these 3 handling so input handling might redraw the view, animation also might redraw the view and some changes in view is also redraw. So too many redraw will happen.</p>

<h3>After VSYNC is introduced:</h3>

<p>Not this VSYNC is been delivered at an interval of 16.67 MS which is around 60 FPS/second. In this VSYNC event only handling of input will be happend, if input arrived before that then it will be queued and handled at VSYNC event only. After handling this VSYNC event, will handle the animation and followed by draw. Now all these 3 handling is synchronized and handling will be initiated on VSYNC event. VSYNC event make sure handling and drawing of the window happen at fixed interval and thus by avoid unnecessary drawing and handling.</p>

<p>Lets check below Google butter document for VSYNC handling.<a href="https://docs.google.com/viewer?url=http%3A%2F%2Fcommondatastorage.googleapis.com%2Fio2012%2Fpresentations%2Flive%2520to%2520website%2F109.pdf">For Butter or Worse : Smoothing out performance in Android UIs</a></p>

<h2>reference</h2>

<ul>
<li><a href="https://nayaneshguptetechstuff.wordpress.com/2014/07/01/what-is-vsyc-in-android/">WHAT IS VSYNC IN ANDROID?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aspect Oriented Programming in Android]]></title>
    <link href="http://Solarex.github.io/blog/2016/09/20/aspect-oriented-programming-in-android/"/>
    <updated>2016-09-20T18:24:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2016/09/20/aspect-oriented-programming-in-android</id>
    <content type="html"><![CDATA[<p>Aspect-oriented programming entails breaking down program logic into &ldquo;concerns&rdquo; (cohesive areas of functionality). This means, that with AOP, we can add executable blocks to some source code without explicitly changing it. This programming paradigm pretends that “cross-cutting concerns” (the logic needed at many places, without a single class where to implement them) should be implemented once and injected it many times into those places.</p>

<p>Code injection becomes a very important part of AOP: it is useful for dealing with the mentioned &ldquo;concerns&rdquo; that cut across the whole application, such as logging or performance monitoring, and, using it in this way, should not be something used rarely as you might think, quite the contrary; every programmer will come into a situation where this ability of injecting code, could prevent a lot of pain and frustration.</p>

<p>AOP is a paradigm that has been with us for many years, and I found it very useful to apply it to Android. After some investigation I consider that we can get a lot of advantages and very useful stuff when making use of it.</p>

<!-- more -->


<h2>Terminology (Mini glossary)</h2>

<p>Before we get started, let&rsquo;s have a look at some vocabulary that we should keep in mind:</p>

<ul>
<li><p>Cross-cutting concerns:Even though most classes in an OO model will perform a single, specific function, they often share common, secondary requirements with other classes. For example, we may want to add logging to classes within the data-access layer and also to classes in the UI layer whenever a thread enters or exits a method. Even though each class has a very different primary functionality, the code needed to perform the secondary functionality is often identical.</p></li>
<li><p>Advice: The code that is injected to a class file. Typically we talk about before, after, and around advices, which are executed before, after, or instead of a target method. It’s possible to make also other changes than injecting code into methods, e.g. adding fields or interfaces to a class.</p></li>
<li><p>Joint point: A particular point in a program that might be the target of code injection, e.g. a method call or method entry.</p></li>
<li><p>Pointcut: An expression which tells a code injection tool where to inject a particular piece of code, i.e. to which joint points to apply a particular advice. It could select only a single such point – e.g. execution of a single method – or many similar points – e.g. executions of all methods marked with a custom annotation such as @DebugTrace.</p></li>
<li><p>Aspect: The combination of the pointcut and the advice is termed an aspect. For instance, we add a logging aspect to our application by defining a pointcut and giving the correct advice.</p></li>
<li><p>Weaving: The process of injecting code – advices – into the target places – joint points.</p></li>
</ul>


<p>This picture summarizes a bit a few of these concepts:</p>

<center><img src="http://Solarex.github.io/images/aop.png"/></center>


<h2>So…where and when can we apply AOP?</h2>

<p>Some examples of cross-cutting concerns are:</p>

<ul>
<li>Logging</li>
<li>Persistance</li>
<li>Performance monitoring</li>
<li>Data Validation</li>
<li>Caching</li>
<li>Many others</li>
</ul>


<p>And in relation with &ldquo;when the magic happens&rdquo;, the code can be injected at different points in time:</p>

<ul>
<li><p>At run-time: your code has to explicitly ask for the enhanced code, e.g. by using a Dynamic Proxy (this is arguably not true code injection). Anyway here is an example I created for testing it.</p></li>
<li><p>At load-time: the modification are performed when the target classes are being loaded by Dalvik or ART. Byte-code or Dex-code weaving.</p></li>
<li><p>At build-time: you add an extra step to your build process to modify the compiled classes before packaging and deploying your application. Source-code weaving.</p></li>
</ul>


<p>Depending on the situation you will be choosing one or the other :).</p>

<h2>Tools and Libraries</h2>

<p>There are a few tools and libraries out there that help us use AOP:</p>

<ul>
<li><p><a href="https://eclipse.org/aspectj/">AspectJ</a>: A seamless aspect-oriented extension to the Javatm programming language (works with Android).</p></li>
<li><p><a href="https://github.com/crimsonwoods/javassist-android">Javassist for Android</a>: An android porting of the very well known java library Javassist for bytecode manipulation.</p></li>
<li><p><a href="https://code.google.com/p/dexmaker/">DexMaker</a>: A Java-language API for doing compile time or runtime code generation targeting the Dalvik VM.</p></li>
<li><p><a href="http://asm.ow2.org/asmdex-index.html">ASMDEX</a>: A bytecode manipulation library as ASM but it handles the DEX bytecode used by Android executables.</p></li>
</ul>


<h2>Why AspectJ?</h2>

<p>For our example below I have chosen AspectJ for the following reasons:</p>

<ul>
<li>Very powerful.</li>
<li>Supports build time and load time code injection.</li>
<li>Easy to use.</li>
</ul>


<h2>Example</h2>

<p>Let&rsquo;s say we want to measure the performance of a method (how long takes its execution). For doing this we want to mark our method with a <code>@DebugTrace</code> annotation and want to see the results using the logcat transparently without having to write code in each annotated method. Our approach is to use AspectJ for this purpose.</p>

<p>This is what is gonna happen under the hood:</p>

<ul>
<li>The annotation will be processed in a new step we are adding to our compilation fase.</li>
<li>Necessary boilerplate code will be generated and injected in the annotated method.</li>
</ul>


<p>I have to say here that while I was researching I found <a href="https://github.com/JakeWharton/hugo">Jake Wharton&rsquo;s Hugo Library</a> that it is suppose to do the same, so I refactored my code and looks similar to it, although mine is a more primitive and simpler version (I have learnt a lot by looking at its code by the way).</p>

<center><img src="http://Solarex.github.io/images/aspectweaving.png"/></center>


<h2>Project structure</h2>

<p>We will break up our sample application into 2 modules, the first will contain our android app and the second will be an android library that will make use of AspectJ library for weaving (code injection).</p>

<p>You may be wondering why we are using an android library module instead of a pure java library: <strong>the reason is that for AspectJ to work on Android we have to make use of some hooks when compiling our app and this is only possible using the android-library gradle plugin.</strong> (Do not worry about this yet, cause I will be giving some more details later).</p>

<h2>Creating our annotation</h2>

<p>We first create our Java annotation. This annotation will be persisted in the class (<code>RetentionPolicy.CLASS</code>) file and we will be able to annotate any constructor or method with it (<code>ElementType.CONSTRUCTOR</code> and <code>ElementType.METHOD</code>). So our <code>DebugTrace.java</code> file will look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Retention(RetentionPolicy.CLASS)
</span><span class='line'>@Target({ ElementType.CONSTRUCTOR, ElementType.METHOD })
</span><span class='line'>public @interface DebugTrace {}</span></code></pre></td></tr></table></div></figure>


<h2>Our StopWatch for performance monitoring</h2>

<p>I have created a simple class that encapsulates time start/stop. Here is our <code>StopWatch.java</code> class:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * Class representing a StopWatch for measuring time.
</span><span class='line'> */
</span><span class='line'>public class StopWatch {
</span><span class='line'>  private long startTime;
</span><span class='line'>  private long endTime;
</span><span class='line'>  private long elapsedTime;
</span><span class='line'>
</span><span class='line'>  public StopWatch() {
</span><span class='line'>    //empty
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  private void reset() {
</span><span class='line'>    startTime = 0;
</span><span class='line'>    endTime = 0;
</span><span class='line'>    elapsedTime = 0;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public void start() {
</span><span class='line'>    reset();
</span><span class='line'>    startTime = System.nanoTime();
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public void stop() {
</span><span class='line'>    if (startTime != 0) {
</span><span class='line'>      endTime = System.nanoTime();
</span><span class='line'>      elapsedTime = endTime - startTime;
</span><span class='line'>    } else {
</span><span class='line'>      reset();
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  public long getTotalTimeMillis() {
</span><span class='line'>    return (elapsedTime != 0) ? TimeUnit.NANOSECONDS.toMillis(endTime - startTime) : 0;
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>DebugLog Class</h2>

<p>I just decorated the &ldquo;android.util.Log&rdquo; cause my first idea was to add some more functionality to the android log. Here it is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * Wrapper around {@link android.util.Log}
</span><span class='line'> */
</span><span class='line'>public class DebugLog {
</span><span class='line'>
</span><span class='line'>  private DebugLog() {}
</span><span class='line'>
</span><span class='line'>  /**
</span><span class='line'>   * Send a debug log message
</span><span class='line'>   *
</span><span class='line'>   * @param tag Source of a log message.
</span><span class='line'>   * @param message The message you would like logged.
</span><span class='line'>   */
</span><span class='line'>  public static void log(String tag, String message) {
</span><span class='line'>    Log.d(tag, message);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Our Aspect</h2>

<p>Now it is time to create our aspect class (<code>TraceAspect.java</code>) that will be in charge of managing the annotation processing and source-code weaving.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'> * Aspect representing the cross cutting-concern: Method and Constructor Tracing.
</span><span class='line'> */
</span><span class='line'>@Aspect
</span><span class='line'>public class TraceAspect {
</span><span class='line'>
</span><span class='line'>  private static final String POINTCUT_METHOD =
</span><span class='line'>      "execution(@org.android10.gintonic.annotation.DebugTrace * *(..))";
</span><span class='line'>
</span><span class='line'>  private static final String POINTCUT_CONSTRUCTOR =
</span><span class='line'>      "execution(@org.android10.gintonic.annotation.DebugTrace *.new(..))";
</span><span class='line'>
</span><span class='line'>  @Pointcut(POINTCUT_METHOD)
</span><span class='line'>  public void methodAnnotatedWithDebugTrace() {}
</span><span class='line'>
</span><span class='line'>  @Pointcut(POINTCUT_CONSTRUCTOR)
</span><span class='line'>  public void constructorAnnotatedDebugTrace() {}
</span><span class='line'>
</span><span class='line'>  @Around("methodAnnotatedWithDebugTrace() || constructorAnnotatedDebugTrace()")
</span><span class='line'>  public Object weaveJoinPoint(ProceedingJoinPoint joinPoint) throws Throwable {
</span><span class='line'>    MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();
</span><span class='line'>    String className = methodSignature.getDeclaringType().getSimpleName();
</span><span class='line'>    String methodName = methodSignature.getName();
</span><span class='line'>
</span><span class='line'>    final StopWatch stopWatch = new StopWatch();
</span><span class='line'>    stopWatch.start();
</span><span class='line'>    Object result = joinPoint.proceed();
</span><span class='line'>    stopWatch.stop();
</span><span class='line'>
</span><span class='line'>    DebugLog.log(className, buildLogMessage(methodName, stopWatch.getTotalTimeMillis()));
</span><span class='line'>
</span><span class='line'>    return result;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  /**
</span><span class='line'>   * Create a log message.
</span><span class='line'>   *
</span><span class='line'>   * @param methodName A string with the method name.
</span><span class='line'>   * @param methodDuration Duration of the method in milliseconds.
</span><span class='line'>   * @return A string representing message.
</span><span class='line'>   */
</span><span class='line'>  private static String buildLogMessage(String methodName, long methodDuration) {
</span><span class='line'>    StringBuilder message = new StringBuilder();
</span><span class='line'>    message.append("Gintonic --&gt; ");
</span><span class='line'>    message.append(methodName);
</span><span class='line'>    message.append(" --&gt; ");
</span><span class='line'>    message.append("[");
</span><span class='line'>    message.append(methodDuration);
</span><span class='line'>    message.append("ms");
</span><span class='line'>    message.append("]");
</span><span class='line'>
</span><span class='line'>    return message.toString();
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Some important points to mention here:</p>

<ul>
<li><p>We declare 2 public methods with 2 pointcuts that will filter all methods and constructors annotated with &ldquo;org.android10.gintonic.annotation.DebugTrace&rdquo;.</p></li>
<li><p>We define the &ldquo;weaveJointPoint(ProceedingJoinPoint joinPoint)&rdquo; annotated with &ldquo;@Around&rdquo; which means that our code injection will happen around the annotated method with &ldquo;@DebugTrace&rdquo;.</p></li>
<li><p>The line &ldquo;Object result = joinPoint.proceed();&rdquo; is where the annotated method execution happens, so before this, is where we start our StopWatch to start measuring time, and after that, we stop it.</p></li>
<li><p>Finally we build our message and print it using the Android Log.</p></li>
</ul>


<h2>Making AspectJ to work with Android</h2>

<p>Now everything should be working, but, if we compile our sample, we will see that nothing happens.</p>

<p>The reason is that we have to use the AspectJ compiler (ajc, an extension of the java compiler) to weave all classes that are affected by an aspect. That&rsquo;s why, as I mention before, we need to add some extra configuration to our gradle build task to make it work.</p>

<p>This is how our <code>build.gradle</code> looks like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import com.android.build.gradle.LibraryPlugin
</span><span class='line'>import org.aspectj.bridge.IMessage
</span><span class='line'>import org.aspectj.bridge.MessageHandler
</span><span class='line'>import org.aspectj.tools.ajc.Main
</span><span class='line'>
</span><span class='line'>buildscript {
</span><span class='line'>  repositories {
</span><span class='line'>    mavenCentral()
</span><span class='line'>  }
</span><span class='line'>  dependencies {
</span><span class='line'>    classpath 'com.android.tools.build:gradle:0.12.+'
</span><span class='line'>    classpath 'org.aspectj:aspectjtools:1.8.1'
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>apply plugin: 'android-library'
</span><span class='line'>
</span><span class='line'>repositories {
</span><span class='line'>  mavenCentral()
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>dependencies {
</span><span class='line'>  compile 'org.aspectj:aspectjrt:1.8.1'
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>android {
</span><span class='line'>  compileSdkVersion 19
</span><span class='line'>  buildToolsVersion '19.1.0'
</span><span class='line'>
</span><span class='line'>  lintOptions {
</span><span class='line'>    abortOnError false
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>android.libraryVariants.all { variant -&gt;
</span><span class='line'>  LibraryPlugin plugin = project.plugins.getPlugin(LibraryPlugin)
</span><span class='line'>  JavaCompile javaCompile = variant.javaCompile
</span><span class='line'>  javaCompile.doLast {
</span><span class='line'>    String[] args = ["-showWeaveInfo",
</span><span class='line'>                     "-1.5",
</span><span class='line'>                     "-inpath", javaCompile.destinationDir.toString(),
</span><span class='line'>                     "-aspectpath", javaCompile.classpath.asPath,
</span><span class='line'>                     "-d", javaCompile.destinationDir.toString(),
</span><span class='line'>                     "-classpath", javaCompile.classpath.asPath,
</span><span class='line'>                     "-bootclasspath", plugin.project.android.bootClasspath.join(
</span><span class='line'>        File.pathSeparator)]
</span><span class='line'>
</span><span class='line'>    MessageHandler handler = new MessageHandler(true);
</span><span class='line'>    new Main().run(args, handler)
</span><span class='line'>
</span><span class='line'>    def log = project.logger
</span><span class='line'>    for (IMessage message : handler.getMessages(null, true)) {
</span><span class='line'>      switch (message.getKind()) {
</span><span class='line'>        case IMessage.ABORT:
</span><span class='line'>        case IMessage.ERROR:
</span><span class='line'>        case IMessage.FAIL:
</span><span class='line'>          log.error message.message, message.thrown
</span><span class='line'>          break;
</span><span class='line'>        case IMessage.WARNING:
</span><span class='line'>        case IMessage.INFO:
</span><span class='line'>          log.info message.message, message.thrown
</span><span class='line'>          break;
</span><span class='line'>        case IMessage.DEBUG:
</span><span class='line'>          log.debug message.message, message.thrown
</span><span class='line'>          break;
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Our test method</h2>

<p>Let&rsquo;s use our cool aspect annotation by adding it to a test method. I have created a method inside the main activity for testing purpose. Let&rsquo;s have a look at it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@DebugTrace
</span><span class='line'>  private void testAnnotatedMethod() {
</span><span class='line'>    try {
</span><span class='line'>      Thread.sleep(10);
</span><span class='line'>    } catch (InterruptedException e) {
</span><span class='line'>      e.printStackTrace();
</span><span class='line'>    }
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h2>Executing our application</h2>

<p>We build and install our app on an android device/emulator by executing the gradle command:<code>gradlew clean build installDebug</code></p>

<p>If we open the logcat and execute our sample, we will see a debug log with:</p>

<p><code>Gintonic --&gt; testAnnotatedMethod --&gt; [10ms]</code></p>

<p>Our first android application using AOP worked!</p>

<p>You can use the <a href="https://play.google.com/store/apps/details?id=jp.itplus.android.dex.dump&amp;hl=en">Dex Dump</a> android application (from your phone), or any any other reverse engineering tool for decompiling the apk and see the source code generated and injected.</p>

<h2>Recap</h2>

<p>So to recap and summarize:</p>

<ul>
<li>We have had a taste of Aspect Oriented programming paradigm.</li>
<li>Code Injection becomes a very important part of this approach (AOP).</li>
<li>AspectJ is a very powerful and easy to use tool for source code weaving in Android applications.</li>
<li>We have created a working example using AOP capabilities.</li>
</ul>


<h2>Conclusion</h2>

<p>Aspect Oriented Programming is very powerful. Using it the right way, you can avoid duplicating a lot of code when you have &ldquo;cross-cutting concerns&rdquo; in your Android apps, like performance monitoring, as we have seen in our example. I do encourage you to give it a try, you will find it very useful.</p>

<p>I hope you like the article, the purpose of it was to share what I&rsquo;ve learnt so far, so feel free to comment and give feedback, or even better, fork the code and play a bit with it.</p>

<p>I&rsquo;m sure we can add very interesting stuff to our AOP module in the sample app. Ideas are very welcome ;).</p>

<h2>Source Code</h2>

<p>You can check 2 examples here, the first one uses AspectJ and the second one uses a Dynamic Proxy approach:</p>

<ul>
<li><a href="https://github.com/android10/Android-AOPExample.">https://github.com/android10/Android-AOPExample.</a></li>
<li><a href="https://github.com/android10/DynamicProxy_Java_Sample">https://github.com/android10/DynamicProxy_Java_Sample</a></li>
</ul>


<h2>Resources</h2>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Aspect-oriented_programming">Aspect-oriented programming</a>.</li>
<li><a href="http://en.wikipedia.org/wiki/Aspect-oriented_software_development">Aspect-oriented software development</a>.</li>
<li><a href="http://www.javacodegeeks.com/2011/09/practical-introduction-into-code.html">Practical Introduction into Code Injection with AspectJ, Javassist, and Java Proxy</a>.</li>
<li><a href="http://java.dzone.com/articles/implementing-build-time">Implementing Build-time Bytecode Instrumentation With Javassist</a>.</li>
<li><a href="http://www.eclipse.org/aspectj/doc/released/faq.php">Frequently Asked Questions about AspectJ</a>.</li>
<li><a href="http://blog.espenberntsen.net/2010/03/20/aspectj-cheat-sheet/">AspectJ Cheat Sheet</a>.</li>
</ul>


<h2>reference</h2>

<ul>
<li><a href="https://fernandocejas.com/2014/08/03/aspect-oriented-programming-in-android/">Aspect Oriented Programming in Android</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using annotations element-value pairs in AspectJ]]></title>
    <link href="http://Solarex.github.io/blog/2016/09/17/using-annotations-element-value-pairs-in-aspectj/"/>
    <updated>2016-09-17T16:18:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2016/09/17/using-annotations-element-value-pairs-in-aspectj</id>
    <content type="html"><![CDATA[<h2>Annotations with element-value pairs</h2>

<p>Annotations by themselves are really powerful. They give direct control over when an aspect should be run to the developer. Adding element-value pairs makes the already powerful annotations even more powerful, since it enables you to pass information into the aspect.</p>

<!-- more -->


<h2>Description</h2>

<p>Creating an annotation with an element-value pair is in itself quite simple. It can take different parameters and it’s up to the aspect developer to use these in their aspects. The syntax is  <code>@annotation(elementValuePairs)</code> and the <code>elementValuePairs</code> is defined by <code>[keyName] = [value]</code>. If you want more than one <code>elementValuePairs</code>  you use the <code>,</code>  as a delimiter.</p>

<p>You can get the code for this blog series at the Git repository here.</p>

<p>Let’s start coding!</p>

<p>Requirements: Maven, Java 8, (preferably) an IDE (I’m using IntelliJ)</p>

<p>Adding a element-value pair is quite simple. Getting access to it from the aspect and advice body is a little bit tricky. Let’s start with a example.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.jayway.blog;
</span><span class='line'>
</span><span class='line'>import java.lang.annotation.ElementType;
</span><span class='line'>import java.lang.annotation.Retention;
</span><span class='line'>import java.lang.annotation.RetentionPolicy;
</span><span class='line'>import java.lang.annotation.Target;
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * Created by Steve on 2015-09-07.
</span><span class='line'> */
</span><span class='line'>@Retention(RetentionPolicy.RUNTIME)
</span><span class='line'>@Target(ElementType.METHOD)
</span><span class='line'>public @interface YourAnnotation {
</span><span class='line'>    public boolean isRun() default true;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The <code>@Retention</code>  and <code>@Target</code>  define the scope of the annotation and you can add multiple <code>@Target</code>  values. We have a boolean with the name <code>isRun()</code> with a default value of <code>true</code> . So let’s continue and access the <code>isRun()</code>  from the aspect.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.jayway.blog;
</span><span class='line'>
</span><span class='line'>import org.aspectj.lang.ProceedingJoinPoint;
</span><span class='line'>import org.aspectj.lang.annotation.*;
</span><span class='line'>import org.aspectj.lang.JoinPoint;
</span><span class='line'>
</span><span class='line'>@Aspect
</span><span class='line'>public class YourAspect {
</span><span class='line'>
</span><span class='line'>    //Defines a pointcut that we can use in the @Before,@After, @AfterThrowing, @AfterReturning,@Around specifications
</span><span class='line'>    //The pointcut will look for the @YourAnnotation
</span><span class='line'>    @Pointcut("@annotation(yourAnnotationVariableName)")
</span><span class='line'>    public void annotationPointCutDefinition(YourAnnotation yourAnnotationVariableName){
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    //Defines a pointcut that we can use in the @Before,@After, @AfterThrowing, @AfterReturning,@Around specifications
</span><span class='line'>    //The pointcut is a catch-all pointcut with the scope of execution
</span><span class='line'>    @Pointcut("execution(* *(..))")
</span><span class='line'>    public void atExecution(){}
</span><span class='line'>
</span><span class='line'>    //Defines a pointcut where the @YourAnnotation exists
</span><span class='line'>    //and combines that with an catch-all pointcut with the scope of execution
</span><span class='line'>    @Around("annotationPointCutDefinition(yourAnnotationVariableName) && atExecution()")
</span><span class='line'>    //ProceedingJointPoint = the reference of the call to the method.
</span><span class='line'>    //The difference between ProceedingJointPoint and JointPoint is that a JointPoint can't be continued (proceeded)
</span><span class='line'>    //A ProceedingJointPoint can be continued (proceeded) and is needed for an Around advice
</span><span class='line'>    public Object aroundAdvice(ProceedingJoinPoint joinPoint, YourAnnotation yourAnnotationVariableName) throws Throwable {
</span><span class='line'>        if(yourAnnotationVariableName.isRun()) {
</span><span class='line'>            //Default Object that we can use to return to the consumer
</span><span class='line'>            Object returnObject = null;
</span><span class='line'>
</span><span class='line'>            try {
</span><span class='line'>                System.out.println("YourAspect's aroundAdvice's body is now executed Before yourMethodAround is called.");
</span><span class='line'>                //We choose to continue the call to the method in question
</span><span class='line'>                returnObject = joinPoint.proceed();
</span><span class='line'>                //If no exception is thrown we should land here and we can modify the returnObject, if we want to.
</span><span class='line'>            } catch (Throwable throwable) {
</span><span class='line'>                //Here we can catch and modify any exceptions that are called
</span><span class='line'>                //We could potentially not throw the exception to the caller and instead return "null" or a default object.
</span><span class='line'>                throw throwable;
</span><span class='line'>            } finally {
</span><span class='line'>                //If we want to be sure that some of our code is executed even if we get an exception
</span><span class='line'>                System.out.println("YourAspect's aroundAdvice's body is now executed After yourMethodAround is called.");
</span><span class='line'>            }
</span><span class='line'>            return returnObject;
</span><span class='line'>        }
</span><span class='line'>        else{
</span><span class='line'>            return joinPoint.proceed();
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @After("annotationPointCutDefinition(yourAnnotationVariableName) && atExecution()")
</span><span class='line'>    //JointPoint = the reference of the call to the method
</span><span class='line'>    public void printNewLine(JoinPoint pointcut, YourAnnotation yourAnnotationVariableName){
</span><span class='line'>        //Just prints new lines after each method that's executed in
</span><span class='line'>        System.out.print("\n\r");
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>We specify that the  <code>annotationPointCutDefinition(YourAnnotation yourAnnotationVariableName)</code> contains a <code>YourAnnotation</code> reference. The variable reference is then used in the <code>@Pointcut("@annotation(yourAnnotationVariableName")</code>  instead of the generic <code>YourAnnotation</code> that were used in the earlier examples. By passing the variable to the <code>@annotation</code> we gain access to it. We need to pass the variable into the <code>@Around</code>  advice to gain access to the variable in the advice body.  Once in the advice body we can use it like a normal method parameter.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.jayway.blog;
</span><span class='line'>
</span><span class='line'>public class YourClass {
</span><span class='line'>
</span><span class='line'>    public static void main(String[] args) {
</span><span class='line'>        YourClass yourClass = new YourClass();
</span><span class='line'>        yourClass.yourMethodAroundDontRun();
</span><span class='line'>        yourClass.yourMethodAroundRunTrue();
</span><span class='line'>        yourClass.yourMethodAroundRun();
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @YourAnnotation(isRun = false)
</span><span class='line'>    public void yourMethodAroundDontRun(){
</span><span class='line'>        System.out.println("Executing TestTarget.yourMethodAroundDontRun()");
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @YourAnnotation(isRun = true)
</span><span class='line'>    public void yourMethodAroundRunTrue(){
</span><span class='line'>        System.out.println("Executing TestTarget.yourMethodAroundRunTrue()");
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @YourAnnotation()
</span><span class='line'>    public void yourMethodAroundRun(){
</span><span class='line'>        System.out.println("Executing TestTarget.yourMethodAroundRun()");
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>We add the annotation to our methods and have the option to omit the parameter or directly specify the value of the parameter. If the parameter is omitted the parameter will get it’s default value specified in the annotation.</p>

<h2>Conclusion</h2>

<p>Annotations with element-value pairs can be really powerful for both the developer who is using the aspects and as the one developing them. It gives the ability to send parameters into the aspect code. By adding the ability to send parameters we open up the code to be more configurable. By having aspects that are configurable we open up the code to be separated into it’s own independent framework or library.</p>

<h2>reference</h2>

<ul>
<li><a href="http://blog.jayway.com/2015/09/09/using-annotations-element-value-pairs-in-aspectj/">Using annotations element-value pairs in AspectJ </a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Defining pointcuts by annotations]]></title>
    <link href="http://Solarex.github.io/blog/2016/09/16/defining-pointcuts-by-annotations/"/>
    <updated>2016-09-16T16:17:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2016/09/16/defining-pointcuts-by-annotations</id>
    <content type="html"><![CDATA[<h2>Pointcuts by annotations</h2>

<p>Using annotations is more convenient than using patterns. While patterns might be anything between a big cannon and a scalpel the annotations are definitely a scalpel, by only getting the pointcuts that the developer has manually specified.</p>

<p>You can get the code for this blog series at the Git repository <a href="https://github.com/Nosfert/AspectJ-Tutorial-jayway">here</a>.</p>

<!-- more -->


<p>Let’s start coding!</p>

<p>Requirements: Maven, Java 8, (preferably) an IDE (I’m using IntelliJ)</p>

<p>The use of annotations is a precise way to define when an aspect should be run. They are only run when a developer has used the annotation on an object or method.</p>

<p>The errors that can and will occur</p>

<p>Using only annotations creates another problem that we don’t need to think about while using patterns; It will make our advice run twice(or more), because the annotation pointcut don’t specify if it should be run during execution or initialization. The reason for the advice in the pattern example not being executed twice is that the pattern uses the <a href="https://eclipse.org/aspectj/doc/released/progguide/semantics-pointcuts.html">combinator</a> execute(pattern) . We are practically saying that the advice should only look for code that’s executed. There are different combinators that we can use to define when we should run our advice; one of them is execute.</p>

<p>So instead of only using annotations we need to use annotations and a combinator with a pattern. The simplest way is to use a catch all pattern with the combinator execution and then combine it with an annotation.</p>

<p>A real example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.jayway.blog;
</span><span class='line'>
</span><span class='line'>import org.aspectj.lang.ProceedingJoinPoint;
</span><span class='line'>import org.aspectj.lang.annotation.*;
</span><span class='line'>import org.aspectj.lang.JoinPoint;
</span><span class='line'>
</span><span class='line'>@Aspect
</span><span class='line'>public class YourAspect {
</span><span class='line'>    //Defines a pointcut where the @YourAnnotation exists
</span><span class='line'>    //And combines that with a catch all pointcut with the scope of execution
</span><span class='line'>    @Around("@annotation(YourAnnotation) && execution(* *(..))")
</span><span class='line'>    //ProceedingJointPoint = the reference of the call to the method.
</span><span class='line'>    //Difference between ProceedingJointPoint and JointPoint is that a JointPoint can't be continued(proceeded)
</span><span class='line'>    //A ProceedingJointPoint can be continued(proceeded) and is needed for a Around advice
</span><span class='line'>    public Object aroundAdvice(ProceedingJoinPoint joinPoint) throws Throwable {
</span><span class='line'>        //Default Object that we can use to return to the consumer
</span><span class='line'>        Object returnObject = null;
</span><span class='line'>        try {
</span><span class='line'>            System.out.println("YourAspect's aroundAdvice's body is now executed Before yourMethodAround is called.");
</span><span class='line'>            //We choose to continue the call to the method in question
</span><span class='line'>            returnObject = joinPoint.proceed();
</span><span class='line'>            //If no exception is thrown we should land here and we can modify the returnObject, if we want to.
</span><span class='line'>        } catch (Throwable throwable) {
</span><span class='line'>            //Here we can catch and modify any exceptions that are called
</span><span class='line'>            //We could potentially not throw the exception to the caller and instead return "null" or a default object.
</span><span class='line'>            throw throwable;
</span><span class='line'>        }
</span><span class='line'>        finally {
</span><span class='line'>            //If we want to be sure that some of our code is executed even if we get an exception
</span><span class='line'>            System.out.println("YourAspect's aroundAdvice's body is now executed After yourMethodAround is called.");
</span><span class='line'>        }
</span><span class='line'>        return returnObject;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>In this example we are using the combinator execute with a catch-all pattern and annotations. Basically we are looking for any code that’s executed and has the annotation @YourAnnotation. There is a whole list of different combinators at AspectJ’s homepage. Each one of them can take different patterns to help you define when your advice should be triggered.</p>

<p>Implementing annotation in a class</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.jayway.blog;
</span><span class='line'>
</span><span class='line'>public class YourClass {
</span><span class='line'>
</span><span class='line'>    public static void main(String[] args) {
</span><span class='line'>        YourClass yourClass = new YourClass();
</span><span class='line'>        yourClass.yourMethodAround();
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @YourAnnotation
</span><span class='line'>    public void yourMethodAround(){
</span><span class='line'>        System.out.println("Executing TestTarget.yourMethodAround()");
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>By adding the <code>@YourAnnotation</code>  before any method the aspect will find the annotation and execute the advice body.</p>

<h2>Complexity and @Pointcut</h2>

<p>When there is a need to define pointcuts that are a bit more complex we can define a standalone pointcut that we can reuse. By using the @Pointcut attribute we can define a specific pointcut and when it should get run. We can then use the name of the pointcut as a reference in the @Before ,  @After, @AfterThrowing,  @AfterReturn  and @Around .</p>

<p>A real example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.jayway.blog;
</span><span class='line'>
</span><span class='line'>import org.aspectj.lang.ProceedingJoinPoint;
</span><span class='line'>import org.aspectj.lang.annotation.*;
</span><span class='line'>import org.aspectj.lang.JoinPoint;
</span><span class='line'>
</span><span class='line'>@Aspect
</span><span class='line'>public class YourAspect {
</span><span class='line'>
</span><span class='line'>    //Defines a pointcut that we can use in the @Before,@After, @AfterThrowing, @AfterReturning,@Around specifications
</span><span class='line'>    //The pointcut will look for the @YourAnnotation
</span><span class='line'>    @Pointcut("@annotation(YourAnnotation)")
</span><span class='line'>    public void annotationPointCutDefinition(){
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    //Defines a pointcut that we can use in the @Before,@After, @AfterThrowing, @AfterReturning,@Around specifications
</span><span class='line'>    //The pointcut is a catch all pointcut with the scope of execution
</span><span class='line'>    @Pointcut("execution(* *(..))")
</span><span class='line'>    public void atExecution(){}
</span><span class='line'>
</span><span class='line'>    @After("annotationPointCutDefinition() && atExecution()")
</span><span class='line'>    //JointPoint = the reference of the call to the method
</span><span class='line'>    public void printNewLine(JoinPoint pointcut){
</span><span class='line'>        //Just prints new lines after each method that's executed in
</span><span class='line'>        System.out.print("\n\r");
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>We got the same result as the earlier example but we are using the name of the pointcuts so we can reuse them.</p>

<h2>Conclusion</h2>

<p>Annotations can be a precise tool, as a pointcut will not trigger if the annotations are not in the code. But there are some weak points that we need to try and cover up with the use of combinators and patterns. Combining patterns and annotations is a good middle road when we want to specify when the advice should be run.</p>

<h2>reference</h2>

<ul>
<li><a href="http://blog.jayway.com/2015/09/08/defining-pointcuts-by-annotations/">Defining pointcuts by annotations</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Defining pointcuts by pattern]]></title>
    <link href="http://Solarex.github.io/blog/2016/09/15/defining-pointcuts-by-pattern/"/>
    <updated>2016-09-15T16:16:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2016/09/15/defining-pointcuts-by-pattern</id>
    <content type="html"><![CDATA[<h2>Pointcuts by pattern</h2>

<p>Going through all the different ways of defining pointcuts and explaining them in an easy manner would be a near impossible feat for this post. Rather than aiming for the impossible let’s narrow down the scope, and talk about the most commonly used pointcut definitions and how we can experiment with them. We will get you started with defining your own pointcuts!</p>

<p>You can get the code for this blog series at the Git repository <a href="https://github.com/Nosfert/AspectJ-Tutorial-jayway">here</a>.</p>

<!-- more -->


<p>Let’s start coding!</p>

<p>Requirements: Maven, Java 8, (preferably) an IDE (I’m using IntelliJ)</p>

<p>Patterns are designed by the following elements and any element in the pattern can use wildcards (*)</p>

<p><strong>[modifiers] [return type] <a href="parameters">(packageName)(className)(methodName)</a></strong></p>

<p><strong>[modifiers]</strong> can be left blank; that will be interpreted as <code>*</code>
<strong>[void/object/primitive type]</strong> defined by either <code>void</code> , a specific object or a primitive type
<strong>[(packageName)(className)(methodName)]</strong> <code>your.package.structure.ClassName.yourMethod</code>  is valid. You can add <code>*</code>anywhere in that line to extend the search pattern
<strong>(parameters)</strong> <code>yourMetod(..)</code>  defines any method named yourMethod. The (..) is the parameter section. In this case it defines that it looks for none or any parameters.  If we replace the <code>..</code>  with <code>Integer</code>  we will only look for a method called <code>yourMethod(Integer)</code>  and that has one parameter that is an <code>Integer</code>.</p>

<p>A real example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package com.jayway.blog;
</span><span class='line'>
</span><span class='line'>import org.aspectj.lang.ProceedingJoinPoint;
</span><span class='line'>import org.aspectj.lang.annotation.*;
</span><span class='line'>import org.aspectj.lang.JoinPoint;
</span><span class='line'>
</span><span class='line'>@Aspect
</span><span class='line'>public class YourAspect {
</span><span class='line'>
</span><span class='line'>    //Patterns
</span><span class='line'>    //blank = modifier (public/private/protected or default(blank) should be looked for
</span><span class='line'>    //* = return type to look for. Void/Object
</span><span class='line'>    //com.jayway.YourClass.yourMethodBefore(..) = PackageName . ClassName . methodName (parameters)
</span><span class='line'>    @Before("execution (* com.jayway.blog.YourClass.yourMethodBefore(..))")
</span><span class='line'>    //JointPoint = the reference of the call to the method
</span><span class='line'>    public void beforeAdvice(JoinPoint joinPoint) {
</span><span class='line'>        System.out.println("YourAspect's BeforeAdvice's body is now executed Before yourMethodBefore is called.");
</span><span class='line'>    }
</span><span class='line'>    //Patterns
</span><span class='line'>    //public = look for the specific modifier named public
</span><span class='line'>    //!Object = Basically we are looking for void or primitives. But if we specified Object we could get a good pattern
</span><span class='line'>    //com.jayway.YourClass.yourMethodBefore(..) = PackageName . ClassName . methodName (parameters)
</span><span class='line'>    @After("execution (public !Object com.jayway.blog.YourClass.yourMethodAfter(..))")
</span><span class='line'>    public void afterAdvice(JoinPoint joinPoint) {
</span><span class='line'>        System.out.println("YourAspect's afterAdvice's body is now executed After yourMethodAfter is called.");
</span><span class='line'>    }
</span><span class='line'>    //Patterns
</span><span class='line'>    //!private = look for any modifier thats not private
</span><span class='line'>    //void = looking for method with void
</span><span class='line'>    //com.jayway.YourClass.yourMethodBefore(..) = PackageName . ClassName . methodName (parameters)
</span><span class='line'>    @Around("execution (!private void com.jayway.blog.YourClass.yourMethodAround(Integer,..))")
</span><span class='line'>    //ProceedingJointPoint = the reference of the call to the method.
</span><span class='line'>    //Difference between ProceedingJointPoint and JointPoint is that a JointPoint cant be continued(proceeded)
</span><span class='line'>    //A ProceedingJointPoint can be continued(proceeded) and is needed for a Around advice
</span><span class='line'>    public Object aroundAdvice(ProceedingJoinPoint joinPoint) throws Throwable {
</span><span class='line'>        //Default Object that we can use to return to the consumer
</span><span class='line'>        Object returnObject = null;
</span><span class='line'>        try {
</span><span class='line'>            System.out.println("YourAspect's aroundAdvice's body is now executed Before yourMethodAround is called.");
</span><span class='line'>            //We choose to continue the call to the method in question
</span><span class='line'>            returnObject = joinPoint.proceed();
</span><span class='line'>            //If no exception is thrown we should land here and we can modify the returnObject, if we want to.
</span><span class='line'>        } catch (Throwable throwable) {
</span><span class='line'>            //Here we can catch and modify any exceptions that are called
</span><span class='line'>            //We could potentially not throw the exception to the caller and instead return "null" or a default object.
</span><span class='line'>            throw throwable;
</span><span class='line'>        }
</span><span class='line'>        finally {
</span><span class='line'>            //If we want to be sure that some of our code is executed even if we get an exception
</span><span class='line'>            System.out.println("YourAspect's aroundAdvice's body is now executed After yourMethodAround is called.");
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        return returnObject;
</span><span class='line'>    }
</span><span class='line'>    //Patterns//* = return type to look for. Void/Object/Primitive type
</span><span class='line'>    //blank = modifier (public/private/protected or default(blank) should be looked for
</span><span class='line'>    //* = return type to look for. Void/Object/Primitive type
</span><span class='line'>    //com.jayway.YourClass.yourMethod*(..) = PackageName . ClassName . * (parameters)
</span><span class='line'>    //Where the "*" will catch any method name
</span><span class='line'>    @After("execution ( * com.jayway.blog.YourClass.*(..))")
</span><span class='line'>    //JointPoint = the reference of the call to the method
</span><span class='line'>    public void printNewLine(JoinPoint pointcut){
</span><span class='line'>        //Just prints new lines after each method that's executed in
</span><span class='line'>        System.out.print("\n\r");
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>In this example we are using the combinator  execution([pattern])  to define when this pointcut should be triggered. There are a whole list of different <a href="https://eclipse.org/aspectj/doc/released/progguide/semantics-pointcuts.html">combinators</a> at AspectJ’s homepage. Each one of them can take different patterns to help you define when your advice should be triggered.</p>

<h2>JointPoint and ProceedingJointPoint</h2>

<p>A JointPoint in the code is the call to the actual (method/object) in question. The ProceedingJointPoint  extends JointPoint to add the option to continue (proceed) the call to the (method/object) in question. The JointPoint contains a lot of information (such as parameters) that can be useful when writing the advice body.</p>

<h2>Conclusion</h2>

<p>Patterns can difficult – that’s why there are so many threads about how to define patterns online. Patterns gives us a lot of power, but demand that we know what we are looking for. Having the options to specify modifiers, return value and parameters gives us great tools to narrow down the complexity of our patterns.</p>

<h2>reference</h2>

<ul>
<li><a href="http://blog.jayway.com/2015/09/08/defining-pointcuts-by-pattern/">Defining pointcuts by pattern</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The basics of AOP]]></title>
    <link href="http://Solarex.github.io/blog/2016/09/14/the-basics-of-aop/"/>
    <updated>2016-09-14T16:15:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2016/09/14/the-basics-of-aop</id>
    <content type="html"><![CDATA[<h2>Aspect Oriented Programming</h2>

<p>AOP is both a complex and quite simple thing. There has been a lot of buzz around AOP but recently the buzz has faded. The question that people still ask is “what do I do with it”. Hopefully you will have an idea of what it is and create your own thoughts on how you could use it.</p>

<p>In this post I aim to describe what AOP actually is and how it works.</p>

<!-- more -->


<h2>Description</h2>

<p>Aspect Oriented Programming circle around Aspects. An aspect contains descriptions of Joint-points and Advice bodies. The joint-points defines rules of when they should be triggered, once triggered they will execute the advice body.</p>

<p>An aspect acts like a middleman/proxy between the consumer of a (method/object) and the (method/object) in question. This can be achieved in five different scenarios such as; <strong>Before, After, AfterReturn, AfterThrowing and Around</strong> a (method/object) is called.</p>

<h2>The power of advice body</h2>

<p>Once a joint-point has triggered the advice body will be executed. The advice body has tremendous power and here lies the actual code that so many people think is “magic”.</p>

<p>Some of the powerful things that the advice body can do are</p>

<ul>
<li>modify any parameters that are passed into the call.</li>
<li>modify the return value</li>
<li>choose to not continue the call to the (method/object) in question</li>
<li>call other (methods/objects)</li>
<li>catch any exception that is thrown by the (method/object) in question</li>
</ul>


<h2>Before, After and Around</h2>

<h3>Before – @Before</h3>

<p>The before advice can only modify things before the (method/object) in question is called. The advice has the power to throw an exception and cancel the call to the (method/object) in question and modify the parameters of the call.</p>

<center><img src="http://Solarex.github.io/images/aspectj-before.png"/></center>


<h3>After – @After , @AfterReturning  or @AfterThrowing</h3>

<p>The after advice can only intercept the eventual return value of the (method/object) that is being called. The after advice contain three different definitions for the three different use-cases. @After  let you do things after a call and can return it’s own return value.  But @After  does not give you access to any potential return value or any potential exception that the called (method/object) creates. @AfterReturning  gives you the same abilities as @After  but gives you access to the return value. @AfterThrowing  gives you the same abilities as @After  but access to any exception that is thrown.</p>

<center><img src="http://Solarex.github.io/images/aspectj-after.png"/></center>


<h3>Around – @Around</h3>

<p>An around advice is like a combination of the Before and After advice. Once it has intercepted a call to the (method/object) in question it has the same control as the Before. The big difference is that when the (method/object) has run the advice gets access to any potential return value or exception. While it has access to the potential return or exception value it has the option to continue doing operations with/on that value. The advice specifies what to return to the caller.</p>

<center><img src="http://Solarex.github.io/images/aspectj-around.png"/></center>


<h2>Conclusion</h2>

<p>The advice can and will intercept calls to (method/object) according to the joint-point definition. The advice can specify five different situations of when they should be run. Each situation gives the advice different options to do its operations. Before, After, AfterReturn, AfterThrowing and Around are powerful in their own ways. Figuring out when to use what advice is the tricky part.</p>

<h2>Example</h2>

<p>The most classical example of AOP would be logging information. Printing out information before and after a method have been called and even printing out specific exception information. By using AOP for logging we could easily create a standardized pattern that will apply to all our code.  By having the logging information in the aspect lets us modify  a few rows of code and see it take affect everywhere at the same time.  And the developers don’t need to implement their own logging for each method/class.</p>

<h2>reference</h2>

<ul>
<li><a href="https://blog.jayway.com/2015/09/07/the-basics-of-aop/">The basics of AOP</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AspectJ - Dictionary]]></title>
    <link href="http://Solarex.github.io/blog/2016/09/13/aspectj-dictionary/"/>
    <updated>2016-09-13T16:13:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2016/09/13/aspectj-dictionary</id>
    <content type="html"><![CDATA[<h2>What is <a href="https://en.wikipedia.org/wiki/Aspect-oriented_programming">AOP</a></h2>

<p>Every time someone tries to explain AOP (Aspect Oriented Programming) they often use words like “magic” or “black magic”. And that’s understandable, especially if you come from an OOP world and come across AOP it really feels like “magic”: something is happening and you as a developer usually don’t know why, what or how.</p>

<p>AspectJ is one of the more well-known implementations for AOP in Java and is developed by the Eclipse Foundation. In this series of articles we will be concentrating on AspectJ’s implementation of AOP and how it works in Java.So, let’s dive into AspectJ and make an effort of dispersing the mystic around the so-called “black magic”. Let’s start by building a dictionary with short explanations of some key terms.</p>

<!-- more -->


<h2>AspectJ – Dictionary</h2>

<ul>
<li><p>Aspects:The easiest way to describe aspects is as a funky Java Class. An Aspect contains other things than a normal class such as; pointcuts, advice, advice bodies and inner-type declarations. An aspect may also contain regular java classes and methods.</p></li>
<li><p>Pointcuts:Defines, in a multitude of different ways, a point in the code. The pointcut defines when an advice should be run.</p></li>
<li><p>Advice / Advice Body:Similar to a java method; contains the code that will be run once a pointcut has been triggered.</p></li>
<li><p>Annotation – Not AOP specific:Consists of meta-data and can be used at methods, classes, parameters, packages and in variables.Annotations can contain an optional list of element-value pairs,In AspectJ we can define a pointcut by looking for annotations. The pointcut and advice can then use the element-value pairs from the annotation.</p></li>
<li><p>Weaving / Aspect weaving:There are a few different ways to inject the AOP code in our application, but one common denominator is that they all require some type of extra step to be applied to our code. This extra step is called weaving.</p></li>
<li><p>Compile-time weaving:If you have both the source code of the aspect and the code that you are using aspects in, you can compile your source-code and the aspect directly with an AspectJ compiler.</p></li>
<li><p>Post-compile weaving / Binary weaving:If you can’t, or don’t want to use source-code transforms to weave the aspects into the code, you can take already compiled classes or jars and inject aspects.</p></li>
<li><p>Load-time weaving:Acts the same way as post-compile weaving / binary weaving but waits to inject aspects into the code until the class loader loads the class file. This requires one or more weaving class loaders.</p></li>
</ul>


<h2>reference</h2>

<ul>
<li><a href="http://blog.jayway.com/2015/09/03/aspectj-and-aop-the-black-magic-of-programming/">AspectJ &ndash; Dictionary</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make an android custom view,Publish and Open Source]]></title>
    <link href="http://Solarex.github.io/blog/2016/05/28/make-an-android-custom-view-publish-and-open-source/"/>
    <updated>2016-05-28T14:34:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2016/05/28/make-an-android-custom-view-publish-and-open-source</id>
    <content type="html"><![CDATA[<p>Today I’m going to create an android custom view to implement circular <code>SeekBar</code> like the mockup below, make it as a library, open source at GitHub, and publish it to JCenter. In this post, I will cover several fundamental concepts of android custom view, write a helpful README on GitHub, and how to publish your library.</p>

<center><img src="http://Solarex.github.io/images/custom_view_seekbar.png"/></center>


<h2>Before you start…</h2>

<p>Try to understand the requirement or design specification, take a look at this widget first, the user can touch the indicator icon through this arc to set the current progress level. The indicator icon will stop dragging when exceeding max or min progress. It works like an extension of circular <code>SeekBar</code> with customized appearances and motion event.</p>

<!-- more -->


<h2>Get started:</h2>

<p>All the android view widgets are based on <code>View</code>, to implement custom view, you will start a subclass of <code>View</code> and override several lifecycle callback methods of view, so you need to understand the view lifecycle at first. The following diagram shows some important methods to override:</p>

<center><img src="http://Solarex.github.io/images/custom_view_lifecycle.png"/></center>


<p>To get started, the first thing we have to do is to create a class that extends <code>View</code>, and provide two default constructors which allows us to create the view programmatically (1st constructor) or in XML layout (2nd constructor). The <code>SwagPoint(Context context, AttributeSet attrs)</code> constructor is more important here because it is used when Android inflates the view from XML layout file, otherwise you will get exception.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SwagPoints</span> <span class="kd">extends</span> <span class="n">View</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// used in view creation programmatically</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">SwagPoints</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// used in XML layout file</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">SwagPoints</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, there are several things we have to control or modify in our custom view:</p>

<ul>
<li><p><strong>Attributes</strong>: What things are customizable in your view? Determine custom attributes that allow developer to change its appearance and behavior in XML layout file according to their design.</p></li>
<li><p><strong>Size</strong>: Determine the dimensions of the view and every components in this custom view on the screen.</p></li>
<li><p><strong>Drawing</strong>: Determine how the view and components to render on the screen which contains the shape, location, appearance.</p></li>
<li><p><strong>Touch</strong>: Determine the way the user can interact with the view by touching.</p></li>
</ul>


<h2>1. Attribute:</h2>

<p>Here we provide several customizable attributes for developer: the initial progress <code>points</code>, the range of progress <code>max/min</code>, the interval when user change the progress <code>step</code>, the color and size of progress/arc/text. To define custom attributes, we create <code>res/values/attrs.xml</code> file and define custom attributes for your view in a <code>&lt;declare-styleable&gt;</code> resource element as below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;resources&gt;</span>
</span><span class='line'>    <span class="nt">&lt;declare-styleable</span> <span class="na">name=</span><span class="s">&quot;SwagPoints&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;points&quot;</span> <span class="na">format=</span><span class="s">&quot;integer&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;max&quot;</span> <span class="na">format=</span><span class="s">&quot;integer&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;min&quot;</span> <span class="na">format=</span><span class="s">&quot;integer&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;step&quot;</span> <span class="na">format=</span><span class="s">&quot;integer&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;indicatorIcon&quot;</span> <span class="na">format=</span><span class="s">&quot;reference&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;progressWidth&quot;</span> <span class="na">format=</span><span class="s">&quot;dimension&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;progressColor&quot;</span> <span class="na">format=</span><span class="s">&quot;color&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;arcWidth&quot;</span> <span class="na">format=</span><span class="s">&quot;dimension&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;arcColor&quot;</span> <span class="na">format=</span><span class="s">&quot;color&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;textSize&quot;</span> <span class="na">format=</span><span class="s">&quot;dimension&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;textColor&quot;</span> <span class="na">format=</span><span class="s">&quot;color&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;clockwise&quot;</span> <span class="na">format=</span><span class="s">&quot;boolean&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;attr</span> <span class="na">name=</span><span class="s">&quot;enabled&quot;</span> <span class="na">format=</span><span class="s">&quot;boolean&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;/declare-styleable&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/resources&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After adding <code>res/values/attrs.xml</code> file, to use <code>TypedArray</code> to retrieve attribute value in class and define instance variables (the following variable with <code>m</code> as prefix name) to store. Here we add a <code>init()</code> method to put <code>init()</code> inside the constructor after <code>super()</code> method to do this job:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">float</span> <span class="n">density</span> <span class="o">=</span> <span class="n">getResources</span><span class="o">().</span><span class="na">getDisplayMetrics</span><span class="o">().</span><span class="na">density</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Defaults, may need to link this into theme settings</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">arcColor</span> <span class="o">=</span> <span class="n">ContextCompat</span><span class="o">.</span><span class="na">getColor</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">color</span><span class="o">.</span><span class="na">color_arc</span><span class="o">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">progressColor</span> <span class="o">=</span> <span class="n">ContextCompat</span><span class="o">.</span><span class="na">getColor</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">color</span><span class="o">.</span><span class="na">color_progress</span><span class="o">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">textColor</span> <span class="o">=</span> <span class="n">ContextCompat</span><span class="o">.</span><span class="na">getColor</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">color</span><span class="o">.</span><span class="na">color_text</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mProgressWidth</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">mProgressWidth</span> <span class="o">*</span> <span class="n">density</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mArcWidth</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">mArcWidth</span> <span class="o">*</span> <span class="n">density</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mTextSize</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">mTextSize</span> <span class="o">*</span> <span class="n">density</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mIndicatorIcon</span> <span class="o">=</span> <span class="n">ContextCompat</span><span class="o">.</span><span class="na">getDrawable</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">indicator</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">attrs</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Attribute initialization</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">TypedArray</span> <span class="n">a</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">obtainStyledAttributes</span><span class="o">(</span><span class="n">attrs</span><span class="o">,</span>
</span><span class='line'>              <span class="n">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">SwagPoints</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">Drawable</span> <span class="n">indicatorIcon</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">getDrawable</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">SwagPoints_indicatorIcon</span><span class="o">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">indicatorIcon</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>          <span class="n">mIndicatorIcon</span> <span class="o">=</span> <span class="n">indicatorIcon</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">int</span> <span class="n">indicatorIconHalfWidth</span> <span class="o">=</span> <span class="n">mIndicatorIcon</span><span class="o">.</span><span class="na">getIntrinsicWidth</span><span class="o">()</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">indicatorIconHalfHeight</span> <span class="o">=</span> <span class="n">mIndicatorIcon</span><span class="o">.</span><span class="na">getIntrinsicHeight</span><span class="o">()</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>      <span class="n">mIndicatorIcon</span><span class="o">.</span><span class="na">setBounds</span><span class="o">(-</span><span class="n">indicatorIconHalfWidth</span><span class="o">,</span> <span class="o">-</span><span class="n">indicatorIconHalfHeight</span><span class="o">,</span> <span class="n">indicatorIconHalfWidth</span><span class="o">,</span>
</span><span class='line'>              <span class="n">indicatorIconHalfHeight</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">mPoints</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">getInteger</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">SwagPoints_points</span><span class="o">,</span> <span class="n">mPoints</span><span class="o">);</span>
</span><span class='line'>      <span class="n">mMin</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">getInteger</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">SwagPoints_min</span><span class="o">,</span> <span class="n">mMin</span><span class="o">);</span>
</span><span class='line'>      <span class="n">mMax</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">getInteger</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">SwagPoints_max</span><span class="o">,</span> <span class="n">mMax</span><span class="o">);</span>
</span><span class='line'>      <span class="n">mStep</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">getInteger</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">SwagPoints_step</span><span class="o">,</span> <span class="n">mStep</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">mProgressWidth</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">a</span><span class="o">.</span><span class="na">getDimension</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">SwagPoints_progressWidth</span><span class="o">,</span> <span class="n">mProgressWidth</span><span class="o">);</span>
</span><span class='line'>      <span class="n">progressColor</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">getColor</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">SwagPoints_progressColor</span><span class="o">,</span> <span class="n">progressColor</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">mArcWidth</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">a</span><span class="o">.</span><span class="na">getDimension</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">SwagPoints_arcWidth</span><span class="o">,</span> <span class="n">mArcWidth</span><span class="o">);</span>
</span><span class='line'>      <span class="n">arcColor</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">getColor</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">SwagPoints_arcColor</span><span class="o">,</span> <span class="n">arcColor</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">mTextSize</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">a</span><span class="o">.</span><span class="na">getDimension</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">SwagPoints_textSize</span><span class="o">,</span> <span class="n">mTextSize</span><span class="o">);</span>
</span><span class='line'>      <span class="n">mTextColor</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">getColor</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">SwagPoints_textColor</span><span class="o">,</span> <span class="n">mTextColor</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">mClockwise</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">getBoolean</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">SwagPoints_clockwise</span><span class="o">,</span>
</span><span class='line'>              <span class="n">mClockwise</span><span class="o">);</span>
</span><span class='line'>      <span class="n">mEnabled</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">getBoolean</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">styleable</span><span class="o">.</span><span class="na">SwagPoints_enabled</span><span class="o">,</span> <span class="n">mEnabled</span><span class="o">);</span>
</span><span class='line'>      <span class="n">a</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>2. Size:</h2>

<p>In order to control the view dimension, we have to override <code>View.onMeasure()</code> method and calculate the size of each components. Here we have to define the arc radius according to the width/height of our view.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onMeasure</span><span class="o">(</span><span class="kt">int</span> <span class="n">widthMeasureSpec</span><span class="o">,</span> <span class="kt">int</span> <span class="n">heightMeasureSpec</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">final</span> <span class="kt">int</span> <span class="n">width</span> <span class="o">=</span> <span class="n">getDefaultSize</span><span class="o">(</span><span class="n">getSuggestedMinimumWidth</span><span class="o">(),</span> <span class="n">widthMeasureSpec</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">final</span> <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="n">getDefaultSize</span><span class="o">(</span><span class="n">getSuggestedMinimumHeight</span><span class="o">(),</span> <span class="n">heightMeasureSpec</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">final</span> <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mTranslateX</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">width</span> <span class="o">*</span> <span class="mf">0.5f</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mTranslateY</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">height</span> <span class="o">*</span> <span class="mf">0.5f</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">arcDiameter</span> <span class="o">=</span> <span class="n">min</span> <span class="o">-</span> <span class="n">getPaddingLeft</span><span class="o">();</span>
</span><span class='line'>  <span class="n">mArcRadius</span> <span class="o">=</span> <span class="n">arcDiameter</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">top</span> <span class="o">=</span> <span class="n">height</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> <span class="o">(</span><span class="n">arcDiameter</span> <span class="o">/</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">left</span> <span class="o">=</span> <span class="n">width</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> <span class="o">(</span><span class="n">arcDiameter</span> <span class="o">/</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mArcRect</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">top</span><span class="o">,</span> <span class="n">left</span> <span class="o">+</span> <span class="n">arcDiameter</span><span class="o">,</span> <span class="n">top</span> <span class="o">+</span> <span class="n">arcDiameter</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">updateIndicatorIconPosition</span><span class="o">();</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">.</span><span class="na">onMeasure</span><span class="o">(</span><span class="n">widthMeasureSpec</span><span class="o">,</span> <span class="n">heightMeasureSpec</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3. Drawing:</h2>

<p>Give you a pen and a paper, you can draw what you want. To draw the view, you have to override the <code>onDraw(Canvas canvas)</code> method.
Before that, we have to know what to draw and how to draw. Android provides two classes to do this job:</p>

<ul>
<li><p>What to draw, handled by <code>Canvas</code> which is provided as parameter in <code>onDraw()</code> method.</p></li>
<li><p>How to draw, handled by <code>Paint</code>.</p></li>
</ul>


<p>Before you use <code>Canvas</code> to draw anything, it’s necessary to create <code>Paint</code> objects. For performance optimization, creating the <code>Paint</code> objects ahead is quite important, because the <code>onDraw()</code> method is called when redrawn is needed at anytime, we won’t create the <code>Paint</code> objects inside the <code>onDraw()</code> method, we should avoid any allocation in <code>onDraw()</code> method. Here we define these objects (one for arc, another for progress and the other for text) as instance variables and initialize at <code>init()</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">mArcPaint</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Paint</span><span class="o">();</span>
</span><span class='line'>  <span class="n">mArcPaint</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="n">arcColor</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mArcPaint</span><span class="o">.</span><span class="na">setAntiAlias</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mArcPaint</span><span class="o">.</span><span class="na">setStyle</span><span class="o">(</span><span class="n">Paint</span><span class="o">.</span><span class="na">Style</span><span class="o">.</span><span class="na">STROKE</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mArcPaint</span><span class="o">.</span><span class="na">setStrokeWidth</span><span class="o">(</span><span class="n">mArcWidth</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mProgressPaint</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Paint</span><span class="o">();</span>
</span><span class='line'>  <span class="n">mProgressPaint</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="n">progressColor</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mProgressPaint</span><span class="o">.</span><span class="na">setAntiAlias</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mProgressPaint</span><span class="o">.</span><span class="na">setStyle</span><span class="o">(</span><span class="n">Paint</span><span class="o">.</span><span class="na">Style</span><span class="o">.</span><span class="na">STROKE</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mProgressPaint</span><span class="o">.</span><span class="na">setStrokeWidth</span><span class="o">(</span><span class="n">mProgressWidth</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">mTextPaint</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Paint</span><span class="o">();</span>
</span><span class='line'>  <span class="n">mTextPaint</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="n">textColor</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mTextPaint</span><span class="o">.</span><span class="na">setAntiAlias</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mTextPaint</span><span class="o">.</span><span class="na">setStyle</span><span class="o">(</span><span class="n">Paint</span><span class="o">.</span><span class="na">Style</span><span class="o">.</span><span class="na">FILL</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mTextPaint</span><span class="o">.</span><span class="na">setTextSize</span><span class="o">(</span><span class="n">mTextSize</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once we have <code>Paint</code> objects defined, we can start to implement the <code>onDraw(Canvas canvas)</code> method, here we’re going to draw the text to display current progress number, the arc and current progress:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDraw</span><span class="o">(</span><span class="n">Canvas</span> <span class="n">canvas</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(!</span><span class="n">mClockwise</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">canvas</span><span class="o">.</span><span class="na">scale</span><span class="o">(-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="n">mArcRect</span><span class="o">.</span><span class="na">centerX</span><span class="o">(),</span> <span class="n">mArcRect</span><span class="o">.</span><span class="na">centerY</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// draw the text</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">textPoint</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">mPoints</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mTextPaint</span><span class="o">.</span><span class="na">getTextBounds</span><span class="o">(</span><span class="n">textPoint</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">textPoint</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">mTextRect</span><span class="o">);</span>
</span><span class='line'>  <span class="c1">// center the text</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">xPos</span> <span class="o">=</span> <span class="n">canvas</span><span class="o">.</span><span class="na">getWidth</span><span class="o">()</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> <span class="n">mTextRect</span><span class="o">.</span><span class="na">width</span><span class="o">()</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">yPos</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)((</span><span class="n">mArcRect</span><span class="o">.</span><span class="na">centerY</span><span class="o">())</span> <span class="o">-</span> <span class="o">((</span><span class="n">mTextPaint</span><span class="o">.</span><span class="na">descent</span><span class="o">()</span> <span class="o">+</span> <span class="n">mTextPaint</span><span class="o">.</span><span class="na">ascent</span><span class="o">())</span> <span class="o">/</span> <span class="mi">2</span><span class="o">));</span>
</span><span class='line'>  <span class="n">canvas</span><span class="o">.</span><span class="na">drawText</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">mPoints</span><span class="o">),</span> <span class="n">xPos</span><span class="o">,</span> <span class="n">yPos</span><span class="o">,</span> <span class="n">mTextPaint</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// draw the arc and progress</span>
</span><span class='line'>  <span class="n">canvas</span><span class="o">.</span><span class="na">drawArc</span><span class="o">(</span><span class="n">mArcRect</span><span class="o">,</span> <span class="n">ANGLE_OFFSET</span><span class="o">,</span> <span class="mi">360</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">mArcPaint</span><span class="o">);</span>
</span><span class='line'>  <span class="n">canvas</span><span class="o">.</span><span class="na">drawArc</span><span class="o">(</span><span class="n">mArcRect</span><span class="o">,</span> <span class="n">ANGLE_OFFSET</span><span class="o">,</span> <span class="n">mProgressSweep</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">mProgressPaint</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">mEnabled</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// draw the indicator icon</span>
</span><span class='line'>      <span class="n">canvas</span><span class="o">.</span><span class="na">translate</span><span class="o">(</span><span class="n">mTranslateX</span> <span class="o">-</span> <span class="n">mIndicatorIconX</span><span class="o">,</span> <span class="n">mTranslateY</span> <span class="o">-</span> <span class="n">mIndicatorIconY</span><span class="o">);</span>
</span><span class='line'>      <span class="n">mIndicatorIcon</span><span class="o">.</span><span class="na">draw</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After overriding <code>onDraw()</code> method, there is one more important method about drawing to introduce: <code>invalidate()</code>, this method is used when any redrawing is needed, we won’t call <code>onDraw()</code> directly, we just call this method instead, you can use this method anywhere inside your custom view, however, for performance optimization, make sure it’s called as infrequently as possible.</p>

<h2>4. Touching:</h2>

<p>When the user touch the screen, Android calls the <code>onTouchEvent()</code> method, so we override <code>View.onTouchEvent()</code> to handle the user input gestures:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">mEnabled</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">getParent</span><span class="o">().</span><span class="na">requestDisallowInterceptTouchEvent</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">mOnSwagPointsChangeListener</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                  <span class="n">mOnSwagPointsChangeListener</span><span class="o">.</span><span class="na">onStartTrackingTouch</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>              <span class="n">updateOnTouch</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>              <span class="n">updateOnTouch</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">mOnSwagPointsChangeListener</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                  <span class="n">mOnSwagPointsChangeListener</span><span class="o">.</span><span class="na">onStopTrackingTouch</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>              <span class="n">setPressed</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>              <span class="k">this</span><span class="o">.</span><span class="na">getParent</span><span class="o">().</span><span class="na">requestDisallowInterceptTouchEvent</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_CANCEL</span><span class="o">:</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">mOnSwagPointsChangeListener</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                  <span class="n">mOnSwagPointsChangeListener</span><span class="o">.</span><span class="na">onStopTrackingTouch</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>              <span class="n">setPressed</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>              <span class="k">this</span><span class="o">.</span><span class="na">getParent</span><span class="o">().</span><span class="na">requestDisallowInterceptTouchEvent</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are several things we have to control when user touches the indicator or other place of view:</p>

<ul>
<li><p>Update the indicator icon position and progress text.</p></li>
<li><p>Draw the current progress on the arc.</p></li>
<li><p>Stop when reaching max or min.</p></li>
</ul>


<p>To know the indicator icon position and the current progress to draw, we have to convert the touch coordinate on the screen to the angle of arc.</p>

<p>In our custom view, we consider the center of arc as origin <code>(0, 0)</code>, and use trigonometric functions to transform the touch coordinate into the angle of the arc in degree <code>(0, 360)</code>, and map to the current progress value of given range <code>(min, max)</code>.</p>

<center><img src="http://Solarex.github.io/images/custom_view_touch.png"/></center>


<p>Here we have a method to convert from touch coordinate to the arc angle:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">double</span> <span class="nf">convertTouchEventPointToAngle</span><span class="o">(</span><span class="kt">float</span> <span class="n">xPos</span><span class="o">,</span> <span class="kt">float</span> <span class="n">yPos</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// transform touch coordinate into component coordinate</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="n">xPos</span> <span class="o">-</span> <span class="n">mTranslateX</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">y</span> <span class="o">=</span> <span class="n">yPos</span> <span class="o">-</span> <span class="n">mTranslateY</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="o">(</span><span class="n">mClockwise</span><span class="o">)</span> <span class="o">?</span> <span class="n">x</span> <span class="o">:</span> <span class="o">-</span><span class="n">x</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">angle</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">toDegrees</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">atan2</span><span class="o">(</span><span class="n">y</span><span class="o">,</span> <span class="n">x</span><span class="o">)</span> <span class="o">+</span> <span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">PI</span> <span class="o">/</span> <span class="mi">2</span><span class="o">));</span>
</span><span class='line'>  <span class="n">angle</span> <span class="o">=</span> <span class="o">(</span><span class="n">angle</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">?</span> <span class="o">(</span><span class="n">angle</span> <span class="o">+</span> <span class="mi">360</span><span class="o">)</span> <span class="o">:</span> <span class="n">angle</span><span class="o">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">angle</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Final demo</h2>

<center><img src="http://Solarex.github.io/images/custom_view_final_demo.gif"/></center>


<h2>Open source at GitHub:</h2>

<p>So you just finish a android custom view project, great! Let’s put on GitHub to get more developers to use you project. However, before you share your GitHub link to others, just make sure you have a nice document first. When developers are looking at you project, there are some points they care about:</p>

<ul>
<li><p>Does this project fit my requirement or solve my problem?</p></li>
<li><p>If the answer is YES, how can I get starting right now?</p></li>
</ul>


<p>A nice document is like a salesman for you project. The README plays this important role to give the first impression to the developers who are looking at your project, so providing a well-documented README is necessary and gives you more chance to promote you project.</p>

<p>Knowing how to write a REAME is equivalently important to write a clean code or design a great architecture.</p>

<h3>1. Provide a screenshot and short description:</h3>

<p>A picture is worth a thousand words, especially in a UI widget project, make sure that you provide a photo, GIF or video with a short description to demonstrate how your UI looks like or works. (If you are familiar with some design software, i.e. Sketch or PhotoShop, try to use them to help you make a great cover with the screenshot for your project)</p>

<center><img src="http://Solarex.github.io/images/custom_view_screensot.png"/></center>


<h3>Give easy installation/usage instruction</h3>

<p>Before using you project, developer have to install it first, make sure to give a clean and easy installation instruction to get started. After installing you project successfully, just give some example code snippet to show what your project does, and how the developers can customize what they want, maybe just give a list of customizable attributes or provide an APK to install or sample module to run.</p>

<h2>Publish your library:</h2>

<p>After finish pushing your project to GitHub, there is the last step to get done: publish it so that developers can just add dependency</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dependencies <span class="o">{</span>
</span><span class='line'>    ...
</span><span class='line'>    compile <span class="s1">&#39;com.dualcores.swagpoints:swagpoints:1.0.0&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>to use you project. Here we go:</p>

<h3>1. Sign-up or sign-in at JFrog Bintray.</h3>

<h3>2. Go to profile page to create a repository, package, and version:</h3>

<p>The repository is the place to host your several projects. You can choose any repository name whatever you want, it doesn’t matter for other developers.</p>

<center><img src="http://Solarex.github.io/images/custom_view_frog_new_repo.png"/></center>


<p>Inside the new repository, you can create a package, that is place to host your project. Your project also can import from GitHub.</p>

<center><img src="http://Solarex.github.io/images/custom_view_frog_import_github.png"/></center>


<p>For each package, you can create several versions, again, you can choose whatever name you want, not restricted to the traditional version number major.minor.patch rule.</p>

<center><img src="http://Solarex.github.io/images/custom_view_frog_create_new_version.png"/></center>


<h3>3. Generate and upload the aar files:</h3>

<p>We use gradle to do this job, here I use this library to help <a href="https://github.com/blundell/release-android-library.">https://github.com/blundell/release-android-library.</a>
Open you library module gradle file, add the following code snippet to buttom of module build.gradle file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>// or use the remote copy to keep update with latest changes
</span><span class='line'>apply from: <span class="s1">&#39;https://raw.githubusercontent.com/blundell/release-android-library/master/android-release-aar.gradle&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and JCenter configuration:</p>

<center><img src="http://Solarex.github.io/images/custom_view_frog_build_gradle.png"/></center>


<p>then, sync your project and open your terminal, go to your project root path, execute the command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./gradlew clean build generateRelease
</span></code></pre></td></tr></table></div></figure>


<p>If success, you will see the result in you terminal and you can upload the zip file from <code>PROJECT_ROOT/library/build/release/1.0.0/</code>:</p>

<center><img src="http://Solarex.github.io/images/custom_view_frog_generate_aar.png"/></center>


<h3>4. Add to JCenter:</h3>

<p>Go back to your project page in bintray, there will be a Add to JCenter button in right-hand column, just click it to fill out a message and wait to be accepted. It takes hours or several days to be accepted, just be patient. This step is required so that to make your project downloadable and discoverable by gradle dependencies.</p>

<center><img src="http://Solarex.github.io/images/custom_view_frog_add_jcenter.png"/></center>


<h3>5. Project is accepted and test if everything is all right:</h3>

<p>You will receive an email to inform you that your Add to JCenter request is accepted.Once it is accepted, test if gradle dependency works well by adding the dependency to sample module and sync. If it builds successfully, congratulation!!!! You’ve done. Good job~</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>compile <span class="s1">&#39;com.dualcores.swagpoints:swagpoints:1.0.0&#39;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile Apps Offline Support]]></title>
    <link href="http://Solarex.github.io/blog/2016/03/14/mobile-apps-offline-support/"/>
    <updated>2016-03-14T08:43:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2016/03/14/mobile-apps-offline-support</id>
    <content type="html"><![CDATA[<p>Offline support for mobile applications can be thought of as the ability for the application to react gracefully to the lack of stability of the network connection. The rather new context of mobile devices introduced problems such as presence or absence of a network connection or even high latency and low bandwidth. These problems are rather new and thus not very well known to engineers starting with mobile development. Among other things building a mobile application which resilient to different network scenarios could mean:</p>

<ul>
<li>Displaying comprehensive error messages when network calls fail.</li>
<li>Allowing the use of the application in “guest mode”, where certain features can be delayed until the user actually signs in.</li>
<li>Visually displaying the absence of network connectivity on the UI (connected mode/offline mode).</li>
<li>Disabling controls in the absence of network connectivity.</li>
<li>Allowing the user to query and act on data while no network connection (offline data access).</li>
<li>Testing the application under different network conditions!</li>
</ul>


<p>While all these things are extremely important from the usability point of view, there is one of these that can be particular complex, “offline data access”. There are several different scenarios or levels of offline data access that applications might need to support, and I’ll go through each next.</p>

<!-- more -->


<h2>Local Caching</h2>

<p>The application needs to be able to display information even when there is no connection, however under connectivity conditions the data needs to be refreshed. This is achieved by somehow persisting the data on the mobile device, usually for a healthy period of time.</p>

<center><img src="http://Solarex.github.io/images/local_cache.png"></center>


<p>There are 3 different “strategies” for refreshing the data on the cache which I would like to cover next.</p>

<h3>Network first</h3>

<p>Always try to retrieve the data from the server, and whenever that is not possible, then resort to retrieve the data from the local cache. This strategy can be very useful if you are particularly interested in showing the latest and more updated information.</p>

<h3>Local first</h3>

<p>For a specified period of time, don’t even try to go the network, just return from local cache. This approach is very well suited when there’s no risk in showing cached data. On the other hand, it has a better user experience since there’s usually no latency involved.</p>

<h3>Hybrid / Smart</h3>

<p>This approach will return from local cache before fetching data from a service. It can either wait for a notification from the server or simply poll the service in background to refresh the data to cache it locally. This mechanism hits a balance between a good performance/UX, while still refreshing the local cache regularly, reducing the risk of showing “stale” data.</p>

<p>Furthermore, local caching can be complemented with some way of server-side caching support as well. Just as in HTTP caching, when retrieving the data from the server, the client can send a “revision” to see if the data has been updated. The server can check the clients revision against the current one on the server, and either inform the client that there is no need to update or return the latest data.</p>

<h3>Sample scenario</h3>

<p>The improvement in performance and user experience makes local caching extremely useful in many scenarios. The key condition for it to be useful is that the data does not have to be displayed in real-time. The longer the data can be locally cached, the more sense this approach will make.</p>

<p>Think for instance of a list of interesting locations or contacts for users on the “field”. This is information while very useful on the go, is unlikely to change very frequently, so it is ideal for being cached locally.</p>

<h2>Local Queuing</h2>

<p>Whenever the application does not have a network connection, server requests can be locally queued for later processing. This will allow the user to fire and forget operations and be notified whenever (and if) those operations were successfully processed by the server.</p>

<center><img src="http://Solarex.github.io/images/local_queuing.png"></center>


<p>When working with local queues of operations you should take into account the following things:</p>

<ul>
<li>Users should be notified that the operation has been queued.</li>
<li>Users will most probably be interested in seeing the actual status of the queue. Which are the items that went through and which are the ones that are still pending?</li>
<li>It could be important to be able to cancel or retry manually an operation while it is still in the queue.</li>
<li>Whenever one of these operations is sent to the server, the user will want to know the outcome (success, failed).</li>
<li>The flow or process the user initiated could potentially need to be resumed where it was left off at the time the operation was queued.</li>
</ul>


<p>Local queuing is particularly a good idea when having people doing auditing or field work like measuring things, and sending reports. If these operations are not updating records, but rather only inserting new ones, the implementation of this is rather simple and requires no concurrency management or conflict resolution.</p>

<h3>Sample Scenario</h3>

<p>Local queuing helps to not loose work while on the go. This can be extremely important in scenarios of inventory checks or audits, where the user on the field must not loose time waiting for a connection in order to use the app or submit those reports.</p>

<h3>Data-Sync</h3>

<p>By leveraging local caching and queuing, you can keep the data in your device and your server up to date. This is known as “synchronizing”. There are different ways to synchronize the data.</p>

<center><img src="http://Solarex.github.io/images/data_sync.png"></center>


<h3>Mobile Data up-to-date</h3>

<p>In this case, you worry about the data in you mobile application being up to date. This can be achieved in two ways: by just using local caching as described above, or it can be done by querying the server for the latest changes. These latest changes, also known as “delta”, allow the mobile application to apply and reconstruct the current state of the server. In order to be able to query for the latest changes, you can leverage audit fields like <code>UpdatedOn</code>, <code>CreatedOn</code> and <code>DeletedOn</code>.</p>

<p>In this second case, the data is not being modified in the device, so there is no need to resolve conflicts, so the server is always right.</p>

<h3>Server Data up-to-date</h3>

<p>This can be achieved by using local queues, but queuing is not enough. What happens if by the time my request is sent to the server, the data on the server was no longer in the same state as when I attempted to modify it? Delaying the execution of the request, for example due to network loss, can result in increased concurrency conflicts. At this point, the developer (or the user) must decide how to “merge” the changes on the server and the app. For every conflict in the data, the merge could be:</p>

<ul>
<li>Keep the device version</li>
<li>Keep the server version</li>
<li>Keep both versions</li>
</ul>


<p>More often than not, the logic for merging records can be automated by the mobile developer. Which algorithm is used, will be tied to the business rules of that application. Whenever this is not possible to fully automate, the user can be prompted to make a decision.</p>

<h3>Keep both Mobile and Server Up-to-date</h3>

<p>This is also referred to as two-way sync. As you can probably tell by now, this would be a combination of the two previous techniques. This is the most complete and powerful of the scenarios so far described. Notice however, that while it might be tempting to build applications to support two-way sync, it is by far the most complex scenario of all. Apart from being complex, as I have covered in this article, it might not always be necessary.</p>

<h3>Sample Scenario</h3>

<p>Two-way-sync gives the mobile application a whole new level of user experience. However, one of the key conditions for two-way sync to be a must-have is the need to keep a team or group of users up to date with everybody else’s activity. An example of such a thing could be collaborating applications with updates, comments or status changes. Think about a collaborative address book where everybody on the team is allowed to update contacts at any given time.</p>

<h2>Considerations</h2>

<p>Building your mobile application with support for offline scenarios, can drastically improve the user experience, however choosing the right level of support, and later on implementing this is not trivial. Below I will be listing some of the things to consider when planning to add offline support to your apps.</p>

<h3>Data Size</h3>

<p>When caching data locally, try to be conscious of the size of the data you’ll be storing. Striking the right balance between the amount of data that is stored and the perceived UX improvement is important. In cases where there are lots of data (ie: a full Sharepoint site), you might have to consider giving the user the option of choosing what he wants to cache for offline reading afterwards.</p>

<h3>Data Storage</h3>

<p>Make sure to choose wisely how and where you will be storing your data. Is that data sensitive? If so, you will want to encrypt the data while at rest (storage). If you choose to encrypt the data, make sure to also store the key for decrypting the data in a safe place and consider leveraging operating system functionality for this. Also keep in mind that in some platforms your application’s code can be read (or reflected), so consider obfuscating your code. And last but not least, make sure to have a mechanism for remotely wiping the data on the handset. Some tools like mobile device management (MDM) platforms can help to achieve this, but it can also be handled by the application itself.</p>

<h3>Battery Usage</h3>

<p>If you plan to have polling mechanisms and background jobs, make sure to take the battery status into account. Some processes and network usage might drain the battery in detriment of the user experience. You can check the status of the battery, and whether the device is connected to a charger before you start a rather consuming process.</p>

<h3>Consuming the Data</h3>

<p>Depending on your application’s needs, you might have to query and operate (create, update, delete) on your data. In non-trivial scenarios using a database as the persistence mechanism is not a bad idea. There are several things to take into account for choosing the right database:</p>

<ul>
<li>platform support: Will I be able to use this database from all the versions of my app? (iOS, Android, Web, Hybrid, etc…)</li>
<li>relational vs NoSQL database technology</li>
<li>ORM support for conveniently mapping the object model to the database</li>
<li>data size</li>
<li>existing support for sync protocols (ie: CouchDB)</li>
</ul>


<p>Next we will go through a list of libraries and databases that can be useful when implementing Offline Support.</p>

<h2>Useful Libraries &amp; Databases</h2>

<ul>
<li>SQLite,SQLite is an Open Source relational database that works very well in mobile devices. It uses a single file to store all the data, so managing the persistence side is simple. It will not solve too much on the sync- and conflict resolution side, but it’s a simple and easy to use alternative for caching or queuing information. There are implementations for the main mobile platforms like iOS, Android, Xamarin and Windows Phone.</li>
<li>SQLCypher,As previously said, when the data you are caching or queuing is rather sensitive, you might want to encrypt the data at rest. SQLCypher is a very robust alternative for encrypting SQLite databases. It has versions for every major mobile platform, but it is a paid library. It is available in different editions depending on the level of security and support you need.</li>
<li>Couchbase Mobile,Originally known as Membase, Couchbase is an open source distributed NoSQL database. It is particularly interesting in offline scenarios due to its ability to synchronize back and forth with Couchbase Mobile along with the addition of a sync gateway. It supports the main mobile platforms including Xamarin and PhoneGap, and provides local file encryption.</li>
<li>Meteor,<a href="https://www.meteor.com/">Meteor</a>is an open source platform for building web applications, with built in support for Live Updates. Meteor is based on the open source Node.js platform and MongoDB. It comes with a publish-subscriber mechanism that enables Meteor to propagate changes on the data to every connected clients in real-time.</li>
</ul>


<p>It supports mobile all platforms through hybrid tools like PhoneGap and Cordova.</p>

<h2>Summary</h2>

<p>In times where mobile users are starting to expect the same level of user experience in enterprise applications as they do on their personal consumer applications, offline Support can no longer be ignored. Providing the right level of support for offline scenarios will dramatically improve the mobile application user’s experience and be vital for employee’s productivity.</p>

<p>Keep in mind the security aspects of storing data locally in your device, and try to not to underestimate the impact that your application can have on your users battery.</p>

<h2>reference</h2>

<ul>
<li><a href="http://www.infoq.com/articles/mobile-apps-offline-support">Mobile Apps Offline Support</a></li>
<li><a href="https://www.youtube.com/watch?v=BlkJzgjzL0c">Android Application Architecture</a></li>
<li><a href="https://github.com/yigit/dev-summit-architecture-demo">dev-summit-architecture-demo</a></li>
<li><a href="http://www.infoq.com/cn/articles/mobile-apps-offline-support">为移动应用提供离线支持</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Clean Architecture]]></title>
    <link href="http://Solarex.github.io/blog/2016/03/13/the-clean-architecture/"/>
    <updated>2016-03-13T23:57:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2016/03/13/the-clean-architecture</id>
    <content type="html"><![CDATA[<center><img src="http://Solarex.github.io/images/clean_arch.jpg"></center>


<p>Over the last several years we’ve seen a whole range of ideas regarding the architecture of systems. These include:</p>

<ul>
<li><a href="http://alistair.cockburn.us/Hexagonal+architecture">Hexagonal Architecture</a> (a.k.a. Ports and Adapters) by Alistair Cockburn and adopted by Steve Freeman, and Nat Pryce in their wonderful book <a href="http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627">Growing Object Oriented Software</a>.</li>
<li><a href="http://jeffreypalermo.com/blog/the-onion-architecture-part-1/">Onion Architecture</a> by Jeffrey Palermo</li>
<li><a href="http://blog.8thlight.com/uncle-bob/2011/09/30/Screaming-Architecture.html">Screaming Architecture</a> from a blog of mine last year</li>
<li><a href="http://www.amazon.com/Lean-Architecture-Agile-Software-Development/dp/0470684208/">DCI</a> from James Coplien, and Trygve Reenskaug.</li>
<li><a href="http://www.amazon.com/Object-Oriented-Software-Engineering-Approach/dp/0201544350">BCE</a> by Ivar Jacobson from his book Object Oriented Software Engineering: A Use-Case Driven Approach</li>
</ul>


<!-- more -->


<p>Though these architectures all vary somewhat in their details, they are very similar. They all have the same objective, which is the separation of concerns. They all achieve this separation by dividing the software into layers. Each has at least one layer for business rules, and another for interfaces.</p>

<p>Each of these architectures produce systems that are:</p>

<ul>
<li>Independent of Frameworks. The architecture does not depend on the existence of some library of feature laden software. This allows you to use such frameworks as tools, rather than having to cram your system into their limited constraints.</li>
<li>Testable. The business rules can be tested without the UI, Database, Web Server, or any other external element.</li>
<li>Independent of UI. The UI can change easily, without changing the rest of the system. A Web UI could be replaced with a console UI, for example, without changing the business rules.</li>
<li>Independent of Database. You can swap out Oracle or SQL Server, for Mongo, BigTable, CouchDB, or something else. Your business rules are not bound to the database.</li>
<li>Independent of any external agency. In fact your business rules simply don’t know anything at all about the outside world.</li>
</ul>


<p>The diagram at the top of this article is an attempt at integrating all these architectures into a single actionable idea.</p>

<h2>The Dependency Rule</h2>

<p>The concentric circles represent different areas of software. In general, the further in you go, the higher level the software becomes. The outer circles are mechanisms. The inner circles are policies.</p>

<p>The overriding rule that makes this architecture work is The Dependency Rule. This rule says that source code dependencies can only point inwards. Nothing in an inner circle can know anything at all about something in an outer circle. In particular, the name of something declared in an outer circle must not be mentioned by the code in the an inner circle. That includes, functions, classes. variables, or any other named software entity.</p>

<p>By the same token, data formats used in an outer circle should not be used by an inner circle, especially if those formats are generate by a framework in an outer circle. We don’t want anything in an outer circle to impact the inner circles.</p>

<h2>Entities</h2>

<p>Entities encapsulate Enterprise wide business rules. An entity can be an object with methods, or it can be a set of data structures and functions. It doesn’t matter so long as the entities could be used by many different applications in the enterprise.</p>

<p>If you don’t have an enterprise, and are just writing a single application, then these entities are the business objects of the application. They encapsulate the most general and high-level rules. They are the least likely to change when something external changes. For example, you would not expect these objects to be affected by a change to page navigation, or security. No operational change to any particular application should affect the entity layer.</p>

<h2>Use Cases</h2>

<p>The software in this layer contains application specific business rules. It encapsulates and implements all of the use cases of the system. These use cases orchestrate the flow of data to and from the entities, and direct those entities to use their enterprise wide business rules to achieve the goals of the use case.</p>

<p>We do not expect changes in this layer to affect the entities. We also do not expect this layer to be affected by changes to externalities such as the database, the UI, or any of the common frameworks. This layer is isolated from such concerns.</p>

<p>We do, however, expect that changes to the operation of the application will affect the use-cases and therefore the software in this layer. If the details of a use-case change, then some code in this layer will certainly be affected.</p>

<h2>Interface Adapters</h2>

<p>The software in this layer is a set of adapters that convert data from the format most convenient for the use cases and entities, to the format most convenient for some external agency such as the Database or the Web. It is this layer, for example, that will wholly contain the MVC architecture of a GUI. The Presenters, Views, and Controllers all belong in here. The models are likely just data structures that are passed from the controllers to the use cases, and then back from the use cases to the presenters and views.</p>

<p>Similarly, data is converted, in this layer, from the form most convenient for entities and use cases, into the form most convenient for whatever persistence framework is being used. i.e. The Database. No code inward of this circle should know anything at all about the database. If the database is a SQL database, then all the SQL should be restricted to this layer, and in particular to the parts of this layer that have to do with the database.</p>

<p>Also in this layer is any other adapter necessary to convert data from some external form, such as an external service, to the internal form used by the use cases and entities.</p>

<h2>Frameworks and Drivers</h2>

<p>The outermost layer is generally composed of frameworks and tools such as the Database, the Web Framework, etc. Generally you don’t write much code in this layer other than glue code that communicates to the next circle inwards.</p>

<p>This layer is where all the details go. The Web is a detail. The database is a detail. We keep these things on the outside where they can do little harm.</p>

<h2>Only Four Circles?</h2>

<p>No, the circles are schematic. You may find that you need more than just these four. There’s no rule that says you must always have just these four. However, The Dependency Rule always applies. Source code dependencies always point inwards. As you move inwards the level of abstraction increases. The outermost circle is low level concrete detail. As you move inwards the software grows more abstract, and encapsulates higher level policies. The inner most circle is the most general.</p>

<h2>Crossing boundaries</h2>

<p>At the lower right of the diagram is an example of how we cross the circle boundaries. It shows the Controllers and Presenters communicating with the Use Cases in the next layer. Note the flow of control. It begins in the controller, moves through the use case, and then winds up executing in the presenter. Note also the source code dependencies. Each one of them points inwards towards the use cases.</p>

<p>We usually resolve this apparent contradiction by using the Dependency Inversion Principle. In a language like Java, for example, we would arrange interfaces and inheritance relationships such that the source code dependencies oppose the flow of control at just the right points across the boundary.</p>

<p>For example, consider that the use case needs to call the presenter. However, this call must not be direct because that would violate The Dependency Rule: No name in an outer circle can be mentioned by an inner circle. So we have the use case call an interface (Shown here as Use Case Output Port) in the inner circle, and have the presenter in the outer circle implement it.</p>

<p>The same technique is used to cross all the boundaries in the architectures. We take advantage of dynamic polymorphism to create source code dependencies that oppose the flow of control so that we can conform to The Dependency Rule no matter what direction the flow of control is going in.</p>

<h2>What data crosses the boundaries.</h2>

<p>Typically the data that crosses the boundaries is simple data structures. You can use basic structs or simple Data Transfer objects if you like. Or the data can simply be arguments in function calls. Or you can pack it into a hashmap, or construct it into an object. The important thing is that isolated, simple, data structures are passed across the boundaries. We don’t want to cheat and pass Entities or Database rows. We don’t want the data structures to have any kind of dependency that violates The Dependency Rule.</p>

<p>For example, many database frameworks return a convenient data format in response to a query. We might call this a RowStructure. We don’t want to pass that row structure inwards across a boundary. That would violate The Dependency Rule because it would force an inner circle to know something about an outer circle.</p>

<p>So when we pass data across a boundary, it is always in the form that is most convenient for the inner circle.</p>

<h2>Conclusion</h2>

<p>Conforming to these simple rules is not hard, and will save you a lot of headaches going forward. By separating the software into layers, and conforming to The Dependency Rule, you will create a system that is intrinsically testable, with all the benefits that implies. When any of the external parts of the system become obsolete, like the database, or the web framework, you can replace those obsolete elements with a minimum of fuss.</p>

<h2>reference</h2>

<ul>
<li><a href="http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html">The Clean Architecture</a></li>
<li><a href="http://blog.csdn.net/bboyfeiyu/article/details/44560155">一种更清晰的Android架构</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Handler Memory Leaks]]></title>
    <link href="http://Solarex.github.io/blog/2016/02/25/android-handler-memory-leaks/"/>
    <updated>2016-02-25T19:58:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2016/02/25/android-handler-memory-leaks</id>
    <content type="html"><![CDATA[<p>Android uses Java as a platform for development. This helps us with many low level issues including memory management, platform type dependencies, and so on. However we still sometimes get crashes with OutOfMemory. So where’s the garbage collector?</p>

<p>I’m going to focus on one of the cases where big objects in memory can’t be cleared for a lengthy period of time. This case is not ultimately a memory leak &ndash; objects will be collected at some point &ndash; so we sometimes ignore it. This is not advisable as it can sometimes lead to OOM errors.</p>

<p>The case I’m describing is the Handler leak, which is usually detected as a warning by Lint.</p>

<!-- more -->


<h2>Basic Example</h2>

<center><img src="http://Solarex.github.io/images/anonymous_runnable_code.png"></center>


<p>This is a very basic activity. Notice that this anonymous <code>Runnable</code> has been posted to the <code>Handler</code> with a very long delay. We’ll run it and rotate the phone couple of times, then dump memory and analyze it.</p>

<center><img src="http://Solarex.github.io/images/anonymous_runnable_memory_analyze.png"></center>


<p>We have seven activities in memory now. This is definitely not good. Let’s find out why GC is not able to clear them.ps.The query I made to get a list of all Activities remaining in memory was created in OQL (Object Query Language), which is very simple, yet powerful.</p>

<center><img src="http://Solarex.github.io/images/anonymous_runnable_memory_explained.png"></center>


<p>As you can see, one of the activities is referenced by this$0. This is an indirect reference from the anonymous class to the owner class. This$0 is referenced by callback, which is then referenced by a chain of next’s of Message back to the main thread.Any time you create a non-static class inside the owner class, Java creates an indirect reference to the owner.</p>

<p>Once you post <code>Runnable</code> or <code>Message</code> into Handler, it’s then stored in list of <code>Message</code> commands referenced from <code>LooperThread</code> until the message is executed. Posting delayed messages is a clear leak for at least the time of the delay value. Posting without delay may cause a temporary leak as well if the queue of messages is large.</p>

<h2>Static Runnable Solution</h2>

<p>Let’s try to overcome a memory leak by getting rid of <code>this$0</code>, by converting the anonymous class to static.</p>

<center><img src="http://Solarex.github.io/images/static_class.png"></center>


<p>Run, rotate and get the memory dump.</p>

<center><img src="http://Solarex.github.io/images/static_class_memory_analyze.png"></center>


<p>What, again? Let’s see who keeps referring to Activities.</p>

<center><img src="http://Solarex.github.io/images/static_class_memory_analyze_explained.png"></center>


<p>Take a look at the bottom of the tree &ndash; activity is kept as a reference to mContext inside mTextView of our DoneRunnable class. Using static inner classes is not enough to overcome memory leaks, however. We need to do more.</p>

<h2>Static Runnable With WeakReference</h2>

<p>Let’s continue using iterative fixes and get rid of the reference to TextView, which keeps activity from being destroyed.</p>

<center><img src="http://Solarex.github.io/images/static_class_with_WeakRef.png"></center>


<p>Note that we are keeping WeakReference to TextView, and let’s run, rotate and dump memory.Be careful with WeakReferences. They can be null at any moment, so resolve them first to a local variable (hard reference) and then check to null before use.</p>

<center><img src="http://Solarex.github.io/images/static_class_with_WeakRef_memory_analyze.png"></center>


<p>Hooray! Only one activity instance. This solves our memory problem.</p>

<p>So for this approach we should:</p>

<ul>
<li>Use static inner classes (or outer classes)</li>
<li>Use <code>WeakReference</code> to all objects manipulated from <code>Handler/Runnable</code></li>
</ul>


<p>If you compare this code to the initial code, you might find a big difference in readability and code clearance. The initial code is much shorter and much clearer, and you’ll see that eventually, text in textView will be changed to ‘Done’. No need to browse the code to realise that.</p>

<p>Writing this much boilerplate code is very tedious, especially if postDelayed is set to a short time, such as 50ms. There are better and clearer solutions.</p>

<h2>Cleanup All Messages onDestroy</h2>

<p><code>Handler</code> class has an interesting feature &ndash; <code>removeCallbacksAndMessages</code> &ndash; which can accept <code>null</code> as argument. It will remove all <code>Runnables</code> and <code>Messages</code> posted to a particular handler. Let’s use it in <code>onDestroy</code>.</p>

<center><img src="http://Solarex.github.io/images/removeCallbacks.png"></center>


<p>Let’s run, rotate and dump memory.</p>

<center><img src="http://Solarex.github.io/images/removeCallbacks_memory_analyze.png"></center>


<p>Good! Only one instance.</p>

<p>This approach is way better than the previous one, as it keeps code clear and readable. The only overhead is to remember to clear all messages on activity/fragment destroy.</p>

<p>I have one more solution which, if you’re lazy like me, you might like even more. :)</p>

<h2>Use WeakHandler</h2>

<p>The Badoo team came up with the interesting idea of introducing <code>WeakHandler</code> &ndash; a class that behaves as <code>Handler</code>, but is way safer.</p>

<p>It takes advantage of hard and weak references to get rid of memory leaks. I will describe the idea in detail a bit later, but let’s look at the code first:</p>

<center><img src="http://Solarex.github.io/images/WeakHandler.png"></center>


<p>Very similar to the original code apart from one small difference &ndash; instead of using <code>android.os.Handler</code>, I’ve used <code>WeakHandler</code>. Let’s run, rotate and dump memory:</p>

<center><img src="http://Solarex.github.io/images/WeakHandler_memory_analyze.png"></center>


<p>Nice, isn’t it? The code is cleaner than ever, and memory is clean as well! :)</p>

<p>To use it, just add dependency to your <code>build.gradle</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">url</span> <span class="s1">&#39;https://oss.sonatype.org/content/repositories/releases/&#39;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s1">&#39;com.badoo.mobile:android-weak-handler:1.0&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And import it in your java class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.badoo.mobile.util.WeakHandler</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Visit Badoo’s github page, where you can fork it, or study it’s <a href="https://github.com/badoo/android-weak-handler">source code</a>.</p>

<h2>WeakHandler. How it works</h2>

<p>The main aim of <code>WeakHandler</code> is to keep <code>Runnables/Messages</code> hard-referenced while <code>WeakHandler</code> is also hard-referenced. Once it can be GC-ed, all messages should go away as well.</p>

<p>Here is a simple diagram that demonstrates differences between using normal <code>Handler</code> and <code>WeakHandler</code> to post anonymous runnables:</p>

<center><img src="http://Solarex.github.io/images/WeakHandler_how_it_works.png"></center>


<p>Looking at the top diagram, <code>Activity</code> keeps a reference to <code>Handler</code>, which posts <code>Runnable</code> (puts it into queue of <code>Messages</code> referenced from <code>Thread</code>). Everything is fine except the indirect reference from <code>Runnable</code> to <code>Activity</code>. While <code>Message</code> is in the queue, all graphs can’t be garbage-collected.</p>

<p>By comparison, in the bottom diagram <code>Activity</code> holds <code>WeakHandler</code>, which keeps <code>Handler</code> inside. When we ask it to post <code>Runnable</code>, it is wrapped into <code>WeakRunnable</code> and posted. So the <code>Message</code> queue keeps reference only to <code>WeakRunnable</code>. <code>WeakRunnable</code> keeps weak reference to the desired <code>Runnable</code>, so the <code>Runnable</code> can be garbage-collected.</p>

<p>Another little trick is that <code>WeakHandler</code> still keeps a hard reference to the desired <code>Runnable</code>, to prevent it from being garbage-collected while <code>WeakRunnable</code> is active.</p>

<p>The side-effect of using <code>WeakHandler</code> is that all messages and runnables may not be executed if <code>WeakHandler</code> has been garbage-collected. To prevent that, just keep a reference to it from <code>Activity</code>. Once <code>Activity</code> is ready to be collected, all graphs with <code>WeakHandler</code> will collected as well.</p>

<h2>Conclusions</h2>

<p>Using <code>postDelayed</code> in Android requires additional effort. To achieve it we came up with three different methods:</p>

<ul>
<li>Use a static inner <code>Runnable/Handler</code> with <code>WeakReference</code> to owner class</li>
<li>Clear all messages from <code>Handler</code> in <code>onDestroy</code> of <code>Activity/Fragment</code></li>
<li>Use <a href="https://github.com/badoo/android-weak-handler">WeakHandler</a> from Badoo as a silver bullet</li>
</ul>


<p>It’s up to you to choose your preferred technique. The second seems very reasonable, but needs some extra work. The third is my favourite, obviously, but it require some attention as well &ndash; <code>WeakHandler</code> should not be used without hard reference from outside.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
<span class='line-number'>464</span>
<span class='line-number'>465</span>
<span class='line-number'>466</span>
<span class='line-number'>467</span>
<span class='line-number'>468</span>
<span class='line-number'>469</span>
<span class='line-number'>470</span>
<span class='line-number'>471</span>
<span class='line-number'>472</span>
<span class='line-number'>473</span>
<span class='line-number'>474</span>
<span class='line-number'>475</span>
<span class='line-number'>476</span>
<span class='line-number'>477</span>
<span class='line-number'>478</span>
<span class='line-number'>479</span>
<span class='line-number'>480</span>
<span class='line-number'>481</span>
<span class='line-number'>482</span>
<span class='line-number'>483</span>
<span class='line-number'>484</span>
<span class='line-number'>485</span>
<span class='line-number'>486</span>
<span class='line-number'>487</span>
<span class='line-number'>488</span>
<span class='line-number'>489</span>
<span class='line-number'>490</span>
<span class='line-number'>491</span>
<span class='line-number'>492</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">badoo</span><span class="o">.</span><span class="na">mobile</span><span class="o">.</span><span class="na">util</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Handler</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Looper</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Message</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.support.annotation.NonNull</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.support.annotation.Nullable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.support.annotation.VisibleForTesting</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.ref.WeakReference</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.locks.Lock</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.locks.ReentrantLock</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Memory safer implementation of android.os.Handler</span>
</span><span class='line'><span class="cm"> * &lt;p/&gt;</span>
</span><span class='line'><span class="cm"> * Original implementation of Handlers always keeps hard reference to handler in queue of execution.</span>
</span><span class='line'><span class="cm"> * If you create anonymous handler and post delayed message into it, it will keep all parent class</span>
</span><span class='line'><span class="cm"> * for that time in memory even if it could be cleaned.</span>
</span><span class='line'><span class="cm"> * &lt;p/&gt;</span>
</span><span class='line'><span class="cm"> * This implementation is trickier, it will keep WeakReferences to runnables and messages,</span>
</span><span class='line'><span class="cm"> * and GC could collect them once WeakHandler instance is not referenced any more</span>
</span><span class='line'><span class="cm"> * &lt;p/&gt;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @see android.os.Handler</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Created by Dmytro Voronkevych on 17/06/2014.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;unused&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WeakHandler</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Handler</span><span class="o">.</span><span class="na">Callback</span> <span class="n">mCallback</span><span class="o">;</span> <span class="c1">// hard reference to Callback. We need to keep callback in memory</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ExecHandler</span> <span class="n">mExec</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Lock</span> <span class="n">mLock</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ReentrantLock</span><span class="o">();</span>
</span><span class='line'>    <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;ConstantConditions&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@VisibleForTesting</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">ChainedRef</span> <span class="n">mRunnables</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ChainedRef</span><span class="o">(</span><span class="n">mLock</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Default constructor associates this handler with the {@link Looper} for the</span>
</span><span class='line'><span class="cm">     * current thread.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * If this thread does not have a looper, this handler won&#39;t be able to receive messages</span>
</span><span class='line'><span class="cm">     * so an exception is thrown.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">WeakHandler</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mCallback</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mExec</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ExecHandler</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Constructor associates this handler with the {@link Looper} for the</span>
</span><span class='line'><span class="cm">     * current thread and takes a callback interface in which you can handle</span>
</span><span class='line'><span class="cm">     * messages.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * If this thread does not have a looper, this handler won&#39;t be able to receive messages</span>
</span><span class='line'><span class="cm">     * so an exception is thrown.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param callback The callback interface in which to handle messages, or null.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">WeakHandler</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="n">Handler</span><span class="o">.</span><span class="na">Callback</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mCallback</span> <span class="o">=</span> <span class="n">callback</span><span class="o">;</span> <span class="c1">// Hard referencing body</span>
</span><span class='line'>        <span class="n">mExec</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ExecHandler</span><span class="o">(</span><span class="k">new</span> <span class="n">WeakReference</span><span class="o">&lt;&gt;(</span><span class="n">callback</span><span class="o">));</span> <span class="c1">// Weak referencing inside ExecHandler</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Use the provided {@link Looper} instead of the default one.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param looper The looper, must not be null.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">WeakHandler</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">Looper</span> <span class="n">looper</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mCallback</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mExec</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ExecHandler</span><span class="o">(</span><span class="n">looper</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Use the provided {@link Looper} instead of the default one and take a callback</span>
</span><span class='line'><span class="cm">     * interface in which to handle messages.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param looper The looper, must not be null.</span>
</span><span class='line'><span class="cm">     * @param callback The callback interface in which to handle messages, or null.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">WeakHandler</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">Looper</span> <span class="n">looper</span><span class="o">,</span> <span class="nd">@NonNull</span> <span class="n">Handler</span><span class="o">.</span><span class="na">Callback</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mCallback</span> <span class="o">=</span> <span class="n">callback</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mExec</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ExecHandler</span><span class="o">(</span><span class="n">looper</span><span class="o">,</span> <span class="k">new</span> <span class="n">WeakReference</span><span class="o">&lt;&gt;(</span><span class="n">callback</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Causes the Runnable r to be added to the message queue.</span>
</span><span class='line'><span class="cm">     * The runnable will be run on the thread to which this handler is</span>
</span><span class='line'><span class="cm">     * attached.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param r The Runnable that will be executed.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @return Returns true if the Runnable was successfully placed in to the</span>
</span><span class='line'><span class="cm">     *         message queue.  Returns false on failure, usually because the</span>
</span><span class='line'><span class="cm">     *         looper processing the message queue is exiting.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">post</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">Runnable</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mExec</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="n">wrapRunnable</span><span class="o">(</span><span class="n">r</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Causes the Runnable r to be added to the message queue, to be run</span>
</span><span class='line'><span class="cm">     * at a specific time given by &lt;var&gt;uptimeMillis&lt;/var&gt;.</span>
</span><span class='line'><span class="cm">     * &lt;b&gt;The time-base is {@link android.os.SystemClock#uptimeMillis}.&lt;/b&gt;</span>
</span><span class='line'><span class="cm">     * The runnable will be run on the thread to which this handler is attached.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param r The Runnable that will be executed.</span>
</span><span class='line'><span class="cm">     * @param uptimeMillis The absolute time at which the callback should run,</span>
</span><span class='line'><span class="cm">     *         using the {@link android.os.SystemClock#uptimeMillis} time-base.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @return Returns true if the Runnable was successfully placed in to the</span>
</span><span class='line'><span class="cm">     *         message queue.  Returns false on failure, usually because the</span>
</span><span class='line'><span class="cm">     *         looper processing the message queue is exiting.  Note that a</span>
</span><span class='line'><span class="cm">     *         result of true does not mean the Runnable will be processed -- if</span>
</span><span class='line'><span class="cm">     *         the looper is quit before the delivery time of the message</span>
</span><span class='line'><span class="cm">     *         occurs then the message will be dropped.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">postAtTime</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">Runnable</span> <span class="n">r</span><span class="o">,</span> <span class="kt">long</span> <span class="n">uptimeMillis</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mExec</span><span class="o">.</span><span class="na">postAtTime</span><span class="o">(</span><span class="n">wrapRunnable</span><span class="o">(</span><span class="n">r</span><span class="o">),</span> <span class="n">uptimeMillis</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Causes the Runnable r to be added to the message queue, to be run</span>
</span><span class='line'><span class="cm">     * at a specific time given by &lt;var&gt;uptimeMillis&lt;/var&gt;.</span>
</span><span class='line'><span class="cm">     * &lt;b&gt;The time-base is {@link android.os.SystemClock#uptimeMillis}.&lt;/b&gt;</span>
</span><span class='line'><span class="cm">     * The runnable will be run on the thread to which this handler is attached.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param r The Runnable that will be executed.</span>
</span><span class='line'><span class="cm">     * @param uptimeMillis The absolute time at which the callback should run,</span>
</span><span class='line'><span class="cm">     *         using the {@link android.os.SystemClock#uptimeMillis} time-base.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @return Returns true if the Runnable was successfully placed in to the</span>
</span><span class='line'><span class="cm">     *         message queue.  Returns false on failure, usually because the</span>
</span><span class='line'><span class="cm">     *         looper processing the message queue is exiting.  Note that a</span>
</span><span class='line'><span class="cm">     *         result of true does not mean the Runnable will be processed -- if</span>
</span><span class='line'><span class="cm">     *         the looper is quit before the delivery time of the message</span>
</span><span class='line'><span class="cm">     *         occurs then the message will be dropped.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @see android.os.SystemClock#uptimeMillis</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">postAtTime</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">r</span><span class="o">,</span> <span class="n">Object</span> <span class="n">token</span><span class="o">,</span> <span class="kt">long</span> <span class="n">uptimeMillis</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mExec</span><span class="o">.</span><span class="na">postAtTime</span><span class="o">(</span><span class="n">wrapRunnable</span><span class="o">(</span><span class="n">r</span><span class="o">),</span> <span class="n">token</span><span class="o">,</span> <span class="n">uptimeMillis</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Causes the Runnable r to be added to the message queue, to be run</span>
</span><span class='line'><span class="cm">     * after the specified amount of time elapses.</span>
</span><span class='line'><span class="cm">     * The runnable will be run on the thread to which this handler</span>
</span><span class='line'><span class="cm">     * is attached.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param r The Runnable that will be executed.</span>
</span><span class='line'><span class="cm">     * @param delayMillis The delay (in milliseconds) until the Runnable</span>
</span><span class='line'><span class="cm">     *        will be executed.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @return Returns true if the Runnable was successfully placed in to the</span>
</span><span class='line'><span class="cm">     *         message queue.  Returns false on failure, usually because the</span>
</span><span class='line'><span class="cm">     *         looper processing the message queue is exiting.  Note that a</span>
</span><span class='line'><span class="cm">     *         result of true does not mean the Runnable will be processed --</span>
</span><span class='line'><span class="cm">     *         if the looper is quit before the delivery time of the message</span>
</span><span class='line'><span class="cm">     *         occurs then the message will be dropped.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">postDelayed</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">r</span><span class="o">,</span> <span class="kt">long</span> <span class="n">delayMillis</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mExec</span><span class="o">.</span><span class="na">postDelayed</span><span class="o">(</span><span class="n">wrapRunnable</span><span class="o">(</span><span class="n">r</span><span class="o">),</span> <span class="n">delayMillis</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Posts a message to an object that implements Runnable.</span>
</span><span class='line'><span class="cm">     * Causes the Runnable r to executed on the next iteration through the</span>
</span><span class='line'><span class="cm">     * message queue. The runnable will be run on the thread to which this</span>
</span><span class='line'><span class="cm">     * handler is attached.</span>
</span><span class='line'><span class="cm">     * &lt;b&gt;This method is only for use in very special circumstances -- it</span>
</span><span class='line'><span class="cm">     * can easily starve the message queue, cause ordering problems, or have</span>
</span><span class='line'><span class="cm">     * other unexpected side-effects.&lt;/b&gt;</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param r The Runnable that will be executed.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @return Returns true if the message was successfully placed in to the</span>
</span><span class='line'><span class="cm">     *         message queue.  Returns false on failure, usually because the</span>
</span><span class='line'><span class="cm">     *         looper processing the message queue is exiting.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">postAtFrontOfQueue</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mExec</span><span class="o">.</span><span class="na">postAtFrontOfQueue</span><span class="o">(</span><span class="n">wrapRunnable</span><span class="o">(</span><span class="n">r</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Remove any pending posts of Runnable r that are in the message queue.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">removeCallbacks</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">WeakRunnable</span> <span class="n">runnable</span> <span class="o">=</span> <span class="n">mRunnables</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">r</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">runnable</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mExec</span><span class="o">.</span><span class="na">removeCallbacks</span><span class="o">(</span><span class="n">runnable</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Remove any pending posts of Runnable &lt;var&gt;r&lt;/var&gt; with Object</span>
</span><span class='line'><span class="cm">     * &lt;var&gt;token&lt;/var&gt; that are in the message queue.  If &lt;var&gt;token&lt;/var&gt; is null,</span>
</span><span class='line'><span class="cm">     * all callbacks will be removed.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">removeCallbacks</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">r</span><span class="o">,</span> <span class="n">Object</span> <span class="n">token</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">WeakRunnable</span> <span class="n">runnable</span> <span class="o">=</span> <span class="n">mRunnables</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">r</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">runnable</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mExec</span><span class="o">.</span><span class="na">removeCallbacks</span><span class="o">(</span><span class="n">runnable</span><span class="o">,</span> <span class="n">token</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Pushes a message onto the end of the message queue after all pending messages</span>
</span><span class='line'><span class="cm">     * before the current time. It will be received in callback,</span>
</span><span class='line'><span class="cm">     * in the thread attached to this handler.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @return Returns true if the message was successfully placed in to the</span>
</span><span class='line'><span class="cm">     *         message queue.  Returns false on failure, usually because the</span>
</span><span class='line'><span class="cm">     *         looper processing the message queue is exiting.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">sendMessage</span><span class="o">(</span><span class="n">Message</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mExec</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Sends a Message containing only the what value.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @return Returns true if the message was successfully placed in to the</span>
</span><span class='line'><span class="cm">     *         message queue.  Returns false on failure, usually because the</span>
</span><span class='line'><span class="cm">     *         looper processing the message queue is exiting.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">sendEmptyMessage</span><span class="o">(</span><span class="kt">int</span> <span class="n">what</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mExec</span><span class="o">.</span><span class="na">sendEmptyMessage</span><span class="o">(</span><span class="n">what</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Sends a Message containing only the what value, to be delivered</span>
</span><span class='line'><span class="cm">     * after the specified amount of time elapses.</span>
</span><span class='line'><span class="cm">     * @see #sendMessageDelayed(android.os.Message, long)</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @return Returns true if the message was successfully placed in to the</span>
</span><span class='line'><span class="cm">     *         message queue.  Returns false on failure, usually because the</span>
</span><span class='line'><span class="cm">     *         looper processing the message queue is exiting.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">sendEmptyMessageDelayed</span><span class="o">(</span><span class="kt">int</span> <span class="n">what</span><span class="o">,</span> <span class="kt">long</span> <span class="n">delayMillis</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mExec</span><span class="o">.</span><span class="na">sendEmptyMessageDelayed</span><span class="o">(</span><span class="n">what</span><span class="o">,</span> <span class="n">delayMillis</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Sends a Message containing only the what value, to be delivered</span>
</span><span class='line'><span class="cm">     * at a specific time.</span>
</span><span class='line'><span class="cm">     * @see #sendMessageAtTime(android.os.Message, long)</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @return Returns true if the message was successfully placed in to the</span>
</span><span class='line'><span class="cm">     *         message queue.  Returns false on failure, usually because the</span>
</span><span class='line'><span class="cm">     *         looper processing the message queue is exiting.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">sendEmptyMessageAtTime</span><span class="o">(</span><span class="kt">int</span> <span class="n">what</span><span class="o">,</span> <span class="kt">long</span> <span class="n">uptimeMillis</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mExec</span><span class="o">.</span><span class="na">sendEmptyMessageAtTime</span><span class="o">(</span><span class="n">what</span><span class="o">,</span> <span class="n">uptimeMillis</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Enqueue a message into the message queue after all pending messages</span>
</span><span class='line'><span class="cm">     * before (current time + delayMillis). You will receive it in</span>
</span><span class='line'><span class="cm">     * callback, in the thread attached to this handler.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @return Returns true if the message was successfully placed in to the</span>
</span><span class='line'><span class="cm">     *         message queue.  Returns false on failure, usually because the</span>
</span><span class='line'><span class="cm">     *         looper processing the message queue is exiting.  Note that a</span>
</span><span class='line'><span class="cm">     *         result of true does not mean the message will be processed -- if</span>
</span><span class='line'><span class="cm">     *         the looper is quit before the delivery time of the message</span>
</span><span class='line'><span class="cm">     *         occurs then the message will be dropped.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">sendMessageDelayed</span><span class="o">(</span><span class="n">Message</span> <span class="n">msg</span><span class="o">,</span> <span class="kt">long</span> <span class="n">delayMillis</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mExec</span><span class="o">.</span><span class="na">sendMessageDelayed</span><span class="o">(</span><span class="n">msg</span><span class="o">,</span> <span class="n">delayMillis</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Enqueue a message into the message queue after all pending messages</span>
</span><span class='line'><span class="cm">     * before the absolute time (in milliseconds) &lt;var&gt;uptimeMillis&lt;/var&gt;.</span>
</span><span class='line'><span class="cm">     * &lt;b&gt;The time-base is {@link android.os.SystemClock#uptimeMillis}.&lt;/b&gt;</span>
</span><span class='line'><span class="cm">     * You will receive it in callback, in the thread attached</span>
</span><span class='line'><span class="cm">     * to this handler.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param uptimeMillis The absolute time at which the message should be</span>
</span><span class='line'><span class="cm">     *         delivered, using the</span>
</span><span class='line'><span class="cm">     *         {@link android.os.SystemClock#uptimeMillis} time-base.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @return Returns true if the message was successfully placed in to the</span>
</span><span class='line'><span class="cm">     *         message queue.  Returns false on failure, usually because the</span>
</span><span class='line'><span class="cm">     *         looper processing the message queue is exiting.  Note that a</span>
</span><span class='line'><span class="cm">     *         result of true does not mean the message will be processed -- if</span>
</span><span class='line'><span class="cm">     *         the looper is quit before the delivery time of the message</span>
</span><span class='line'><span class="cm">     *         occurs then the message will be dropped.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">sendMessageAtTime</span><span class="o">(</span><span class="n">Message</span> <span class="n">msg</span><span class="o">,</span> <span class="kt">long</span> <span class="n">uptimeMillis</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mExec</span><span class="o">.</span><span class="na">sendMessageAtTime</span><span class="o">(</span><span class="n">msg</span><span class="o">,</span> <span class="n">uptimeMillis</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Enqueue a message at the front of the message queue, to be processed on</span>
</span><span class='line'><span class="cm">     * the next iteration of the message loop.  You will receive it in</span>
</span><span class='line'><span class="cm">     * callback, in the thread attached to this handler.</span>
</span><span class='line'><span class="cm">     * &lt;b&gt;This method is only for use in very special circumstances -- it</span>
</span><span class='line'><span class="cm">     * can easily starve the message queue, cause ordering problems, or have</span>
</span><span class='line'><span class="cm">     * other unexpected side-effects.&lt;/b&gt;</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @return Returns true if the message was successfully placed in to the</span>
</span><span class='line'><span class="cm">     *         message queue.  Returns false on failure, usually because the</span>
</span><span class='line'><span class="cm">     *         looper processing the message queue is exiting.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">sendMessageAtFrontOfQueue</span><span class="o">(</span><span class="n">Message</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mExec</span><span class="o">.</span><span class="na">sendMessageAtFrontOfQueue</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Remove any pending posts of messages with code &#39;what&#39; that are in the</span>
</span><span class='line'><span class="cm">     * message queue.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">removeMessages</span><span class="o">(</span><span class="kt">int</span> <span class="n">what</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mExec</span><span class="o">.</span><span class="na">removeMessages</span><span class="o">(</span><span class="n">what</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Remove any pending posts of messages with code &#39;what&#39; and whose obj is</span>
</span><span class='line'><span class="cm">     * &#39;object&#39; that are in the message queue.  If &lt;var&gt;object&lt;/var&gt; is null,</span>
</span><span class='line'><span class="cm">     * all messages will be removed.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">removeMessages</span><span class="o">(</span><span class="kt">int</span> <span class="n">what</span><span class="o">,</span> <span class="n">Object</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mExec</span><span class="o">.</span><span class="na">removeMessages</span><span class="o">(</span><span class="n">what</span><span class="o">,</span> <span class="n">object</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Remove any pending posts of callbacks and sent messages whose</span>
</span><span class='line'><span class="cm">     * &lt;var&gt;obj&lt;/var&gt; is &lt;var&gt;token&lt;/var&gt;.  If &lt;var&gt;token&lt;/var&gt; is null,</span>
</span><span class='line'><span class="cm">     * all callbacks and messages will be removed.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">removeCallbacksAndMessages</span><span class="o">(</span><span class="n">Object</span> <span class="n">token</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mExec</span><span class="o">.</span><span class="na">removeCallbacksAndMessages</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Check if there are any pending posts of messages with code &#39;what&#39; in</span>
</span><span class='line'><span class="cm">     * the message queue.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">hasMessages</span><span class="o">(</span><span class="kt">int</span> <span class="n">what</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mExec</span><span class="o">.</span><span class="na">hasMessages</span><span class="o">(</span><span class="n">what</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Check if there are any pending posts of messages with code &#39;what&#39; and</span>
</span><span class='line'><span class="cm">     * whose obj is &#39;object&#39; in the message queue.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">hasMessages</span><span class="o">(</span><span class="kt">int</span> <span class="n">what</span><span class="o">,</span> <span class="n">Object</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mExec</span><span class="o">.</span><span class="na">hasMessages</span><span class="o">(</span><span class="n">what</span><span class="o">,</span> <span class="n">object</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="n">Looper</span> <span class="nf">getLooper</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mExec</span><span class="o">.</span><span class="na">getLooper</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">WeakRunnable</span> <span class="nf">wrapRunnable</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">Runnable</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//noinspection ConstantConditions</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">r</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">(</span><span class="s">&quot;Runnable can&#39;t be null&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">ChainedRef</span> <span class="n">hardRef</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ChainedRef</span><span class="o">(</span><span class="n">mLock</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mRunnables</span><span class="o">.</span><span class="na">insertAfter</span><span class="o">(</span><span class="n">hardRef</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">hardRef</span><span class="o">.</span><span class="na">wrapper</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ExecHandler</span> <span class="kd">extends</span> <span class="n">Handler</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">final</span> <span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">Handler</span><span class="o">.</span><span class="na">Callback</span><span class="o">&gt;</span> <span class="n">mCallback</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ExecHandler</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mCallback</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ExecHandler</span><span class="o">(</span><span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">Handler</span><span class="o">.</span><span class="na">Callback</span><span class="o">&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mCallback</span> <span class="o">=</span> <span class="n">callback</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ExecHandler</span><span class="o">(</span><span class="n">Looper</span> <span class="n">looper</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">(</span><span class="n">looper</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mCallback</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ExecHandler</span><span class="o">(</span><span class="n">Looper</span> <span class="n">looper</span><span class="o">,</span> <span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">Handler</span><span class="o">.</span><span class="na">Callback</span><span class="o">&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">(</span><span class="n">looper</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mCallback</span> <span class="o">=</span> <span class="n">callback</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleMessage</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">Message</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">mCallback</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">Handler</span><span class="o">.</span><span class="na">Callback</span> <span class="n">callback</span> <span class="o">=</span> <span class="n">mCallback</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">callback</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// Already disposed</span>
</span><span class='line'>                <span class="k">return</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">callback</span><span class="o">.</span><span class="na">handleMessage</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">WeakRunnable</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">final</span> <span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">mDelegate</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">final</span> <span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">ChainedRef</span><span class="o">&gt;</span> <span class="n">mReference</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">WeakRunnable</span><span class="o">(</span><span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">delegate</span><span class="o">,</span> <span class="n">WeakReference</span><span class="o">&lt;</span><span class="n">ChainedRef</span><span class="o">&gt;</span> <span class="n">reference</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mDelegate</span> <span class="o">=</span> <span class="n">delegate</span><span class="o">;</span>
</span><span class='line'>            <span class="n">mReference</span> <span class="o">=</span> <span class="n">reference</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">Runnable</span> <span class="n">delegate</span> <span class="o">=</span> <span class="n">mDelegate</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">ChainedRef</span> <span class="n">reference</span> <span class="o">=</span> <span class="n">mReference</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">reference</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">reference</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">delegate</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">delegate</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ChainedRef</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Nullable</span>
</span><span class='line'>        <span class="n">ChainedRef</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>        <span class="nd">@Nullable</span>
</span><span class='line'>        <span class="n">ChainedRef</span> <span class="n">prev</span><span class="o">;</span>
</span><span class='line'>        <span class="nd">@NonNull</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Runnable</span> <span class="n">runnable</span><span class="o">;</span>
</span><span class='line'>        <span class="nd">@NonNull</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">WeakRunnable</span> <span class="n">wrapper</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@NonNull</span>
</span><span class='line'>        <span class="n">Lock</span> <span class="n">lock</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="nf">ChainedRef</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">Lock</span> <span class="n">lock</span><span class="o">,</span> <span class="nd">@NonNull</span> <span class="n">Runnable</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">runnable</span> <span class="o">=</span> <span class="n">r</span><span class="o">;</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">lock</span> <span class="o">=</span> <span class="n">lock</span><span class="o">;</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">wrapper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WeakRunnable</span><span class="o">(</span><span class="k">new</span> <span class="n">WeakReference</span><span class="o">&lt;&gt;(</span><span class="n">r</span><span class="o">),</span> <span class="k">new</span> <span class="n">WeakReference</span><span class="o">&lt;&gt;(</span><span class="k">this</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">WeakRunnable</span> <span class="nf">remove</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">prev</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">prev</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">next</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">prev</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">prev</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                <span class="n">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">wrapper</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insertAfter</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">ChainedRef</span> <span class="n">candidate</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">this</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">candidate</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">candidate</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>                <span class="k">this</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">candidate</span><span class="o">;</span>
</span><span class='line'>                <span class="n">candidate</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Nullable</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">WeakRunnable</span> <span class="nf">remove</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">ChainedRef</span> <span class="n">curr</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">next</span><span class="o">;</span> <span class="c1">// Skipping head</span>
</span><span class='line'>                <span class="k">while</span> <span class="o">(</span><span class="n">curr</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">curr</span><span class="o">.</span><span class="na">runnable</span> <span class="o">==</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// We do comparison exactly how Handler does inside</span>
</span><span class='line'>                        <span class="k">return</span> <span class="n">curr</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                    <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>reference</h2>

<ul>
<li><a href="https://techblog.badoo.com/blog/2014/08/28/android-handler-memory-leaks">Android Handler Memory Leaks</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RecyclerView Animation part II]]></title>
    <link href="http://Solarex.github.io/blog/2016/02/12/recyclerview-animation-part-ii/"/>
    <updated>2016-02-12T00:47:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2016/02/12/recyclerview-animation-part-ii</id>
    <content type="html"><![CDATA[<p>In the first article, I’ve covered the main idea on how predictive animations run in RecyclerView. There is actually a lot more going on to achieve this simplicity (for the LayoutManager). Here are some important points that you should know about.</p>

<p>RecyclerView keeps some children attached although they have been removed by the LayoutManager. How does it work? Does it invalidate the contract between the LayoutManager and RecyclerView?</p>

<p>Yes it does ‘kind of’ violate the contract with LayoutManager, but:</p>

<p>RecyclerView does keep the View as a child of the ViewGroup but hides it from the LayoutManager. Each time LayoutManager calls a method to access its children, RecyclerView takes into account the hidden Views. Lets look at the example at Part 1 where ‘C’ was being removed from the adapter.</p>

<center><img src="http://Solarex.github.io/images/predictive_animations.gif"></center>




<!-- more -->


<p>While ‘C’ is fading out, if LayoutManager calls <code>getChildCount()</code>, RecyclerView returns 6 although it has 7 children. If <code>LayoutManager</code> calls <code>getChildAt(int)</code>, RecyclerView offsets that call properly to skip child ‘C’ (or any hidden children). If LayoutManager calls <code>addView(View, position)</code>, RecyclerView offsets the index properly before calling <code>ViewGroup#addView</code>.</p>

<p>When the animation ends, RecyclerView will remove the View and recycle it.</p>

<p>For more details, you can check <code>ChildHelper</code> internal class.</p>

<p>How does RecyclerView handle item positions in the preLayout pass since they don’t match Adapter contents?</p>

<p>This is doable thanks to the specific notify events added to the Adapter. When Adapter dispatches <code>notify**</code> events, RecyclerView records them and requests a layout to apply them. Any events that arrives before the next layout pass will be applied together.</p>

<p>When <code>onLayout</code> is called by the system, RecyclerView does the following:</p>

<ul>
<li>Reorder update events such that move events are pushed to the end of the list of update ops. Moving move events to the end of the list is a simplification step so I’ll not go into details here. You can check <code>OpReorderer</code> class for details if you are interested.</li>
<li>Process events one by one and update existing ViewHolders’ positions with respect to the update. If a ViewHolder is removed, it is also marked as <code>removed</code>. While doing this, RecyclerView also decides whether the adapter change should be dispatched to the LayoutManager before or after the preLayout step. This decision process is as follows:

<ul>
<li>If it is an <code>add</code> operation, it is deferred because item should not exist in preLayout.</li>
<li>If it is an <code>update</code> or <code>remove</code> operation and if it affects existing ViewHolders, it is postponed. If it does not effect existing ViewHolders, it is dispatched to the LayoutManager because RecyclerView cannot resurrect the previous state of the item (because it does not have a ViewHolder that represents the previous state of that Item).</li>
<li>If it is a <code>move</code> operation, it is deferred because RecyclerView can fake its location in the pre-layout pass. For example, if item at position 3 moved to position 5, RecyclerView can return the View for position 5 in pre-layout when View for position 3 is asked.</li>
<li>RecyclerView rewrites update operations as necessary. For example, if an update or delete operation affects some of the ViewHolders, RecyclerView divides that operation. If an operation should be dispatched to LayoutManager but a deferred operation may affect it, RecyclerView re-orders these operations so that they are still consistent.</li>
</ul>
</li>
</ul>


<p>For example, if there is an Add 1 at 3 operation which is deferred followed by a Remove 1 at 5 operation which cannot be deferred, RecyclerView dispatches it to the LayoutManager as Remove 1 at 4. This is done because the original Remove 1 at 5 was notified by the Adapter after Add 1 at 3 so it includes that item. Since RecyclerView did not tell LayoutManager about the Add 1 at 3, it rewrites the remove operation to be consistent.</p>

<p>This approach makes tracking items dead simple for a LayoutManager. The abstraction between the Adapter and the LayoutManager makes all of this possible, which is why RecyclerView never passes the Adapter to the LayoutManager, instead, provides methods to access Adapter via State and Recycler.</p>

<p>ViewHolders also have their old position, pre layout position and final adapter positions. When <code>ViewHolder#getPosition</code> is called, they return either preLayout position or final adapter position depending on the current layout state (pre or post). LayoutManager doesn’t need to know about this because it will always be consistent with the previous events that were dispatched to the LayoutManager.</p>

<ul>
<li>After Adapter updates are processed, RecyclerView saves positions and dimensions of existing Views which will later be used for animations.</li>
<li>RecyclerView calls <code>LayoutManager#onLayoutChildren</code> for the preLayout step. As I’ve mentioned in the first article, LayoutManager runs its regular layout logic. All it has to do is to layout more items for those which are being deleted or changed (<code>LayoutParams#isItemRemoved</code> , <code>LayoutParams#isItemChanged</code>). As a reminder, the deleted or changed item still ‘appears’ in the Adapter API given to the LayoutManager. This way, LayoutManager simply treats it as any other View (adds, measures, positions etc).</li>
<li>After preLayout is complete, RecyclerView records the positions of the Views again and dispatches the remaining Adapter updates to the LayoutManager.</li>
<li>RecyclerView calls LayoutManager’s <code>onLayout</code> again (postLayout). This time, all item positions match the current contents of the Adapter. LayoutManager runs its regular layout logic again.</li>
<li>After post layout is complete, RecyclerView checks positions of Views again and decides which items are added, removed, changed and moved. It ‘hides’ removed Views and for views not added by the LayoutManager, adds them to the RecyclerView (because they should be animated).</li>
<li>Items which require an animation are passed to the <code>ItemAnimator</code> to start their animations. After the animation is complete, Item Animator calls a callback in RecyclerView which removes and recycles the View if it is no longer necessary.</li>
</ul>


<h3>What happens if LayoutManager keeps some internal data structure using item positions?</h3>

<p>Everything works… kind of :). Thanks to the re-writing of Adapter updates by the RecyclerView, all LayoutManager has to do is to update its own bookkeeping when one of its adapter data changed callbacks is called due to Adapter changes. RecyclerView ensures that these updates are called at the appropriate time and order.</p>

<p>At any time during a layout, if LayoutManager needs to access the adapter for additional data (some custom API), it can call <code>Recycler#convertPreLayoutPositionToPostLayout</code> to get the item’s Adapter position. For example, GridLayoutManager uses this API to get the span size of items.</p>

<h3>What happens if notifyDataSetChanged is called? How do predictive animations run?</h3>

<p>They don’t, which is why <code>notifyDataSetChanged</code> should be your last resort. When <code>notifyDataSetChanged</code> is called on the adapter, RecyclerView does not know where items moved so it cannot properly fake <code>getViewForPosition</code> calls. It simply runs animations as a LayoutTransition would do.</p>

<h2>reference</h2>

<ul>
<li><a href="http://www.birbit.com/recyclerview-animations-part-2-behind-the-scenes/">RecyclerView Animations Part 2 – Behind The Scenes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RecyclerView Animation part I]]></title>
    <link href="http://Solarex.github.io/blog/2016/02/11/recyclerview-animation-part-i/"/>
    <updated>2016-02-11T00:47:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2016/02/11/recyclerview-animation-part-i</id>
    <content type="html"><![CDATA[<p>ListView is one of the most popular widgets of the Android Framework. It has many features, yet it is fairly complex and hard to modify. As the UX paradigms evolved and phones got faster, its limitations started to overshadow its feature set.</p>

<p>With Lollipop, the Android team decided to release a new widget that will make writing different collection views much easier with a pluggable architecture. Many different behaviors can be controlled easily by implementing simple contracts to change:</p>

<ul>
<li>how items are laid out</li>
<li>animations!</li>
<li>item decorations</li>
<li>recycling strategy</li>
</ul>


<p>This great flexibility comes with the additional complexity of a bigger architecture. Also, there are more things to learn.</p>

<!-- more -->


<p>In this post, I want to deep dive into RecyclerView internals, particularly on how animations work.</p>

<p>On Honeycomb, the Android Framework introduced LayoutTransition, which was a very easy way to animate changes inside a ViewGroup. It works by taking a snapshot of the ViewGroup before and after the layout changes, then creating Animators to move between these two states. This process is fairly similar to what RecyclerView needs to do to animate changes in the adapter.</p>

<center><img src="http://Solarex.github.io/images/trans_man_default.gif" alt="LayoutTransition example"></center>


<p>Unfortunately, lists have one major difference which makes LayoutTransitions a bad fit for their animations. Specifically, items in lists are not the same as views in a ViewGroup. This is an important distinction that needs to be understood to handle animations on “items” while using mechanisms that animate the “views” that show the item contents.</p>

<p>In a normal ViewGroup, if a View is newly added to the View hierarchy, it can be treated like a newly added View and thus it can be animated accordingly (e.g. fade in). For collections, it is a bit different. For example, a View for an item may become visible just because an item before it has been removed from the Adapter. In this case, running a fade in animation for the new item would be misleading because it was already in the list though the view is new because the item just entered the viewport. RecyclerView knows if the item is new or not but it does not know where it was if the item is not new. The same case is valid for disappearing Views, RecyclerView does not know where the view went if it is not removed from the Adapter.</p>

<center><img src="http://Solarex.github.io/images/trans_man_bad.gif" alt="LayoutTransition failure for a list"></center>


<p>To overcome this problem, <code>RecyclerView</code> could ask <code>LayoutManager</code> for the previous location of the new View. Although this would work, it would require some bookkeeping on the <code>LayoutManager</code> end and may not be trivial to calculate for more complex <code>LayoutManagers</code>.</p>

<p>The way that <code>RecyclerView</code> handles animating appearing and disappearing items (that is, animating the appearance and disappearance of views that refer to items that were and are still in the list) is by relying on the <code>LayoutManager</code> to handle predictive layout logic. One one hand, the <code>RecyclerView</code> wants to know where views would have been had they been laid out prior to this change. On the other hand, the <code>RecyclerView</code> wants to know where views would be laid out after this change if the <code>LayoutManager</code> went to the trouble of laying out items that are not currently visible.</p>

<p>To make it easy for the <code>LayoutManager</code> to provide this information, <code>RecyclerView</code> uses a two step layout process when there are adapter changes which should be animated. The mechanisms for handling these predictive layout passes are described below.</p>

<ul>
<li>In the first layout pass (preLayout), RecyclerView asks LayoutManager to layout the previous state with the knowledge of the additional information. For the example above, it would be like requesting “Layout items again, btw, ‘C’ has been removed”. The LayoutManager runs its usual layout step but knowing that ‘C’ will be removed, it lays out View(s) to fill the space left by ‘C’.The cool part of this contract is that RecyclerView still behaves as if ‘C’ is still in the backing Adapter. For example, when LayoutManager asks for the View for position 2, RecyclerView returns ‘C’ (<code>getViewForPosition(2) == View('C')</code>) and if LayoutManager asks for position 4, RecyclerView returns the View for ‘E’ (although ‘D’ is the 4th item in the Adapter). LayoutParams of the returned View has an <code>isItemRemoved</code> method which LayoutManager can use to check if this is a disappearing item.</li>
<li>In the second layout pass (postLayout), RecyclerView asks LayoutManager to re-layout its items. This time, ‘C’ is not in the Adapter anymore. <code>getViewForPosition(2)</code> will return ‘D’ and <code>getViewForPosition(4)</code> will return ‘F’.Keep in mind that the backing item for ‘C’ was already removed from the Adapter, but since RecyclerView has the View representation of it, it can behave as if ‘C’ is still there. In other words, RecyclerView does the bookkeeping for the LayoutManager.</li>
</ul>


<p>Every time <code>onLayoutChildren</code> is called on the <code>LayoutManager</code>, it temporarily detaches all views and lays them out from scratch again. Unchanged Views are returned from the scrap cache so their measurements stay valid, making this relayout fairly cheap and simple.</p>

<center><img src="http://Solarex.github.io/images/pre-layout.jpeg" alt="LinearLayoutManager pre layout result"></center>




<center><img src="http://Solarex.github.io/images/post-layout.jpeg" alt="LinearLayoutManager post layout result"></center>


<p>After these two layout passes, RecyclerView knows where the Views came from so it can run the correct animation.</p>

<center><img src="http://Solarex.github.io/images/predictive_animations.gif" alt="predictive animations"></center>


<p>You might ask: The View ‘C’ was not laid out by the LayoutManager, how come it is still visible?</p>

<p>To be clear, ‘C’ was laid out by the LayoutManager in the pre-layout pass because it looked like it was in the Adapter. It is true that ‘C’ was not laid out by the LayoutManager in the post-layout pass because it does not exist in the Adapter anymore. It is also true for the LayoutManager that ‘C’ is not its child anymore but not true for the RecyclerView. When a View is removed by the LayoutManager, if ItemAnimator wants to animate it, RecyclerView keeps it as a child (so that animations can run properly). More details on this in Part2.</p>

<h2>Disappearing Items</h2>

<p>With these two layout passes, RecyclerView is able to animate new Views properly. But now, there is another problem with Views that are disappearing. Consider the following case where a new item is added to the list, pushing some other items outside the visible area. This is how it would look with LayoutTransitions:</p>

<center><img src="http://Solarex.github.io/images/layout_transition_add.gif" alt="layout transition add"></center>


<p>When ‘X’ was added after ‘A’, it pushed ‘F’ outside the screen. Since LayoutManager will not layout ‘F’, LayoutTransition thinks it has been removed from the UI and runs a fade out animation for it. In reality, ‘F’ is still in the adapter but has been pushed out of bounds.</p>

<p>To solve this issue, RecyclerView provides an additional API to LayoutManager to get this information. At the end of a postLayout pass, LayoutManager can call <code>getScrapList</code> to get list of Views which are in this situation (not laid out by the <code>LayoutManager</code> but still present in the <code>Adapter</code>). Then, it lays out these views as well, as if the size of RecyclerView was big enough to show them.</p>

<center><img src="http://Solarex.github.io/images/add_post_layout_with_frame.png"></center>


<p>One important detail is that, since these Views are not necessary after their animations are complete, <code>LayoutManager</code> calls <code>addDisappearingView</code> instead of <code>addView</code>. This gives the clue to the RecyclerView that this View should be removed after its animations is complete. RecyclerView also adds the View to the list of hidden views so that it will disappear from LayoutManager’s children list as soon as postLayout method returns. This way, LayoutManager can forget about it.</p>

<center><img src="http://Solarex.github.io/images/predictive_add.gif"></center>


<p>Initially, at least for a LinearLayoutManager, you might think that it can calculate where the Views came from or where they went (if disappeared) and thus won’t need a two pass layout calculation. Unfortunately, there are many edge cases when multiple types of adapter changes happen in the same layout pass. In addition to that, for a more complex LayoutManager, it is not always trivial to calculate where an item would be placed (e.g. StaggeredGridLayout). This approach removes all burden from the LayoutManager and it can support proper animations with little effort.</p>

<p>So far, I’ve covered the main idea on how predictive animations run in RecyclerView. There is actually a lot more going on to achieve this simplicity (for the LayoutManager). You can read about how all this works in Part 2 – Behind The Scenes.</p>

<h2>reference</h2>

<ul>
<li><a href="http://www.birbit.com/recyclerview-animations-part-1-how-animations-work/">RecyclerView Animations Part 1 – How Animations Work</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a RecyclerView LayoutManager part IV]]></title>
    <link href="http://Solarex.github.io/blog/2016/01/15/building-a-recyclerview-layoutmanager-part-iv/"/>
    <updated>2016-01-15T16:14:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2016/01/15/building-a-recyclerview-layoutmanager-part-iv</id>
    <content type="html"><![CDATA[<p>While writing what was intended to be the final post of this series, a discussion of predictive animations, I ran into a number of interesting challenges that I thought warranted their own discussion. This series began as an investigation into whether RecyclerView could easily handle a layout structure that could scroll in both the horizontal and vertical axes, and how difficult it would be for the developer to build their own LayoutManager. I chose a basic grid of uniform items as the structure, thinking it would be the most straightforward to implement.</p>

<p>The following graphic represents the basic goal of what the implementation ought to achieve while the user scrolls around the screen.</p>

<center><img src="http://Solarex.github.io/images/building_recyclerview_layoutmanager_redux.gif" width="600" height="360"></center>




<!-- more -->


<p></p>

<h2>Broken By Design</h2>

<p>No matter how you attempt to organize the adapter positions (left-to-right, top-to-bottom, etc.), the viewport into the content will always show a broken, disconnected range of the data set. To be more precise, there are items inside the adapter range between the first and last visible positions that are also outside the visible range of views.</p>

<p>This is an important point, because it’s contrary to layouts that scroll on a single axis (and consequently, all the default layouts provided by the current framework). These standard widgets show the data set range in a contiguous block–from the first to the last visible position with no breaks.</p>

<p>The RecyclerView LayoutManager API, as it is released today, makes a few implicit assumptions about the visible data set. These assumptions tend to favor a contiguous visible range, and make producing a layout like the grid illustrated above a bit more challenging. Nowhere is this more apparent than in the predictive animation APIs. For posterity’s sake, I felt compelled to explain where some of those shortcomings came into play during this process.</p>

<h3>Assumption #1: Removing an item from outside the visible range doesn’t affect the currently visible views.</h3>

<p>When you think about the way LinearLayoutManager or GridLayoutManager react when an adapter item is removed, both are fairly similar at a high level. If the removed item is currently visible, a space will be left empty that needs to be filled with the surrounding views. This means extra appearing views must be laid out to fill the gap. However, there isn’t really a case where a removal would send disappearing views off-screen…the only disappearing views are those explicitly removed. If the removed view is outside the visible range (either before or after), it won’t affect the visible layout at all–there are no views appearing or disappearing. In these cases you typically see no animation. All that may change is the absolute positioning of that data block within the larger range.</p>

<p>The above cases, as stated, are also mostly true for a disconnected layout. However, the discontinuous nature of the visible range allows for items to be removed that are inside the visible range without actually being visible! Stated another way, their position is between the first and last visible position, but the item view is not currently in the layout. The consequence is that item removals which happen off-screen can and will affect both appearing and disappearing views that you need to animate in that layout pass.</p>

<p>Pre-layout is the critical phase of a <code>RecyclerView</code> animation when you have the chance to lay out appearing views. To assist you, <code>RecyclerView</code> returns views back (including the removed ones) by their initial position values so you can lay contents out in their initial state. However, when view removals don’t intersect with the visible range, <code>RecyclerView</code> instead returns views by their final position values. This makes handling appearing views in this case much more difficult without additional bookkeeping…difficult, but doable.</p>

<p>For <code>FixedGridLayoutManager</code>, as we saw in the last post, we were required us to listen to the <code>onItemsRemoved()</code> callback in addition to parsing through visible views to find removals and properly handle all appearing view cases. <code>RecyclerView</code> made sure that this callback came before pre-layout when we needed it (the off-screen case), even though it comes after pre-layout otherwise. <code>RecyclerView</code> does this to avoid conflicting the posting of these events with your layout–the timing of it was just a happy accident for us.</p>

<p>We also had to track the fact that visible removals would offset the view positions in a way we expected, but off-screen removals would not. This is why the removals were marked with different types. A snippet left out of the last post shows that we would supply a manual offset back to the appearing view logic when the removals were off-screen…so the positions would match what they were when the removal was visible.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">fillGrid</span><span class="o">(</span><span class="kt">int</span> <span class="n">direction</span><span class="o">,</span> <span class="kt">int</span> <span class="n">emptyLeft</span><span class="o">,</span> <span class="kt">int</span> <span class="n">emptyTop</span><span class="o">,</span> <span class="n">RecyclerView</span><span class="o">.</span><span class="na">Recycler</span> <span class="n">recycler</span><span class="o">,</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">preLayout</span><span class="o">,</span> <span class="n">SparseIntArray</span> <span class="n">removedPositions</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="err">…</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">getVisibleChildCount</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">nextPosition</span> <span class="o">=</span> <span class="n">positionOfIndex</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * When a removal happens out of bounds, the pre-layout positions of items</span>
</span><span class='line'><span class="cm">         * after the removal are shifted to their final positions ahead of schedule.</span>
</span><span class='line'><span class="cm">         * We have to track off-screen removals and shift those positions back</span>
</span><span class='line'><span class="cm">         * so we can properly lay out all current (and appearing) views in their</span>
</span><span class='line'><span class="cm">         * initial locations.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">offsetPositionDelta</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">preLayout</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">offsetPosition</span> <span class="o">=</span> <span class="n">nextPosition</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">offset</span> <span class="o">&lt;</span> <span class="n">removedPositions</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">offset</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">//Look for off-screen removals that are less-than this</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">removedPositions</span><span class="o">.</span><span class="na">valueAt</span><span class="o">(</span><span class="n">offset</span><span class="o">)</span> <span class="o">==</span> <span class="n">REMOVE_INVISIBLE</span>
</span><span class='line'>                        <span class="o">&amp;&amp;</span> <span class="n">removedPositions</span><span class="o">.</span><span class="na">keyAt</span><span class="o">(</span><span class="n">offset</span><span class="o">)</span> <span class="o">&lt;</span> <span class="n">nextPosition</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">//Offset position to match</span>
</span><span class='line'>                    <span class="n">offsetPosition</span><span class="o">--;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">offsetPositionDelta</span> <span class="o">=</span> <span class="n">nextPosition</span> <span class="o">-</span> <span class="n">offsetPosition</span><span class="o">;</span>
</span><span class='line'>            <span class="n">nextPosition</span> <span class="o">=</span> <span class="n">offsetPosition</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">nextPosition</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">nextPosition</span> <span class="o">&gt;=</span> <span class="n">getItemCount</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">//Item space beyond the data set, don&#39;t attempt to add a view</span>
</span><span class='line'>            <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="err">…</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">mVisibleColumnCount</span> <span class="o">==</span> <span class="o">(</span><span class="n">mVisibleColumnCount</span> <span class="o">-</span> <span class="mi">1</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">leftOffset</span> <span class="o">=</span> <span class="n">startLeftOffset</span><span class="o">;</span>
</span><span class='line'>            <span class="n">topOffset</span> <span class="o">+=</span> <span class="n">mDecoratedChildHeight</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//During pre-layout, on each column end, apply any additional appearing views</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">preLayout</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">layoutAppearingViews</span><span class="o">(</span><span class="n">recycler</span><span class="o">,</span> <span class="n">view</span><span class="o">,</span> <span class="n">nextPosition</span><span class="o">,</span> <span class="n">removedPositions</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span> <span class="n">offsetPositionDelta</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">leftOffset</span> <span class="o">+=</span> <span class="n">mDecoratedChildWidth</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">…</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This <code>offsetPositionDelta</code> value was then passed to <code>layoutAppearingViews()</code> as a global offset to what the real row/column position were that we should be using during pre-layout. This offset would not need to exist if not for this additional bookkeeping requirement.</p>

<h3>Assumption #2: Adding a new item only results in disappearing sibling views, not appearing views.</h3>

<p>With item additions, the reverse is true. If the new item should be visible when added, standard layout managers will push disappearing views off-screen to make room. There isn’t really a case where this action would also trigger one or more sibling views to slide into place as appearing children. As with removals, an addition outside the visible range doesn’t really have any bearing on the visible views, so no animation is typically in play.</p>

<p>For <code>FixedGridLayoutManager</code>, or any disconnected range layout, it doesn’t really matter if the addition happens inside or outside the visible range. In both cases we would need to manage possible appearing and disappearing views. The same option we used for remove is not available to us because <code>onItemsAdded()</code> is always called after pre-layout…we don’t get our happy accident this time around.</p>

<p>Without that callback, we don’t really have much to go on during pre-layout when it comes to an add. It becomes a compromise between laying out extra views in hopes that we need them, and not laying out so many extra views we damage performance. <code>FixedGridLayoutManager</code> does not support predicting appearing views during an item add.</p>

<h2>Just the Beginning…</h2>

<p>The RecyclerView APIs are very new, and there are tons of changes already in the works with more to follow after that. They are also extremely complex, and hard to get right. For every amount of effort RecyclerView requires of you, it is doing 10x more behind the scenes. These types of growing pains are expected. Hopefully those of you trying to do similar things find this as a caution that saves you time, while we both wait for the framework to mature.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a RecyclerView LayoutManager part III]]></title>
    <link href="http://Solarex.github.io/blog/2016/01/13/building-a-recyclerview-layoutmanager-part-iii/"/>
    <updated>2016-01-13T00:48:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2016/01/13/building-a-recyclerview-layoutmanager-part-iii</id>
    <content type="html"><![CDATA[<p>In the previous post, we discussed adding proper support for data set changes and targeted scrolling. In this installment of the series, we will focus on properly supporting animations in your fancy new LayoutManager.In case you’ve forgotten, the code samples are <a href="https://github.com/devunwired/recyclerview-playground">on GitHub</a>.</p>

<h2>The Problem With Free</h2>

<p>We talked about notifyDataSetChanged() the last time, but you may have noticed that changing the data in this way doesn’t animate the change**. RecyclerView includes a new API for making animated changes, which requires you to notify the adapter which positions in the adapter have changed, and what the action was:</p>

<ul>
<li><code>notifyItemInserted()</code> and <code>notifyItemRangeInserted()</code>: Insertion of new item(s) at the given position(s).</li>
<li><code>notifyItemChanged()</code> and <code>notifyItemRangeChanged()</code>: Invalidate he item(s) at the given position(s), nothing structural has changed in the data set.</li>
<li><code>notifyItemRemoved()</code> and <code>notifyItemRangeRemoved()</code>: Removal of the item(s) at the given position(s).</li>
<li><code>notifyItemMoved()</code>: An item has relocated to a new position in the data set.</li>
</ul>


<p>By default, your LayoutManager will get “simple item animations” for free when these methods are used. These animations are simply based on whether each current view position is still present in the layout after a change. New views are faded in, removed views are faded out, and other views are moved to their new location. Here’s what our grid layout looks like with the free animations:</p>

<center><img src="http://Solarex.github.io/images/building_recyclerview_layoutmanager_animation.gif" width="380" height="674" /></center>




<!-- more -->


<p>The problem here is that several items fade out that weren’t removed. This is because they are no longer visible inside the parent RecyclerView bounds. We would like the views to slide out of view towards where the user would expect them to go, but at this stage the framework only knows that our code didn’t lay them out again after the data set change took place. In addition, new views are fading in as if they were added. It would be better if these views slid into place from their expected locations as well.</p>

<p>The framework needs our help–we have to add a bit more to the <code>LayoutManager</code>…</p>

<h2>Predictive Item Animations</h2>

<p>The following animation represents what conceptually ought to happen when an item is removed:</p>

<center><img src="http://Solarex.github.io/images/building_recyclerview_layoutmanager_remove_animation.gif" width="667" height="400"></center>


<p>As we discussed in the first post of the series, <code>onLayoutChildren()</code> is typically only called once by the parent <code>RecyclerView</code> during the initial layout or when the data set size (i.e. item count) changes. The predictive item animations feature allows us to provide a more meaningful description of how the views should transition based on changes in the data. We need to start by indicating to the framework that our <code>LayoutManager</code> is able to provide this additional data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supportsPredictiveItemAnimations</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this one change, <code>onLayoutChildren()</code> will now be called twice for each batch of data set changes–first as a “pre-layout” phase, and again for the real layout.</p>

<h2>What Should I Do During Pre-Layout?</h2>

<p>During the pre-layout phase of <code>onLayoutChildren()</code>, you should run your layout logic to set up the initial conditions for the change animation. This means that you need to layout all the views that were currently visible before the change AND any additional views that you know will be visible after the animation runs (these are termed APPEARING views). These extra appearing views should be laid out in the off-screen positions where the user would expect them to be coming from. The framework will capture these positions and use them to animate the new views into place instead of doing a simple fade-in.We can check which layout phase we are in via <code>RecyclerView.State.isPreLayout()</code>.</p>

<p>In the <code>FixedGridLayoutManager</code> example, we use pre-layout to determine how many visible views are being removed as a result of the data set change. Removed views are still returned from the <code>Recycler</code> in pre-layout, so you can lay them out in their original location and not have to worry about accounting for an empty space. To indicate future removal to you, <code>LayoutParams.isViewRemoved()</code> will return true for the given view. Our example counts the number of removed views so we have a rough idea of how much space will get filled by appearing views.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLayoutChildren</span><span class="o">(</span><span class="n">RecyclerView</span><span class="o">.</span><span class="na">Recycler</span> <span class="n">recycler</span><span class="o">,</span> <span class="n">RecyclerView</span><span class="o">.</span><span class="na">State</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="err">…</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">SparseIntArray</span> <span class="n">removedCache</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * During pre-layout, we need to take note of any views that are</span>
</span><span class='line'><span class="cm">     * being removed in order to handle predictive animations</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="na">isPreLayout</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">removedCache</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SparseIntArray</span><span class="o">(</span><span class="n">getChildCount</span><span class="o">());</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">getChildCount</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">View</span> <span class="n">view</span> <span class="o">=</span> <span class="n">getChildAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>            <span class="n">LayoutParams</span> <span class="n">lp</span> <span class="o">=</span> <span class="o">(</span><span class="n">LayoutParams</span><span class="o">)</span> <span class="n">view</span><span class="o">.</span><span class="na">getLayoutParams</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">lp</span><span class="o">.</span><span class="na">isItemRemoved</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">//Track these view removals as visible</span>
</span><span class='line'>                <span class="n">removedCache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">lp</span><span class="o">.</span><span class="na">getViewPosition</span><span class="o">(),</span> <span class="n">REMOVE_VISIBLE</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="err">…</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">…</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Fill the grid for the initial layout of views</span>
</span><span class='line'>    <span class="n">fillGrid</span><span class="o">(</span><span class="n">DIRECTION_NONE</span><span class="o">,</span> <span class="n">childLeft</span><span class="o">,</span> <span class="n">childTop</span><span class="o">,</span> <span class="n">recycler</span><span class="o">,</span> <span class="n">state</span><span class="o">.</span><span class="na">isPreLayout</span><span class="o">(),</span> <span class="n">removedCache</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">…</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>TIP: During pre-layout, <code>RecyclerView</code> attempts to map the adapter positions of your views to their “old” locations (meaning before the data set change). When you ask for a view by position, expect that position to be the initial position of that item view. Beware of trying to transform them yourself between pre-layout and “real” layout.</p>

<p>The final change in the example comes as a modification to fillGrid() in which we will attempt to lay out “N” additional views (per row) as appearing views, where N is the number of visible views being removed. These views will always be filled in from the right on a removal, so they are computed as the positions following the last visible column:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">fillGrid</span><span class="o">(</span><span class="kt">int</span> <span class="n">direction</span><span class="o">,</span> <span class="kt">int</span> <span class="n">emptyLeft</span><span class="o">,</span> <span class="kt">int</span> <span class="n">emptyTop</span><span class="o">,</span> <span class="n">RecyclerView</span><span class="o">.</span><span class="na">Recycler</span> <span class="n">recycler</span><span class="o">,</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">preLayout</span><span class="o">,</span> <span class="n">SparseIntArray</span> <span class="n">removedPositions</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="err">…</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">getVisibleChildCount</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">nextPosition</span> <span class="o">=</span> <span class="n">positionOfIndex</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="err">…</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">mVisibleColumnCount</span> <span class="o">==</span> <span class="o">(</span><span class="n">mVisibleColumnCount</span> <span class="o">-</span> <span class="mi">1</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">leftOffset</span> <span class="o">=</span> <span class="n">startLeftOffset</span><span class="o">;</span>
</span><span class='line'>            <span class="n">topOffset</span> <span class="o">+=</span> <span class="n">mDecoratedChildHeight</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//During pre-layout, on each column end, apply any additional appearing views</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">preLayout</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">layoutAppearingViews</span><span class="o">(</span><span class="n">recycler</span><span class="o">,</span> <span class="n">view</span><span class="o">,</span> <span class="n">nextPosition</span><span class="o">,</span> <span class="n">removedPositions</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span> <span class="err">…</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">leftOffset</span> <span class="o">+=</span> <span class="n">mDecoratedChildWidth</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">…</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">layoutAppearingViews</span><span class="o">(</span><span class="n">RecyclerView</span><span class="o">.</span><span class="na">Recycler</span> <span class="n">recycler</span><span class="o">,</span> <span class="n">View</span> <span class="n">referenceView</span><span class="o">,</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">referencePosition</span><span class="o">,</span> <span class="kt">int</span> <span class="n">extraCount</span><span class="o">,</span> <span class="kt">int</span> <span class="n">offset</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//Nothing to do...</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">extraCount</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">extra</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">extra</span> <span class="o">&lt;=</span> <span class="n">extraCount</span><span class="o">;</span> <span class="n">extra</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//Grab the next position after the reference</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">extraPosition</span> <span class="o">=</span> <span class="n">referencePosition</span> <span class="o">+</span> <span class="n">extra</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">extraPosition</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">extraPosition</span> <span class="o">&gt;=</span> <span class="n">getItemCount</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">//Can&#39;t do anything with this</span>
</span><span class='line'>            <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * Obtain additional position views that we expect to appear</span>
</span><span class='line'><span class="cm">         * as part of the animation.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">View</span> <span class="n">appearing</span> <span class="o">=</span> <span class="n">recycler</span><span class="o">.</span><span class="na">getViewForPosition</span><span class="o">(</span><span class="n">extraPosition</span><span class="o">);</span>
</span><span class='line'>        <span class="n">addView</span><span class="o">(</span><span class="n">appearing</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//Find layout delta from reference position</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">newRow</span> <span class="o">=</span> <span class="n">getGlobalRowOfPosition</span><span class="o">(</span><span class="n">extraPosition</span> <span class="o">+</span> <span class="n">offset</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">rowDelta</span> <span class="o">=</span> <span class="n">newRow</span> <span class="o">-</span> <span class="n">getGlobalRowOfPosition</span><span class="o">(</span><span class="n">referencePosition</span> <span class="o">+</span> <span class="n">offset</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">newCol</span> <span class="o">=</span> <span class="n">getGlobalColumnOfPosition</span><span class="o">(</span><span class="n">extraPosition</span> <span class="o">+</span> <span class="n">offset</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">final</span> <span class="kt">int</span> <span class="n">colDelta</span> <span class="o">=</span> <span class="n">newCol</span> <span class="o">-</span> <span class="n">getGlobalColumnOfPosition</span><span class="o">(</span><span class="n">referencePosition</span> <span class="o">+</span> <span class="n">offset</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">layoutTempChildView</span><span class="o">(</span><span class="n">appearing</span><span class="o">,</span> <span class="n">rowDelta</span><span class="o">,</span> <span class="n">colDelta</span><span class="o">,</span> <span class="n">referenceView</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Inside the <code>layoutAppearingViews()</code> helper, each additional appearing view is laid out at it’s “global” position (i.e. the row/column position it would occupy in the grid). This location is off-screen, but gives the framework the data it needs to produce a starting point for the animation to slide these views in.</p>

<h2>Changes for the “Real” Layout</h2>

<p>We’ve already discussed the basics of what to do during your layout in Part 1, but we’ll have to tweak the formula a bit with our animation support added. The one additional step will be to determine if we have any disappearing views. In our example, this is done by running a normal layout pass, and then determining if there are any views left in the Recycler’s scrap heap.NOTE: We can use the scrap heap in this way because our layout logic always calls <code>detachAndScrapAttachedViews()</code> before starting each layout pass. As discussed previously, this is the best practice to adhere to in your layouts.</p>

<p>Views still in scrap that aren’t considered removed are disappearing views. We need to lay these views out in their off-screen positions so the animation system can slide them out of view (instead of just fading them out).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLayoutChildren</span><span class="o">(</span><span class="n">RecyclerView</span><span class="o">.</span><span class="na">Recycler</span> <span class="n">recycler</span><span class="o">,</span> <span class="n">RecyclerView</span><span class="o">.</span><span class="na">State</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="err">…</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">state</span><span class="o">.</span><span class="na">isPreLayout</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">recycler</span><span class="o">.</span><span class="na">getScrapList</span><span class="o">().</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">RecyclerView</span><span class="o">.</span><span class="na">ViewHolder</span><span class="o">&gt;</span> <span class="n">scrapList</span> <span class="o">=</span> <span class="n">recycler</span><span class="o">.</span><span class="na">getScrapList</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">View</span><span class="o">&gt;</span> <span class="n">disappearingViews</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">View</span><span class="o">&gt;(</span><span class="n">scrapList</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">RecyclerView</span><span class="o">.</span><span class="na">ViewHolder</span> <span class="n">holder</span> <span class="o">:</span> <span class="n">scrapList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">View</span> <span class="n">child</span> <span class="o">=</span> <span class="n">holder</span><span class="o">.</span><span class="na">itemView</span><span class="o">;</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">LayoutParams</span> <span class="n">lp</span> <span class="o">=</span> <span class="o">(</span><span class="n">LayoutParams</span><span class="o">)</span> <span class="n">child</span><span class="o">.</span><span class="na">getLayoutParams</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">lp</span><span class="o">.</span><span class="na">isItemRemoved</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">disappearingViews</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">child</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">View</span> <span class="n">child</span> <span class="o">:</span> <span class="n">disappearingViews</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">layoutDisappearingView</span><span class="o">(</span><span class="n">child</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">layoutDisappearingView</span><span class="o">(</span><span class="n">View</span> <span class="n">disappearingChild</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * LayoutManager has a special method for attaching views that</span>
</span><span class='line'><span class="cm">     * will only be around long enough to animate.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">addDisappearingView</span><span class="o">(</span><span class="n">disappearingChild</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Adjust each disappearing view to its proper place</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">LayoutParams</span> <span class="n">lp</span> <span class="o">=</span> <span class="o">(</span><span class="n">LayoutParams</span><span class="o">)</span> <span class="n">disappearingChild</span><span class="o">.</span><span class="na">getLayoutParams</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">newRow</span> <span class="o">=</span> <span class="n">getGlobalRowOfPosition</span><span class="o">(</span><span class="n">lp</span><span class="o">.</span><span class="na">getViewPosition</span><span class="o">());</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">rowDelta</span> <span class="o">=</span> <span class="n">newRow</span> <span class="o">-</span> <span class="n">lp</span><span class="o">.</span><span class="na">row</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">newCol</span> <span class="o">=</span> <span class="n">getGlobalColumnOfPosition</span><span class="o">(</span><span class="n">lp</span><span class="o">.</span><span class="na">getViewPosition</span><span class="o">());</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">colDelta</span> <span class="o">=</span> <span class="n">newCol</span> <span class="o">-</span> <span class="n">lp</span><span class="o">.</span><span class="na">column</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">layoutTempChildView</span><span class="o">(</span><span class="n">disappearingChild</span><span class="o">,</span> <span class="n">rowDelta</span><span class="o">,</span> <span class="n">colDelta</span><span class="o">,</span> <span class="n">disappearingChild</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>CAUTION: Laying out views (and, thus, adding them to the container) removes them from the scrap list. Be careful to note the views you need from scrap before you start making changes, or you will end up with concurrent modification issues on the collection.</p>

<p>Similar to our code for the appearing views, <code>layoutDisappearingView()</code> places each remaining view at it’s “global” position as the final layout location. This gives the framework the information that it needs to slide these views out in the proper direction during the animation.</p>

<p>The following image should help to visualize the <code>FixedGridLayoutManager</code> example:</p>

<ul>
<li>The black box represents the RecyclerView visible bounds.</li>
<li>Red View: Item removed from the data set.</li>
<li>Green Views (Appearing views): Not initially present, but laid out off-screen during pre-layout.</li>
<li>Purple Views (Disappearing views): Initially placed in their original locations during pre-layout, then laid out off-screen during the “real” layout phase.</li>
</ul>


<center><img src="http://Solarex.github.io/images/building_recyclerview_layoutmanager_simple_animation.gif" width="667" height="400"></center>


<h2>Reacting to Off-Screen Changes</h2>

<p>You may have noticed that our ability to determine a removal change in the last section hinged on the visible views. What if the change occurs outside the visible bounds? Depending on your layout structure, a change like this may still require you to adjust the layout for a better animation experience.</p>

<p>Luckily, the adapter posts these changes to your <code>LayoutManager</code> as well. You can override <code>onItemsRemoved()</code>, <code>onItemsMoved()</code>, <code>onItemsAdded()</code>, or <code>onItemsChanged()</code> to react to these events even if they occur in a view range that isn’t reflected in the current layout. These methods will give you the position and range of the change.</p>

<p>When the removed range occurs outside the visible area, <code>onItemRemoved()</code> is called before pre-layout. This allows us to collect data about the change that we may need in order to best support any appearing view changes that might be caused by this event.</p>

<p>In our example, we collect these removals in the same way as before, but mark them with a different type.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onItemsRemoved</span><span class="o">(</span><span class="n">RecyclerView</span> <span class="n">recyclerView</span><span class="o">,</span> <span class="kt">int</span> <span class="n">positionStart</span><span class="o">,</span> <span class="kt">int</span> <span class="n">itemCount</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mFirstChangedPosition</span> <span class="o">=</span> <span class="n">positionStart</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mChangedPositionCount</span> <span class="o">=</span> <span class="n">itemCount</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLayoutChildren</span><span class="o">(</span><span class="n">RecyclerView</span><span class="o">.</span><span class="na">Recycler</span> <span class="n">recycler</span><span class="o">,</span> <span class="n">RecyclerView</span><span class="o">.</span><span class="na">State</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="err">…</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">SparseIntArray</span> <span class="n">removedCache</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * During pre-layout, we need to take note of any views that are</span>
</span><span class='line'><span class="cm">     * being removed in order to handle predictive animations</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="na">isPreLayout</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="err">…</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//Track view removals that happened out of bounds (i.e. off-screen)</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">removedCache</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">mChangedPositionCount</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">mFirstChangedPosition</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="o">(</span><span class="n">mFirstChangedPosition</span> <span class="o">+</span> <span class="n">mChangedPositionCount</span><span class="o">);</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">removedCache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">REMOVE_INVISIBLE</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">…</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Fill the grid for the initial layout of views</span>
</span><span class='line'>    <span class="n">fillGrid</span><span class="o">(</span><span class="n">DIRECTION_NONE</span><span class="o">,</span> <span class="n">childLeft</span><span class="o">,</span> <span class="n">childTop</span><span class="o">,</span> <span class="n">recycler</span><span class="o">,</span> <span class="n">state</span><span class="o">.</span><span class="na">isPreLayout</span><span class="o">(),</span> <span class="n">removedCache</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">…</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>TIP: This method is sill called when the removed items are visible. In that case, however, it is called after pre-layout. This is why our example still gathers data from the visible removed views when they are present.</p>

<p>With all this in place, we can run the sample application again. We can see the disappearing items on the left sliding off to rejoin the end of their previous rows. The new appearing items on the right slide properly into place alongside the existing grid. Now, the only view fading out in our new animation is the view that was actually removed!</p>

<center><img src="http://Solarex.github.io/images/building_recyclerview_layoutmanager_predictive_removal_animation.gif" width="379" height="677"></center>


<h2>More To Come…</h2>

<p>This was supposed to be the end of this series, I swear! However, there were some interesting issues that came up in building the animations that are specific to the <code>FixedGridLayoutManager</code> use case, and not necessarily all custom implementations. So in the next (and final…I promise this time) post, I’ll address what those challenges were.</p>

<p>The framework will attempt to animate views if your adapter uses stable IDs, which provides enough data to guess which views are removed/added/etc.</p>

<h2>reference</h2>

<ul>
<li><a href="http://wiresareobsolete.com/2015/02/recyclerview-layoutmanager-3/">Building a RecyclerView LayoutManager – Part 3</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a RecyclerView LayoutManager part II]]></title>
    <link href="http://Solarex.github.io/blog/2016/01/11/building-a-recyclerview-layoutmanager-part-ii/"/>
    <updated>2016-01-11T00:48:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2016/01/11/building-a-recyclerview-layoutmanager-part-ii</id>
    <content type="html"><![CDATA[<p>In the last post,  we walked through the core functionality necessary for building a RecyclerView LayoutManager. In this post, we are going to add support for a few additional features that the average adapter-based view is expected to have.A reminder that the entire sample application can be found <a href="https://github.com/devunwired/recyclerview-playground">here on GitHub</a>.</p>

<h2>Supporting Item Decorations</h2>

<p><code>RecyclerView</code> has a really neat feature in which an <code>RecyclerView.ItemDecoration</code> instance can be supplied to do custom drawing alongside the child view content, as well as provide insets (margins) that will apply to the child views without the need for modifying layout parameters. The latter places a constraint on how the children should be laid out that the <code>LayoutManager</code> implementation must support.The <a href="https://github.com/devunwired/recyclerview-playground">RecyclerPlayground</a> repository uses a few different decorators in the examples to illustrate how they are implemented.</p>

<!-- more -->


<p>LayoutManager gives us helper methods to account for decorations so we don’t have to think about them:</p>

<ul>
<li>To get the left edge of a child view, use <code>getDecoratedLeft()</code> instead of <code>child.getLeft()</code></li>
<li>To get the top edge of a child view, use <code>getDecoratedTop()</code> instead of <code>child.getTop()</code></li>
<li>To get the right edge of a child view, use <code>getDecoratedRight()</code> instead of <code>child.getRight()</code></li>
<li>To get the bottom edge of a child view, use <code>getDecoratedBottom()</code> instead of <code>child.getBottom()</code></li>
<li>Use <code>measureChild()</code> or <code>measureChildWithMargins()</code> instead of <code>child.measure()</code> to measure new views coming from the <code>Recycler</code>.</li>
<li>Use <code>layoutDecorated()</code> instead of <code>child.layout()</code> to lay out new views coming from the <code>Recycler</code>.</li>
<li>Use <code>getDecoratedMeasuredWidth()</code> or <code>getDecoratedMeasuredHeight()</code> instead of <code>child.getMeasuredWidth()</code> or <code>child.getMeasuredHeight()</code> to get the measurements of a child view.</li>
</ul>


<p>As long as you take into account using the proper methods for getting view properties and measurments, <code>RecyclerView</code> will handle dealing with decorations so you don’t have to.</p>

<h2>Data Set Changes</h2>

<p>When the attached <code>RecyclerView.Adapter</code> triggers an update via <code>notifyDataSetChanged()</code>, the <code>LayoutManager</code> will be responsible for updating the layout in the view. In this case, <code>onLayoutChildren()</code> will be called again. To support this we need to make some adjustments to our sample to make the distinction between a fresh layout and a layout change due to an adapter update. Below is the fully fleshed out method from the <code>FixedGridLayoutManager</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLayoutChildren</span><span class="o">(</span><span class="n">RecyclerView</span><span class="o">.</span><span class="na">Recycler</span> <span class="n">recycler</span><span class="o">,</span> <span class="n">RecyclerView</span><span class="o">.</span><span class="na">State</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//We have nothing to show for an empty data set but clear any existing views</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">getItemCount</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">detachAndScrapAttachedViews</span><span class="o">(</span><span class="n">recycler</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//...on empty layout, update child size measurements</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">getChildCount</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//Scrap measure one child</span>
</span><span class='line'>        <span class="n">View</span> <span class="n">scrap</span> <span class="o">=</span> <span class="n">recycler</span><span class="o">.</span><span class="na">getViewForPosition</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="n">addView</span><span class="o">(</span><span class="n">scrap</span><span class="o">);</span>
</span><span class='line'>        <span class="n">measureChildWithMargins</span><span class="o">(</span><span class="n">scrap</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * We make some assumptions in this code based on every child</span>
</span><span class='line'><span class="cm">         * view being the same size (i.e. a uniform grid). This allows</span>
</span><span class='line'><span class="cm">         * us to compute the following values up front because they</span>
</span><span class='line'><span class="cm">         * won&#39;t change.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">mDecoratedChildWidth</span> <span class="o">=</span> <span class="n">getDecoratedMeasuredWidth</span><span class="o">(</span><span class="n">scrap</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mDecoratedChildHeight</span> <span class="o">=</span> <span class="n">getDecoratedMeasuredHeight</span><span class="o">(</span><span class="n">scrap</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">detachAndScrapView</span><span class="o">(</span><span class="n">scrap</span><span class="o">,</span> <span class="n">recycler</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">updateWindowSizing</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">childLeft</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">childTop</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">getChildCount</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//First or empty layout</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * Reset the visible and scroll positions</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">mFirstVisiblePosition</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="n">childLeft</span> <span class="o">=</span> <span class="n">childTop</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">getVisibleChildCount</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">getItemCount</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//Data set is too small to scroll fully, just reset position</span>
</span><span class='line'>        <span class="n">mFirstVisiblePosition</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="n">childLeft</span> <span class="o">=</span> <span class="n">childTop</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span> <span class="c1">//Adapter data set changes</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * Keep the existing initial position, and save off</span>
</span><span class='line'><span class="cm">         * the current scrolled offset.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">View</span> <span class="n">topChild</span> <span class="o">=</span> <span class="n">getChildAt</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mForceClearOffsets</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">childLeft</span> <span class="o">=</span> <span class="n">childTop</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>            <span class="n">mForceClearOffsets</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">childLeft</span> <span class="o">=</span> <span class="n">getDecoratedLeft</span><span class="o">(</span><span class="n">topChild</span><span class="o">);</span>
</span><span class='line'>            <span class="n">childTop</span> <span class="o">=</span> <span class="n">getDecoratedTop</span><span class="o">(</span><span class="n">topChild</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * Adjust the visible position if out of bounds in the</span>
</span><span class='line'><span class="cm">         * new layout. This occurs when the new item count in an adapter</span>
</span><span class='line'><span class="cm">         * is much smaller than it was before, and you are scrolled to</span>
</span><span class='line'><span class="cm">         * a location where no items would exist.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">lastVisiblePosition</span> <span class="o">=</span> <span class="n">positionOfIndex</span><span class="o">(</span><span class="n">getVisibleChildCount</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">lastVisiblePosition</span> <span class="o">&gt;=</span> <span class="n">getItemCount</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">lastVisiblePosition</span> <span class="o">=</span> <span class="o">(</span><span class="n">getItemCount</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">lastColumn</span> <span class="o">=</span> <span class="n">mVisibleColumnCount</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">lastRow</span> <span class="o">=</span> <span class="n">mVisibleRowCount</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//Adjust to align the last position in the bottom-right</span>
</span><span class='line'>            <span class="n">mFirstVisiblePosition</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span>
</span><span class='line'>                    <span class="n">lastVisiblePosition</span> <span class="o">-</span> <span class="n">lastColumn</span> <span class="o">-</span> <span class="o">(</span><span class="n">lastRow</span> <span class="o">*</span> <span class="n">getTotalColumnCount</span><span class="o">()),</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">childLeft</span> <span class="o">=</span> <span class="n">getHorizontalSpace</span><span class="o">()</span> <span class="o">-</span> <span class="o">(</span><span class="n">mDecoratedChildWidth</span> <span class="o">*</span> <span class="n">mVisibleColumnCount</span><span class="o">);</span>
</span><span class='line'>            <span class="n">childTop</span> <span class="o">=</span> <span class="n">getVerticalSpace</span><span class="o">()</span> <span class="o">-</span> <span class="o">(</span><span class="n">mDecoratedChildHeight</span> <span class="o">*</span> <span class="n">mVisibleRowCount</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//Correct cases where shifting to the bottom-right overscrolls the top-left</span>
</span><span class='line'>            <span class="c1">// This happens on data sets too small to scroll in a direction.</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">getFirstVisibleRow</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">childTop</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">childTop</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">getFirstVisibleColumn</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">childLeft</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">childLeft</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Clear all attached views into the recycle bin</span>
</span><span class='line'>    <span class="n">detachAndScrapAttachedViews</span><span class="o">(</span><span class="n">recycler</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Fill the grid for the initial layout of views</span>
</span><span class='line'>    <span class="n">fillGrid</span><span class="o">(</span><span class="n">DIRECTION_NONE</span><span class="o">,</span> <span class="n">childLeft</span><span class="o">,</span> <span class="n">childTop</span><span class="o">,</span> <span class="n">recycler</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our implementation determines if this is a new layout or an update based on whether we have child views attached already. In the case of an update, the first visible position (i.e. the top-left view, which we track continuously) and the current scrolled x/y offset give us enough information to do a new <code>fillGrid()</code> while preserving that the same item position remain in the top-left.</p>

<p>There are a few special cases we handle as well.</p>

<ul>
<li>When the new data set is too small to scroll, the layout is reset with position 0 in the top-left.</li>
<li>If the new data set is smaller, and preserving the current position would cause the layout to be scrolled beyond the allowed boundary (on the right and/or bottom). Here we adjust the first position so the layout aligns with the bottom-right of the grid.</li>
</ul>


<h3>onAdapterChanged()</h3>

<p>This method provides you an additional opportunity to reset the layout in the event that the entire adapter is swapped out (i.e. setAdapter() is invoked again on the view). In this event, it’s safer to assume that the views returned will be completely different than from the previous adapter. Therefore, our example simply removes all current views (without recycling them):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAdapterChanged</span><span class="o">(</span><span class="n">RecyclerView</span><span class="o">.</span><span class="na">Adapter</span> <span class="n">oldAdapter</span><span class="o">,</span> <span class="n">RecyclerView</span><span class="o">.</span><span class="na">Adapter</span> <span class="n">newAdapter</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//Completely scrap the existing layout</span>
</span><span class='line'>    <span class="n">removeAllViews</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The view removal will trigger a new layout pass, and when <code>onLayoutChildren()</code> is called again, our code can perform a fresh layout since there are no longer any child views attached.</p>

<h2>Scroll to Position</h2>

<p>Another important feature you will likely want from your LayoutManager is the ability to tell the view to scroll to a specific position. This can be done with or without animation, and there is a callback for each.</p>

<h3>scrollToPosition()</h3>

<p>This method is invoked from the RecyclerView when the layout should immediately update with the given position as the first visible item. In a vertical list, the element would be placed at the top; in a horizontal list, it would generally be on the left. In our grid, the “selected” position will be placed at the top-left of the view.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">scrollToPosition</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">position</span> <span class="o">&gt;=</span> <span class="n">getItemCount</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Cannot scroll to &quot;</span><span class="o">+</span><span class="n">position</span><span class="o">+</span><span class="s">&quot;, item count is &quot;</span><span class="o">+</span><span class="n">getItemCount</span><span class="o">());</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Ignore current scroll offset, snap to top-left</span>
</span><span class='line'>    <span class="n">mForceClearOffsets</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="c1">//Set requested position as first visible</span>
</span><span class='line'>    <span class="n">mFirstVisiblePosition</span> <span class="o">=</span> <span class="n">position</span><span class="o">;</span>
</span><span class='line'>    <span class="c1">//Trigger a new view layout</span>
</span><span class='line'>    <span class="n">requestLayout</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With a proper implementation of <code>onLayoutChildren()</code>, this can be as simple as updating the target position and triggering a new fill.</p>

<h3>smoothScrollToPosition()</h3>

<p>In the case where the selection should be animated, we need to take a slightly different approach. The contract of this method is for the <code>LayoutManager</code> to construct an instance of a <code>RecyclerView.SmoothScroller</code>, and begin the animation by invoking <code>startSmoothScroll()</code> before the method returns.</p>

<p><code>RecyclerView.SmoothScroller</code> is an abstract class with an API that consists of four required methods:</p>

<ul>
<li><code>onStart()</code>: Triggered when the scroller animation begins.</li>
<li><code>onStop()</code>: Triggered when the scroller animation ends.</li>
<li><code>onSeekTargetStep()</code>: Invoked incrementally as the scroller searches for the target view. The implementation is responsible for reading the provided dx/dy and updating how far the view should actually scroll in both directions.

<ul>
<li>A <code>RecyclerView.SmoothScroller.Action</code> instance is passed to this method. Notify the view how it should animate the next increment by passing a new dx, dy, duration, and <code>Interpolator</code> to the action’s <code>update()</code> method.</li>
<li>NOTE: The framework will warn you if you are taking too long to animate (i.e. your increments are too small); try to tune your animation steps to match a standard animation duration from the framework.</li>
</ul>
</li>
<li><code>onTargetFound()</code>: Called only once, after a view for the target position has been attached. This is one final chance to animate the target view to its exact position.

<ul>
<li>Internally, this uses <code>findViewByPosition()</code> from the <code>LayoutManager</code> to determine when the view is attached. If your <code>LayoutManager</code> is efficient about mapping views to positions, override this method to improve performance. The default implementation iterates over all child views…all the time.</li>
</ul>
</li>
</ul>


<p>You can provide your own scroller implementation if you really want to fine-tune your scrolling animations. We have chosen to use the framework’s <code>LinearSmoothScroller</code> instead, which implements the callback work for us. We only need to implement a single method, <code>computeScrollVectorForPosition()</code>, to tell the scroller the initial direction and approximate distance it needs to travel to get from its current location to the target location.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">smoothScrollToPosition</span><span class="o">(</span><span class="n">RecyclerView</span> <span class="n">recyclerView</span><span class="o">,</span> <span class="n">RecyclerView</span><span class="o">.</span><span class="na">State</span> <span class="n">state</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">position</span> <span class="o">&gt;=</span> <span class="n">getItemCount</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Cannot scroll to &quot;</span><span class="o">+</span><span class="n">position</span><span class="o">+</span><span class="s">&quot;, item count is &quot;</span><span class="o">+</span><span class="n">getItemCount</span><span class="o">());</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * LinearSmoothScroller&#39;s default behavior is to scroll the contents until</span>
</span><span class='line'><span class="cm">     * the child is fully visible. It will snap to the top-left or bottom-right</span>
</span><span class='line'><span class="cm">     * of the parent depending on whether the direction of travel was positive</span>
</span><span class='line'><span class="cm">     * or negative.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">LinearSmoothScroller</span> <span class="n">scroller</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinearSmoothScroller</span><span class="o">(</span><span class="n">recyclerView</span><span class="o">.</span><span class="na">getContext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * LinearSmoothScroller, at a minimum, just need to know the vector</span>
</span><span class='line'><span class="cm">         * (x/y distance) to travel in order to get from the current positioning</span>
</span><span class='line'><span class="cm">         * to the target.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">PointF</span> <span class="nf">computeScrollVectorForPosition</span><span class="o">(</span><span class="kt">int</span> <span class="n">targetPosition</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">final</span> <span class="kt">int</span> <span class="n">rowOffset</span> <span class="o">=</span> <span class="n">getGlobalRowOfPosition</span><span class="o">(</span><span class="n">targetPosition</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">-</span> <span class="n">getGlobalRowOfPosition</span><span class="o">(</span><span class="n">mFirstVisiblePosition</span><span class="o">);</span>
</span><span class='line'>            <span class="kd">final</span> <span class="kt">int</span> <span class="n">columnOffset</span> <span class="o">=</span> <span class="n">getGlobalColumnOfPosition</span><span class="o">(</span><span class="n">targetPosition</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">-</span> <span class="n">getGlobalColumnOfPosition</span><span class="o">(</span><span class="n">mFirstVisiblePosition</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">PointF</span><span class="o">(</span><span class="n">columnOffset</span> <span class="o">*</span> <span class="n">mDecoratedChildWidth</span><span class="o">,</span> <span class="n">rowOffset</span> <span class="o">*</span> <span class="n">mDecoratedChildHeight</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>    <span class="n">scroller</span><span class="o">.</span><span class="na">setTargetPosition</span><span class="o">(</span><span class="n">position</span><span class="o">);</span>
</span><span class='line'>    <span class="n">startSmoothScroll</span><span class="o">(</span><span class="n">scroller</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This implementation, similar to the existing behavior of ListView, will stop scrolling as soon as the view becomes fully visible; whether that be on the left, top, right, or bottom of the <code>RecyclerView</code>.</p>

<h2>Now What?</h2>

<p>You mean that wasn’t enough? Things are starting to look pretty good! In fact, for many the implementation could be considered complete. But we’re going to go just one step further. In the next, and final post of this series, we will look at supporting animations for data set changes in your LayoutManager.</p>

<h2>reference</h2>

<ul>
<li><a href="http://wiresareobsolete.com/2014/09/recyclerview-layoutmanager-2/">Building a RecyclerView LayoutManager – Part 2</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a RecyclerView LayoutManager part I]]></title>
    <link href="http://Solarex.github.io/blog/2016/01/10/building-a-recyclerview-layoutmanager-part-i/"/>
    <updated>2016-01-10T00:48:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2016/01/10/building-a-recyclerview-layoutmanager-part-i</id>
    <content type="html"><![CDATA[<p>By now, if you’re an Android developer paying any attention, you’ve at least heard of RecyclerView; a new component that will be added to the support library to facilitate custom implementations of high-performance view collections by facilitating view recycling. Others have already done a remarkable job describing the basics of how to use RecyclerView with the built-in pieces already provided, including item animations. So rather than dive into all that again, here are some resources to get you up to speed:</p>

<ul>
<li><a href="http://www.grokkingandroid.com/first-glance-androids-recyclerview/">A First Glance at Android’s RecyclerView</a></li>
<li><a href="http://lucasr.org/2014/07/31/the-new-twowayview/">The new TwoWayView</a></li>
<li><a href="https://github.com/gabrielemariotti/RecyclerViewItemAnimators">RecyclerViewItemAnimators</a></li>
</ul>


<p>In this series of posts, we will be focused on the low-level details involved in building your own LayoutManager implementation, to do something a bit more complex than a simple vertical or horizontal scrolling list.</p>

<pre><code>Before going any further, a warning is in order. The LayoutManager API allows powerful and complex layout recycling because it doesn’t do much for you; these implementations involve a fair amount of code you have to write yourself. As with any project involving custom views, don’t get caught in a trap of over-optimizing or over-generalizing your code. Build the features you need for the application use case you’re concerned with.
</code></pre>

<!-- more -->


<h2>RecyclerView Playground</h2>

<p>All the code snippets in this post series are taken from the <a href="https://github.com/devunwired/recyclerview-playground">RecyclerView Playground sample</a> that I have posted on GitHub. This sample application includes examples of various aspects of working with RecyclerView, from creating simple lists, to custom LayoutManagers.</p>

<p>Code for this post is drawn from the <code>FixedGridLayoutManager</code> example; a two-dimensional grid layout with full scrolling in both the horizontal and vertical directions.</p>

<pre><code>The support library also has a sample that includes a custom LayoutManager; it is essentially a custom implementation of a vertical linear list: [SDK_PATH]/extras/android/compatibility/samples/Support7Demos/src/com/example/android/supportv7/widget/RecyclerViewActivity.java

Also, while much of Android “L” and the new support libraries may not yet be in AOSP, the RecyclerView support artifact ships with a sources JAR you can view inside your environment: [SDK_PATH]/extras/android/m2repository/com/android/support/recyclerview-v7/21.0.0-rc1/recyclerview-v7-21.0.0-rc1-sources.jar
</code></pre>

<h2>The Recycler</h2>

<p>First, a bit of insight into how the API is structured. Your LayoutManager is given access to a <code>Recycler</code> instance at key points in the process when you might need to recycle old views, or obtain new views from a potentially recycled previous child.</p>

<p>The <code>Recycler</code> also removes the need to directly access the view’s current adapter implementation. When your <code>LayoutManager</code> requires a new child view, simply call <code>getViewForPosition()</code> and the <code>Recycler</code> will return the view with the appropriate data already bound. The <code>Recycler</code> takes care of determining whether a new view must be created, or if an existing scrapped view gets reused. Your responsibility, inside your <code>LayoutManager</code>, is to ensure that views which are no longer visible get passed to the <code>Recycler</code> in a timely manner; this will keep the <code>Recycler</code> from creating more view objects than is necessary.</p>

<h2>Detach vs. Remove</h2>

<p>There are two ways to handle existing child views during a layout update: detach and remove. Detach is meant to be a lightweight operation for reordering views. Views that are detached are expected to be re-attached before your code returns. This can be used to modify the indices of attached child views without re-binding or re-creating those views through the Recycler.</p>

<p>Remove is meant for views that are no longer needed. Any view that is permanently removed should be placed in the Recycler for later re-use, but the API does not enforce this. It is up to you whether the views you remove also get recycled.</p>

<h2>Scrap vs. Recycle</h2>

<p><code>Recycler</code> has a two-level view caching system: the <strong>scrap heap</strong> and the <strong>recycle pool</strong>. The scrap heap represents a lighter weight collection where views can be returned to the <code>LayoutManager</code> directly without passing through the adapter again. Views are typically placed here when they are temporarily being detached, but will be re-used within the same layout pass. The recycle pool consists of views that are assumed to have incorrect data (data from a different position), so they will always be passed through the adapter to have data re-bound before they are returned to the <code>LayoutManager</code>.</p>

<p>When attempting to supply the <code>LayoutManager</code> with a new view, a <code>Recycler</code> will first check the scrap heap for a matching position/id; if one exists, it will be returned without re-binding to the adapter data. If no matching view is found, the <code>Recycler</code> will instead pull a suitable view from the recycle pool and bind the necessary data to it from the adapter (i.e. <code>RecyclerView.Adapter.bindViewHolder()</code> is invoked) before returning it. In cases where no valid views exist in the recycle pool, a new view will be created instead (i.e. <code>RecyclerView.Adapter.createViewHolder()</code> is invoked) before being bound, and returned.</p>

<h2>Rule of Thumb</h2>

<p>The <code>LayoutManager</code> API lets you do pretty much all of these tasks independently if you wish, so the possible combinations can be a bit numerous. In general, use <code>detachAndScrapView()</code> for views you want to temporarily reorganize and expect to re-attach inside the same layout pass. Use <code>removeAndRecycleView()</code> for views you no longer need based on the current layout.</p>

<h2>Building The Core</h2>

<p>A <code>LayoutManager</code> implementation is responsible for attaching, measuring, and laying out all the child views it needs in real-time. As the user scrolls the view, it will be up to the layout manager to determine when new child views need to be added, and old views can be detached and scrapped.</p>

<p>You will need to override and implement the following method to create a minimum viable <code>LayoutManager</code>.</p>

<h3>generateDefaultLayoutParams()</h3>

<p>This is actually the only required override to get your <code>LayoutManager</code> to compile. The implementation is pretty straightforward, just return a new instance of the <code>RecyclerView.LayoutParams</code> that you want applied by default to all the child views returned from the Recycler. These parameters will be applied to each child before they return from <code>getViewForPosition()</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">RecyclerView</span><span class="o">.</span><span class="na">LayoutParams</span> <span class="nf">generateDefaultLayoutParams</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">RecyclerView</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">(</span>
</span><span class='line'>        <span class="n">RecyclerView</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">,</span>
</span><span class='line'>        <span class="n">RecyclerView</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>onLayoutChildren()</h3>

<p>This is the main entry point into your LayoutManager. This method will be called when the view needs to do an initial layout, and again whenever the adapter data set changes (or the entire adapter is swapped out). This method is NOT called for every possible change you need to make to the layout. It is a good opportunity to reset the layout of child views for either an initial pass or a data set change.</p>

<p>In the next segment, we will look at how this can be used to do a fresh layout based on the currently visible elements when the adapter updates. For now, we’ll address it simply as the first pass for laying out child views. Below is a simplified version of what exists in the <code>FixedGridLayoutManager</code> example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLayoutChildren</span><span class="o">(</span><span class="n">RecyclerView</span><span class="o">.</span><span class="na">Recycler</span> <span class="n">recycler</span><span class="o">,</span> <span class="n">RecyclerView</span><span class="o">.</span><span class="na">State</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//Scrap measure one child</span>
</span><span class='line'>    <span class="n">View</span> <span class="n">scrap</span> <span class="o">=</span> <span class="n">recycler</span><span class="o">.</span><span class="na">getViewForPosition</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="n">addView</span><span class="o">(</span><span class="n">scrap</span><span class="o">);</span>
</span><span class='line'>    <span class="n">measureChildWithMargins</span><span class="o">(</span><span class="n">scrap</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * We make some assumptions in this code based on every child</span>
</span><span class='line'><span class="cm">     * view being the same size (i.e. a uniform grid). This allows</span>
</span><span class='line'><span class="cm">     * us to compute the following values up front because they</span>
</span><span class='line'><span class="cm">     * won&#39;t change.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">mDecoratedChildWidth</span> <span class="o">=</span> <span class="n">getDecoratedMeasuredWidth</span><span class="o">(</span><span class="n">scrap</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mDecoratedChildHeight</span> <span class="o">=</span> <span class="n">getDecoratedMeasuredHeight</span><span class="o">(</span><span class="n">scrap</span><span class="o">);</span>
</span><span class='line'>    <span class="n">detachAndScrapView</span><span class="o">(</span><span class="n">scrap</span><span class="o">,</span> <span class="n">recycler</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">updateWindowSizing</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">childLeft</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">childTop</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Reset the visible and scroll positions</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">mFirstVisiblePosition</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="n">childLeft</span> <span class="o">=</span> <span class="n">childTop</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Clear all attached views into the recycle bin</span>
</span><span class='line'>    <span class="n">detachAndScrapAttachedViews</span><span class="o">(</span><span class="n">recycler</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">//Fill the grid for the initial layout of views</span>
</span><span class='line'>    <span class="n">fillGrid</span><span class="o">(</span><span class="n">DIRECTION_NONE</span><span class="o">,</span> <span class="n">childLeft</span><span class="o">,</span> <span class="n">childTop</span><span class="o">,</span> <span class="n">recycler</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We do some bookkeeping and setup (this manager assumes all child views from the adapter will be the same size, for simplicity), and make sure all views that might have existed are in the scrap heap. I have abstracted the bulk of the work to a <code>fillGrid()</code> helper method for re-use. We will see shortly this method gets called a lot to update the visible views as scrolling occurs as well.</p>

<pre><code>Just as with a custom ViewGroup implementation, you are responsible for triggering measure and layout on each child view you get from the Recycler. None of this work is done directly by the APIs.
</code></pre>

<p>In general, the primary steps you would want to accomplish in a method like this are:</p>

<ul>
<li>Check the current offset positions of all the attached views after the latest scroll event.</li>
<li>Determine if there are empty spaces created by scrolling where new views need to be added. Get them from the Recycler.</li>
<li>Determine if there are now existing views that are no longer visible. Remove them and place them in the Recycler.</li>
<li>Determine if the remaining views should be reorganized. It may be that the above changes require you modify the child indices of the views to better align with their adapter positions.</li>
</ul>


<p>Notice the primary steps we’ve taken to fill the <code>RecyclerView</code> inside of <code>FixedGridLayoutManager.fillGrid()</code>. This manager orders positions right-to-left, wrapping when the max column count is reached:</p>

<ul>
<li>Take inventory of the views we have currently. Detach them all so they can be re-attached again later.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">SparseArray</span><span class="o">&lt;</span><span class="n">View</span><span class="o">&gt;</span> <span class="n">viewCache</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SparseArray</span><span class="o">&lt;</span><span class="n">View</span><span class="o">&gt;(</span><span class="n">getChildCount</span><span class="o">());</span>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">getChildCount</span><span class="o">()</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>    <span class="c1">//Cache all views by their existing position, before updating counts</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">getChildCount</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">position</span> <span class="o">=</span> <span class="n">positionOfIndex</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">View</span> <span class="n">child</span> <span class="o">=</span> <span class="n">getChildAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>        <span class="n">viewCache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">position</span><span class="o">,</span> <span class="n">child</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Temporarily detach all views.</span>
</span><span class='line'>    <span class="c1">// Views we still need will be added back at the proper index.</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">viewCache</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">detachView</span><span class="o">(</span><span class="n">viewCache</span><span class="o">.</span><span class="na">valueAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Do measure/layout for each child view that is visible at the current moment. Views we already had are simply re-attached; new views are obtained from the <code>Recycler</code>.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">getVisibleChildCount</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Layout this position</span>
</span><span class='line'>    <span class="n">View</span> <span class="n">view</span> <span class="o">=</span> <span class="n">viewCache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">nextPosition</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">view</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * The Recycler will give us either a newly constructed view,</span>
</span><span class='line'><span class="cm">         * or a recycled view it has on-hand. In either case, the</span>
</span><span class='line'><span class="cm">         * view will already be fully bound to the data by the</span>
</span><span class='line'><span class="cm">         * adapter for us.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">view</span> <span class="o">=</span> <span class="n">recycler</span><span class="o">.</span><span class="na">getViewForPosition</span><span class="o">(</span><span class="n">nextPosition</span><span class="o">);</span>
</span><span class='line'>        <span class="n">addView</span><span class="o">(</span><span class="n">view</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * It is prudent to measure/layout each new view we</span>
</span><span class='line'><span class="cm">         * receive from the Recycler. We don&#39;t have to do</span>
</span><span class='line'><span class="cm">         * this for views we are just re-arranging.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">measureChildWithMargins</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="n">layoutDecorated</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="n">leftOffset</span><span class="o">,</span> <span class="n">topOffset</span><span class="o">,</span>
</span><span class='line'>                <span class="n">leftOffset</span> <span class="o">+</span> <span class="n">mDecoratedChildWidth</span><span class="o">,</span>
</span><span class='line'>                <span class="n">topOffset</span> <span class="o">+</span> <span class="n">mDecoratedChildHeight</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//Re-attach the cached view at its new index</span>
</span><span class='line'>        <span class="n">attachView</span><span class="o">(</span><span class="n">view</span><span class="o">);</span>
</span><span class='line'>        <span class="n">viewCache</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">nextPosition</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Finally, any views we detached in Step 1 that did not get re-attached are no longer visible. Relegate them all to the Recycler for use later on.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">viewCache</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">recycler</span><span class="o">.</span><span class="na">recycleView</span><span class="o">(</span><span class="n">viewCache</span><span class="o">.</span><span class="na">valueAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As a side note, the reason we detach all the views and re-attach just those we still need is to preserve the order of child indices (i.e. the <code>getChildAt()</code> index) for each view. We expect that the visible views flow from top-left as 0 to bottom-right as <code>getChildCount()-1</code>. As we scroll in both directions and new children are attached, this ordering would become unreliable. We need this order to be preserved to best determine the location of each child at any point. In a simpler <code>LayoutManager</code> (like <code>LinearLayoutManager</code>) where child views can be easily inserted at each end of the list, this level of bookkeeping isn’t necessary.</p>

<h2>Adding User Interactivity</h2>

<p>At this stage we have a very nice initial layout, but no way to move around. The whole point of a RecyclerView is to dynamically provide views as the user scrolls through a data set! A few more overrides will get us there.</p>

<h3>canScrollHorizontally() &amp; canScrollVertically()</h3>

<p>These methods are simple. Just return true if your view supports any scrolling at all in the given direction, and false if you want to ignore it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">canScrollVertically</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//We do allow scrolling</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>scrollHorizontallyBy() &amp; scrollVerticallyBy()</h3>

<p>Here you will implement the logic by which the content should shift. Scrolling and flinging touch logic is handled already by RecyclerView, so no messing with MotionEvents or GestureDetectors. You have three tasks inside of these methods:</p>

<ul>
<li>Shift all child views by the appropriate distance (yes, you have to do this part yourself).</li>
<li>Determine if another fill is in order to add/remove views once we’ve shifted.</li>
<li>Return back the actual distance traveled. The framework uses this to know when you’ve hit an edge boundary.</li>
</ul>


<p>In <code>FixedGridLayoutManager</code>, both methods are very similar. Here is the condensed implementation of scrolling vertically:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">scrollVerticallyBy</span><span class="o">(</span><span class="kt">int</span> <span class="n">dy</span><span class="o">,</span> <span class="n">RecyclerView</span><span class="o">.</span><span class="na">Recycler</span> <span class="n">recycler</span><span class="o">,</span>
</span><span class='line'>        <span class="n">RecyclerView</span><span class="o">.</span><span class="na">State</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">getChildCount</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Take top measurements from the top-left child</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">View</span> <span class="n">topView</span> <span class="o">=</span> <span class="n">getChildAt</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">//Take bottom measurements from the bottom-right child.</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">View</span> <span class="n">bottomView</span> <span class="o">=</span> <span class="n">getChildAt</span><span class="o">(</span><span class="n">getChildCount</span><span class="o">()-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//Optimize the case where the entire data set is too small to scroll</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">viewSpan</span> <span class="o">=</span> <span class="n">getDecoratedBottom</span><span class="o">(</span><span class="n">bottomView</span><span class="o">)</span> <span class="o">-</span> <span class="n">getDecoratedTop</span><span class="o">(</span><span class="n">topView</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">viewSpan</span> <span class="o">&lt;=</span> <span class="n">getVerticalSpace</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//We cannot scroll in either direction</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">delta</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">maxRowCount</span> <span class="o">=</span> <span class="n">getTotalRowCount</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">topBoundReached</span> <span class="o">=</span> <span class="n">getFirstVisibleRow</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">bottomBoundReached</span> <span class="o">=</span> <span class="n">getLastVisibleRow</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="n">maxRowCount</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">dy</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// Contents are scrolling up</span>
</span><span class='line'>        <span class="c1">//Check against bottom bound</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">bottomBoundReached</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">//If we&#39;ve reached the last row, enforce limits</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">bottomOffset</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">rowOfIndex</span><span class="o">(</span><span class="n">getChildCount</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">&gt;=</span> <span class="o">(</span><span class="n">maxRowCount</span> <span class="o">-</span> <span class="mi">1</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">//We are truly at the bottom, determine how far</span>
</span><span class='line'>                <span class="n">bottomOffset</span> <span class="o">=</span> <span class="n">getVerticalSpace</span><span class="o">()</span> <span class="o">-</span> <span class="n">getDecoratedBottom</span><span class="o">(</span><span class="n">bottomView</span><span class="o">)</span>
</span><span class='line'>                        <span class="o">+</span> <span class="n">getPaddingBottom</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="cm">/*</span>
</span><span class='line'><span class="cm">                 * Extra space added to account for allowing bottom space in the grid.</span>
</span><span class='line'><span class="cm">                 * This occurs when the overlap in the last row is not large enough to</span>
</span><span class='line'><span class="cm">                 * ensure that at least one element in that row isn&#39;t fully recycled.</span>
</span><span class='line'><span class="cm">                 */</span>
</span><span class='line'>                <span class="n">bottomOffset</span> <span class="o">=</span> <span class="n">getVerticalSpace</span><span class="o">()</span> <span class="o">-</span> <span class="o">(</span><span class="n">getDecoratedBottom</span><span class="o">(</span><span class="n">bottomView</span><span class="o">)</span>
</span><span class='line'>                        <span class="o">+</span> <span class="n">mDecoratedChildHeight</span><span class="o">)</span> <span class="o">+</span> <span class="n">getPaddingBottom</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">delta</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(-</span><span class="n">dy</span><span class="o">,</span> <span class="n">bottomOffset</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">//No limits while the last row isn&#39;t visible</span>
</span><span class='line'>            <span class="n">delta</span> <span class="o">=</span> <span class="o">-</span><span class="n">dy</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span> <span class="c1">// Contents are scrolling down</span>
</span><span class='line'>        <span class="c1">//Check against top bound</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">topBoundReached</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">topOffset</span> <span class="o">=</span> <span class="o">-</span><span class="n">getDecoratedTop</span><span class="o">(</span><span class="n">topView</span><span class="o">)</span> <span class="o">+</span> <span class="n">getPaddingTop</span><span class="o">();</span>
</span><span class='line'>            <span class="n">delta</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(-</span><span class="n">dy</span><span class="o">,</span> <span class="n">topOffset</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">delta</span> <span class="o">=</span> <span class="o">-</span><span class="n">dy</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">offsetChildrenVertical</span><span class="o">(</span><span class="n">delta</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">dy</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">getDecoratedBottom</span><span class="o">(</span><span class="n">topView</span><span class="o">)</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">bottomBoundReached</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">fillGrid</span><span class="o">(</span><span class="n">DIRECTION_DOWN</span><span class="o">,</span> <span class="n">recycler</span><span class="o">);</span>
</span><span class='line'>         <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(!</span><span class="n">bottomBoundReached</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">fillGrid</span><span class="o">(</span><span class="n">DIRECTION_NONE</span><span class="o">,</span> <span class="n">recycler</span><span class="o">);</span>
</span><span class='line'>         <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">getDecoratedTop</span><span class="o">(</span><span class="n">topView</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">topBoundReached</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">fillGrid</span><span class="o">(</span><span class="n">DIRECTION_UP</span><span class="o">,</span> <span class="n">recycler</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(!</span><span class="n">topBoundReached</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">fillGrid</span><span class="o">(</span><span class="n">DIRECTION_NONE</span><span class="o">,</span> <span class="n">recycler</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Return value determines if a boundary has been reached</span>
</span><span class='line'><span class="cm">     * (for edge effects and flings). If returned value does not</span>
</span><span class='line'><span class="cm">     * match original delta (passed in), RecyclerView will draw</span>
</span><span class='line'><span class="cm">     * an edge effect.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="n">delta</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice we are given the incremental scroll distance (dx/dy) to validate. The first portion of this method deals with determining whether scrolling the given distance (the sign gives the direction) would overscroll the edge of our content. If it would, we need to reduce how far the views are actually moved.</p>

<p>We must manually move the views ourselves inside of this method. The <code>offsetChildrenVertical()</code> and <code>offsetChildrenHorizontal()</code> methods assist us in applying the uniform translation. If you don’t do this, your views won’t scroll. After moving the views, we trigger another fill operation to swap views based on the direction we scrolled.</p>

<p>Finally, we return the actual shift value applied to the children. <code>RecyclerView</code> uses this value to determine when it should draw the edge effects you see on any scrolling content when the end is reached. Essentially, if the return value doesn’t exactly match the dx/dy passed in, expect some amount of edge glow to be drawn. Also note that if you return a value with the incorrect sign, the framework’s math will take that also as a big change and you’ll get edge glows at the wrong time.</p>

<p>In addition to drawing edge effects, this return value is also used to determine when to cancel flings. Returning the incorrect value here will disable your ability to fling the content as the framework will think you’ve prematurely hit an edge and abort the fling.</p>

<h2>Just Getting Warmed Up</h2>

<p>At this point, we should have a base functional implementation. It’s missing some of the finer details, but scrolling and proper view recycling are in place. There’s a lot more to go in our discussion of building a custom LayoutManager. In the next segment, we will look at dealing with decorations, data set changes, and implementing position scrolling.</p>

<h2>reference</h2>

<ul>
<li><a href="http://wiresareobsolete.com/2014/09/building-a-recyclerview-layoutmanager-part-1/">Building a RecyclerView LayoutManager – Part 1</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A First Glance at RecyclerView]]></title>
    <link href="http://Solarex.github.io/blog/2015/12/10/a-first-glance-at-recyclerview/"/>
    <updated>2015-12-10T00:46:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2015/12/10/a-first-glance-at-recyclerview</id>
    <content type="html"><![CDATA[<p>At this year’s Google I/O, Google released a preview to the upcoming Android version. The so called L Developer Preview. This is a very big improvement over previous releases and I really love that Google is doing this. I think we all benefit by this decision. As developers and as consumers alike!</p>

<p>Part of this preview are two new views: RecyclerView and CardView. This post gives you an introduction to the RecyclerView, it’s many internal classes and interfaces, how they interact and how you can use them.</p>

<p>Let me start with the good news : RecyclerView is part of the support library. So you can use it right now. Ok: You can use it as soon as the final support lib accompanying the L release gets released. So better to familiarize yourself with it right away.</p>

<h2>Sample project</h2>

<p>The screenshots and the video at the end of the post show the sample project for this post in action. You can find the <a href="https://github.com/writtmeyer/recyclerviewdemo">source of this sample at github</a>. Keep in mind that the RecyclerView API is not yet finalized. Google might still change things that could break the sample when they release the final version of Android L.</p>

<h2>What’s with this odd name? Why RecyclerView?</h2>

<p>This is how Google describes RecyclerView in the API documentation of the L preview release:</p>

<pre><code>A flexible view for providing a limited window into a large data set.
</code></pre>

<p>So RecyclerView is the appropriate view to use when you have multiple items of the same type and it’s very likely that your user’s device cannot present all of those items at once. Possible examples are contacts, customers, audio files and so on. The user has to scroll up and down to see more items and that’s when the recycling and reuse comes into play. As soon as a user scrolls a currently visible item out of view, this item’s view can be recycled and reused whenever a new item comes into view.</p>

<p>The following screenshots of the sample app illustrate this. On the left is the sample app after the initial start. When you scroll the view up, some views become eligible for recycling. The red area on the right screenshot, for example, highlights two invisible views. The recycler can now put these views into a list of candidates to be reused should a new view be necessary.</p>

<center><img src="http://Solarex.github.io/images/a_first_glance_of_recyclerview_recycling_of_views.png" width="624" height="474"></center>


<p>Recycling of views is a very useful approach. It saves CPU resources in that you do not have to inflate new views all the time and it saves memory in that it doesn’t keep plenty of invisible views around.</p>

<p>Now, you might say: That’s nothing new. And you’re right! We had that with ListView for a very long time. The concept of recycling views itself it not new. But while you previously had a ListView where the appearance, recycling and everything was tightly coupled, Google now follows a much better, a much more flexible approach with the new RecyclerView. I really like the approach Google has taken here!</p>

<h2>RecyclerView doesn’t care about visuals</h2>

<p>Here’s the thing: While with Listview we had tight coupling, Google now uses an approach where the RecyclerView itself doesn’t care about visuals at all. It doesn’t care about placing the elements at the right place, it doesn’t care about separating any items and not about the look of each individual item either. To exaggerate a bit: All RecyclerView does, is recycle stuff. Hence the name.</p>

<p>Anything that has to do with layout, drawing and so on, that is anything that has to do with how your data set is presented, is delegated to pluggable classes. That makes the new RecyclerView API extremely flexible. You want another layout? Plug in another LayoutManager. You want different animations? Plug in an ItemAnimator. And so on.</p>

<p>Here’s the list of the most important classes that RecyclerView makes use of to present the data. All these classes are inner classes of the RecyclerView:</p>

<center><img src="http://Solarex.github.io/images/recyclerview_api.png" width="823" height="427" /></center>


<p>In the next paragraphs I will briefly describe what each class or interface is about and how RecyclerView uses it. In future posts I will revisit some of these classes, write about them in detail and show you how to customize them for your project’s needs.</p>

<h2>ViewHolder</h2>

<p>ViewHolders are basically caches of your View objects. The Android team has been recommending using the ViewHolder pattern for a very long time, but they never actually enforced the use of it. Now with the new Adapter you finally have to use this pattern.</p>

<p>It’s a bit weird that Google waited so long to enforce the usage of the ViewHolder pattern, but better late than never. If you do not know about the ViewHolder pattern, have a look at this <a href="http://developer.android.com/training/improving-layouts/smooth-scrolling.html">Android training session</a>. It uses the old Adapter, but the pattern itself hasn’t changed.</p>

<p>Also searching for ViewHolder should yield plenty of hits to further blog posts. For example this post by <a href="http://antoine-merle.com/listview-optimisations-part-1-the-viewholder/">Antoine Merle about ListView optimizations</a>.</p>

<p>One thing that is specific to any RecyclerView.ViewHolder subclass is that you can always access the root view of your ViewHolder by accessing the public member itemView. So there’s no need to store that within your ViewHolder subclass.</p>

<p>And should you decide to override toString() have a look at the base class. Its toString() implementation prints some useful information you should consider to use for your log messages as well.</p>

<p>Here’s the code for the ViewHolder of the sample project. The ViewHolder is an inner class of the sample project’s Adapter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ListItemViewHolder</span> <span class="kd">extends</span> <span class="n">RecyclerView</span><span class="o">.</span><span class="na">ViewHolder</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">TextView</span> <span class="n">label</span><span class="o">;</span>
</span><span class='line'>   <span class="n">TextView</span> <span class="n">dateTime</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="nf">ListItemViewHolder</span><span class="o">(</span><span class="n">View</span> <span class="n">itemView</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">(</span><span class="n">itemView</span><span class="o">);</span>
</span><span class='line'>      <span class="n">label</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">itemView</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">txt_label_item</span><span class="o">);</span>
</span><span class='line'>      <span class="n">dateTime</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">itemView</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">txt_date_time</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>RecyclerView.Adapter</h2>

<p>Adapters fulfill two roles: They provide access to the underlying data set and they are responsible for creating the correct layout for individual items. Adapters always were part of Android and were used in many places. ListView, AutoCompleteTextView, Spinner and more all made use of adapters. All those classes inherit from AdapterView. But not so RecyclerView.</p>

<p>For the new RecyclerView Google has decided to replace the old Adapter interface with a new <strong>RecyclerView.Adapter</strong> base class. So say good bye to things like SimpleCursorAdapter, ArrayAdapter and the like. At least in their current incarnation.</p>

<p>Currently there is no default implementation of RecyclerView.Adapter available. Google might add some later on, but I wouldn’t bet on this. For Animations to work properly, cursors and arrays aren’t the best fit, so porting the current Adapter implementations might not make too much sense.</p>

<p>Since RecyclerView.Adapter is abstract you will have to implement these three methods:</p>

<ul>
<li><code>public VH onCreateViewHolder(ViewGroup parent, int viewType)</code></li>
<li><code>public void onBindViewHolder(VH holder, int position)</code></li>
<li><code>public int getItemCount()</code></li>
</ul>


<p>The VH in the method signatures above is the generic type parameter. You specify the concrete type to use when you subclass the RecyclerView.Adapter. You can see this in line 3 of the next code sample.</p>

<p>The most basic adapter for the sample layout looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RecyclerViewDemoAdapter</span> <span class="kd">extends</span>
</span><span class='line'>        <span class="n">RecyclerView</span><span class="o">.</span><span class="na">Adapter</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">RecyclerViewDemoAdapter</span><span class="o">.</span><span class="na">ListItemViewHolder</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">DemoModel</span><span class="o">&gt;</span> <span class="n">items</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">RecyclerViewDemoAdapter</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">DemoModel</span><span class="o">&gt;</span> <span class="n">modelData</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">modelData</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span>
</span><span class='line'>                  <span class="s">&quot;modelData must not be null&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">items</span> <span class="o">=</span> <span class="n">modelData</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">ListItemViewHolder</span> <span class="nf">onCreateViewHolder</span><span class="o">(</span>
</span><span class='line'>            <span class="n">ViewGroup</span> <span class="n">viewGroup</span><span class="o">,</span> <span class="kt">int</span> <span class="n">viewType</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">View</span> <span class="n">itemView</span> <span class="o">=</span> <span class="n">LayoutInflater</span><span class="o">.</span>
</span><span class='line'>                <span class="n">from</span><span class="o">(</span><span class="n">viewGroup</span><span class="o">.</span><span class="na">getContext</span><span class="o">()).</span>
</span><span class='line'>                <span class="n">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">item_demo_01</span><span class="o">,</span>
</span><span class='line'>                        <span class="n">viewGroup</span><span class="o">,</span>
</span><span class='line'>                        <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">ListItemViewHolder</span><span class="o">(</span><span class="n">itemView</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onBindViewHolder</span><span class="o">(</span>
</span><span class='line'>            <span class="n">ListItemViewHolder</span> <span class="n">viewHolder</span><span class="o">,</span> <span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">DemoModel</span> <span class="n">model</span> <span class="o">=</span> <span class="n">items</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">position</span><span class="o">);</span>
</span><span class='line'>        <span class="n">viewHolder</span><span class="o">.</span><span class="na">label</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">model</span><span class="o">.</span><span class="na">label</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">dateStr</span> <span class="o">=</span> <span class="n">DateUtils</span><span class="o">.</span><span class="na">formatDateTime</span><span class="o">(</span>
</span><span class='line'>                <span class="n">viewHolder</span><span class="o">.</span><span class="na">label</span><span class="o">.</span><span class="na">getContext</span><span class="o">(),</span>
</span><span class='line'>                <span class="n">model</span><span class="o">.</span><span class="na">dateTime</span><span class="o">.</span><span class="na">getTime</span><span class="o">(),</span>
</span><span class='line'>                <span class="n">DateUtils</span><span class="o">.</span><span class="na">FORMAT_ABBREV_ALL</span><span class="o">);</span>
</span><span class='line'>        <span class="n">viewHolder</span><span class="o">.</span><span class="na">dateTime</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">dateStr</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getItemCount</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">items</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ListItemViewHolder</span>
</span><span class='line'>           <span class="kd">extends</span> <span class="n">RecyclerView</span><span class="o">.</span><span class="na">ViewHolder</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// … shown above in the ViewHolder section</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>RecyclerView.LayoutManager</h2>

<p>The <code>LayoutManager</code> is probably the most interesting part of the <code>RecyclerView</code>. This class is responsible for the layout of all child views. There is one default implementation available: <code>LinearLayoutManager</code> which you can use for vertical as well as horizontal lists.</p>

<p>You have to set a <code>LayoutManager</code> for your <code>RecyclerView</code> otherwise you will see an exception at Runtime:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>08-01 05:00:00.000  2453  2453 E AndroidRuntime: java.lang.NullPointerException: Attempt to invoke virtual method ‘void android.support.v7.widget.RecyclerView<span class="nv">$LayoutManager</span>.onMeasure<span class="o">(</span>android.support.v7.widget.RecyclerView<span class="nv">$Recycler</span>, android.support.v7.widget.RecyclerView<span class="nv">$State</span>, int, int<span class="o">)</span>’ on a null object reference
</span><span class='line'>08-01 05:00:00.000  2453  2453 E AndroidRuntime:  at android.support.v7.widget.RecyclerView.onMeasure<span class="o">(</span>RecyclerView.java:1310<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Only one method of LayoutManager is currently abstract:</p>

<ul>
<li><code>public LayoutParams generateDefaultLayoutParams()</code></li>
</ul>


<p>But there is another one where the code states that you should overrride it since it’s soon going to be abstract:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">scrollToPosition</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">DEBUG</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;You MUST implement scrollToPosition. It will soon become abstract&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That’s very weird! Why not make it abstract right away? Anyway: Better you override this one to be on the safe side for when Google releases the final version of L.</p>

<p>But only overriding those two methods won’t get you very far. After all the <strong>LayoutManager</strong> is responsible for positioning the items you want to display. Thus you have to override <code>onLayoutChildren()</code> as well.</p>

<p>This method also contains a log statement stating “You must override onLayoutChildren(Recycler recycler, State state)”. Ok, then make it abstract :&ndash;) Luckily there’s still plenty (?) of time to change that into a proper abstract method for the final release of L. We all make mistakes. After all, <a href="http://www.grokkingandroid.com/tag/mistakes/">my “Stupid stuff devs make” series</a> is all about blunders that I made. So don’t get me wrong. No hard feelings here!</p>

<h3>LinearlayoutManager</h3>

<p>The LinearLayoutManager is currently the only default implementation of LayoutManager. You can use this class to create either vertical or horizontal lists.</p>

<p>The implementation of LinearLayoutManager is rather complex and I only had a look at some key aspects. I will return to this implementation in my post about custom LayoutManagers.</p>

<p>To use the LinearLayoutManager you simply have to instantiate it, tell it which orientation to use and you are done:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">LinearLayoutManager</span> <span class="n">layoutManager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinearLayoutManager</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'><span class="n">layoutManager</span><span class="o">.</span><span class="na">setOrientation</span><span class="o">(</span><span class="n">LinearLayoutManager</span><span class="o">.</span><span class="na">VERTICAL</span><span class="o">);</span>
</span><span class='line'><span class="n">layoutManager</span><span class="o">.</span><span class="na">scrollToPosition</span><span class="o">(</span><span class="n">currPos</span><span class="o">);</span>
</span><span class='line'><span class="n">recyclerView</span><span class="o">.</span><span class="na">setLayoutManager</span><span class="o">(</span><span class="n">layoutManager</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>LinearLayoutManager also offers some methods to find out about the first and last items currently on screen:</p>

<ul>
<li><code>findFirstVisibleItemPosition()</code></li>
<li><code>findFirstCompletelyVisibleItemPosition()</code></li>
<li><code>findLastVisibleItemPosition()</code></li>
<li><code>findLastCompletelyVisibleItemPosition()</code></li>
</ul>


<p>Surprisingly these methods are not part of the source code in the SDK folder, but you can use them as they are part of the binaries. As I cannot imagine those being removed, I’m sure you’ll find these in the final L release as well.</p>

<p>Other methods help you get the orientation of the layout or the current scroll state. Others will compute the scroll offset. And finally you can reverse the ordering of the items.</p>

<p>Since I’m going to write an extra post about LayoutManagers this should suffice for now.</p>

<h2>RecyclerView.ItemDecoration</h2>

<p>With an ItemDecoration you can add an offset to each item and modify the item so that items are separated from each other, highlighted or, well, decorated.</p>

<p>You do not have to use an ItemDecoration. If, for example, you use a CardView for each item, there’s no need for an ItemDecoration.</p>

<p>On the other hand you can add as many ItemDecorations as you like. The RecyclerView simply iterates over all ItemDecorations and calls the respective drawing methods for each of them in the order of the decoration chain.</p>

<p>The abstract base class contains these three methods:</p>

<ul>
<li><code>public void onDraw(Canvas c, RecyclerView parent)</code></li>
<li><code>public void onDrawOver(Canvas c, RecyclerView parent)</code></li>
<li><code>public void getItemOffsets(Rect outRect, int itemPosition, RecyclerView parent)</code></li>
</ul>


<p>Anything you paint in <code>onDraw()</code> might be hidden by the content of the item views but anything that you paint in <code>onDrawOver()</code> is drawn on top of the items. If you simply create a bigger offset and, for example, use this offset to paint dividers, this of course is of no importance. But if you really want to add decorations, you have to use <code>onDrawOver()</code>.</p>

<p>The <code>LayoutManager</code> calls the <code>getItemOffset()</code> method during the measurement phase to calculate the correct size of each item’s views. The <code>outRect</code> parameter might look a bit odd at first. Why not use a return value instead? But it really makes a lot of sense, since this allows <code>RecyclerView</code> to reuse one <code>Rect</code> object for all children and thus save resources. Not necessarily nice — but efficient.</p>

<p>One thing I didn’t expect considering the name of the class is that the <code>onDraw()/onDrawOver()</code> methods are not called for each item, but just once for every draw operation of the <code>RecyclerView</code>. You have to iterate over all child views of the <code>RecyclerView</code> yourself.</p>

<p>I will explain this in more detail in a follow-up post about writing your own <code>ItemDecorations</code>.</p>

<h2>RecyclerView.ItemAnimator</h2>

<p>The <code>ItemAnimator</code> class helps the <code>RecyclerView</code> with animating individual items. <code>ItemAnimators</code> deal with three events:</p>

<ul>
<li>An item gets added to the data set</li>
<li>An item gets removed from the data set</li>
<li>An item moves as a result of one or more of the previous two operations</li>
</ul>


<p>Luckily there exists a default implementation aptly named <code>DefaultItemAnimator</code>. If you do not set a custom <code>ItemAnimator</code>, <code>RecyclerView</code> uses an instance of <code>DefaultItemAnimator</code>.</p>

<p>Obviously for animations to work, Android needs to know about changes to the dataset. For this Android needs the support of your adapter. In earlier versions of Android you would call <code>notifyDataSetChanged()</code> whenever changes occured, this is no longer appropriate. This method triggers a complete redraw of all (visible) children at once without any animation. To see animations you have to use more specific methods.</p>

<p>The <code>RecyclerView.Adapter</code> class contains plenty of <code>notifyXyz()</code> methods. The two most specific are:</p>

<ul>
<li><code>public final void notifyItemInserted(int position)</code></li>
<li><code>public final void notifyItemRemoved(int position)</code></li>
</ul>


<p>The following video shows the result of an addition as well as a removal of an item in the sample app:</p>

<center><video width="800" height="1600" controls><source src="http://Solarex.github.io/downloads/files/a_first_glance_at_recyclerview_recyclerview_animation.mp4" type="video/mp4"></video></center>


<h2>Listeners</h2>

<p>RecyclerView also offers some rather generic listeners. Once again you can safely forget everything you used to use up to now. There is no OnItemClickListener or OnItemLongClickListener. But you can use an RecyclerView.OnItemTouchListener in combination with gesture detection to identify those events. A bit more work and more code to achieve the same result. I still hope for Google to add those Listeners in the final release. But whether those Listeners will be added is as an open question.</p>

<h2>Combining all classes</h2>

<p>You combine the classes either in a fragment or an activity. For the sake of simplicity my sample app uses activities only.</p>

<p>First of all here’s the layout file containing the RecyclerView:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;RelativeLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:paddingLeft=</span><span class="s">&quot;@dimen/activity_horizontal_margin&quot;</span>
</span><span class='line'>    <span class="na">android:paddingRight=</span><span class="s">&quot;@dimen/activity_horizontal_margin&quot;</span>
</span><span class='line'>    <span class="na">android:paddingTop=</span><span class="s">&quot;@dimen/activity_vertical_margin&quot;</span>
</span><span class='line'>    <span class="na">android:paddingBottom=</span><span class="s">&quot;@dimen/activity_vertical_margin&quot;</span>
</span><span class='line'>    <span class="na">tools:context=</span><span class="s">&quot;.RecyclerViewDemoActivity&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;android.support.v7.widget.RecyclerView</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/recyclerView&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">tools:context=</span><span class="s">&quot;.MainActivity&quot;</span>
</span><span class='line'>        <span class="na">tools:listitem=</span><span class="s">&quot;@layout/item_demo_01&quot;</span>
</span><span class='line'>        <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;ImageButton</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/fab_add&quot;</span>
</span><span class='line'>        <span class="na">android:layout_alignParentRight=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>        <span class="na">android:layout_alignParentBottom=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;@dimen/fab_size&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;@dimen/fab_size&quot;</span>
</span><span class='line'>        <span class="na">android:layout_gravity=</span><span class="s">&quot;bottom|right&quot;</span>
</span><span class='line'>        <span class="na">android:layout_marginRight=</span><span class="s">&quot;16dp&quot;</span>
</span><span class='line'>        <span class="na">android:layout_marginBottom=</span><span class="s">&quot;16dp&quot;</span>
</span><span class='line'>        <span class="na">android:background=</span><span class="s">&quot;@drawable/ripple&quot;</span>
</span><span class='line'>        <span class="na">android:stateListAnimator=</span><span class="s">&quot;@anim/anim&quot;</span>
</span><span class='line'>        <span class="na">android:src=</span><span class="s">&quot;@drawable/ic_action_add&quot;</span>
</span><span class='line'>        <span class="na">android:elevation=</span><span class="s">&quot;1dp&quot;</span>
</span><span class='line'>        <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/RelativeLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, nothing special here. You do not define the orientation or stuff like that on the RecyclerView. Actually RecyclerView itself makes no use of the attributes, it passes them on to the parent (which is ViewGroup) and that’s it.</p>

<p>There is one place within RecyclerView where an AttributeSet is used and that is in the <code>generateLayoutParams()</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">ViewGroup</span><span class="o">.</span><span class="na">LayoutParams</span> <span class="nf">generateLayoutParams</span><span class="o">(</span><span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">mLayout</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;RecyclerView has no LayoutManager&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">mLayout</span><span class="o">.</span><span class="na">generateLayoutParams</span><span class="o">(</span><span class="n">getContext</span><span class="o">(),</span> <span class="n">attrs</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this snippet the RecyclerView passes the AttributeSet on to the LayoutManager.</p>

<p>The Java code is also pretty simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_recyclerview_demo</span><span class="o">);</span>
</span><span class='line'><span class="n">recyclerView</span> <span class="o">=</span> <span class="o">(</span><span class="n">RecyclerView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">recyclerView</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">LinearLayoutManager</span> <span class="n">layoutManager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinearLayoutManager</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="n">layoutManager</span><span class="o">.</span><span class="na">setOrientation</span><span class="o">(</span><span class="n">LinearLayoutManager</span><span class="o">.</span><span class="na">VERTICAL</span><span class="o">);</span>
</span><span class='line'><span class="n">layoutManager</span><span class="o">.</span><span class="na">scrollToPosition</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="n">recyclerView</span><span class="o">.</span><span class="na">setLayoutManager</span><span class="o">(</span><span class="n">layoutManager</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// allows for optimizations if all item views are of the same size:</span>
</span><span class='line'><span class="n">recyclerView</span><span class="o">.</span><span class="na">setHasFixedSize</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// For the sake of simplicity I misused the Application subclass as a DAO</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">DemoModel</span><span class="o">&gt;</span> <span class="n">items</span> <span class="o">=</span> <span class="n">RecyclerViewDemoApp</span><span class="o">.</span><span class="na">getDemoData</span><span class="o">();</span>
</span><span class='line'><span class="n">adapter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RecyclerViewDemoAdapter</span><span class="o">(</span><span class="n">items</span><span class="o">);</span>
</span><span class='line'><span class="n">recyclerView</span><span class="o">.</span><span class="na">setAdapter</span><span class="o">(</span><span class="n">adapter</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">RecyclerView</span><span class="o">.</span><span class="na">ItemDecoration</span> <span class="n">itemDecoration</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">DividerItemDecoration</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">DividerItemDecoration</span><span class="o">.</span><span class="na">VERTICAL_LIST</span><span class="o">);</span>
</span><span class='line'><span class="n">recyclerView</span><span class="o">.</span><span class="na">addItemDecoration</span><span class="o">(</span><span class="n">itemDecoration</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// this is the default;</span>
</span><span class='line'><span class="c1">// this call is actually only necessary with custom ItemAnimators</span>
</span><span class='line'><span class="n">recyclerView</span><span class="o">.</span><span class="na">setItemAnimator</span><span class="o">(</span><span class="k">new</span> <span class="n">DefaultItemAnimator</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// onClickDetection is done in this Activity’s OnItemTouchListener</span>
</span><span class='line'><span class="c1">// with the help of a GestureDetector;</span>
</span><span class='line'><span class="c1">// Tip by Ian Lake on G+ in a comment to this post:</span>
</span><span class='line'><span class="c1">// https://plus.google.com/+LucasRocha/posts/37U8GWtYxDE</span>
</span><span class='line'><span class="n">recyclerView</span><span class="o">.</span><span class="na">addOnItemTouchListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="n">gesturedetector</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">GestureDetectorCompat</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="k">new</span> <span class="n">RecyclerViewDemoOnGestureListener</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Connecting all those elements together roughly consists of these steps:</p>

<ul>
<li>Get a reference to your RecyclerView</li>
<li>Create a LayoutManager and add it</li>
<li>Create an Adapter and add it</li>
<li>Create zero or more ItemDecorations as needed and add them</li>
<li>Create an ItemAnimator if needed and add it</li>
<li>Create zero or more listeners as needed and add them</li>
</ul>


<p>All in all about 30 lines of code.</p>

<p>Now of course this is misleading. That’s only the glue code. The really interesting stuff is in RecyclerView&rsquo;s many inner classes which you can subclass and tweak to your needs. That’s where the real work is done.</p>

<p>But the separation of concerns Google created helps you stick to one task within one implementation and it should make reuse easier to achieve. That’s why I like RecyclerView and its ecosystem. I’m not afraid to criticize big G, but that’s well done, Google!</p>

<h2>Gradle integration</h2>

<p>To use RecyclerView you have to add it to your gradle file. Adding the support library alone is not enough:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>   <span class="c1">//…</span>
</span><span class='line'>   <span class="n">compile</span> <span class="err">‘</span><span class="n">com</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">support</span><span class="o">:</span><span class="n">recyclerview</span><span class="o">-</span><span class="nl">v7:</span><span class="o">+</span><span class="err">’</span>
</span><span class='line'>   <span class="c1">//…</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Is that the final API?</h2>

<p>Of course I do not know if the concrete implementations that the preview contains will be in the final release of Android L. But I guess so. And I expect some additions as well as minor changes to the API, based on bug reports and developer feedback.</p>

<p>Google itself gives one hint in the current API documentation about more stuff to come. The documentation for the RecyclerView.LayoutManager class contains this nugget:</p>

<pre><code>Several stock layout managers are provided for general use.
</code></pre>

<p>So we can expect more LayoutManagers. Which, of course, is good. Furthermore I expect at least one default ItemDecoration as well. After all the support library’s sample project contains a DividerItemDecoration, which works well with the LinearLayoutManager.</p>

<p>I’m more skeptical about adapters. While an ArrayAdapter (or better yet, ListAdapter) is very well possible, I am more doubtful about a CursorAdapter since cursors do not lend themself easily to the new addition and removal notifications within the Adapter.</p>

<h2>reference</h2>

<ul>
<li><a href="http://www.grokkingandroid.com/first-glance-androids-recyclerview/">A First Glance at Android’s RecyclerView</a></li>
<li><a href="http://lucasr.org/2014/07/31/the-new-twowayview/">The new TwoWayView</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
