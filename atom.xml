<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Solarex's Blog]]></title>
  <link href="http://Solarex.github.io/atom.xml" rel="self"/>
  <link href="http://Solarex.github.io/"/>
  <updated>2019-09-11T22:00:05+08:00</updated>
  <id>http://Solarex.github.io/</id>
  <author>
    <name><![CDATA[Solarex]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lock-free multithreading with atomic operations]]></title>
    <link href="http://Solarex.github.io/blog/2019/08/10/lock-free-multithreading-with-atomic-operations/"/>
    <updated>2019-08-10T10:16:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2019/08/10/lock-free-multithreading-with-atomic-operations</id>
    <content type="html"><![CDATA[<p>清空Reeder发现internal/pointers一系列关于多线程的文章，感觉很不错，转载在此。</p>

<p>这是系列第三篇，期待作者继续更新~</p>

<p>Synchronizing threads at a lower level.</p>

<!-- more -->


<p>The Greek word &ldquo;atom&rdquo; (ἄτομος; atomos) means <em>uncuttable</em>. A task performed by a computer is said to be <strong>atomic</strong> when it is not divisible anymore: it can&rsquo;t be broken into smaller steps.</p>

<p><em>Atomicity</em> is an important property of multithreaded operations: since they are indivisible, there is no way for a thread to <em>slip through</em> an atomic operation concurrently performed by another one. For example, when a thread atomically writes on shared data no other thread can read the modification half-complete. Conversely, when a thread atomically reads from shared data, it sees the value as it appeared at a single moment in time. In other words, there is no risk of <a href="https://www.internalpointers.com/post/gentle-introduction-multithreading#data-races"><strong>data races</strong></a>.</p>

<p>In the <a href="https://www.internalpointers.com/post/introduction-thread-synchronization">previous chapter</a> I have introduced the so-called <strong>synchronization primitives</strong>, the most common tools for thread synchronization. They are used, among other things, to provide atomicity to operations that deal with data shared across multiple threads. How? They simply allow a single thread to do its concurrent job, while others are blocked by the operating system until the first one has finished. The rationale is that a blocked thread does no harm to others. Given their ability to freeze threads, such synchronization primitives are also known as <strong>blocking mechanisms</strong>.</p>

<p>Any blocking mechanism seen in the previous chapter will work great for the vast majority of your applications. They are fast and reliable if used correctly. However, they introduce some drawbacks that you might want to take into account:</p>

<ul>
<li>they block other threads — a dormant thread simply waits for the wakeup signal, doing nothing: it could be wasting precious time;</li>
<li>they could hang your application — if a thread holding a lock to a synchronization primitive crashes for whatever reason, the lock itself will be never released and the waiting threads will get stuck forever;</li>
<li>you have little control over which thread will sleep — it&rsquo;s usually up to the operating system to choose which thread to block. This could lead to an unfortunate event known as <strong>priority inversion</strong>: a thread that is performing a very important task gets blocked by another one with a lower priority.</li>
</ul>


<p>Most of the time you don&rsquo;t care about these issues as they won&rsquo;t affect the correctness of your programs. On the other hand, sometimes having threads always up and running is desirable, especially if you want to take advantage of multi-processor/multi-core hardware. Or maybe you can&rsquo;t afford a system that could get stuck on a dead thread. Or again, the priority inversion problem looks too dangerous to ignore.</p>

<h3>Lock-free programming to the rescue</h3>

<p>The good <a href="news:">news:</a> there is another way to control concurrent tasks in your multithreaded app, in order to prevent points 1), 2) and 3) seen above. Known as <strong>lock-free programming</strong> or <strong>lockless programming</strong>, it&rsquo;s a technique to safely share changing data between multiple threads without the cost of locking and unlocking them.</p>

<p>The bad <a href="news:">news:</a> this is low-level stuff. Way lower than using the traditional synchronization primitives like mutexes and semaphores: this time we will get closer to the metal. Despite this, I find lock-free programming a good mental challenge and a great opportunity to better understand how a computer actually works.</p>

<p>Lock-free programming relies upon <strong>atomic instructions</strong>, operations performed directly by the CPU that occur atomically. Being the foundation of lock-free programming, in the rest of this article I will introduce atomic instructions first, then I will show you how to leverage them for concurrency control. Let&rsquo;s get started!</p>

<h3>What are atomic instructions?</h3>

<p>Think of any action performed by a computer, say for example displaying a picture on your screen. Such operation is made of many smaller ones: read the file into memory, de-compress the image, light up pixels on the screen and so on. If you recursively zoom into one of those sub-tasks, that is if you break it down into smaller and smaller pieces, you will eventually reach a dead end. The smallest, visible to a human operation performed by a processor is called <strong>machine instruction</strong>, a command executed by the hardware directly.</p>

<center><p><img src="http://Solarex.github.io/images/software-hardware-layers.png"></p></center>


<p>Depending on the CPU architecture, some machine instructions are atomic, that is they are performed in a single, uncuttable and uninterruptible step. Some others are not atomic instead: the processor does more work under the hood in form of even smaller operations, known as <strong>micro-operations</strong>. Let&rsquo;s focus on the former category: an atomic instruction is a CPU operation that cannot be further broken down. More specifically, atomic instructions can be grouped into two major classes: <strong>store and load</strong> and <strong>read-modify-write (RMW)</strong>.</p>

<h4>Store and load atomic instructions</h4>

<p>The building blocks any processor operates on: they are used to write (<strong>store</strong>) and read (<strong>load</strong>) data in memory. Many CPU architectures guarantee that these operations are atomic by nature, under some circumstances. For example, processors that implement the <a href="https://en.wikipedia.org/wiki/X86">x86 architecture</a> feature the <code>MOV</code> instruction, which reads bytes from memory and gives them to the CPU. This operation is guaranteed to be atomic if performed on <a href="https://www.ibm.com/support/knowledgecenter/en/SSUFAU_1.0.0/com.ibm.ent.pl1.zos.doc/lr/alnmnt.html"><strong>aligned</strong></a> data, that is information stored in memory in a way that makes it easy for the CPU to read it in a single shot.</p>

<h4>Read-modify-write (RMW) atomic instructions</h4>

<p>Some more complex operations can&rsquo;t be performed with simple stores and loads alone. For example, incrementing a value in memory would require a mixture of at least three atomic load and store instructions, making the outcome non-atomic as a whole. <strong>Read-modify-write</strong> instructions fill the gap by giving you the ability to compute multiple operations in one atomic step. There are many instructions in this class. Some CPU architectures provide them all, some others only a subset. To name a few:</p>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Test-and-set"><strong>test-and-set</strong></a> — writes 1 to a memory location and returns the old value in a single, atomic step;</li>
<li><a href="https://en.wikipedia.org/wiki/Fetch-and-add"><strong>fetch-and-add</strong></a> — increments a value in memory and returns the old value in a single, atomic step;</li>
<li><a href="https://en.wikipedia.org/wiki/Compare-and-swap"><strong>compare-and-swap (CAS)</strong></a> — compares the content of a memory location with a given value and, if they are equal, modifies the contents of that memory location to a new given value.</li>
</ul>


<p>All these instructions perform multiple things in memory in a single, atomic step. This is an important property that makes read-modify-write instructions suitable for lock-free multithreading operations. We will see why in few paragraphs.</p>

<h3>Three levels of atomic instructions</h3>

<p>All the instructions seen above belong to the hardware: they require you to talk directly to the CPU. Working this way is obviously difficult and non-portable, as some instructions might have different name across different architectures. Some operations might not even exist across different processor models! So it is unlikely you will touch these things, unless you are working on very low-level code for a specific machine.</p>

<p>Climbing up to the software level, many operating systems provide their own versions of atomic instructions. Let&rsquo;s call them <strong>atomic operations</strong>, since we are abstracting away from their physical machine counterpart. For example, in Windows you may find the <a href="https://docs.microsoft.com/en-us/windows/desktop/sync/interlocked-variable-access">Interlocked API</a>, a set of functions that handle variables in an atomic manner. MacOS does the same with its <a href="https://developer.apple.com/documentation/kernel/osatomic_h?language=objc">OSAtomic.h</a> header. They surely conceal the hardware implementation, but you are still bound to a specific environment.</p>

<p>The best way to perform portable atomic operations is to rely upon the ones provided by the programming language of choice. In Java for example you will find the <code>java.util.concurrent.atomic</code> package; C++ provides the <code>std::atomic</code> header; Haskell has the <code>Data.Atomics</code> package and so on. Generally speaking, it is likely to find support for atomic operations if a programming language deals with multithreading. This way is up to the compiler (if it&rsquo;s a compiled language) or the virtual machine (if it&rsquo;s an interpreted language) to find the best instructions for implementing atomic operations, whether from the underlying operating system API or directly from the hardware.</p>

<center><p><img src="http://Solarex.github.io/images/atomics-levels.png"></p></center>


<p>For example, GCC — a C++ compiler — usually transforms C++ atomic operations and objects straight into machine instructions. It also tries to emulate a specific operation that doesn&rsquo;t map directly to the hardware with other atomic machine instructions if available. The worst-case scenario: on a platform that doesn&rsquo;t provide atomic operations it may rely upon other blocking strategies, which wouldn&rsquo;t be lock-free, of course.</p>

<h3>Leveraging atomic operations in multithreading</h3>

<p>Let&rsquo;s now see how atomic operations are used. Consider incrementing a simple variable, an task that is not atomic by nature as it is made of three different steps — read the value, increment it, store the new value back. Traditionally, you would regulate the operation with a mutex (pseudocode):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">mutex</span> <span class="o">=</span> <span class="n">initialize_mutex</span><span class="p">()</span>
</span><span class='line'><span class="n">x</span>     <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">reader_thread</span><span class="p">()</span>
</span><span class='line'>    <span class="n">mutex</span><span class="p">.</span><span class="n">lock</span><span class="p">()</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>    <span class="n">mutex</span><span class="p">.</span><span class="n">unlock</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">writer_thread</span><span class="p">()</span>
</span><span class='line'>    <span class="n">mutex</span><span class="p">.</span><span class="n">lock</span><span class="p">()</span>
</span><span class='line'>    <span class="n">x</span><span class="o">++</span>
</span><span class='line'>    <span class="n">mutex</span><span class="p">.</span><span class="n">unlock</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first thread that acquires the lock makes progress, while others sit and wait in line until it has finished.</p>

<p>Conversely, the lock-free approach introduces a different pattern: threads are free to run without any impediment, by employing atomic operations. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">reader_thread</span><span class="p">()</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">load</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">writer_thread</span><span class="p">()</span>
</span><span class='line'>    <span class="n">fetch_and_add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I assume that <code>fetch_and_add()</code> and <code>load()</code> are atomic operations based on the corresponding hardware instructions. As you may notice, nothing is locked here. Multiple threads that call those functions concurrently can all make progress. The atomicity of <code>load()</code> makes sure that no reader thread will read the shared value half-complete, as well as no writer thread will damage it with a partial write thanks to <code>fetch_and_add()</code>.</p>

<h4>Atomic operations in the real world</h4>

<p>Now, this example reveals us an important property of atomic operations: they work only with primitive types — booleans, chars, shorts, ints and so on. On the other hand, actual programs require synchronization for more complex structures like arrays, vectors, objects, vectors of arrays, objects containing arrays, &hellip; . How can we guarantee atomicity on such convoluted entities with simple operations based on primitive types?</p>

<p>Lock-free programming forces you to think out of the box of the usual synchronization primitives. You don&rsquo;t protect a shared resource with atomic operations directly, as you would do with a mutex or a semaphore. Rather, you build <strong>lock-free algorithms</strong> or <strong>lock-free data structures</strong>, based on atomic operations to determine how multiple threads will access your data.</p>

<p>For example, the <em>fetch-and-add</em> operation seen before can be used to make a rudimentary semaphore that, in turn, you would employ to regulate threads. Not surprisingly all the traditional, blocking synchronization entities are based on atomic operations.</p>

<p>People have written countless lock-free data structures like <a href="https://github.com/facebook/folly/blob/master/folly/AtomicHashMap.h">Folly&rsquo;s AtomicHashMap</a>, the <a href="https://www.boost.org/doc/libs/1_70_0/doc/html/lockfree.html">Boost.Lockfree library</a>, multi-producer/multi-consumer <a href="https://github.com/cameron314/concurrentqueue">FIFO queues</a> or algorithms like <a href="https://www.youtube.com/watch?v=rxQ5K9lo034">read-copy-update (RCU)</a> and <a href="https://en.wikipedia.org/wiki/Shadow_paging">Shadow Paging</a> to name a few. Writing these atomic weapons from scratch is hard, let alone making them work correctly. This is why most of the time you may want to employ existing, battle-tested algorithms and structures instead of rolling your owns.</p>

<h3>The compare-and-swap (CAS) loop</h3>

<p>Moving closer to real-world applications, the <strong>compare-and-swap loop</strong> (a.k.a. <strong>CAS loop</strong>) is probably the most common strategy in lock-free programming, whether you are using existing data structures or are writing algorithms from the ground up. It is based on the corresponding <em>compare-and-swap</em> atomic operation and has a nice property: it supports multiple writers. This is an important feature of a concurrent algorithm especially when used in complex systems.</p>

<p>The CAS loop is interesting also because it introduces a recurring pattern in lock-free code, as well as some theoretical concepts to reason about. Let&rsquo;s take a closer look.</p>

<h4>A CAS loop in action</h4>

<p>A CAS function provided by an operating system or a programming language might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">boolean</span> <span class="nf">compare_and_swap</span><span class="p">(</span><span class="n">shared_data</span><span class="p">,</span> <span class="n">expected_value</span><span class="p">,</span> <span class="n">new_value</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>It takes in input a reference/pointer to some shared data, the expected value it currently takes on and the new value you want to apply. The function replaces the current value with the new one (and returns <code>true</code>) only if the value hasn&rsquo;t changed, that is if <code>shared_data.value == expected_value</code>.</p>

<p>In a CAS loop the idea is to repeatedly trying to compare and swap until the operation is successful. On each iteration you feed the CAS function with the reference/pointer, the expected value and the desired one. This is necessary in order to cope with any other writer thread that is doing the same thing concurrently: the CAS function fails if another thread has changed the data in the meantime, that is if the shared data no longer matches the expected value. Multiple writers support!</p>

<p>Suppose we want to replicate the fetch-and-add algorithm seen in the previous snippet with a CAS loop. It would look roughly like this (pseudocode):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">reader_thread</span><span class="p">()</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="n">load</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">writer_thread</span><span class="p">()</span>
</span><span class='line'>    <span class="n">temp</span> <span class="o">=</span> <span class="n">load</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>                              <span class="c1">// (1)</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">compare_and_swap</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">temp</span><span class="p">,</span> <span class="n">temp</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="c1">// (2)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In (1) the algorithm loads the existing value of the shared data, then it tries to swap it with the new value until success (2), that is until the CAS function returns <code>true</code>.</p>

<h4>The swapping paradigm</h4>

<p>As said before, the CAS loop introduces a recurring pattern in many lock-free algorithms:</p>

<ul>
<li>create a <em>local copy</em> of the shared data;</li>
<li>modify the local copy as needed;</li>
<li>when ready, update the shared data by <em>swapping</em> it with the local copy created before.</li>
</ul>


<p>Point 3) is the key: the swap is performed atomically through an atomic operation. The dirty job is done <em>locally</em> by the writer thread and then published only when ready. This way another thread can observe the shared data only in two states: either the old one, or the new one. No half-complete or corrupted updates, thanks to the atomic swap.</p>

<p>This is also philosophically different from the locking approach: in a lock-free algorithm threads get in touch only during that tiny atomic swap, running undisturbed and unaware of others for the rest of the time. The point of contact between threads is now shrinked down and limited to the duration of the atomic operation.</p>

<h4>A gentle form of locking</h4>

<p>The <em>spin until success</em> strategy seen above is employed in many lock-free algorithms and is called <strong>spinlock</strong>: a simple loop where the thread repeatedly tries to perform something until successful. It&rsquo;s a form of gentle lock where the thread is up and running — no sleep forced by the operating system, although no progress is made until the loop is over. Regular locks employed in mutexes or semaphores are way more expensive, as the suspend/wakeup cycle requires a lot of work under the hood.</p>

<h4>The ABA problem</h4>

<p>Instructions in lines (1) and (2) are atomic indeed, yet distinct. Another thread might slip through the cracks and change the value of the shared data once has been read in (1). Specifically, it could turn the initial value, say <code>A</code>, into another value, say <code>B</code>, and then bring it back to <code>A</code> right before the compare and swap operation has started in (2). The thread that is running the CAS loop wouldn&rsquo;t notice the change and perform the swap successfully. This is known as the <strong>ABA problem</strong>: sometimes you can easily ignore it if you algorithm is simple as the one above, sometimes you want to prevent it instead as it would introduce subtle bugs in your programs. Luckily there are <a href="https://en.wikipedia.org/wiki/Compare-and-swap#ABA_problem">several workarounds</a> for this.</p>

<h4>You can swap anything inside a CAS loop</h4>

<p>The CAS loop is often used to swap pointers, a type supported by the <em>compare-and-swap</em> operation. This is useful when you want to modify a complex collection of data like a class or an array: just create the local copy, modify it as needed and then when ready swap a pointer to the local data with a pointer to the global data. This way global data will point to the memory allocated for the local copy and other threads will see up-to-date information.</p>

<p>This technique allows you to successfully synchronize non-primitive entities, yet is difficult to make it work correctly. What if, after the swap, a reader thread is still reading the old pointer? How to properly delete the previous copy without generating dangerous dangling pointers? Once again engineers have found many solutions such as using a language that supports <a href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science">garbage collection</a> or esoteric techniques like <a href="https://aturon.github.io/blog/2015/08/27/epoch/">epoch-based memory reclamation</a>, <a href="https://en.wikipedia.org/wiki/Hazard_pointer">hazard pointers</a> or <a href="https://en.wikipedia.org/wiki/Reference_counting">reference counting</a>.</p>

<h3>Lock-freedom vs. wait-freedom</h3>

<p>Every algorithm or data structure based on atomic operations can be clustered into two groups: <strong>lock-free</strong> or <strong>wait-free</strong>. This is an important distinction when you have to evaluate the impact of atomic-based tools on the performance of your program.</p>

<p>Lock-free algorithms allow the remaining threads to continue doing useful work even if one of them is temporarily busy. In other words, at least one thread always makes progress. The CAS loop is a perfect example of lock-free because if a single iteration of the CAS loop fails, it’s usually because some other thread has modified the shared resource successfully. However, a lock-free algorithm might spend an unpredictable amount of time just spinning, especially when there are many threads competing for the same resource: technically speaking, when the <strong>contention</strong> is high. Pushing it to the limits, a lock-free algorithm could be far less efficient with CPU resources than a mutex that puts blocked threads to sleep.</p>

<p>On the other hand in wait-free algorithms, a subset of lock-free ones, any thread can complete its work in a finite number or steps, regardless of the execution speed or the workload level of others. The first snippet in this article based on the <em>fetch-and-add</em> operation is an example of a wait-free algorithm: no loops, no retries, just undisturbed flow. Also, wait-free algorithms are <strong>fault-tolerant</strong>: no thread can be prevented from completing an operation by failures of other processes, or by arbitrary variations in their speed. These properties make wait-free algorithms suitable for complex <a href="https://en.wikipedia.org/wiki/Real-time_computing">real-time systems</a> where the predictable behavior of concurrent code is a must.</p>

<center><p><img src="http://Solarex.github.io/images/lock-free-wait-free.png"></p></center>


<p>Wait-freedom is a highly desired property of concurrent code, yet very difficult to obtain. All in all, whether you are building a blocking, a lock-free or a wait-free algorithm the golden rule is to always benchmark your code and measure the results. Sometimes a good old mutex can outperform fancier synchronization primitives, especially when the concurrent task complexity is high.</p>

<h3>Closing notes</h3>

<p>Atomic operations are a necessary part of lock-free programming, even on single-processor machines. Without atomicity, a thread could be interrupted halfway through the transaction, possibly leading to an inconsistent state. In this article I have just scratched the surface: a new world of problems opens up as soon as you add multicores/multiprocessors to the equation. Topics like <strong>sequential consistency</strong> and <strong>memory barriers</strong> are critical pieces of the puzzle and can&rsquo;t be overlooked if you want to get the best out of your lock-free algorithms. I will cover them all in the next episode.</p>

<h3>reference</h3>

<ul>
<li><a href="https://www.internalpointers.com/post/lock-free-multithreading-atomic-operations">Lock-free multithreading with atomic operations</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to thread synchronization]]></title>
    <link href="http://Solarex.github.io/blog/2019/08/09/introduction-to-thread-synchronization/"/>
    <updated>2019-08-09T10:15:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2019/08/09/introduction-to-thread-synchronization</id>
    <content type="html"><![CDATA[<p>清空Reeder发现internal/pointers一系列关于多线程的文章，感觉很不错，转载在此。</p>

<p>这是系列第二篇。</p>

<p>A look at one of the most popular ways of concurrency control in a multithreaded application.</p>

<!-- more -->


<p>As emerged from <a href="https://www.internalpointers.com/post/gentle-introduction-multithreading">my previous introduction to multithreading</a>, writing concurrent code can be tricky. Two big problems might emerge: data races, when a writer thread modifies the memory while a reader thread is reading it and race conditions, when two or more threads do their job in an unpredictable order. Luckily for us there are several ways to prevent these errors: in this article I will take a look at the most common one known as <strong>synchronization</strong>.</p>

<h3>What is synchronization</h3>

<p>Synchronization is a bag of tricks that make sure two or more threads behave themselves. More specifically, synchronization will help you to achieve at least two important features in your multithreaded program:</p>

<ul>
<li><strong>atomicity</strong> — if your code contains instructions that operate on data shared across multiple threads, an unregulated concurrent access to that data might trigger a data race. The code segment that contains those instructions is called <strong>critical section</strong>. You want to make sure that critical sections are executed <em>atomically</em>: as defined in the previous episode, an <a href="https://www.internalpointers.com/post/gentle-introduction-multithreading#data-races">atomic operation</a> can&rsquo;t be broken into smaller ones, so that while a thread is executing it no other thread can slip through;</li>
<li><strong>ordering</strong> — sometimes you want two or more threads to perform their job in a predictable order, or put a restriction on how many threads can access a specific resource. Normally you don&rsquo;t have control over these things, which might be the root cause of race conditions. With synchronization you can orchestrate your threads to perform according to a plan.</li>
</ul>


<p>Synchronization is implemented through special objects called <strong>synchronization primitives</strong> provided by the operating system or any programming language that supports threading. You then make use of such synchronization primitives in your code to make sure your threads don&rsquo;t trigger data races, race conditions or both.</p>

<p>Synchronization takes place both in hardware and software, as well as between threads and operating system processes. This article is about synchronization of software threads: the physical counterpart and process synchronization are fascinating topics that will surely get some love in a future post.</p>

<h3>Common synchronization primitives</h3>

<p>The most important synchronization primitives are <strong>mutexes</strong>, <strong>semaphores</strong> and <strong>condition variables</strong>. There are no official definitions for these terms, so different texts and implementations associate slightly different characteristics with each primitive.</p>

<p>Operating systems provide these tools natively. For example Linux and macOS support <strong>POSIX threads</strong>, also known as <strong>pthreads</strong>, a set of functions that allows you to write safe multithreaded applications. Windows has its own synchronization tools in the C Run-Time Libraries (CRT): conceptually similar to POSIX threads functions but with different names.</p>

<p>Unless you are writing very low-level code, you usually want to employ the synchronization primitives shipped with the programming language of your choice. Every programming language that deals with multithreading has its own toolbox of synchronization primitives, along with other functions to fiddle around with threads. For example Java provides the <code>java.util.concurrent</code> package, modern C++ has its own <code>thread</code> library, C# ships the <code>System.Threading</code> namespace and so on. All these functions and objects are based upon the underlying operating system primitives, of course.</p>

<p>There are many other synchronization tools around. In this article I&rsquo;ll stick to the three mentioned above, as they act as a foundation often used to build more complex entities. Let&rsquo;s take a closer look.</p>

<h3>Mutexes</h3>

<p>A <strong>mutex</strong> (<strong>mut</strong>ual <strong>ex</strong>clusion) is a synchronization primitive that puts a restriction around a critical section, in order to prevent data races. A mutex guarantees <em>atomicity</em>, by making sure that only one thread accesses the critical section at a time.</p>

<p>Technically, a mutex is a global object in your application, shared across multiple threads, that provides two functions usually called <code>lock</code> and <code>unlock</code>. A thread that is about to enter the critical section calls <code>lock</code> to lock the mutex; when it&rsquo;s done, that is when the critical section is over, the same thread calls <code>unlock</code> to unlock it. The important feature of a mutex: only the thread that locks the mutex is allowed to unlock it later on.</p>

<p>If another thread jumps in and tries to lock a locked mutex, the operating system puts it to sleep until the first thread has finished its task and has unlocked the mutex. This way only one thread can access the critical section; any other thread is excluded from it and must wait for the unlock. For this reason a mutex is also known as a <strong>locking mechanism</strong>.</p>

<p>You can use a mutex to protect simple actions like a concurrent read and write of a shared variable, as well as bigger and more complex operations that need to be executed by one thread at a time, such as writing to a log file or modifying a database. Anyway, the mutex lock/unlock operations always match the boundaries of the critical section.</p>

<h3>Recursive mutexes</h3>

<p>In any regular mutex implementation, a thread that locks a mutex twice causes an error. A <strong>recursive mutex</strong> allows this, instead: a thread can lock a recursive mutex multiple times without unlocking it first. However no other thread can lock the recursive mutex until all the locks held by the first thread have been released. This synchronization primitive is also known as <strong>reentrant mutex</strong>, where <strong>reentrancy</strong> is the ability to call a function multiple times (i.e. to enter it again) before the previous invocations are over.</p>

<p>Recursive mutexes are difficult to work with and are error-prone. You have to keep track of which thread has locked the mutex how many times and make sure the same thread unlocks it completely. Failing to do so would leave locked mutexes around with nasty consequences. Most of the time a regular mutex is enough.</p>

<h3>Reader/Writer Mutexes</h3>

<p>As we know from the previous episode, multiple threads can concurrently read from a shared resource without harm as long as they don&rsquo;t modify it. So why bother locking a mutex if some of your threads are operating in &ldquo;read-only&rdquo; mode? For example consider a concurrent database that is frequently read by many threads, while another thread seldomly writes updates. You certainly need a mutex to protect the read/write access, but most of the time you would end up locking it just for read operations, preventing other reading threads to do their job.</p>

<p>A <strong>reader/writer mutex</strong> allows <em>concurrent</em> reads from multiple threads and <em>exclusive</em> writes from a single thread to a shared resource. It can be locked in <em>read</em> or <em>write</em> mode. To modify a resource, a thread must first acquire the exclusive write lock. An exclusive write lock is not permitted until all read locks have been released.</p>

<h3>Semaphores</h3>

<p>A <strong>semaphore</strong> is a synchronization primitive used to orchestrate threads: which one starts first, how many threads can access a resource and so on. Like a street semaphore regulates the traffic, a programming semaphore regulates the multithreading flow: for this reason a semaphore is also known as a <strong>signaling mechanism</strong>. It can be seen as an evolution of a mutex, because it guarantees both <em>ordering</em> and <em>atomicity</em>. However in a few paragraphs I will show you why using semaphores for atomicity only is not a great idea.</p>

<p>Technically, a semaphore is a global object in your application, shared across multiple threads, that contains a <em>numeric counter</em> managed by two functions: one that increases the counter, another one that decreases it. Historically called <code>P</code> and <code>V</code>, modern implementations use more friendly names for those functions such as <code>acquire</code> and <code>release</code>.</p>

<p>A semaphore controls the access to a shared resource: the counter determines the maximum number of threads that can simultaneously access it. At the beginning of your program, when the semaphore gets initialized, you choose that number according to your needs. Then, a thread that wants to access a shared resource calls <code>acquire</code>:</p>

<ul>
<li>if the counter is <em>greater than zero</em> the thread can proceed. The counter gets reduced by one right away, then the current thread starts doing its job. When done, it calls <code>release</code> which in turn increases the counter by one.</li>
<li>if the counter is <em>equal to zero</em> the thread cannot proceed: other threads have already filled up the available space. The current thread is put to sleep by the operating system and will wake up when the semaphore counter becomes greater than zero again (that is when any other thread calls <code>release</code> once its job is done).</li>
</ul>


<p>Unlike a mutex, <em>any thread can release a semaphore</em>, not only the one that has acquired it in the first place.</p>

<p>A single semaphore is used to limit the number of threads accessing a shared resource: for example to cap the number of multithreaded database connections, where each thread is triggered by someone connecting to your server.</p>

<p>By combining multiple semaphores together you can solve thread ordering problems: for example the thread that renders a web page in your browser must start after the thread that downloads the HTML files from the Internet. Thread A would notify thread B when it&rsquo;s done, so that B can wake up and proceed with its job: this is also known as the famous <a href="https://en.wikipedia.org/wiki/Producer%E2%80%93consumer_problem">Producer-Consumer problem</a>.</p>

<h3>Binary semaphores</h3>

<p>A semaphore whose counter is restricted to the values 0 and 1 is called <strong>binary semaphore</strong>: only one thread at a time can access the shared resource. Wait: this is basically a mutex protecting a critical section! You can actually replicate the mutex behavior with a binary semaphore. However there are two important points to keep in mind:</p>

<ul>
<li>a mutex can be unlocked only by thread that had locked it first, while a semaphore can be released from any other thread. This could lead to confusion and subtle bugs if what you want is just a locking mechanism;</li>
<li>semaphores are signaling mechanisms that orchestrate threads, while mutexes are locking mechanisms that protects shared resources. You should not use semaphores to protect shared resources, nor mutexes for signaling: your intent will be more clear to you and to anyone who will read your code.</li>
</ul>


<h3>Condition variables</h3>

<p>Condition variables are another synchronization primitive designed for <em>ordering</em>. They are used for sending a wake up signal across different threads. A condition variable always goes hand in hand with a mutex; using it alone doesn&rsquo;t make sense.</p>

<p>Technically, a condition variable is a global object in your application, shared across multiple threads, that provides three functions usually called <code>wait</code>, <code>notify_one</code> and <code>notify_all</code>, plus a mechanism to pass it an existing mutex to work with (the exact way depends on the implementation).</p>

<p>A thread that calls <code>wait</code> on the condition variable is put to sleep by the operating system. Then another thread that wants to wake it up invokes <code>notify_one</code> or <code>notify_all</code>. The difference is that <code>notify_one</code> unfreezes only one thread, while <code>notify_all</code> sends the wake up call to all the threads that are sleeping after the <code>wait</code> call on the condition variable. The mutex is used internally to provide the sleep/wakeup mechanism.</p>

<p>Condition variables are a powerful mechanism to send signals between threads that you couldn&rsquo;t achieve with mutexes alone. For example you can use them to solve the Producer-Consumer problem once again, where thread A emits a signal when it&rsquo;s done so that thread B can start its job.</p>

<h3>Common problems in synchronization</h3>

<p>All the synchronization primitives described in this article have something in common: they put threads to sleep. For this reason they are also called <strong>blocking mechanisms</strong>. A blocking mechanism is a good way to prevent concurrent access to a shared resource if you want to avoid data races or race conditions: a sleeping thread does no harm. But it can trigger unfortunate side effects. Let&rsquo;s take a quick look at them.</p>

<h4>Deadlock</h4>

<p>A <strong>deadlock</strong> occurs when a thread is waiting for a shared variable that another thread holds, and this second thread is waiting for a shared variable that the first thread holds. These things usually happen when working with multiple mutexes: the two threads remain waiting forever in an infinite circular loop: thread A waits for thread B which waits for thread A which waits for thread B which&hellip;</p>

<h4>Starvation</h4>

<p>A thread goes in <strong>starvation</strong> mode when it doesn&rsquo;t get enough love: it remains stuck indefinitely in its sleep state while waiting for access to a shared resource that is continuously given to other threads. For example a poorly designed semaphore-based algorithm might forget to wake up one of the many threads behind the waiting line, by giving precedence only to a subset of them. The starving thread would wait forever without doing any useful work.</p>

<h4>Spurious wake-ups</h4>

<p>This is a subtle problem that comes from how condition variables are actually implemented in some operating systems. In a <strong>spurious wake-up</strong> a thread wakes up even if not signaled through the condition variable. That&rsquo;s why most synchronization primitives also include a way to check if the wakeup signal really comes from the condition variable the thread is waiting on.</p>

<h4>Priority inversion</h4>

<p><strong>Priority inversion</strong> occurs when a thread performing a high-priority task is blocked waiting for a lower-priority thread to release a resource, such as a mutex. For example when the thread that outputs audio to the soundcard (high priority) is blocked by the thread that displays the interface (low priority), resulting in a bad glitch through your speakers.</p>

<h3>What&rsquo;s next</h3>

<p>All these synchronization problems have been studied for years and many solutions, both technical and architectural are available. A careful design and a bit of experience help a lot in prevention. Also, given the <a href="https://www.internalpointers.com/post/gentle-introduction-multithreading#race-conditions">non-deterministic</a>, (i.e. extremely hard) nature of multithreaded applications, people have developed interesting tools to detect errors and potential pitfalls in concurrent code. Projects like <a href="https://github.com/google/sanitizers/wiki/ThreadSanitizerCppManual">Google&rsquo;s TSan</a> or <a href="http://valgrind.org/docs/manual/hg-manual.html">Helgrind</a> are just a few of them.</p>

<p>However, sometimes you want to take a different route and get rid of any blocking mechanism in your multithreaded application. This would mean to enter the <strong>non-blocking</strong> realm: a very low-level territory, where threads are never put to sleep by the operating system and concurrency is regulated through <strong>atomic primitives</strong> and <strong>lock-free data structures</strong>. It&rsquo;s a challenging field, not always necessary, which can boost the speed of your software or wreak havoc on it. But this is a story for the next episode&hellip;</p>

<h3>reference</h3>

<ul>
<li><a href="https://www.internalpointers.com/post/introduction-thread-synchronization">Introduction to thread synchronization</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A gentle introduction to multithreading]]></title>
    <link href="http://Solarex.github.io/blog/2019/08/07/a-gentle-introduction-to-multithreading/"/>
    <updated>2019-08-07T10:14:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2019/08/07/a-gentle-introduction-to-multithreading</id>
    <content type="html"><![CDATA[<p>清空Reeder发现internal/pointers一系列关于多线程的文章，感觉很不错，转载在此。</p>

<p>这是系列第一篇。</p>

<p>Approaching the world of concurrency, one step at a time.</p>

<!-- more -->


<p>Modern computers have the ability to perform multiple operations at the same time. Supported by hardware advancements and smarter operating systems, this feature makes your programs run faster, both in terms of speed of execution and responsiveness.</p>

<p>Writing software that takes advantage of such power is fascinating, yet tricky: it requires you to understand what happens under your computer&rsquo;s hood. In this first episode I&rsquo;ll try to scratch the surface of <strong>threads</strong>, one of the tools provided by operating systems to perform this kind of magic. Let&rsquo;s go!</p>

<h3>Processes and threads: naming things the right way</h3>

<p>Modern operating systems can run multiple programs at the same time. That&rsquo;s why you can read this article in your browser (a program) while listening to music on your media player (another program). Each program is known as a <strong>process</strong> that is being executed. The operating system knows many software tricks to make a process run along with others, as well as taking advantage from the underlying hardware. Either way, the final outcome is that you <em>sense</em> all your programs to be running simultaneously.</p>

<p>Running processes in an operating system is not the only way to perform several operations at the same time. Each process is able to run simultaneous sub-tasks within itself, called <strong>threads</strong>. You can think of a thread as a slice of the process itself. Every process triggers at least one thread on startup, which is called the <strong>main thread</strong>. Then, according to the program/programmer&rsquo;s needs, additional threads may be started or terminated. <strong>Multithreading</strong> is about running multiple threads within a single process.</p>

<p>For example, it is likely that your media player runs multiple threads: one for rendering the interface — this is usually the main thread, another one for playing the music and so on.</p>

<p>You can think of the operating system as a container that holds multiple processes, where each process is a container that holds multiple threads. In this article I will focus on threads only, but the whole topic is fascinating and deserves more in-depth analysis in the future.</p>

<center><p><img src="http://Solarex.github.io/images/processes-threads.png"></p></center>


<h3>The differences between processes and threads</h3>

<p>Each process has its own chunk of memory assigned by the operating system. By default that memory cannot be shared with other processes: your browser has no access to the memory assigned to your media player and vice versa. The same thing happens if you run two <strong>instances</strong> of the same process, that is if you launch your browser twice. The operating system treats each instance as a new process with its own separate portion of memory assigned. So, by default, two or more processes have no way to share data, unless they perform advanced tricks — the so-called <strong>inter-process communication (IPC)</strong>.</p>

<p>Unlike processes, threads share the same chunk of memory assigned to their parent process by the operating system: data in the media player main interface can be easily accessed by the audio engine and vice versa. Therefore is easier for two threads to talk to eachother. On top of that, threads are usually lighter than a process: they take less resources and are faster to create, that&rsquo;s why they are also called <strong>lightweight processes</strong>.</p>

<p>Threads are a handy way to make your program perform multiple operations at the same time. Without threads you would have to write one program per task, run them as processes and synchronize them through the operating system. This would be more difficult (IPC is tricky) and slower (processes are heavier than threads).</p>

<h3>Green threads, of fibers</h3>

<p>Threads mentioned so far are an operating system thing: a process that wants to fire a new thread has to talk to the operating system. Not every platform natively support threads, though. <strong>Green threads</strong>, also known as <strong>fibers</strong> are a kind of emulation that makes multithreaded programs work in environments that don&rsquo;t provide that capability. For example a virtual machine might implement green threads in case the underlying operating system doesn&rsquo;t have native thread support.</p>

<p>Green threads are faster to create and to manage because they completely bypass the operating system, but also have disadvantages. I will write about such topic in one of the next episodes.</p>

<p>The name &ldquo;green threads&rdquo; refers to the Green Team at Sun Microsystem that designed the original Java thread library in the 90s. Today Java no longer makes use of green threads: they switched to native ones back in 2000. Some other programming languages — Go, Haskell or Rust to name a few — implement equivalents of green threads instead of native ones.</p>

<h3>What threads are used for</h3>

<p>Why should a process employ multiple threads? As I mentioned before, doing things in parallel greatly speeds up things. Say you are about to render a movie in your movie editor. The editor could be smart enough to spread the rendering operation across multiple threads, where each thread processes a chunk of the final movie. So if with one thread the task would take, say, one hour, with two threads it would take 30 minutes; with four threads 15 minutes, and so on.</p>

<p>Is it really that simple? There are three important points to consider:</p>

<ul>
<li>not every program needs to be multithreaded. If your app performs sequential operations or often waits on the user to do something, multithreading might not be that beneficial;</li>
<li>you just don&rsquo;t throw more threads to an application to make it run faster: each sub-task has to be thought and designed carefully to perform parallel operations;</li>
<li>it is not 100% guaranteed that threads will perform their operations truly in parallel, that is <em>at the same time</em>: it really depends on the underlying hardware.</li>
</ul>


<p>The last one is crucial: if your computer doesn&rsquo;t support multiple operations at the same time, the operating system has to fake them. We will see how in a minute. For now let&rsquo;s think of <strong>concurrency</strong> as the <em>perception</em> of having tasks that run at the same time, while <strong>true parallelism</strong> as tasks that literally run at the same time.</p>

<center><p><img src="http://Solarex.github.io/images/concurrency-parallelism.png"></p></center>


<h3>What makes concurrency and parallelism possible</h3>

<p>The <strong>central processing unit (CPU)</strong> in your computer does the hard work of running programs. It is made of several parts, the main one being the so-called <strong>core</strong>: that&rsquo;s where computations are actually performed. A core is capable of running only one operation at a time.</p>

<p>This is of course a major drawback. For this reason operating systems have developed advanced techniques to give the user the ability to running multiple processes (or threads) at once, especially on graphical environments, even on a single core machine. The most important one is called <strong>preemptive multitasking</strong>, where <strong>preemption</strong> is the ability of interrupting a task, switching to another one and then resuming the first task at a later time.</p>

<p>So if your CPU has only one core, part of a operating system&rsquo;s job is to spread that single core computing power across multiple processes or threads, which are executed one after the other in a loop. This operation gives you the illusion of having more than one program running in parallel, or a single program doing multiple things at the same time (if multithreaded). Concurrency is met, but true parallelism — the ability to run processes <em>simultaneously</em> — is still missing.</p>

<p>Today modern CPUs have more than one core under the hood, where each one performs an independent operation at a time. This means that with two or more cores true parallelism is possible. For example, my Intel Core i7 has four cores: it can run four different processes or threads at the same time, simultaneously.</p>

<p>Operating systems are able to detect the number of CPU cores and assign processes or threads to each one of them. A thread may be allocated to whatever core the operating system likes, and this kind of scheduling is completely transparent for the program being run. Additionally, preemptive multitasking might kick in in case all cores are busy. This gives you the ability to run more processes and threads than the actual number or cores available in your machine.</p>

<h3>Multi-threading application on a single core: does it make sense?</h3>

<p>True parallelism on a single-core machine is impossible to achieve. Nevertheless it still makes sense to write a multithreaded program, if your application can benefit from it. When a process employs multiple threads, preemptive multitasking can keep the app running even if one of those threads performs a slow or blocking task.</p>

<p>Say for example you are working on a desktop app that reads some data from a very slow disk. If you write the program with just one thread, the whole app would freeze until the disk operation is finished: the CPU power assigned to the only thread is wasted while waiting for the disk to wake up. Of course the operating system is running many other processes besides this one, but your specific application will not be making any progress.</p>

<p>Let&rsquo;s rethink your app in a multithreaded way. Thread A is responsible for the disk access, while thread B takes care of the main interface. If thread A gets stuck waiting because the device is slow, thread B can still run the main interface, keeping your program responsive. This is possible because, having two threads, the operating system can switch the CPU resources between them without getting stuck on the slower one.</p>

<h3>More threads, more problems</h3>

<p>As we know, threads share the same chunk of memory of their parent process. This makes extremely easy for two or more of them to exchange data within the same application. For example: a movie editor might hold a big portion of shared memory containing the video timeline. Such shared memory is being read by several worker threads designated for rendering the movie to a file. They all just need a handle (e.g. a pointer) to that memory area in order to read from it and output rendered frames to disk.</p>

<p>Things run smoothly as long as two or more threads <em>read</em> from the same memory location. The troubles kick in when at least one of them <em>writes</em> to the shared memory, while others are reading from it. Two problems can occur at this point:</p>

<ul>
<li><strong>data race</strong> — while a writer thread modifies the memory, a reader thread might be reading from it. If the writer has not finished its work yet, the reader will get corrupted data;</li>
<li><strong>race condition</strong> — a reader thread is supposed to read only after a writer has written. What if the opposite happens? More subtle than a data race, a race condition is about two or more threads doing their job in an unpredictable order, when in fact the operations should be performed in the proper sequence to be done correctly. Your program can trigger a race condition even if it has been protected against data races.</li>
</ul>


<h3>The concept of thread safety</h3>

<p>A piece of code is said to be <strong>thread-safe</strong> if it works correctly, that is without data races or race conditions, even if many threads are executing it simultaneously. You might have noticed that some programming libraries declare themselves as being thread-safe: if you are writing a multithreaded program you want to make sure that any other third-party function can be used across different threads without triggering concurrency problems.</p>

<h3>The root cause of data races</h3>

<p>We know that a CPU core can perform only one machine instruction at a time. Such instruction is said to be <strong>atomic</strong> because it&rsquo;s indivisible: it can&rsquo;t be broken into smaller operations. The Greek word &ldquo;atom&rdquo; (ἄτομος; atomos) means <em>uncuttable</em>.</p>

<p>The property of being indivisible makes atomic operations thread-safe by nature. When a thread performs an atomic write on shared data, no other thread can read the modification half-complete. Conversely, when a thread performs an atomic read on shared data, it reads the entire value as it appeared at a single moment in time. There is no way for a thread to <em>slip through</em> an atomic operation, thus no data race can happen.</p>

<p>The bad news is that the vast majority of operations out there are non-atomic. Even a trivial assignment like <code>x = 1</code> on some hardware might be composed of multiple atomic machine instructions, making the assignment itself non-atomic as a whole. So a data race is triggered if a thread reads <code>x</code> while another one performs the assignment.</p>

<h3>The root cause of race conditions</h3>

<p>Preemptive multitasking gives the operating system full control over thread management: it can start, stop and pause threads according to advanced scheduling algorithms. You as a programmer cannot control the time or order of execution. In fact, there is no guarantee that a simple code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">writer_thread</span><span class="o">.</span><span class="na">start</span><span class="o">()</span>
</span><span class='line'><span class="n">reader_thread</span><span class="o">.</span><span class="na">start</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>would start the two threads in that specific order. Run this program several times and you will notice how it behaves differently on each run: sometimes the writer thread starts first, sometimes the reader does instead. You will surely hit a race condition if your program needs the writer to always run before the reader.</p>

<p>This behavior is called <strong>non-deterministic</strong>: the outcome changes each time and you can&rsquo;t predict it. Debugging programs affected by a race condition is very annoying because you can&rsquo;t always reproduce the problem in a controlled way.</p>

<h3>Teach threads to get along: concurrency control</h3>

<p>Both data races and race conditions are real-world problems: some people even <a href="https://en.wikipedia.org/wiki/Therac-25">died because of them</a>. The art of accommodating two or more concurrent threads is called <strong>concurrency control</strong>: operating systems and programming languages offer several solutions to take care of it. The most important ones:</p>

<ul>
<li><strong>synchronization</strong> — a way to ensure that resources will be used by only one thread at a time. Synchronization is about marking specific parts of your code as &ldquo;protected&rdquo; so that two or more concurrent threads do not simultaneously execute it, screwing up your shared data;</li>
<li><strong>atomic operations</strong> — a bunch of non-atomic operations (like the assignment mentioned before) can be turned into atomic ones thanks to special instructions provided by the operating system. This way the shared data is always kept in a valid state, no matter how other threads access it;</li>
<li><strong>immutable data</strong> — shared data is marked as immutable, nothing can change it: threads are only allowed to read from it, eliminating the root cause. As we know threads can safely read from the same memory location as long as they don&rsquo;t modify it. This is the main philosophy behind <a href="https://en.wikipedia.org/wiki/Functional_programming">functional programming</a>.</li>
</ul>


<p>I will cover all this fascinating topics in the next episodes of this mini-series about concurrency. Stay tuned!</p>

<h3>refreence</h3>

<ul>
<li><a href="https://www.internalpointers.com/post/gentle-introduction-multithreading">A gentle introduction to multithreading</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[检测链表中是否有环]]></title>
    <link href="http://Solarex.github.io/blog/2019/08/05/floyd-cycle-detection-in-linkedlist/"/>
    <updated>2019-08-05T17:50:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2019/08/05/floyd-cycle-detection-in-linkedlist</id>
    <content type="html"><![CDATA[<p>本文主要讲解如何检测链表中是否有环，如果有环确定环的起点。</p>

<!-- more -->


<h3>reference</h3>

<ul>
<li><a href="https://www.youtube.com/watch?v=zbozWoMgKW0">Detect loop in linked list(floyd algo / Tortoise and hare algo)</a></li>
<li><a href="https://www.youtube.com/watch?v=LUm2ABqAs1w">Why Floyd&rsquo;s cycle detection algorithm works? Detecting loop in a linked list.</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java线程池解析]]></title>
    <link href="http://Solarex.github.io/blog/2019/08/04/java-threadpoolexecutor/"/>
    <updated>2019-08-04T20:27:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2019/08/04/java-threadpoolexecutor</id>
    <content type="html"><![CDATA[<p>本文主要对Executor框架以及Java平台线程池技术进行分析。</p>

<!-- more -->


<p>Executor框架主要由3大部分组成：</p>

<ul>
<li>任务。包括被执行任务需要实现的接口：Runnable接口或Callable接口</li>
<li>任务的执行。包括任务执行机制的核心接口Executor，以及继承自Executor的ExecutorService接口。Executor框架有两个关键类实现了ExecutorService接口（ThreadPoolExecutor和ScheduledThreadPoolExecutor）</li>
<li>异步计算的结果。包括接口Future和实现Future接口的FutureTask类。</li>
</ul>


<p>通过Executor框架的工具类Executors，可以创建3中类型的ThreadPoolExecutor：</p>

<ul>
<li>FixedThreadPool</li>
<li>SingleThreadPool</li>
<li>CachedThreadPool</li>
</ul>


<p>ThreadPoolExecutor执行execute方法分下面4种情况：</p>

<ul>
<li>如果当前运行的线程少于corePoolSize，则创建新线程来执行任务（注意，执行这一步骤需要获取全局锁）</li>
<li>如果运行的线程等于或多于corePoolSize，则将任务加入BlockingQueue。</li>
<li>如果无法将任务加入BlockingQueue（队列已满），则创建新的线程来处理任务（注意，执行这一步骤需要获取全局锁）</li>
<li>如果创建新线程将使当前运行的线程超出maximumPoolSize，任务将交给饱和策略来处理。</li>
</ul>


<p>RejectExecutionHandler(饱和策略)</p>

<ul>
<li>AbortPolicy：直接抛出异常</li>
<li>CallerRunsPolicy：调用者线程来运行任务</li>
<li>DiscardOldestPolicy：丢弃队列中最近的一个任务，并执行当前任务</li>
<li>DiscardPolicy：不处理，丢弃掉</li>
</ul>


<p>关闭线程池：可以通过调用线程池的shutdown或shutdownNow方法来关闭线程池。它们的原理是遍历线程池中的工作线程，然后逐个调用线程的interrupt方法来中断线程，所以无法响应中断的任务可能永远无法终止。但是它们存在一定的区别，shutdownNow首先将线程池的状态设置成STOP，然后尝试停止所有的正在执行或暂停任务的线程，并返回等待执行任务的列表，而shutdown只是将线程池的状态设置成SHUTDOWN状态，然后中断所有没有正在执行任务的线程。只要调用了这两个关闭方法中的任意一个，isShutdown方法就会返回true，当所有的任务都已关闭后，才表示线程池关闭成功，这时调用isTerminated方法会返回true。</p>

<p>FixedThreadPool的corePoolSize和maximumPoolSize都被设置为创建FixedThreadPool时指定的参数nThreads。当线程池中的线程数大于corePoolSize时，keepAliveTime为多余的空闲线程等待新任务的最长时间，超过这个时间后多余的线程将被终止。keepAliveTime设置为0意味着多余的空闲线程会被立即终止。FixedThreadPool使用无界队列LinkedBlockingQueue作为线程池的工作队列。当线程池的线程数达到corePoolSize后，新任务将在无界队列中等待，因此线程池中线程数不会超过corePoolSize，maximunPoolSize是无效的参数，keepAliveTime也变成了无效参数。</p>

<p>SingleThreadExecutor的corePoolSize和maximumPoolSize被设置成1,其他参数与FixedThreadPool相同。</p>

<p>CachedThreadPool是一个会根据需要创建新线程的线程池。CachedThreadPool的corePoolSize被设置为0，即corePoolSize为空，maximumPoolSize被设置为Integer.MAX_VALUE，即maximumPool是无界的，keepAliveTime被设置为60，意味着CachedThreadPool中的空闲线程等待新任务的最长时间是60s，空闲线程超过60s后将会被终止。CachedThreadPool使用没有容量的SynchronousQueue作为线程池的工作队列，但CachedThreadPool的maximumPool是无界的，这意味着，如果主线程提交任务的速度高于maximumPool中线程处理任务的速度时，CachedThreadPool会不断创建新线程，极端情况下，CachedThreadPool会因为创建过多线程而耗尽CPU和内存资源。</p>

<p>ScheduledThreadPoolExecutor使用DelayQueue作为工作队列，DelayQueue是无界队列，所以maximumPoolSize参数无意义。ScheduledThreadPoolExecutor的执行主要分为两大部分：</p>

<ul>
<li>当调用ScheduledThreadPoolExecutor的scheduleAtFixedRate()方法或者scheduleWithFixedDelay()方法时，会向DelayQueue中添加一个实现了RunnableScheduledFuture接口的ScheduledFutureTask。</li>
<li>线程池的线程从DelayQueue中获取ScheduledFutureTask，然后执行任务。</li>
</ul>


<p>可以自己<a href="https://github.com/flyfire/ReadJCIP/tree/master/src/main/java/com/solarexsoft/jcip/art/ch04">参考</a>着实现一个简陋版的线程池。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java BlockingQueue解析]]></title>
    <link href="http://Solarex.github.io/blog/2019/08/01/java-blockingqueue/"/>
    <updated>2019-08-01T20:26:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2019/08/01/java-blockingqueue</id>
    <content type="html"><![CDATA[<p>本文主要分析Java平台BlockingQueue的各个实现。</p>

<!-- more -->


<p>阻塞队列BlockingQueue是一个支持两个附加操作的队列。这两个附加的操作支持阻塞的插入和移除方法。</p>

<ul>
<li>支持阻塞的插入方法：意思是当队列满时，队列会阻塞插入元素的线程，直到队列不满。</li>
<li>支持阻塞的移除方法：意思是在队列为空时，获取元素的线程会等待队列变为非空。</li>
</ul>


<p>当阻塞队列不可用时，这两个附加操作提供了4种处理方式。</p>

<table>
<thead>
<tr>
<th></th>
<th> 方法/处理方式 </th>
<th> 抛出异常  </th>
<th> 返回特殊值 </th>
<th> 一直阻塞 </th>
<th> 超时退出           </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> 插入方法      </td>
<td> add(e)    </td>
<td> offer(e)   </td>
<td> put(e)   </td>
<td> offer(e,time,unit) |</td>
</tr>
<tr>
<td></td>
<td> 移除方法      </td>
<td> remove(e) </td>
<td> poll()     </td>
<td> take()   </td>
<td> poll(time, unit)   |</td>
</tr>
<tr>
<td></td>
<td> 检查方法      </td>
<td> element() </td>
<td> peek()     </td>
<td> 不可用   </td>
<td> 不可用             |</td>
</tr>
</tbody>
</table>


<ul>
<li>抛出异常：当队列满时，如果再往队列里插入元素，会抛出IllegalStateException(&ldquo;Queue full&rdquo;)异常。当队列空时，从队列里获取元素会抛出NoSuchElementException异常。</li>
<li>返回特殊值：当往队列插入元素时，会返回元素是否插入成功，成功返回true。如果是移除方法，则是从队列里取出一个元素，如果没有则返回null。</li>
<li>一直阻塞：当阻塞队列满时，如果生产者线程往队列里put元素，队列会一直阻塞生产者线程，直到队列可用或者响应中断退出。当队列空时，如果消费者线程从队列里take元素，队列会阻塞住消费者线程，直到队列不为空。</li>
<li>超时退出：当阻塞队列满时，如果生产者线程往队列里插入元素，队列会阻塞生产者线程一段时间，如果超过了指定的时间，生产者线程就会退出。</li>
</ul>


<p>如果是无界阻塞队列，队列不可能会出现满的情况，所以使用put或offer方法永远不会被阻塞，而且offer方法永远返回true。</p>

<p>JDK 7提供了7个阻塞队列：</p>

<ul>
<li>ArrayBlockingQueue：一个由数组结构组成的有界阻塞队列</li>
<li>LinkedBlockingQueue：一个由链表结构组成的有界阻塞队列</li>
<li>PriorityBlockingQueue：一个支持优先级排序的无界阻塞队列</li>
<li>DelayQueue：一个使用优先级队列实现的无界阻塞队列</li>
<li>SynchronousQueue：一个不存储元素的阻塞队列</li>
<li>LinkedTransferQueue：一个由链表结构组成的无界阻塞队列</li>
<li>LinkedBlockingDeque：一个由链表结构组成的双向阻塞队列</li>
</ul>


<p>ArrayBlockingQueue是一个用数组实现的有界阻塞队列。此队列按照FIFO的原则对元素进行排序。访问线程的公平性是使用可重入锁实现的。</p>

<p>LinkedBlockingQueue是一个用链表实现的有界阻塞队列，此队列的默认和最大长度为Integer.MAX_VALUE。此队列按照先进先出的原则对元素进行排序。</p>

<p>PriorityBlockingQueue是一个支持优先级的无界阻塞队列。默认情况下元素采用自然顺序升序排列。也可以自定义类实现compareTo()方法来指定元素排序规则，或者初始化PriorityBlockingQueue时，指定构造参数Comparator来对元素进行排序。需要注意的是不能保证同优先级元素的顺序。</p>

<p>DelayQueue是一个支持延时获取元素的无界阻塞队列。队列使用PriorityQueue来实现。队列中的元素必须实现Delayed接口，在创建元素时可以指定多久才能从队列中获取当前元素。只有在延迟期满时才能从队列中提取元素。DelayQueue非常有用，可以将DelayQueue运用在以下应用场景。</p>

<ul>
<li>缓存系统的设计：可以用DelayQueue保存缓存元素的有效期，使用一个线程循环查询DelayQueue，一旦能从DelayQueue中获取元素时，表示缓存有效期到了。</li>
<li>定时任务调度：使用DelayQueue保存当天将会执行的任务和执行时间，一旦从DelayQueue中获取到任务就开始执行，比如TimerQueue就是使用DelayQueue实现的。</li>
</ul>


<p>延时阻塞队列的实现很简单，当消费者从队列里获取元素时，如果元素没有达到延时时间，就阻塞当前线程。</p>

<p>SyncrhonousQueue是一个不存储元素的阻塞队列。每一个put操作必须等待一个take操作，否则不能继续添加元素。它支持公平访问队列。默认情况下线程采用非公平性策略访问队列。SynchronousQueue可以看成是一个传球手，负责把生产者线程处理的数据直接传递给消费者线程。队列本身并不存储任何元素，非常适合传递性场景。SynchronousQueue的吞吐量高于LinkedBlockingQueue和ArrayBlockingQueue。</p>

<p>LinkedTransferQueue是一个由链表结构组成的无界阻塞TransferQueue队列。相对于其他阻塞队列，LinkedTransferQueue多了tryTransfer和transfer方法。</p>

<ul>
<li>transfer方法：如果当前有消费者正在等待接收元素（消费者使用take()方法或带时间限制的poll()方法时），transfer方法可以把生产者传入的元素立即transfer给消费者。如果没有消费者在等待接收元素，transfer方法会将元素存放在队列tail节点，并等到该元素被消费者消费了才返回。</li>
<li>tryTransfer方法：tryTransfer方法是用来试探生产者传入的元素是否能直接传给消费者。如果没有消费者等待接收元素，则返回false。和transfer方法的区别是tryTransfer方法无论消费者是否接收，方法立即返回，而transfer方法是必须等到消费者消费了才返回。对于带时间限制的tryTransfer(E e,long timeout, TimeUnit unit)方法，试图把生产者传入的元素直接传给消费者，但是如果没有消费者消费该元素则等待指定的时间再返回。如果超时还没消费元素，则返回false，如果在超时时间内消费了元素，则返回true。</li>
</ul>


<p>LinkedBlockingDeque是一个由链表结构组成的双向阻塞队列。所谓双向队列指的是可以从队列的两端插入和移除元素。双向队列因为多了一个操作队列的入口，在多线程同时入队时，也就减少了一半的竞争。相比其他的阻塞队列，LinkedBlockingDeque多了addFirst、addLast、offerFirst、offerLast、peekFirst、peekLast等方法。插入方法add等同于addLast，移除方法remove等同于removeFirst，take方法等同于takeFirst。在初始化LinkedBlockingDeque时可以设置容量防止其过度膨胀。LinkedBlockingDeque可以运用在“工作窃取”模式中。</p>

<p>阻塞队列实现原理：使用通知模式实现。ArrayBlockingQueue使用了Condition来实现。</p>

<p>可以自己<a href="https://github.com/flyfire/ReadJCIP/blob/master/src/main/java/com/solarexsoft/jcip/ch14/ConditionBoundedBuffer.java">参考</a>着实现一下。</p>

<h3>reference</h3>

<ul>
<li><a href="https://javadoop.com/post/java-concurrent-queue">解读 java 并发队列 BlockingQueue</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java AQS解析]]></title>
    <link href="http://Solarex.github.io/blog/2019/07/28/aqs/"/>
    <updated>2019-07-28T16:59:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2019/07/28/aqs</id>
    <content type="html"><![CDATA[<p><code>AbstractQueuedSynchronizer</code>是很多并发工具类如<code>ReentrantLock</code>的实现基础，本文对其进行分析。</p>

<!-- more -->


<p>TL;DR</p>

<p>以下是对<a href="http://gee.cs.oswego.edu/dl/papers/aqs.pdf">aqs.pdf</a>部分内容零散的翻译，其实《Java并发编程实战》中有一章介绍了AQS，我也做了笔记，可以在<a href="https://solarex.github.io/reading-notes/jcip/ch14.html">这里</a>看到，对于AQS模板方法的使用，可以在<a href="https://solarex.github.io/reading-notes/the-art-of-java-concurrency-programming/ch05.html">这篇笔记</a>中看到。翻译很不专业，将就看下吧。如果想深入了解AQS，可以读下<a href="http://gee.cs.oswego.edu/dl/papers/aqs.pdf">aqs.pdf</a>或者看下本文reference部分的几篇文章。</p>

<p>Synchronizers possess two kinds of methods : at least one <code>acquire</code> operation that blocks the calling thread unless/until the synchronization state allows it to proceed, and at least one <code>release</code> operation that changes synchronization state in a way that may allow one or more blocked threads to unblock.</p>

<p>同步器提供两种方法：一个<code>acquire</code>方法在同步状态不允许线程通过运行时阻塞线程，一个<code>release</code>方法改变同步状态来允许一个或多个被阻塞的线程继续运行。</p>

<p>The <code>java.util.concurrent</code> package does not define a single unified API for synchronizers. Some are defined via common interfaces (e.g., <code>Lock</code>), but others contain only specialized versions. So, <code>acquire</code> and <code>release</code> operations take a range of names and forms across different classes. For example, methods <code>Lock.lock</code>,<code>Semaphore.acquire</code>, <code>CountDownLatch.await</code>, and <code>FutureTask.get</code> all map to <code>acquire</code> operations in the framework. However, the package does maintain consistent conventions across classes to support a range of common usage options. When meaningful, each synchronizer supports:
+ Nonblocking synchronization attempts (for example,<code>tryLock</code>) as well as blocking versions.
+ Optional timeouts, so applications can give up waiting.
+ Cancellability via interruption, usually separated into one version of acquire that is cancellable, and one that isn&rsquo;t.</p>

<p>JUC没有为同步器定义一个统一的API。有一些是在通用的接口中定义的，比如<code>Lock</code>，但是其他的包括一些特殊的版本。所以不同同步器的<code>acquire</code>和<code>release</code>方法在名字和形态上表现不同。比如，<code>Lock.lock</code>，<code>Semaphore.acquire</code>，<code>CountDownLatch.await</code>和<code>FutureTask.get</code>和AQS框架中的<code>acquire</code>方法相对应。但是JUC框架在通用操作上保持了一致性。对于同步器来说，一般都支持以下操作：</p>

<ul>
<li>非阻塞尝试和阻塞尝试，比如<code>Lock.tryLock</code>和<code>Lock.lock</code></li>
<li>可选的超时，超时后线程可以放弃等待尝试</li>
<li>在等待获取尝试的时候，对线程中断的响应或不响应</li>
</ul>


<p>Synchronizers may vary according to whether they manage only <code>exclusive</code> states – those in which only one thread at a time may continue past a possible blocking point – versus possible <code>shared</code> states in which multiple threads can at least sometimes proceed.Regular lock classes of course maintain only exclusive state, but counting semaphores, for example, may be acquired by as many threads as the count permits. To be widely useful, the framework must support both modes of operation.</p>

<p>同步器可能会因为共享状态是独占还是可共享的而不同。一般锁维护的是独占状态，同时只能有一个线程持有锁，但是Semaphore可能同时被多个线程获取。AQS对这两种模式都提供了支持。</p>

<p>The <code>java.util.concurrent</code> package also defines interface <code>Condition</code>, supporting monitor-style <code>await/signal</code> operations that may be associated with <code>exclusive Lock</code> classes, and whose implementations are intrinsically intertwined with their associated Lock classes.</p>

<p>JUC框架还定义了<code>Condition</code>接口，来提供和内置锁<code>wait/notify</code>类似的操作，<code>Condition</code>的<code>await/signal</code>方法和独占锁绑定在一起。</p>

<p>The basic ideas behind a synchronizer are quite straightforward.
An acquire operation proceeds as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">while</span> <span class="o">(</span><span class="n">synchronization</span> <span class="n">state</span> <span class="n">does</span> <span class="n">not</span> <span class="n">allow</span> <span class="n">acquire</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">enqueue</span> <span class="n">current</span> <span class="n">thread</span> <span class="k">if</span> <span class="n">not</span> <span class="n">already</span> <span class="n">queued</span><span class="o">;</span>
</span><span class='line'>    <span class="n">possibly</span> <span class="n">block</span> <span class="n">current</span> <span class="n">thread</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">dequeue</span> <span class="n">current</span> <span class="n">thread</span> <span class="k">if</span> <span class="n">it</span> <span class="n">was</span> <span class="n">queued</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And a release operation is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">update</span> <span class="n">synchronization</span> <span class="n">state</span><span class="o">;</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">state</span> <span class="n">may</span> <span class="n">permit</span> <span class="n">a</span> <span class="n">blocked</span> <span class="n">thread</span> <span class="n">to</span> <span class="n">acquire</span><span class="o">)</span>
</span><span class='line'><span class="n">unblock</span> <span class="n">one</span> <span class="n">or</span> <span class="n">more</span> <span class="n">queued</span> <span class="n">threads</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Support for these operations requires the coordination of three basic components:
+ Atomically managing synchronization state
+ Blocking and unblocking threads
+ Maintaining queues</p>

<p>同步器背后的思想很简单，三个基本的部分构成了对同步器的支持：</p>

<ul>
<li>原子更新同步状态</li>
<li>线程的阻塞和唤醒</li>
<li>线程等待队列</li>
</ul>


<p>Class <code>AbstractQueuedSynchronizer</code> maintains synchronization state using only a single (32bit) int, and exports <code>getState</code>, <code>setState</code>, and <code>compareAndSetState</code> operations to access and update this state. These methods in turn rely on <code>java.util.concurrent.atomic</code> support providing JSR133 (Java Memory Model) compliant <code>volatile</code> semantics on <code>reads and writes</code>, and access to native <code>compare-and-swap</code> or <code>loadlinked/store-conditional</code> instructions to implement <code>compareAndSetState</code>, that atomically sets state to a given new value only if it holds a given expected value.</p>

<p><code>AbstractQueuedSynchronizer</code>用一个32位的int值来表示同步状态，暴露了<code>getState</code>, <code>setState</code>和<code>compareAndSetState</code> 方法来获取和更新同步状态。这些方法依赖JMM底层模型对<code>volatile</code>变量的语义支持，依赖CPU的<code>compare-and-swap</code> 或 <code>loadlinked/store-conditional</code> 指令来完成<code>compareAndSetState</code>操作。CAS操作原子地设置同步状态为新的值，只有同步状态等于期待的原值时才会成功。</p>

<p>Restricting synchronization state to a 32bit <code>int</code> was a pragmatic decision. While JSR166 also provides atomic operations on 64bit <code>long</code> fields, these must still be emulated using internal locks on enough platforms that the resulting synchronizers would not perform well. In the future, it seems likely that a second base class, specialized for use with 64bit state (i.e., with long control arguments), will be added. However, there is not now a compelling reason to include it in the package. Currently, 32 bits suffice for most applications. Only one <code>java.util.concurrent</code> synchronizer class, <code>CyclicBarrier</code>, would require more bits to maintain state, so instead uses locks (as do most higher-level utilities in the package).</p>

<p>JUC已经提供了<code>AbstractQueuedLongSynchronizer</code>，<code>AbstractQueuedLongSynchronizer</code>用<code>long</code>来表示同步状态。</p>

<p>Concrete classes based on <code>AbstractQueuedSynchronizer</code> must define methods <code>tryAcquire</code> and <code>tryRelease</code> in terms of these exported state methods in order to control the <code>acquire</code> and <code>release</code> operations. The <code>tryAcquire</code> method must return <code>true</code> if synchronization was acquired, and the <code>tryRelease</code> method must return <code>true</code> if the new synchronization state may allow future acquires. These methods accept a single <code>int</code> argument that can be used to communicate desired state; for example in a reentrant lock, to re-establish the recursion count when re-acquiring the lock after returning from a condition wait.Many synchronizers do not need such an argument, and so just ignore it.</p>

<p>AQS的具体实现类必须实现<code>tryAcquire</code> 和 <code>tryRelease</code>以便获得AQS提供的 <code>acquire</code> 和 <code>release</code> 操作。如果同步状态允许线程通过，<code>tryAcquire</code>方法必须返回<code>true</code>，<code>tryRelease</code>必须返回<code>true</code>如果新的同步状态允许阻塞的线程通过。<code>tryAcquire</code>和<code>tryRelease</code>接受一个<code>int</code>类型的参数，很多同步器不需要这个参数，直接忽略了它。</p>

<p>Until JSR166, there was no Java API available to block and unblock threads for purposes of creating synchronizers that are not based on built-in monitors. The only candidates were <code>Thread.suspend</code> and <code>Thread.resume</code>, which are unusable because they encounter an unsolvable race problem: If an unblocking thread invokes <code>resume</code> before the blocking thread has executed <code>suspend</code>, the <code>resume</code> operation will have no effect.</p>

<p>在JSR166之前，没有Java API来提供除了基于内置锁之外的线程阻塞唤醒同步操作。可选的有<code>Thread.suspend</code>和<code>Thread.resume</code>，但是如果一个线程在<code>suspend</code>之前先调用了<code>resume</code>，<code>resume</code>将无效。</p>

<p>The <code>java.util.concurrent.locks</code> package includes a <code>LockSupport</code> class with methods that address this problem. Method <code>LockSupport.park</code> blocks the current thread unless or until a <code>LockSupport.unpark</code> has been issued. (Spurious wakeups are also permitted.) Calls to <code>unpark</code> are not &ldquo;counted&rdquo;, so multiple unparks before a park only unblock a single park.Additionally, this applies per-thread, not per-synchronizer. A thread invoking park on a new synchronizer might return immediately because of a &ldquo;leftover&rdquo; unpark from a previous usage. However, in the absence of an unpark, its next invocation will block. While it would be possible to explicitly clear this state, it is not worth doing so. It is more efficient to invoke park multiple times when it happens to be necessary.This simple mechanism is similar to those used, at some level, in the Solaris-9 thread library, in WIN32 &ldquo;consumable events&rdquo;,and in the Linux NPTL thread library, and so maps efficiently to each of these on the most common platforms Java runs on.(However, the current Sun Hotspot JVM reference implementation on Solaris and Linux actually uses a pthread condvar in order to fit into the existing runtime design.) The park method also supports optional relative and absolute timeouts, and is integrated with JVM <code>Thread.interrupt</code> support — interrupting a thread unparks it.</p>

<p>JUC提供了<code>LockSupport</code>来解决这个问题。<code>LockSupport</code>还支持可选的超时，而且提供了对线程中断的支持。</p>

<p>The heart of the framework is maintenance of queues of blocked threads, which are restricted here to FIFO queues. Thus, the framework does not support priority-based synchronization.These days, there is little controversy that the most appropriate choices for synchronization queues are non-blocking data structures that do not themselves need to be constructed using lower-level locks. And of these, there are two main candidates: variants of Mellor-Crummey and Scott (MCS) locks, and variants of Craig, Landin, and Hagersten (CLH) locks.Historically, CLH locks have been used only in spinlocks.However, they appeared more amenable than MCS for use in the synchronizer framework because they are more easily adapted to handle cancellation and timeouts, so were chosen as a basis. The resulting design is far enough removed from the original CLH structure to require explanation.A CLH queue is not very queue-like, because its enqueuing and dequeuing operations are intimately tied to its uses as a lock. It is a linked queue accessed via two atomically updatable fields,head and tail, both initially pointing to a dummy node.</p>

<p>AQS的等待队列是CLH队列的变种。</p>

<p>A new node, node, is enqueued using an atomic operation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">do</span> <span class="o">{</span> <span class="n">pred</span> <span class="o">=</span> <span class="n">tail</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span> <span class="k">while</span><span class="o">(!</span><span class="n">tail</span><span class="o">.</span><span class="na">compareAndSet</span><span class="o">(</span><span class="n">pred</span><span class="o">,</span> <span class="n">node</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>release</code> status for each node is kept in its predecessor node.So, the &ldquo;spin&rdquo; of a spinlock looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">while</span> <span class="o">(</span><span class="n">pred</span><span class="o">.</span><span class="na">status</span> <span class="o">!=</span> <span class="n">RELEASED</span><span class="o">)</span> <span class="o">;</span> <span class="c1">// spin</span>
</span></code></pre></td></tr></table></div></figure>


<p>A dequeue operation after this spin simply entails setting the head field to the node that just got the lock:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">head</span> <span class="o">=</span> <span class="n">node</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>新节点入队通过CAS设置<code>tail</code>来实现，当前节点的释放状态取决于前驱节点的状态。自旋结束后出队一个节点会把<code>head</code>设置为这个节点。</p>

<p>AQS的等待队列使用<code>next</code>指针保存了后继节点，用<code>status</code>保存了节点代表的线程的状态，比如可能线程已经取消了等待。</p>

<p>Omitting such details, the general form of the resulting implementation of the basic acquire operation (exclusive,noninterruptible, untimed case only) is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(!</span><span class="n">tryAcquire</span><span class="o">(</span><span class="n">arg</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">node</span> <span class="o">=</span> <span class="n">create</span> <span class="n">and</span> <span class="n">enqueue</span> <span class="k">new</span> <span class="n">node</span><span class="o">;</span>
</span><span class='line'>    <span class="n">pred</span> <span class="o">=</span> <span class="n">node</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">effective</span> <span class="n">predecessor</span><span class="o">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">pred</span> <span class="n">is</span> <span class="n">not</span> <span class="n">head</span> <span class="n">node</span> <span class="o">||</span> <span class="o">!</span><span class="n">tryAcquire</span><span class="o">(</span><span class="n">arg</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">pred</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">signal</span> <span class="n">bit</span> <span class="n">is</span> <span class="n">set</span><span class="o">)</span>
</span><span class='line'>            <span class="n">park</span><span class="o">();</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">compareAndSet</span> <span class="n">pred</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">signal</span> <span class="n">bit</span> <span class="n">to</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="n">pred</span> <span class="o">=</span> <span class="n">node</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">effective</span> <span class="n">predecessor</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">head</span> <span class="o">=</span> <span class="n">node</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the release operation is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">tryRelease</span><span class="o">(</span><span class="n">arg</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">head</span> <span class="n">node</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">signal</span> <span class="n">bit</span> <span class="n">is</span> <span class="n">set</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compareAndSet</span> <span class="n">head</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">signal</span> <span class="n">bit</span> <span class="n">to</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="n">unpark</span> <span class="n">head</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">successor</span><span class="o">,</span> <span class="k">if</span> <span class="n">one</span> <span class="n">exists</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The synchronizer framework provides a <code>ConditionObject</code> class for use by synchronizers that maintain exclusive synchronization and conform to the Lock interface. Any number of condition objects may be attached to a lock object, providing classic monitor-style <code>await</code>, <code>signal</code>, and <code>signalAll</code> operations, including those with timeouts, along with some inspection and monitoring methods.</p>

<p>AQS框架还提供了<code>ConditionObject</code>来提供和内置锁<code>wait/notify/notifyAll</code>类似的<code>await/signal/signalAll</code>功能。</p>

<p>The <code>ConditionObject</code> class enables conditions to be efficiently integrated with other synchronization operations,again by fixing some design decisions. This class supports only Java-style monitor access rules in which condition operations are legal only when the lock owning the condition is held by the current thread. Thus, a <code>ConditionObject</code> attached to a ReentrantLock acts in the same way as do built-in monitors (via <code>Object.wait</code> etc), differing only in method names, extra functionality, and the fact that users can declare multiple conditions per lock.A <code>ConditionObject</code> uses the same internal queue nodes as synchronizers, but maintains them on a separate condition queue.The signal operation is implemented as a queue transfer from the condition queue to the lock queue, without necessarily waking up the signalled thread before it has re-acquired its lock.</p>

<p>The basic await operation is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">create</span> <span class="n">and</span> <span class="n">add</span> <span class="k">new</span> <span class="n">node</span> <span class="n">to</span> <span class="n">condition</span> <span class="n">queue</span><span class="o">;</span>
</span><span class='line'> <span class="n">release</span> <span class="n">lock</span><span class="o">;</span>
</span><span class='line'> <span class="n">block</span> <span class="n">until</span> <span class="n">node</span> <span class="n">is</span> <span class="n">on</span> <span class="n">lock</span> <span class="n">queue</span><span class="o">;</span>
</span><span class='line'> <span class="n">re</span><span class="o">-</span><span class="n">acquire</span> <span class="n">lock</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the signal operation is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">transfer</span> <span class="n">the</span> <span class="n">first</span> <span class="n">node</span> <span class="n">from</span> <span class="n">condition</span> <span class="n">queue</span> <span class="n">to</span> <span class="n">lock</span> <span class="n">queue</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ConditionObject</code>提供和内置锁类似的功能，在一个<code>Lock</code>上可以声明多个<code>ConditionObject</code>。<code>ConditionObject</code>使用condition queue来维护等待队列，condition queue上的节点和lock queue中的节点相同，<code>await</code>是入condition queue，<code>signal</code>是从condition queue中转移到lock queue中。</p>

<p>Because these operations are performed only when the lock is held, they can use sequential linked queue operations (using a <code>nextWaiter</code> field in nodes) to maintain the condition queue.The transfer operation simply unlinks the first node from the condition queue, and then uses CLH insertion to attach it to the lock queue. The main complication in implementing these operations is dealing with cancellation of condition waits due to timeouts or <code>Thread.interrupt</code>. A cancellation and signal occuring at approximately the same time encounter a race whose outcome conforms to the specifications for built-in monitors. As revised in JSR133, these require that if an interrupt occurs before a signal, then the <code>await</code> method must, after re-acquiring the lock, throw <code>InterruptedException</code>. But if it is interrupted after a signal, then the method must return without throwing an exception, but with its thread interrupt status set.</p>

<p>transfer操作是从将condition queue里的第一个节点从condition queue中移除，插入到lock queue中去。如果在<code>signal</code>之前发生了线程中断，那么<code>await</code>必须在重新获取锁之后抛出<code>InterruptedException</code>。如果在<code>signal</code>之后发生了中断，那么线程中断状态将被设置，但是不会抛出异常。</p>

<p>Here are sketches of how java.util.concurrent synchronizer classes are defined using this framework:</p>

<ul>
<li>The <code>ReentrantLock</code> class uses synchronization state to hold the (recursive) lock count. When a lock is acquired, it also records the identity of the current thread to check recursions and detect illegal state exceptions when the wrong thread tries to unlock. The class also uses the provided <code>ConditionObject</code>, and exports other monitoring and inspection methods. The class supports an optional &ldquo;fair&rdquo; mode by internally declaring two different <code>AbstractQueuedSynchronizer</code> subclasses (the fair one disabling barging) and setting each <code>ReentrantLock</code> instance to use the appropriate one upon construction.</li>
<li>The <code>ReentrantReadWriteLock</code> class uses 16 bits of the synchronization state to hold the write lock count, and the remaining 16 bits to hold the read lock count. The <code>WriteLock</code> is otherwise structured in the same way as <code>ReentrantLock</code>.The <code>ReadLock</code> uses the <code>acquireShared</code> methods to enable multiple readers.</li>
<li>The <code>Semaphore</code> class (a counting semaphore) uses the synchronization state to hold the current count. It defines <code>acquireShared</code> to decrement the count or block if nonpositive, and <code>tryRelease</code> to increment the count, possibly unblocking threads if it is now positive.</li>
<li>The <code>CountDownLatch</code> class uses the synchronization state to represent the count. All acquires pass when it reaches zero.</li>
<li>The <code>FutureTask</code> class uses the synchronization state to represent the run-state of a future (initial, running, cancelled,done). Setting or cancelling a future invokes <code>release</code>,unblocking threads waiting for its computed value via <code>acquire</code>.</li>
<li>The <code>SynchronousQueue</code> class (a CSP-style handoff) uses internal wait-nodes that match up producers and consumers. It uses the synchronization state to allow a producer to proceed when a consumer takes the item, and vice-versa.</li>
</ul>


<p>JUC框架中几个使用AQS的同步器类的内部实现。</p>

<h3>reference</h3>

<ul>
<li><a href="https://javadoop.com/post/AbstractQueuedSynchronizer">一行一行源码分析清楚 AbstractQueuedSynchronizer</a></li>
<li><a href="https://javadoop.com/post/AbstractQueuedSynchronizer-2">一行一行源码分析清楚 AbstractQueuedSynchronizer（二）</a></li>
<li><a href="https://javadoop.com/post/AbstractQueuedSynchronizer-3">一行一行源码分析清楚 AbstractQueuedSynchronizer（三）</a></li>
<li><a href="http://ifeve.com/introduce-abstractqueuedsynchronizer/">AbstractQueuedSynchronizer的介绍和原理分析</a></li>
<li><a href="https://www.infoq.cn/article/jdk1.8-abstractqueuedsynchronizer">深度解析 Java 8：JDK1.8 AbstractQueuedSynchronizer 的实现分析（上）</a></li>
<li><a href="https://www.infoq.cn/article/java8-abstractqueuedsynchronizer">深度解析 Java 8：AbstractQueuedSynchronizer 的实现分析（下）</a></li>
<li><a href="https://juejin.im/post/5aeb07ab6fb9a07ac36350c8">深入理解AbstractQueuedSynchronizer(AQS)</a></li>
<li><a href="https://liuzhengyang.github.io/2017/05/12/aqs/">AbstractQueuedSynchronizer使用和源码分析</a></li>
<li><a href="https://www.jianshu.com/p/e7659436538b">AbstractQueuedSynchronizer 源码分析 (基于Java 8)</a></li>
<li><a href="https://segmentfault.com/a/1190000014221325">源码分析JDK8之AbstractQueuedSynchronizer</a></li>
<li><a href="http://gee.cs.oswego.edu/dl/papers/aqs.pdf">aqs.pdf</a></li>
<li><a href="http://www.cs.tau.ac.il/~shanir/nir-pubs-web/Papers/CLH.pdf">CLH.pdf</a></li>
<li><a href="https://coderbee.net/index.php/concurrent/20131115/577">自旋锁、排队自旋锁、MCS锁、CLH锁</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java FutureTask解析]]></title>
    <link href="http://Solarex.github.io/blog/2019/06/28/futuretask/"/>
    <updated>2019-06-28T16:59:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2019/06/28/futuretask</id>
    <content type="html"><![CDATA[<p>本文主要对FutureTask源码进行分析。</p>

<!-- more -->


<p>Java中一般通过继承Thread类或实现Runnable接口来创建线程，但是这两种方式都有个缺陷，就是不能在线程执行完成后获取执行的结果，因此Java1.5之后提供了<code>Callable</code>和<code>Future</code>接口，通过他们就可以在任务执行完成之后获取到任务的执行结果。</p>

<h3>Callable接口</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * A task that returns a result and may throw an exception.</span>
</span><span class='line'><span class="cm"> * Implementors define a single method with no arguments called</span>
</span><span class='line'><span class="cm"> * {@code call}.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;p&gt;The {@code Callable} interface is similar to {@link</span>
</span><span class='line'><span class="cm"> * java.lang.Runnable}, in that both are designed for classes whose</span>
</span><span class='line'><span class="cm"> * instances are potentially executed by another thread.  A</span>
</span><span class='line'><span class="cm"> * {@code Runnable}, however, does not return a result and cannot</span>
</span><span class='line'><span class="cm"> * throw a checked exception.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;p&gt;The {@link Executors} class contains utility methods to</span>
</span><span class='line'><span class="cm"> * convert from other common forms to {@code Callable} classes.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @see Executor</span>
</span><span class='line'><span class="cm"> * @since 1.5</span>
</span><span class='line'><span class="cm"> * @author Doug Lea</span>
</span><span class='line'><span class="cm"> * @param &lt;V&gt; the result type of method {@code call}</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@FunctionalInterface</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Callable</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Computes a result, or throws an exception if unable to do so.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @return computed result</span>
</span><span class='line'><span class="cm">     * @throws Exception if unable to compute a result</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">V</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到<code>Callable</code>是个泛型接口，泛型V代表返回值的类型，执行任务过程中如果有异常会抛出异常。</p>

<h3>Future接口</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * A {@code Future} represents the result of an asynchronous</span>
</span><span class='line'><span class="cm"> * computation.  Methods are provided to check if the computation is</span>
</span><span class='line'><span class="cm"> * complete, to wait for its completion, and to retrieve the result of</span>
</span><span class='line'><span class="cm"> * the computation.  The result can only be retrieved using method</span>
</span><span class='line'><span class="cm"> * {@code get} when the computation has completed, blocking if</span>
</span><span class='line'><span class="cm"> * necessary until it is ready.  Cancellation is performed by the</span>
</span><span class='line'><span class="cm"> * {@code cancel} method.  Additional methods are provided to</span>
</span><span class='line'><span class="cm"> * determine if the task completed normally or was cancelled. Once a</span>
</span><span class='line'><span class="cm"> * computation has completed, the computation cannot be cancelled.</span>
</span><span class='line'><span class="cm"> * If you would like to use a {@code Future} for the sake</span>
</span><span class='line'><span class="cm"> * of cancellability but not provide a usable result, you can</span>
</span><span class='line'><span class="cm"> * declare types of the form {@code Future&lt;?&gt;} and</span>
</span><span class='line'><span class="cm"> * return {@code null} as a result of the underlying task.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;p&gt;</span>
</span><span class='line'><span class="cm"> * &lt;b&gt;Sample Usage&lt;/b&gt; (Note that the following classes are all</span>
</span><span class='line'><span class="cm"> * made-up.)</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;pre&gt; {@code</span>
</span><span class='line'><span class="cm"> * interface ArchiveSearcher { String search(String target); }</span>
</span><span class='line'><span class="cm"> * class App {</span>
</span><span class='line'><span class="cm"> *   ExecutorService executor = ...</span>
</span><span class='line'><span class="cm"> *   ArchiveSearcher searcher = ...</span>
</span><span class='line'><span class="cm"> *   void showSearch(final String target)</span>
</span><span class='line'><span class="cm"> *       throws InterruptedException {</span>
</span><span class='line'><span class="cm"> *     Future&lt;String&gt; future</span>
</span><span class='line'><span class="cm"> *       = executor.submit(new Callable&lt;String&gt;() {</span>
</span><span class='line'><span class="cm"> *         public String call() {</span>
</span><span class='line'><span class="cm"> *             return searcher.search(target);</span>
</span><span class='line'><span class="cm"> *         }});</span>
</span><span class='line'><span class="cm"> *     displayOtherThings(); // do other things while searching</span>
</span><span class='line'><span class="cm"> *     try {</span>
</span><span class='line'><span class="cm"> *       displayText(future.get()); // use future</span>
</span><span class='line'><span class="cm"> *     } catch (ExecutionException ex) { cleanup(); return; }</span>
</span><span class='line'><span class="cm"> *   }</span>
</span><span class='line'><span class="cm"> * }}&lt;/pre&gt;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * The {@link FutureTask} class is an implementation of {@code Future} that</span>
</span><span class='line'><span class="cm"> * implements {@code Runnable}, and so may be executed by an {@code Executor}.</span>
</span><span class='line'><span class="cm"> * For example, the above construction with {@code submit} could be replaced by:</span>
</span><span class='line'><span class="cm"> * &lt;pre&gt; {@code</span>
</span><span class='line'><span class="cm"> * FutureTask&lt;String&gt; future =</span>
</span><span class='line'><span class="cm"> *   new FutureTask&lt;&gt;(new Callable&lt;String&gt;() {</span>
</span><span class='line'><span class="cm"> *     public String call() {</span>
</span><span class='line'><span class="cm"> *       return searcher.search(target);</span>
</span><span class='line'><span class="cm"> *   }});</span>
</span><span class='line'><span class="cm"> * executor.execute(future);}&lt;/pre&gt;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;p&gt;Memory consistency effects: Actions taken by the asynchronous computation</span>
</span><span class='line'><span class="cm"> * &lt;a href=&quot;package-summary.html#MemoryVisibility&quot;&gt; &lt;i&gt;happen-before&lt;/i&gt;&lt;/a&gt;</span>
</span><span class='line'><span class="cm"> * actions following the corresponding {@code Future.get()} in another thread.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @see FutureTask</span>
</span><span class='line'><span class="cm"> * @see Executor</span>
</span><span class='line'><span class="cm"> * @since 1.5</span>
</span><span class='line'><span class="cm"> * @author Doug Lea</span>
</span><span class='line'><span class="cm"> * @param &lt;V&gt; The result type returned by this Future&#39;s {@code get} method</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Future</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Attempts to cancel execution of this task.  This attempt will</span>
</span><span class='line'><span class="cm">     * fail if the task has already completed, has already been cancelled,</span>
</span><span class='line'><span class="cm">     * or could not be cancelled for some other reason. If successful,</span>
</span><span class='line'><span class="cm">     * and this task has not started when {@code cancel} is called,</span>
</span><span class='line'><span class="cm">     * this task should never run.  If the task has already started,</span>
</span><span class='line'><span class="cm">     * then the {@code mayInterruptIfRunning} parameter determines</span>
</span><span class='line'><span class="cm">     * whether the thread executing this task should be interrupted in</span>
</span><span class='line'><span class="cm">     * an attempt to stop the task.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * &lt;p&gt;After this method returns, subsequent calls to {@link #isDone} will</span>
</span><span class='line'><span class="cm">     * always return {@code true}.  Subsequent calls to {@link #isCancelled}</span>
</span><span class='line'><span class="cm">     * will always return {@code true} if this method returned {@code true}.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param mayInterruptIfRunning {@code true} if the thread executing this</span>
</span><span class='line'><span class="cm">     * task should be interrupted; otherwise, in-progress tasks are allowed</span>
</span><span class='line'><span class="cm">     * to complete</span>
</span><span class='line'><span class="cm">     * @return {@code false} if the task could not be cancelled,</span>
</span><span class='line'><span class="cm">     * typically because it has already completed normally;</span>
</span><span class='line'><span class="cm">     * {@code true} otherwise</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">cancel</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">mayInterruptIfRunning</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Returns {@code true} if this task was cancelled before it completed</span>
</span><span class='line'><span class="cm">     * normally.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @return {@code true} if this task was cancelled before it completed</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">isCancelled</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Returns {@code true} if this task completed.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * Completion may be due to normal termination, an exception, or</span>
</span><span class='line'><span class="cm">     * cancellation -- in all of these cases, this method will return</span>
</span><span class='line'><span class="cm">     * {@code true}.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @return {@code true} if this task completed</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="nf">isDone</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Waits if necessary for the computation to complete, and then</span>
</span><span class='line'><span class="cm">     * retrieves its result.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @return the computed result</span>
</span><span class='line'><span class="cm">     * @throws CancellationException if the computation was cancelled</span>
</span><span class='line'><span class="cm">     * @throws ExecutionException if the computation threw an</span>
</span><span class='line'><span class="cm">     * exception</span>
</span><span class='line'><span class="cm">     * @throws InterruptedException if the current thread was interrupted</span>
</span><span class='line'><span class="cm">     * while waiting</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">V</span> <span class="nf">get</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">InterruptedException</span><span class="o">,</span> <span class="n">ExecutionException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Waits if necessary for at most the given time for the computation</span>
</span><span class='line'><span class="cm">     * to complete, and then retrieves its result, if available.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @param timeout the maximum time to wait</span>
</span><span class='line'><span class="cm">     * @param unit the time unit of the timeout argument</span>
</span><span class='line'><span class="cm">     * @return the computed result</span>
</span><span class='line'><span class="cm">     * @throws CancellationException if the computation was cancelled</span>
</span><span class='line'><span class="cm">     * @throws ExecutionException if the computation threw an</span>
</span><span class='line'><span class="cm">     * exception</span>
</span><span class='line'><span class="cm">     * @throws InterruptedException if the current thread was interrupted</span>
</span><span class='line'><span class="cm">     * while waiting</span>
</span><span class='line'><span class="cm">     * @throws TimeoutException if the wait timed out</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">V</span> <span class="nf">get</span><span class="o">(</span><span class="kt">long</span> <span class="n">timeout</span><span class="o">,</span> <span class="n">TimeUnit</span> <span class="n">unit</span><span class="o">)</span>
</span><span class='line'>        <span class="kd">throws</span> <span class="n">InterruptedException</span><span class="o">,</span> <span class="n">ExecutionException</span><span class="o">,</span> <span class="n">TimeoutException</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Future</code>代表任务异步执行的结果，通过<code>Future</code>接口可以查询任务执行的状态，取消任务执行，获取任务执行的结果。</p>

<ul>
<li>cancel方法尝试去取消任务的执行，如果任务已经完成，或者已经取消，或者由于其他原因无法被取消，cancel方法将返回false。如果cancel调用的时候，任务还没开始执行，任务将不被执行，cancel返回true。如果cancel调用的时候，任务已经开始执行，<code>mayInterruptIfRunning</code>决定执行任务的线程是否应该被中断来执行任务的执行。cancel方法调用返回true后，后续的<code>isDone</code>方法总是返回true，后续的<code>isCancelled</code>方法总是返回true。</li>
<li>如果在任务完成之前被取消了，<code>isCancelled</code>方法会返回true。</li>
<li>任务完成后，<code>isDone</code>方法会返回true。无论是正常的结束，抛出异常结束，被取消，<code>isDone</code>都会返回true。</li>
<li>get方法会等待任务执行结束来获取任务执行的结果，如果任务已经执行结束，直接返回结果。可能抛出<code>CancellationException</code>如果任务被取消，<code>ExecutionException</code>如果任务执行过程中抛出了异常，<code>InterruptedException</code>如果当前线程在等待执行任务的线程的执行结果的过程中被中断了。</li>
<li>get(long,TimeUnit)会等待最多设定的时间来获取结果。可能抛出<code>CancellationException</code>如果任务被取消，<code>ExecutionException</code>如果任务执行过程中抛出了异常，<code>InterruptedException</code>如果当前线程在等待执行任务的线程的执行结果的过程中被中断了，<code>TimeoutException</code>如果等待超时了。</li>
</ul>


<h3>FutureTask</h3>

<p><code>Future</code>只是一个接口，<code>FutureTask</code>是<code>Future</code>的实现类。确切的说<code>FutureTask</code>实现了<code>RunnableFuture</code>接口，<code>RunnableFuture</code>接口扩展了<code>Runnable</code>和<code>Future</code>接口。</p>

<h4>FutureTask任务执行的状态</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * The run state of this task, initially NEW.  The run state</span>
</span><span class='line'><span class="cm"> * transitions to a terminal state only in methods set,</span>
</span><span class='line'><span class="cm"> * setException, and cancel.  During completion, state may take on</span>
</span><span class='line'><span class="cm"> * transient values of COMPLETING (while outcome is being set) or</span>
</span><span class='line'><span class="cm"> * INTERRUPTING (only while interrupting the runner to satisfy a</span>
</span><span class='line'><span class="cm"> * cancel(true)). Transitions from these intermediate to final</span>
</span><span class='line'><span class="cm"> * states use cheaper ordered/lazy writes because values are unique</span>
</span><span class='line'><span class="cm"> * and cannot be further modified.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Possible state transitions:</span>
</span><span class='line'><span class="cm"> * NEW -&gt; COMPLETING -&gt; NORMAL</span>
</span><span class='line'><span class="cm"> * NEW -&gt; COMPLETING -&gt; EXCEPTIONAL</span>
</span><span class='line'><span class="cm"> * NEW -&gt; CANCELLED</span>
</span><span class='line'><span class="cm"> * NEW -&gt; INTERRUPTING -&gt; INTERRUPTED</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">volatile</span> <span class="kt">int</span> <span class="n">state</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">NEW</span>          <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">COMPLETING</span>   <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">NORMAL</span>       <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">EXCEPTIONAL</span>  <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">CANCELLED</span>    <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">INTERRUPTING</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">INTERRUPTED</span>  <span class="o">=</span> <span class="mi">6</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到<code>FutureTask</code>使用<code>volatile</code>变量<code>state</code>来表示任务执行的状态，初始时是<code>NEW</code>，在<code>set</code>，<code>setException</code>和<code>cancel</code>方法中会对<code>state</code>进行赋值。可能的状态转换有<code>NEW -&gt; COMPLETING -&gt; NORMAL</code>，<code>NEW -&gt; COMPLETING -&gt; EXCEPTIONAL</code>，<code>NEW -&gt; CANCELLED</code>，<code>NEW -&gt; INTERRUPTING -&gt; INTERRUPTED</code>。</p>

<h4>FutureTask内部变量</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/** The underlying callable; nulled out after running */</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">callable</span><span class="o">;</span>
</span><span class='line'><span class="cm">/** The result to return or exception to throw from get() */</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Object</span> <span class="n">outcome</span><span class="o">;</span> <span class="c1">// non-volatile, protected by state reads/writes</span>
</span><span class='line'><span class="cm">/** The thread running the callable; CASed during run() */</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">volatile</span> <span class="n">Thread</span> <span class="n">runner</span><span class="o">;</span>
</span><span class='line'><span class="cm">/** Treiber stack of waiting threads */</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">volatile</span> <span class="n">WaitNode</span> <span class="n">waiters</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>callable</code>表示将要执行的任务，<code>volatile</code>类型的变量<code>runner</code>表示执行任务的线程，<code>waiters</code>表示等待任务执行结果的线程队列。任务执行的结果用Object类型的<code>outcome</code>表示，可以看到并没有用<code>volatile</code>关键字来修饰，那不会有可见性问题吗？这个问题后面我们会提到。</p>

<h4>FutureTask任务执行run</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">!=</span> <span class="n">NEW</span> <span class="o">||</span>
</span><span class='line'>            <span class="o">!</span><span class="n">U</span><span class="o">.</span><span class="na">compareAndSwapObject</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">RUNNER</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">()))</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Callable</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">callable</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">state</span> <span class="o">==</span> <span class="n">NEW</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">V</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>                <span class="kt">boolean</span> <span class="n">ran</span><span class="o">;</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">result</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="na">call</span><span class="o">();</span>
</span><span class='line'>                    <span class="n">ran</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">result</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">ran</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">setException</span><span class="o">(</span><span class="n">ex</span><span class="o">);</span> <span class="c1">// 任务执行抛出异常走setException</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">ran</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">set</span><span class="o">(</span><span class="n">result</span><span class="o">);</span> <span class="c1">// 任务正常执行完成走set</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// runner must be non-null until state is settled to</span>
</span><span class='line'>            <span class="c1">// prevent concurrent calls to run()</span>
</span><span class='line'>            <span class="n">runner</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="c1">// state must be re-read after nulling runner to prevent</span>
</span><span class='line'>            <span class="c1">// leaked interrupts</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">&gt;=</span> <span class="n">INTERRUPTING</span><span class="o">)</span>
</span><span class='line'>                <span class="n">handlePossibleCancellationInterrupt</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>run</code>方法首先对状态进行判断，并尝试CAS替换<code>runner</code>为当前线程，如果失败，表明已经有线程在执行任务了，直接返回，否则执行任务，如果任务执行过程中抛出了异常，走<code>setException</code>分支，如果任务正常结束，走<code>set</code>分支，下面看下这两个方法。</p>

<h4>FutureTask的set和setException方法</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Sets the result of this future to the given value unless</span>
</span><span class='line'><span class="cm"> * this future has already been set or has been cancelled.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;p&gt;This method is invoked internally by the {@link #run} method</span>
</span><span class='line'><span class="cm"> * upon successful completion of the computation.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param v the value</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="n">V</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">U</span><span class="o">.</span><span class="na">compareAndSwapInt</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">STATE</span><span class="o">,</span> <span class="n">NEW</span><span class="o">,</span> <span class="n">COMPLETING</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">outcome</span> <span class="o">=</span> <span class="n">v</span><span class="o">;</span>
</span><span class='line'>        <span class="n">U</span><span class="o">.</span><span class="na">putOrderedInt</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">STATE</span><span class="o">,</span> <span class="n">NORMAL</span><span class="o">);</span> <span class="c1">// final state</span>
</span><span class='line'>        <span class="n">finishCompletion</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Removes and signals all waiting threads, invokes done(), and</span>
</span><span class='line'><span class="cm"> * nulls out callable.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">finishCompletion</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// assert state &gt; COMPLETING;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">WaitNode</span> <span class="n">q</span><span class="o">;</span> <span class="o">(</span><span class="n">q</span> <span class="o">=</span> <span class="n">waiters</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">U</span><span class="o">.</span><span class="na">compareAndSwapObject</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">WAITERS</span><span class="o">,</span> <span class="n">q</span><span class="o">,</span> <span class="kc">null</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(;;)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">thread</span><span class="o">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">t</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">q</span><span class="o">.</span><span class="na">thread</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">LockSupport</span><span class="o">.</span><span class="na">unpark</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">WaitNode</span> <span class="n">next</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">next</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                    <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                <span class="n">q</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">// unlink to help gc</span>
</span><span class='line'>                <span class="n">q</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">done</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">callable</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>        <span class="c1">// to reduce footprint</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Causes this future to report an {@link ExecutionException}</span>
</span><span class='line'><span class="cm"> * with the given throwable as its cause, unless this future has</span>
</span><span class='line'><span class="cm"> * already been set or has been cancelled.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;p&gt;This method is invoked internally by the {@link #run} method</span>
</span><span class='line'><span class="cm"> * upon failure of the computation.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param t the cause of failure</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">setException</span><span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">U</span><span class="o">.</span><span class="na">compareAndSwapInt</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">STATE</span><span class="o">,</span> <span class="n">NEW</span><span class="o">,</span> <span class="n">COMPLETING</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">outcome</span> <span class="o">=</span> <span class="n">t</span><span class="o">;</span>
</span><span class='line'>        <span class="n">U</span><span class="o">.</span><span class="na">putOrderedInt</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">STATE</span><span class="o">,</span> <span class="n">EXCEPTIONAL</span><span class="o">);</span> <span class="c1">// final state</span>
</span><span class='line'>        <span class="n">finishCompletion</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到<code>set</code>和<code>setException</code>方法都是CAS对<code>state</code>进行赋值，并对<code>outcome</code>进行赋值，同时调用<code>finishCompletion</code>方法唤醒等待队列中的线程去获取任务执行的结果。在这里可以看到对<code>outcome</code>的写发生在对<code>volatile</code>变量<code>state</code>写之前，因此保证了<code>state</code>为<code>NORMAL</code>或<code>EXCEPTIONAL</code>时<code>outcome</code>变量的可见性。在<code>finishCompletion</code>中可以看到是对等待队列上的线程进行唤醒操作，那么这些线程是什么时候进行等待队列并阻塞的呢，接下来看<code>get</code>方法。</p>

<h4>FutureTask的get方法</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @throws CancellationException {@inheritDoc}</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="n">V</span> <span class="nf">get</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">InterruptedException</span><span class="o">,</span> <span class="n">ExecutionException</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">&lt;=</span> <span class="n">COMPLETING</span><span class="o">)</span>
</span><span class='line'>        <span class="n">s</span> <span class="o">=</span> <span class="n">awaitDone</span><span class="o">(</span><span class="kc">false</span><span class="o">,</span> <span class="mi">0L</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">report</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * @throws CancellationException {@inheritDoc}</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="n">V</span> <span class="nf">get</span><span class="o">(</span><span class="kt">long</span> <span class="n">timeout</span><span class="o">,</span> <span class="n">TimeUnit</span> <span class="n">unit</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">throws</span> <span class="n">InterruptedException</span><span class="o">,</span> <span class="n">ExecutionException</span><span class="o">,</span> <span class="n">TimeoutException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">unit</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">&lt;=</span> <span class="n">COMPLETING</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>        <span class="o">(</span><span class="n">s</span> <span class="o">=</span> <span class="n">awaitDone</span><span class="o">(</span><span class="kc">true</span><span class="o">,</span> <span class="n">unit</span><span class="o">.</span><span class="na">toNanos</span><span class="o">(</span><span class="n">timeout</span><span class="o">)))</span> <span class="o">&lt;=</span> <span class="n">COMPLETING</span><span class="o">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">TimeoutException</span><span class="o">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">report</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Awaits completion or aborts on interrupt or timeout.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param timed true if use timed waits</span>
</span><span class='line'><span class="cm"> * @param nanos time to wait, if timed</span>
</span><span class='line'><span class="cm"> * @return state upon completion or at timeout</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">int</span> <span class="nf">awaitDone</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">timed</span><span class="o">,</span> <span class="kt">long</span> <span class="n">nanos</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// The code below is very delicate, to achieve these goals:</span>
</span><span class='line'>    <span class="c1">// - call nanoTime exactly once for each call to park</span>
</span><span class='line'>    <span class="c1">// - if nanos &lt;= 0L, return promptly without allocation or nanoTime</span>
</span><span class='line'>    <span class="c1">// - if nanos == Long.MIN_VALUE, don&#39;t underflow</span>
</span><span class='line'>    <span class="c1">// - if nanos == Long.MAX_VALUE, and nanoTime is non-monotonic</span>
</span><span class='line'>    <span class="c1">//   and we suffer a spurious wakeup, we will do no worse than</span>
</span><span class='line'>    <span class="c1">//   to park-spin for a while</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">startTime</span> <span class="o">=</span> <span class="mi">0L</span><span class="o">;</span>    <span class="c1">// Special value 0L means not yet parked</span>
</span><span class='line'>    <span class="n">WaitNode</span> <span class="n">q</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">queued</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(;;)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">&gt;</span> <span class="n">COMPLETING</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">q</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                <span class="n">q</span><span class="o">.</span><span class="na">thread</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">s</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="n">COMPLETING</span><span class="o">)</span>
</span><span class='line'>            <span class="c1">// We may have already promised (via isDone) that we are done</span>
</span><span class='line'>            <span class="c1">// so never return empty-handed or throw InterruptedException</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">yield</span><span class="o">();</span>
</span><span class='line'>        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">interrupted</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">removeWaiter</span><span class="o">(</span><span class="n">q</span><span class="o">);</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">InterruptedException</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">q</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">timed</span> <span class="o">&amp;&amp;</span> <span class="n">nanos</span> <span class="o">&lt;=</span> <span class="mi">0L</span><span class="o">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">s</span><span class="o">;</span>
</span><span class='line'>            <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WaitNode</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="nf">if</span> <span class="o">(!</span><span class="n">queued</span><span class="o">)</span>
</span><span class='line'>            <span class="n">queued</span> <span class="o">=</span> <span class="n">U</span><span class="o">.</span><span class="na">compareAndSwapObject</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">WAITERS</span><span class="o">,</span>
</span><span class='line'>                                            <span class="n">q</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">waiters</span><span class="o">,</span> <span class="n">q</span><span class="o">);</span>
</span><span class='line'>        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">timed</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">final</span> <span class="kt">long</span> <span class="n">parkNanos</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">startTime</span> <span class="o">==</span> <span class="mi">0L</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// first time</span>
</span><span class='line'>                <span class="n">startTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">startTime</span> <span class="o">==</span> <span class="mi">0L</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">startTime</span> <span class="o">=</span> <span class="mi">1L</span><span class="o">;</span>
</span><span class='line'>                <span class="n">parkNanos</span> <span class="o">=</span> <span class="n">nanos</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="kt">long</span> <span class="n">elapsed</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">()</span> <span class="o">-</span> <span class="n">startTime</span><span class="o">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">elapsed</span> <span class="o">&gt;=</span> <span class="n">nanos</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">removeWaiter</span><span class="o">(</span><span class="n">q</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">state</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">parkNanos</span> <span class="o">=</span> <span class="n">nanos</span> <span class="o">-</span> <span class="n">elapsed</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="c1">// nanoTime may be slow; recheck before parking</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">&lt;</span> <span class="n">COMPLETING</span><span class="o">)</span>
</span><span class='line'>                <span class="n">LockSupport</span><span class="o">.</span><span class="na">parkNanos</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">parkNanos</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">LockSupport</span><span class="o">.</span><span class="na">park</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Returns result or throws exception for completed task.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param s completed state value</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;unchecked&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">private</span> <span class="n">V</span> <span class="nf">report</span><span class="o">(</span><span class="kt">int</span> <span class="n">s</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ExecutionException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Object</span> <span class="n">x</span> <span class="o">=</span> <span class="n">outcome</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="n">NORMAL</span><span class="o">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">V</span><span class="o">)</span><span class="n">x</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">&gt;=</span> <span class="n">CANCELLED</span><span class="o">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">CancellationException</span><span class="o">();</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">ExecutionException</span><span class="o">((</span><span class="n">Throwable</span><span class="o">)</span><span class="n">x</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到<code>get</code>的两个方法都是调用了<code>awaitDone</code>方法，下面重点看下<code>awaitDone</code>方法。</p>

<p><code>awaitDone</code>方法里面有个for死循环，退出循环的只有<code>state &gt; COMPLETING</code>时<code>return state</code>，或者是在<code>Thread.interrupted()</code>返回true表示线程被中断时将线程从等待队列中移除并抛出<code>InterruptedException</code>。</p>

<p>进入for循环的时候如果任务的状态已经完成或者任务执行的时候抛出了异常，也即<code>state &gt; COMPLETING</code>时，直接返回<code>state</code>，在<code>set</code>或者<code>setException</code>中会根据<code>state</code>进行<code>report</code>调用返回不同的状态。</p>

<p>在for循环中如果当前线程被中断，则将当前线程从等待队列中移除并抛出<code>InterruptedException</code>异常。</p>

<p>如果任务的状态<code>state &lt; COMPLETING</code>也即任务正在执行，当前线程也没有被中断，第一次进入for循环的时候会进入<code>q == null</code>分支，创建<code>WaitNode</code>节点。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Simple linked list nodes to record waiting threads in a Treiber</span>
</span><span class='line'><span class="cm">     * stack.  See other classes such as Phaser and SynchronousQueue</span>
</span><span class='line'><span class="cm">     * for more detailed explanation.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">WaitNode</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">volatile</span> <span class="n">Thread</span> <span class="n">thread</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">volatile</span> <span class="n">WaitNode</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>        <span class="n">WaitNode</span><span class="o">()</span> <span class="o">{</span> <span class="n">thread</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">();</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下次再进入for循环会进入<code>!queued</code>分支，尝试将刚创建的<code>WaitNode</code>节点的next指针指向<code>FutureTask</code>的<code>waiters</code>，并CAS替换<code>FutureTask</code>的<code>waiters</code>为刚创建的<code>WaitNode</code>节点，如果CAS失败，说明有其他线程也在进行CAS替换<code>FutureTask</code>的<code>waiters</code>的操作，并且成功了，下次再进for循环继续进行这个CAS操作，直到返回true，<code>queued</code>为true为止。到此，线程进入到了等待队列中，下次再进入for循环会根据是否<code>timed</code>来进行<code>LockSupport.parkNanos</code>或<code>LockSupport.park</code>阻塞线程操作，等待其他线程<code>unpark</code>来唤醒当前线程。那什么时候唤醒呢，其实在分析<code>run</code>方法的时候我们已经看到了在执行完后会进行<code>finishCompletion</code>操作，在<code>finishCompletion</code>方法中会唤醒等待队列中的线程。</p>

<h4>FutureTask的cancel方法</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">cancel</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">mayInterruptIfRunning</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!(</span><span class="n">state</span> <span class="o">==</span> <span class="n">NEW</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>              <span class="n">U</span><span class="o">.</span><span class="na">compareAndSwapInt</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">STATE</span><span class="o">,</span> <span class="n">NEW</span><span class="o">,</span>
</span><span class='line'>                  <span class="n">mayInterruptIfRunning</span> <span class="o">?</span> <span class="n">INTERRUPTING</span> <span class="o">:</span> <span class="n">CANCELLED</span><span class="o">)))</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>    <span class="c1">// in case call to interrupt throws exception</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">mayInterruptIfRunning</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="n">runner</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">t</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                        <span class="n">t</span><span class="o">.</span><span class="na">interrupt</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span> <span class="c1">// final state</span>
</span><span class='line'>                    <span class="n">U</span><span class="o">.</span><span class="na">putOrderedInt</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">STATE</span><span class="o">,</span> <span class="n">INTERRUPTED</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">finishCompletion</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果<code>state == NEW &amp;&amp; U.compareAndSwapInt(this, STATE, NEW,mayInterruptIfRunning ? INTERRUPTING : CANCELLED)</code>返回false说明任务的<code>state</code>已经不是<code>NEW</code>了，直接返回false。否则根据<code>mayInterruptIfRunning</code>来对执行任务的线程<code>runner</code>进行中断操作。最后在<code>finally</code>块中进行了<code>finishCompletion</code>操作，来唤醒等待队列中的线程。</p>

<h4>FutureTask的runAndReset方法</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Executes the computation without setting its result, and then</span>
</span><span class='line'><span class="cm"> * resets this future to initial state, failing to do so if the</span>
</span><span class='line'><span class="cm"> * computation encounters an exception or is cancelled.  This is</span>
</span><span class='line'><span class="cm"> * designed for use with tasks that intrinsically execute more</span>
</span><span class='line'><span class="cm"> * than once.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @return {@code true} if successfully run and reset</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">runAndReset</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">!=</span> <span class="n">NEW</span> <span class="o">||</span>
</span><span class='line'>        <span class="o">!</span><span class="n">U</span><span class="o">.</span><span class="na">compareAndSwapObject</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">RUNNER</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">()))</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">ran</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Callable</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">callable</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">s</span> <span class="o">==</span> <span class="n">NEW</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">c</span><span class="o">.</span><span class="na">call</span><span class="o">();</span> <span class="c1">// don&#39;t set result</span>
</span><span class='line'>                <span class="n">ran</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">setException</span><span class="o">(</span><span class="n">ex</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// runner must be non-null until state is settled to</span>
</span><span class='line'>        <span class="c1">// prevent concurrent calls to run()</span>
</span><span class='line'>        <span class="n">runner</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="c1">// state must be re-read after nulling runner to prevent</span>
</span><span class='line'>        <span class="c1">// leaked interrupts</span>
</span><span class='line'>        <span class="n">s</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">&gt;=</span> <span class="n">INTERRUPTING</span><span class="o">)</span>
</span><span class='line'>            <span class="n">handlePossibleCancellationInterrupt</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ran</span> <span class="o">&amp;&amp;</span> <span class="n">s</span> <span class="o">==</span> <span class="n">NEW</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>runAndReset</code>方法相比<code>run</code>方法是在调用完<code>callable</code>的<code>call</code>方法后没有调用<code>set(result)</code>，没有对<code>state</code>任务状态进行转换，没有对<code>outcome</code>进行赋值，如果任务正常执行结束，<code>state</code>应该还是<code>NEW</code>，因此可以被重复调用。</p>

<h4>FutureTask的isCancelled和isDone方法</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isCancelled</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">state</span> <span class="o">&gt;=</span> <span class="n">CANCELLED</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isDone</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">state</span> <span class="o">!=</span> <span class="n">NEW</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>都是对<code>state</code>的判断</p>

<h3>reference</h3>

<ul>
<li><a href="https://stackoverflow.com/questions/14432400/why-outcome-object-in-futuretask-is-non-volatile">why outcome object in FutureTask is non-volatile?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Thread解析]]></title>
    <link href="http://Solarex.github.io/blog/2019/05/28/thread/"/>
    <updated>2019-05-28T16:58:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2019/05/28/thread</id>
    <content type="html"><![CDATA[<p>本文主要分析Android平台上的Thread类源码，分为Java部分和native部分。</p>

<!-- more -->


<p>Java部分比较简单，大致过下各个方法吧。</p>

<h3>线程创建</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Initializes a Thread.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param g the Thread group</span>
</span><span class='line'><span class="cm"> * @param target the object whose run() method gets called</span>
</span><span class='line'><span class="cm"> * @param name the name of the new Thread</span>
</span><span class='line'><span class="cm"> * @param stackSize the desired stack size for the new thread, or</span>
</span><span class='line'><span class="cm"> *        zero to indicate that this parameter is to be ignored.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="n">ThreadGroup</span> <span class="n">g</span><span class="o">,</span> <span class="n">Runnable</span> <span class="n">target</span><span class="o">,</span> <span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">long</span> <span class="n">stackSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Thread</span> <span class="n">parent</span> <span class="o">=</span> <span class="n">currentThread</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">g</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">g</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">getThreadGroup</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">g</span><span class="o">.</span><span class="na">addUnstarted</span><span class="o">();</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">group</span> <span class="o">=</span> <span class="n">g</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">target</span> <span class="o">=</span> <span class="n">target</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">priority</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">getPriority</span><span class="o">();</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">daemon</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">isDaemon</span><span class="o">();</span>
</span><span class='line'>    <span class="n">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">init2</span><span class="o">(</span><span class="n">parent</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Stash the specified stack size in case the VM cares */</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">stackSize</span> <span class="o">=</span> <span class="n">stackSize</span><span class="o">;</span>
</span><span class='line'>    <span class="n">tid</span> <span class="o">=</span> <span class="n">nextThreadID</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">init2</span><span class="o">(</span><span class="n">Thread</span> <span class="n">parent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">contextClassLoader</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">getContextClassLoader</span><span class="o">();</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">inheritedAccessControlContext</span> <span class="o">=</span> <span class="n">AccessController</span><span class="o">.</span><span class="na">getContext</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">parent</span><span class="o">.</span><span class="na">inheritableThreadLocals</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">inheritableThreadLocals</span> <span class="o">=</span> <span class="n">ThreadLocal</span><span class="o">.</span><span class="na">createInheritedMap</span><span class="o">(</span>
</span><span class='line'>                <span class="n">parent</span><span class="o">.</span><span class="na">inheritableThreadLocals</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>线程<code>NEW</code>出来的时候只是从创建它的线程那里继承一些属性，比如threadgroup，daemon状态，priority，stacksize，inheritableThreadLocals之类的。真正启动线程是在<code>start</code>方法里。</p>

<h3>线程启动</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Causes this thread to begin execution; the Java Virtual Machine</span>
</span><span class='line'><span class="cm">     * calls the &lt;code&gt;run&lt;/code&gt; method of this thread.</span>
</span><span class='line'><span class="cm">     * &lt;p&gt;</span>
</span><span class='line'><span class="cm">     * The result is that two threads are running concurrently: the</span>
</span><span class='line'><span class="cm">     * current thread (which returns from the call to the</span>
</span><span class='line'><span class="cm">     * &lt;code&gt;start&lt;/code&gt; method) and the other thread (which executes its</span>
</span><span class='line'><span class="cm">     * &lt;code&gt;run&lt;/code&gt; method).</span>
</span><span class='line'><span class="cm">     * &lt;p&gt;</span>
</span><span class='line'><span class="cm">     * It is never legal to start a thread more than once.</span>
</span><span class='line'><span class="cm">     * In particular, a thread may not be restarted once it has completed</span>
</span><span class='line'><span class="cm">     * execution.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @exception  IllegalThreadStateException  if the thread was already</span>
</span><span class='line'><span class="cm">     *               started.</span>
</span><span class='line'><span class="cm">     * @see        #run()</span>
</span><span class='line'><span class="cm">     * @see        #stop()</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * This method is not invoked for the main method thread or &quot;system&quot;</span>
</span><span class='line'><span class="cm">         * group threads created/set up by the VM. Any new functionality added</span>
</span><span class='line'><span class="cm">         * to this method in the future may have to also be added to the VM.</span>
</span><span class='line'><span class="cm">         *</span>
</span><span class='line'><span class="cm">         * A zero status value corresponds to state &quot;NEW&quot;.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="c1">// Android-changed: throw if &#39;started&#39; is true</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">threadStatus</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">started</span><span class="o">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalThreadStateException</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* Notify the group that this thread is about to be started</span>
</span><span class='line'><span class="cm">         * so that it can be added to the group&#39;s list of threads</span>
</span><span class='line'><span class="cm">         * and the group&#39;s unstarted count can be decremented. */</span>
</span><span class='line'>        <span class="n">group</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">started</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">nativeCreate</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">stackSize</span><span class="o">,</span> <span class="n">daemon</span><span class="o">);</span>
</span><span class='line'>            <span class="n">started</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(!</span><span class="n">started</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">group</span><span class="o">.</span><span class="na">threadStartFailed</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">ignore</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="cm">/* do nothing. If start0 threw a Throwable then</span>
</span><span class='line'><span class="cm">                  it will be passed up the call stack */</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">native</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">nativeCreate</span><span class="o">(</span><span class="n">Thread</span> <span class="n">t</span><span class="o">,</span> <span class="kt">long</span> <span class="n">stackSize</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">daemon</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// http://androidxref.com/9.0.0_r3/xref/art/runtime/thread.cc#623</span>
</span><span class='line'><span class="kt">void</span> <span class="n">Thread</span><span class="o">::</span><span class="n">CreateNativeThread</span><span class="p">(</span><span class="n">JNIEnv</span><span class="o">*</span> <span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">java_peer</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">stack_size</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">is_daemon</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">CHECK</span><span class="p">(</span><span class="n">java_peer</span> <span class="o">!=</span> <span class="n">nullptr</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Thread</span><span class="o">*</span> <span class="n">self</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">JNIEnvExt</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetSelf</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">VLOG_IS_ON</span><span class="p">(</span><span class="n">threads</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ScopedObjectAccess</span> <span class="n">soa</span><span class="p">(</span><span class="n">env</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ArtField</span><span class="o">*</span> <span class="n">f</span> <span class="o">=</span> <span class="n">jni</span><span class="o">::</span><span class="n">DecodeArtField</span><span class="p">(</span><span class="n">WellKnownClasses</span><span class="o">::</span><span class="n">java_lang_Thread_name</span><span class="p">);</span>
</span><span class='line'>    <span class="n">ObjPtr</span><span class="o">&lt;</span><span class="n">mirror</span><span class="o">::</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">java_name</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">f</span><span class="o">-&gt;</span><span class="n">GetObject</span><span class="p">(</span><span class="n">soa</span><span class="p">.</span><span class="n">Decode</span><span class="o">&lt;</span><span class="n">mirror</span><span class="o">::</span><span class="n">Object</span><span class="o">&gt;</span><span class="p">(</span><span class="n">java_peer</span><span class="p">))</span><span class="o">-&gt;</span><span class="n">AsString</span><span class="p">();</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">thread_name</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">java_name</span> <span class="o">!=</span> <span class="n">nullptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">thread_name</span> <span class="o">=</span> <span class="n">java_name</span><span class="o">-&gt;</span><span class="n">ToModifiedUtf8</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">thread_name</span> <span class="o">=</span> <span class="s">&quot;(Unnamed)&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">VLOG</span><span class="p">(</span><span class="n">threads</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Creating native thread for &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">thread_name</span><span class="p">;</span>
</span><span class='line'>    <span class="n">self</span><span class="o">-&gt;</span><span class="n">Dump</span><span class="p">(</span><span class="n">LOG_STREAM</span><span class="p">(</span><span class="n">INFO</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Runtime</span><span class="o">*</span> <span class="n">runtime</span> <span class="o">=</span> <span class="n">Runtime</span><span class="o">::</span><span class="n">Current</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Atomically start the birth of the thread ensuring the runtime isn&#39;t shutting down.</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">thread_start_during_shutdown</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">MutexLock</span> <span class="n">mu</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="n">Locks</span><span class="o">::</span><span class="n">runtime_shutdown_lock_</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">runtime</span><span class="o">-&gt;</span><span class="n">IsShuttingDownLocked</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">thread_start_during_shutdown</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">runtime</span><span class="o">-&gt;</span><span class="n">StartThreadBirth</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">thread_start_during_shutdown</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ScopedLocalRef</span><span class="o">&lt;</span><span class="n">jclass</span><span class="o">&gt;</span> <span class="n">error_class</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">FindClass</span><span class="p">(</span><span class="s">&quot;java/lang/InternalError&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">env</span><span class="o">-&gt;</span><span class="n">ThrowNew</span><span class="p">(</span><span class="n">error_class</span><span class="p">.</span><span class="n">get</span><span class="p">(),</span> <span class="s">&quot;Thread starting during runtime shutdown&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Thread</span><span class="o">*</span> <span class="n">child_thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="p">(</span><span class="n">is_daemon</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// Use global JNI ref to hold peer live while child thread starts.</span>
</span><span class='line'>  <span class="n">child_thread</span><span class="o">-&gt;</span><span class="n">tlsPtr_</span><span class="p">.</span><span class="n">jpeer</span> <span class="o">=</span> <span class="n">env</span><span class="o">-&gt;</span><span class="n">NewGlobalRef</span><span class="p">(</span><span class="n">java_peer</span><span class="p">);</span>
</span><span class='line'>  <span class="n">stack_size</span> <span class="o">=</span> <span class="n">FixStackSize</span><span class="p">(</span><span class="n">stack_size</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Thread.start is synchronized, so we know that nativePeer is 0, and know that we&#39;re not racing</span>
</span><span class='line'>  <span class="c1">// to assign it.</span>
</span><span class='line'>  <span class="n">env</span><span class="o">-&gt;</span><span class="n">SetLongField</span><span class="p">(</span><span class="n">java_peer</span><span class="p">,</span> <span class="n">WellKnownClasses</span><span class="o">::</span><span class="n">java_lang_Thread_nativePeer</span><span class="p">,</span>
</span><span class='line'>                    <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">jlong</span><span class="o">&gt;</span><span class="p">(</span><span class="n">child_thread</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Try to allocate a JNIEnvExt for the thread. We do this here as we might be out of memory and</span>
</span><span class='line'>  <span class="c1">// do not have a good way to report this on the child&#39;s side.</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">error_msg</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">JNIEnvExt</span><span class="o">&gt;</span> <span class="n">child_jni_env_ext</span><span class="p">(</span>
</span><span class='line'>      <span class="n">JNIEnvExt</span><span class="o">::</span><span class="n">Create</span><span class="p">(</span><span class="n">child_thread</span><span class="p">,</span> <span class="n">Runtime</span><span class="o">::</span><span class="n">Current</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">GetJavaVM</span><span class="p">(),</span> <span class="o">&amp;</span><span class="n">error_msg</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">pthread_create_result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">child_jni_env_ext</span><span class="p">.</span><span class="n">get</span><span class="p">()</span> <span class="o">!=</span> <span class="n">nullptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">pthread_t</span> <span class="n">new_pthread</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pthread_attr_t</span> <span class="n">attr</span><span class="p">;</span>
</span><span class='line'>    <span class="n">child_thread</span><span class="o">-&gt;</span><span class="n">tlsPtr_</span><span class="p">.</span><span class="n">tmp_jni_env</span> <span class="o">=</span> <span class="n">child_jni_env_ext</span><span class="p">.</span><span class="n">get</span><span class="p">();</span>
</span><span class='line'>    <span class="n">CHECK_PTHREAD_CALL</span><span class="p">(</span><span class="n">pthread_attr_init</span><span class="p">,</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">attr</span><span class="p">),</span> <span class="s">&quot;new thread&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CHECK_PTHREAD_CALL</span><span class="p">(</span><span class="n">pthread_attr_setdetachstate</span><span class="p">,</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">attr</span><span class="p">,</span> <span class="n">PTHREAD_CREATE_DETACHED</span><span class="p">),</span>
</span><span class='line'>                       <span class="s">&quot;PTHREAD_CREATE_DETACHED&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CHECK_PTHREAD_CALL</span><span class="p">(</span><span class="n">pthread_attr_setstacksize</span><span class="p">,</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">attr</span><span class="p">,</span> <span class="n">stack_size</span><span class="p">),</span> <span class="n">stack_size</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pthread_create_result</span> <span class="o">=</span> <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">new_pthread</span><span class="p">,</span>
</span><span class='line'>                                           <span class="o">&amp;</span><span class="n">attr</span><span class="p">,</span>
</span><span class='line'>                                           <span class="n">Thread</span><span class="o">::</span><span class="n">CreateCallback</span><span class="p">,</span>
</span><span class='line'>                                           <span class="n">child_thread</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CHECK_PTHREAD_CALL</span><span class="p">(</span><span class="n">pthread_attr_destroy</span><span class="p">,</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">attr</span><span class="p">),</span> <span class="s">&quot;new thread&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">pthread_create_result</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// pthread_create started the new thread. The child is now responsible for managing the</span>
</span><span class='line'>      <span class="c1">// JNIEnvExt we created.</span>
</span><span class='line'>      <span class="c1">// Note: we can&#39;t check for tmp_jni_env == nullptr, as that would require synchronization</span>
</span><span class='line'>      <span class="c1">//       between the threads.</span>
</span><span class='line'>      <span class="n">child_jni_env_ext</span><span class="p">.</span><span class="n">release</span><span class="p">();</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Either JNIEnvExt::Create or pthread_create(3) failed, so clean up.</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">MutexLock</span> <span class="n">mu</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="n">Locks</span><span class="o">::</span><span class="n">runtime_shutdown_lock_</span><span class="p">);</span>
</span><span class='line'>    <span class="n">runtime</span><span class="o">-&gt;</span><span class="n">EndThreadBirth</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// Manually delete the global reference since Thread::Init will not have been run.</span>
</span><span class='line'>  <span class="n">env</span><span class="o">-&gt;</span><span class="n">DeleteGlobalRef</span><span class="p">(</span><span class="n">child_thread</span><span class="o">-&gt;</span><span class="n">tlsPtr_</span><span class="p">.</span><span class="n">jpeer</span><span class="p">);</span>
</span><span class='line'>  <span class="n">child_thread</span><span class="o">-&gt;</span><span class="n">tlsPtr_</span><span class="p">.</span><span class="n">jpeer</span> <span class="o">=</span> <span class="n">nullptr</span><span class="p">;</span>
</span><span class='line'>  <span class="k">delete</span> <span class="n">child_thread</span><span class="p">;</span>
</span><span class='line'>  <span class="n">child_thread</span> <span class="o">=</span> <span class="n">nullptr</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// TODO: remove from thread group?</span>
</span><span class='line'>  <span class="n">env</span><span class="o">-&gt;</span><span class="n">SetLongField</span><span class="p">(</span><span class="n">java_peer</span><span class="p">,</span> <span class="n">WellKnownClasses</span><span class="o">::</span><span class="n">java_lang_Thread_nativePeer</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">msg</span><span class="p">(</span><span class="n">child_jni_env_ext</span><span class="p">.</span><span class="n">get</span><span class="p">()</span> <span class="o">==</span> <span class="n">nullptr</span> <span class="o">?</span>
</span><span class='line'>        <span class="n">StringPrintf</span><span class="p">(</span><span class="s">&quot;Could not allocate JNI Env: %s&quot;</span><span class="p">,</span> <span class="n">error_msg</span><span class="p">.</span><span class="n">c_str</span><span class="p">())</span> <span class="o">:</span>
</span><span class='line'>        <span class="n">StringPrintf</span><span class="p">(</span><span class="s">&quot;pthread_create (%s stack) failed: %s&quot;</span><span class="p">,</span>
</span><span class='line'>                                 <span class="n">PrettySize</span><span class="p">(</span><span class="n">stack_size</span><span class="p">).</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">strerror</span><span class="p">(</span><span class="n">pthread_create_result</span><span class="p">)));</span>
</span><span class='line'>    <span class="n">ScopedObjectAccess</span> <span class="n">soa</span><span class="p">(</span><span class="n">env</span><span class="p">);</span>
</span><span class='line'>    <span class="n">soa</span><span class="p">.</span><span class="n">Self</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">ThrowOutOfMemoryError</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一大堆代码只需要记住进行了<code>pthread_create</code>系统调用即可。</p>

<h3>线程状态</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">     * A thread state.  A thread can be in one of the following states:</span>
</span><span class='line'><span class="cm">     * &lt;ul&gt;</span>
</span><span class='line'><span class="cm">     * &lt;li&gt;{@link #NEW}&lt;br&gt;</span>
</span><span class='line'><span class="cm">     *     A thread that has not yet started is in this state.</span>
</span><span class='line'><span class="cm">     *     &lt;/li&gt;</span>
</span><span class='line'><span class="cm">     * &lt;li&gt;{@link #RUNNABLE}&lt;br&gt;</span>
</span><span class='line'><span class="cm">     *     A thread executing in the Java virtual machine is in this state.</span>
</span><span class='line'><span class="cm">     *     &lt;/li&gt;</span>
</span><span class='line'><span class="cm">     * &lt;li&gt;{@link #BLOCKED}&lt;br&gt;</span>
</span><span class='line'><span class="cm">     *     A thread that is blocked waiting for a monitor lock</span>
</span><span class='line'><span class="cm">     *     is in this state.</span>
</span><span class='line'><span class="cm">     *     &lt;/li&gt;</span>
</span><span class='line'><span class="cm">     * &lt;li&gt;{@link #WAITING}&lt;br&gt;</span>
</span><span class='line'><span class="cm">     *     A thread that is waiting indefinitely for another thread to</span>
</span><span class='line'><span class="cm">     *     perform a particular action is in this state.</span>
</span><span class='line'><span class="cm">     *     &lt;/li&gt;</span>
</span><span class='line'><span class="cm">     * &lt;li&gt;{@link #TIMED_WAITING}&lt;br&gt;</span>
</span><span class='line'><span class="cm">     *     A thread that is waiting for another thread to perform an action</span>
</span><span class='line'><span class="cm">     *     for up to a specified waiting time is in this state.</span>
</span><span class='line'><span class="cm">     *     &lt;/li&gt;</span>
</span><span class='line'><span class="cm">     * &lt;li&gt;{@link #TERMINATED}&lt;br&gt;</span>
</span><span class='line'><span class="cm">     *     A thread that has exited is in this state.</span>
</span><span class='line'><span class="cm">     *     &lt;/li&gt;</span>
</span><span class='line'><span class="cm">     * &lt;/ul&gt;</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * &lt;p&gt;</span>
</span><span class='line'><span class="cm">     * A thread can be in only one state at a given point in time.</span>
</span><span class='line'><span class="cm">     * These states are virtual machine states which do not reflect</span>
</span><span class='line'><span class="cm">     * any operating system thread states.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @since   1.5</span>
</span><span class='line'><span class="cm">     * @see #getState</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">enum</span> <span class="n">State</span> <span class="o">{</span>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Thread state for a thread which has not yet started.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">NEW</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Thread state for a runnable thread.  A thread in the runnable</span>
</span><span class='line'><span class="cm">         * state is executing in the Java virtual machine but it may</span>
</span><span class='line'><span class="cm">         * be waiting for other resources from the operating system</span>
</span><span class='line'><span class="cm">         * such as processor.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">RUNNABLE</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Thread state for a thread blocked waiting for a monitor lock.</span>
</span><span class='line'><span class="cm">         * A thread in the blocked state is waiting for a monitor lock</span>
</span><span class='line'><span class="cm">         * to enter a synchronized block/method or</span>
</span><span class='line'><span class="cm">         * reenter a synchronized block/method after calling</span>
</span><span class='line'><span class="cm">         * {@link Object#wait() Object.wait}.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">BLOCKED</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Thread state for a waiting thread.</span>
</span><span class='line'><span class="cm">         * A thread is in the waiting state due to calling one of the</span>
</span><span class='line'><span class="cm">         * following methods:</span>
</span><span class='line'><span class="cm">         * &lt;ul&gt;</span>
</span><span class='line'><span class="cm">         *   &lt;li&gt;{@link Object#wait() Object.wait} with no timeout&lt;/li&gt;</span>
</span><span class='line'><span class="cm">         *   &lt;li&gt;{@link #join() Thread.join} with no timeout&lt;/li&gt;</span>
</span><span class='line'><span class="cm">         *   &lt;li&gt;{@link LockSupport#park() LockSupport.park}&lt;/li&gt;</span>
</span><span class='line'><span class="cm">         * &lt;/ul&gt;</span>
</span><span class='line'><span class="cm">         *</span>
</span><span class='line'><span class="cm">         * &lt;p&gt;A thread in the waiting state is waiting for another thread to</span>
</span><span class='line'><span class="cm">         * perform a particular action.</span>
</span><span class='line'><span class="cm">         *</span>
</span><span class='line'><span class="cm">         * For example, a thread that has called &lt;tt&gt;Object.wait()&lt;/tt&gt;</span>
</span><span class='line'><span class="cm">         * on an object is waiting for another thread to call</span>
</span><span class='line'><span class="cm">         * &lt;tt&gt;Object.notify()&lt;/tt&gt; or &lt;tt&gt;Object.notifyAll()&lt;/tt&gt; on</span>
</span><span class='line'><span class="cm">         * that object. A thread that has called &lt;tt&gt;Thread.join()&lt;/tt&gt;</span>
</span><span class='line'><span class="cm">         * is waiting for a specified thread to terminate.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">WAITING</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Thread state for a waiting thread with a specified waiting time.</span>
</span><span class='line'><span class="cm">         * A thread is in the timed waiting state due to calling one of</span>
</span><span class='line'><span class="cm">         * the following methods with a specified positive waiting time:</span>
</span><span class='line'><span class="cm">         * &lt;ul&gt;</span>
</span><span class='line'><span class="cm">         *   &lt;li&gt;{@link #sleep Thread.sleep}&lt;/li&gt;</span>
</span><span class='line'><span class="cm">         *   &lt;li&gt;{@link Object#wait(long) Object.wait} with timeout&lt;/li&gt;</span>
</span><span class='line'><span class="cm">         *   &lt;li&gt;{@link #join(long) Thread.join} with timeout&lt;/li&gt;</span>
</span><span class='line'><span class="cm">         *   &lt;li&gt;{@link LockSupport#parkNanos LockSupport.parkNanos}&lt;/li&gt;</span>
</span><span class='line'><span class="cm">         *   &lt;li&gt;{@link LockSupport#parkUntil LockSupport.parkUntil}&lt;/li&gt;</span>
</span><span class='line'><span class="cm">         * &lt;/ul&gt;</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">TIMED_WAITING</span><span class="o">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Thread state for a terminated thread.</span>
</span><span class='line'><span class="cm">         * The thread has completed execution.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">TERMINATED</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>线程有6种状态，<code>NEW</code>表示线程新建，还没调用<code>start()</code>。<code>RUNNABLE</code>表示线程调用了<code>start</code>处于可运行状态，等待CPU调度。<code>BLOCKED</code>表示线程在等待获取monitor lock。当在线程中调用<code>Object.wait()</code>或<code>Thread.join()</code>或<code>LockSupport.park()</code>方法时线程进入<code>WAITING</code>状态，在线程中调用<code>Thread.sleep()</code>或<code>Object.wait(long)</code>或<code>Thread.join(long)</code>或<code>LockSupport.parkNanos(long)</code>或<code>LockSupport.parkUntil(long)</code>线程进入<code>TIMED_WAITING</code>状态。线程执行完操作后会进入<code>TERMINATED</code>状态。</p>

<h3>线程中断</h3>

<p>线程中一共有3个和中断有关的方法，分别是<code>interrupt()</code>，<code>isInterrupted()</code>和静态方法<code>interrupted</code>。我们分别看一下。</p>

<h4>interrupt</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Interrupts this thread.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * &lt;p&gt; Unless the current thread is interrupting itself, which is</span>
</span><span class='line'><span class="cm">     * always permitted, the {@link #checkAccess() checkAccess} method</span>
</span><span class='line'><span class="cm">     * of this thread is invoked, which may cause a {@link</span>
</span><span class='line'><span class="cm">     * SecurityException} to be thrown.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * &lt;p&gt; If this thread is blocked in an invocation of the {@link</span>
</span><span class='line'><span class="cm">     * Object#wait() wait()}, {@link Object#wait(long) wait(long)}, or {@link</span>
</span><span class='line'><span class="cm">     * Object#wait(long, int) wait(long, int)} methods of the {@link Object}</span>
</span><span class='line'><span class="cm">     * class, or of the {@link #join()}, {@link #join(long)}, {@link</span>
</span><span class='line'><span class="cm">     * #join(long, int)}, {@link #sleep(long)}, or {@link #sleep(long, int)},</span>
</span><span class='line'><span class="cm">     * methods of this class, then its interrupt status will be cleared and it</span>
</span><span class='line'><span class="cm">     * will receive an {@link InterruptedException}.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * &lt;p&gt; If this thread is blocked in an I/O operation upon an {@link</span>
</span><span class='line'><span class="cm">     * java.nio.channels.InterruptibleChannel InterruptibleChannel}</span>
</span><span class='line'><span class="cm">     * then the channel will be closed, the thread&#39;s interrupt</span>
</span><span class='line'><span class="cm">     * status will be set, and the thread will receive a {@link</span>
</span><span class='line'><span class="cm">     * java.nio.channels.ClosedByInterruptException}.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * &lt;p&gt; If this thread is blocked in a {@link java.nio.channels.Selector}</span>
</span><span class='line'><span class="cm">     * then the thread&#39;s interrupt status will be set and it will return</span>
</span><span class='line'><span class="cm">     * immediately from the selection operation, possibly with a non-zero</span>
</span><span class='line'><span class="cm">     * value, just as if the selector&#39;s {@link</span>
</span><span class='line'><span class="cm">     * java.nio.channels.Selector#wakeup wakeup} method were invoked.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * &lt;p&gt; If none of the previous conditions hold then this thread&#39;s interrupt</span>
</span><span class='line'><span class="cm">     * status will be set. &lt;/p&gt;</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * &lt;p&gt; Interrupting a thread that is not alive need not have any effect.</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @throws  SecurityException</span>
</span><span class='line'><span class="cm">     *          if the current thread cannot modify this thread</span>
</span><span class='line'><span class="cm">     *</span>
</span><span class='line'><span class="cm">     * @revised 6.0</span>
</span><span class='line'><span class="cm">     * @spec JSR-51</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">interrupt</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">!=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">())</span>
</span><span class='line'>            <span class="n">checkAccess</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="n">blockerLock</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Interruptible</span> <span class="n">b</span> <span class="o">=</span> <span class="n">blocker</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">b</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">nativeInterrupt</span><span class="o">();</span>
</span><span class='line'>                <span class="n">b</span><span class="o">.</span><span class="na">interrupt</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>                <span class="k">return</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">nativeInterrupt</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="nd">@FastNative</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">native</span> <span class="kt">void</span> <span class="nf">nativeInterrupt</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>从注释我们可以看出调用Thread的<code>interrupt</code>方法，分为几种情况</p>

<ul>
<li>如果线程阻塞在<code>Object.wait()</code>、<code>Object.wait(long)</code>、<code>Object.wait(long,int)</code>、<code>Thread.join()</code>、<code>Thread.join(long)</code>、<code>Thread.join(long,int)</code>、<code>Thread.sleep(long)</code>、<code>Thread.sleep(long,int)</code>这些方法上，线程的中断状态将被清除，并抛出<code>InterruptedException</code>。</li>
<li>如果阻塞在<code>java.nio.channels.InterruptibleChannel</code>IO操作操作上，线程的中断状态将被设置（这里有个疑惑，这里设置是指设置为true还是false，如果设置为false就表示线程状态被清除了，由于对NIO了解不多，这里暂时无法确定，从注释上下文理解应该是设置为true了）并抛出<code>java.nio.channels.ClosedByInterruptException</code></li>
<li>如果阻塞在<code>java.nio.channels.Selector</code>上，线程的中断状态将被设置，并从<code>Selector</code>操作中返回。</li>
<li>如果是其他情况，比如正在执行不会响应<code>interrupt</code>方法的方法（如<code>Socket</code>的读写或<code>ServerSocket</code>的<code>accept</code>），那么线程的中断状态将被设置。</li>
</ul>


<p>继续看<code>nativeInterrupt</code>方法，从<a href="http://androidxref.com/9.0.0_r3/xref/art/runtime/native/java_lang_Thread.cc">java_lang_thread.cc</a>中<a href="http://androidxref.com/9.0.0_r3/xref/art/runtime/native/java_lang_Thread.cc#126">Thread_nativeInterupt</a>可以看到是调用了<a href="http://androidxref.com/9.0.0_r3/xref/art/runtime/thread.cc#2416">Thread::Interrupt</a>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// http://androidxref.com/9.0.0_r3/xref/art/runtime/thread.cc#2416</span>
</span><span class='line'><span class="kt">void</span> <span class="n">Thread</span><span class="o">::</span><span class="n">Interrupt</span><span class="p">(</span><span class="n">Thread</span><span class="o">*</span> <span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">MutexLock</span> <span class="n">mu</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="n">wait_mutex_</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">tls32_</span><span class="p">.</span><span class="n">interrupted</span><span class="p">.</span><span class="n">LoadSequentiallyConsistent</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">tls32_</span><span class="p">.</span><span class="n">interrupted</span><span class="p">.</span><span class="n">StoreSequentiallyConsistent</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>  <span class="n">NotifyLocked</span><span class="p">(</span><span class="n">self</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到只是设置了一下中断状态。</p>

<h4>isInterrupted 和 interrupted</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Tests whether this thread has been interrupted.  The &lt;i&gt;interrupted</span>
</span><span class='line'><span class="cm"> * status&lt;/i&gt; of the thread is unaffected by this method.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;p&gt;A thread interruption ignored because a thread was not alive</span>
</span><span class='line'><span class="cm"> * at the time of the interrupt will be reflected by this method</span>
</span><span class='line'><span class="cm"> * returning false.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @return  &lt;code&gt;true&lt;/code&gt; if this thread has been interrupted;</span>
</span><span class='line'><span class="cm"> *          &lt;code&gt;false&lt;/code&gt; otherwise.</span>
</span><span class='line'><span class="cm"> * @see     #interrupted()</span>
</span><span class='line'><span class="cm"> * @revised 6.0</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@FastNative</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">native</span> <span class="kt">boolean</span> <span class="nf">isInterrupted</span><span class="o">();</span> <span class="c1">// 实例方法，返回中断状态</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Tests whether the current thread has been interrupted.  The</span>
</span><span class='line'><span class="cm"> * &lt;i&gt;interrupted status&lt;/i&gt; of the thread is cleared by this method.  In</span>
</span><span class='line'><span class="cm"> * other words, if this method were to be called twice in succession, the</span>
</span><span class='line'><span class="cm"> * second call would return false (unless the current thread were</span>
</span><span class='line'><span class="cm"> * interrupted again, after the first call had cleared its interrupted</span>
</span><span class='line'><span class="cm"> * status and before the second call had examined it).</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;p&gt;A thread interruption ignored because a thread was not alive</span>
</span><span class='line'><span class="cm"> * at the time of the interrupt will be reflected by this method</span>
</span><span class='line'><span class="cm"> * returning false.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @return  &lt;code&gt;true&lt;/code&gt; if the current thread has been interrupted;</span>
</span><span class='line'><span class="cm"> *          &lt;code&gt;false&lt;/code&gt; otherwise.</span>
</span><span class='line'><span class="cm"> * @see #isInterrupted()</span>
</span><span class='line'><span class="cm"> * @revised 6.0</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@FastNative</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">native</span> <span class="kt">boolean</span> <span class="nf">interrupted</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>实例方法<code>isInterrupted</code>会返回线程的中断状态，静态方法<code>interrupted</code>会返回调用这个方法的线程的中断状态，并清除线程的中断状态，这也是清除中断状态的唯一方法，设置中断状态当然调用<code>interrupt</code>方法就好了。</p>

<p>不妨看下native层实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// http://androidxref.com/9.0.0_r3/xref/art/runtime/thread.cc</span>
</span><span class='line'><span class="c1">// Implements java.lang.Thread.interrupted.</span>
</span><span class='line'><span class="kt">bool</span> <span class="n">Thread</span><span class="o">::</span><span class="n">Interrupted</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">DCHECK_EQ</span><span class="p">(</span><span class="n">Thread</span><span class="o">::</span><span class="n">Current</span><span class="p">(),</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// No other thread can concurrently reset the interrupted flag.</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">interrupted</span> <span class="o">=</span> <span class="n">tls32_</span><span class="p">.</span><span class="n">interrupted</span><span class="p">.</span><span class="n">LoadSequentiallyConsistent</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">interrupted</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">tls32_</span><span class="p">.</span><span class="n">interrupted</span><span class="p">.</span><span class="n">StoreSequentiallyConsistent</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">interrupted</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Implements java.lang.Thread.isInterrupted.</span>
</span><span class='line'><span class="kt">bool</span> <span class="n">Thread</span><span class="o">::</span><span class="n">IsInterrupted</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">tls32_</span><span class="p">.</span><span class="n">interrupted</span><span class="p">.</span><span class="n">LoadSequentiallyConsistent</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>守护线程</h3>

<p>线程可分为两种，普通线程和守护线程（其实叫服务线程好理解些，这些线程一般是服务其他线程的）。在JVM启动时创建的所有线程中，除了主线程以外，其他的线程都是守护线程（例如垃圾回收器以及执行其他辅助工作的线程，signal dispatcher之类的）。</p>

<p>当创建一个新线程时，新线程将继承创建它的线程的守护状态。</p>

<p>普通线程和守护线程之间的差异仅在于当线程退出时发生的操作。当一个线程退出时，JVM会检查其他正在运行的线程，如果这些线程都是守护线程，那么JVM会正常退出操作。当JVM停止时，所有仍然存在的守护线程都将被抛弃——既不会执行finally代码块，也不会执行回卷栈，而JVM只是直接退出。</p>

<h3>reference</h3>

<ul>
<li>《Java并发编程实战》</li>
<li><a href="http://gityuan.com/2016/09/24/android-thread/">Android平台上除了Java线程还有native线程，可以参考这篇</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dagger2学习]]></title>
    <link href="http://Solarex.github.io/blog/2019/04/30/learning-dagger2/"/>
    <updated>2019-04-30T16:17:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2019/04/30/learning-dagger2</id>
    <content type="html"><![CDATA[<h3>reference</h3>

<ul>
<li><a href="https://www.youtube.com/playlist?list=PLrnPJCHvNZuA2ioi4soDZKz8euUQnJW65">Dagger2 Beginner Tutorial</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin是如何实现方法默认参数的]]></title>
    <link href="http://Solarex.github.io/blog/2019/04/18/how-kotlin-generate-method-default-arguments/"/>
    <updated>2019-04-18T10:36:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2019/04/18/how-kotlin-generate-method-default-arguments</id>
    <content type="html"><![CDATA[<p>学习Kotlin的时候，发现可以给方法设置默认参数，Java是不支持给方法设置默认参数的，那Kotin是如何实现的呢？不妨看下下面的kotlin文件，kotlin允许这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nf">frob</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">fred</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">300</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">frob</span> <span class="p">=</span> <span class="n">mkfrob</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;${this}${x}${y}&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">mkfrob</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">frob</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">boobar</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fred</span><span class="p">();</span>
</span><span class='line'>        <span class="n">fred</span><span class="p">(</span><span class="m">100</span><span class="p">);</span>
</span><span class='line'>        <span class="n">fred</span><span class="p">(</span><span class="m">100</span><span class="p">,</span> <span class="n">frob</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用<code>kotlinc</code>编译成class文件之后，我们使用<code>cfr</code>反编译一下class文件看下编译器帮我们做了什么黑魔法。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.PrintStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">kotlin.Metadata</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">kotlin.jvm.internal.Intrinsics</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.jetbrains.annotations.NotNull</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Metadata</span><span class="o">(</span><span class="n">mv</span><span class="o">={</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">13</span><span class="o">},</span> <span class="n">bv</span><span class="o">={</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">3</span><span class="o">},</span> <span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">d1</span><span class="o">={</span><span class="s">&quot;\u0000\u001c\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0002\n\u0002\u0010\b\n\u0002\b\u0002\u0018\u00002\u00020\u0001B\u0005\u00a2\u0006\u0002\u0010\u0002J\u0006\u0010\u0003\u001a\u00020\u0004J\u001a\u0010\u0005\u001a\u00020\u00042\b\b\u0002\u0010\u0006\u001a\u00020\u00072\b\b\u0002\u0010\b\u001a\u00020\u0000J\u000e\u0010\t\u001a\u00020\u00002\u0006\u0010\u0006\u001a\u00020\u0007&quot;</span><span class="o">},</span> <span class="n">d2</span><span class="o">={</span><span class="s">&quot;Lfrob;&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;()V&quot;</span><span class="o">,</span> <span class="s">&quot;boobar&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;fred&quot;</span><span class="o">,</span> <span class="s">&quot;x&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;y&quot;</span><span class="o">,</span> <span class="s">&quot;mkfrob&quot;</span><span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">frob</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">fred</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="nd">@NotNull</span> <span class="n">frob</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">((</span><span class="n">Object</span><span class="o">)</span><span class="n">y</span><span class="o">,</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="s">&quot;y&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">string</span> <span class="o">=</span> <span class="s">&quot;&quot;</span> <span class="o">+</span> <span class="k">this</span> <span class="o">+</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">((</span><span class="n">Object</span><span class="o">)</span><span class="n">string</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="cm">/* synthetic */</span> <span class="kt">void</span> <span class="n">fred$default</span><span class="o">(</span><span class="n">frob</span> <span class="n">frob2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="n">frob</span> <span class="n">frob3</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n2</span><span class="o">,</span> <span class="n">Object</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">((</span><span class="n">n2</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">n</span> <span class="o">=</span> <span class="mi">300</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">((</span><span class="n">n2</span> <span class="o">&amp;</span> <span class="mi">2</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">frob3</span> <span class="o">=</span> <span class="n">frob2</span><span class="o">.</span><span class="na">mkfrob</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">frob2</span><span class="o">.</span><span class="na">fred</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">frob3</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@NotNull</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="n">frob</span> <span class="nf">mkfrob</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">boobar</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">frob</span><span class="o">.</span><span class="na">fred</span><span class="n">$default</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="n">frob</span><span class="o">.</span><span class="na">fred</span><span class="n">$default</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="mi">100</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">fred</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="k">new</span> <span class="n">frob</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到编译器底层自动为我们生成了一个<code>static</code>,<code>synthetic</code>的方法，在这个方法中，第一个参数是对象接收者，第二个和第三个参数和我们声明的<code>fred</code>方法相同，第四个参数<code>n2</code>从方法体可以看出是一个bitmask。</p>

<p>从生成的方法<code>fred$default</code>实现来看，每个可以有默认参数的位置的参数有个mask值，为<code>2^x</code>，x为参数出现的顺序，如果方法调用的时候用到了某个位置上的默认参数，<code>fred$default</code>方法的第四个参数<code>n2</code>就会加上<code>2^x</code>。</p>

<p>在Java中是不能使用默认参数调用<code>fred</code>这种方法的，如果想要在Java中调用，需要给方法加上<code>@JvmOverloads</code>注解，我们加上这个注解再去反编译一下看下有什么变化。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">class</span> <span class="nf">frob</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">@JvmOverloads</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">fred</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">Int</span> <span class="p">=</span> <span class="m">300</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">frob</span> <span class="p">=</span> <span class="n">mkfrob</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="s">&quot;${this}${x}${y}&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">mkfrob</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">frob</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">fun</span> <span class="nf">boobar</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fred</span><span class="p">();</span>
</span><span class='line'>        <span class="n">fred</span><span class="p">(</span><span class="m">100</span><span class="p">);</span>
</span><span class='line'>        <span class="n">fred</span><span class="p">(</span><span class="m">100</span><span class="p">,</span> <span class="n">frob</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>再反编译一下我们看下有什么变化：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.PrintStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">kotlin.Metadata</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">kotlin.jvm.JvmOverloads</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">kotlin.jvm.internal.Intrinsics</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.jetbrains.annotations.NotNull</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Metadata</span><span class="o">(</span><span class="n">mv</span><span class="o">={</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">13</span><span class="o">},</span> <span class="n">bv</span><span class="o">={</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">3</span><span class="o">},</span> <span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">d1</span><span class="o">={</span><span class="s">&quot;\u0000\u001c\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0002\n\u0002\u0010\b\n\u0002\b\u0002\u0018\u00002\u00020\u0001B\u0005\u00a2\u0006\u0002\u0010\u0002J\u0006\u0010\u0003\u001a\u00020\u0004J\u001c\u0010\u0005\u001a\u00020\u00042\b\b\u0002\u0010\u0006\u001a\u00020\u00072\b\b\u0002\u0010\b\u001a\u00020\u0000H\u0007J\u000e\u0010\t\u001a\u00020\u00002\u0006\u0010\u0006\u001a\u00020\u0007&quot;</span><span class="o">},</span> <span class="n">d2</span><span class="o">={</span><span class="s">&quot;Lfrob;&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;()V&quot;</span><span class="o">,</span> <span class="s">&quot;boobar&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;fred&quot;</span><span class="o">,</span> <span class="s">&quot;x&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="s">&quot;y&quot;</span><span class="o">,</span> <span class="s">&quot;mkfrob&quot;</span><span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">frob</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@JvmOverloads</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">fred</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="nd">@NotNull</span> <span class="n">frob</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Intrinsics</span><span class="o">.</span><span class="na">checkParameterIsNotNull</span><span class="o">((</span><span class="n">Object</span><span class="o">)</span><span class="n">y</span><span class="o">,</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="s">&quot;y&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">string</span> <span class="o">=</span> <span class="s">&quot;&quot;</span> <span class="o">+</span> <span class="k">this</span> <span class="o">+</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">((</span><span class="n">Object</span><span class="o">)</span><span class="n">string</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@JvmOverloads</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="cm">/* synthetic */</span> <span class="kt">void</span> <span class="n">fred$default</span><span class="o">(</span><span class="n">frob</span> <span class="n">frob2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="n">frob</span> <span class="n">frob3</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n2</span><span class="o">,</span> <span class="n">Object</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">((</span><span class="n">n2</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">n</span> <span class="o">=</span> <span class="mi">300</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">((</span><span class="n">n2</span> <span class="o">&amp;</span> <span class="mi">2</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">frob3</span> <span class="o">=</span> <span class="n">frob2</span><span class="o">.</span><span class="na">mkfrob</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">frob2</span><span class="o">.</span><span class="na">fred</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">frob3</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@JvmOverloads</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">fred</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">frob</span><span class="o">.</span><span class="na">fred</span><span class="n">$default</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">x</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@JvmOverloads</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">fred</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">frob</span><span class="o">.</span><span class="na">fred</span><span class="n">$default</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@NotNull</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="n">frob</span> <span class="nf">mkfrob</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">boobar</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">frob</span><span class="o">.</span><span class="na">fred</span><span class="n">$default</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="n">frob</span><span class="o">.</span><span class="na">fred</span><span class="n">$default</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="mi">100</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">fred</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="k">new</span> <span class="n">frob</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到比上面多生成了几个重载的方法，在重载的方法内部调用了生成方法<code>fred$default</code>。</p>

<h3>reference</h3>

<ul>
<li><a href="https://www.benf.org/other/cfr/kotlin-defaults.html">How does Kotlin generate default arguments?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义View总结三]]></title>
    <link href="http://Solarex.github.io/blog/2019/03/12/summary-of-custom-views-part-iii/"/>
    <updated>2019-03-12T00:34:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2019/03/12/summary-of-custom-views-part-iii</id>
    <content type="html"><![CDATA[<h3>自定义View总结 &ndash; 触摸反馈</h3>

<p>之前分析了<a href="http://solarex.github.io/blog/2018/03/25/android-touch-system/">Android触摸事件分发机制</a>，在自定义View的时候进行触摸反馈，一般都是重写<code>onTouchEvent</code>，当然也有一些工具类可以使用，本文就对这些工具类进行总结，他们是<code>ViewConfiguration</code>，<code>Scroller</code>，<code>OverScroller</code>，<code>VelocityTracker</code>，<code>GestureDetector</code>，<code>ScaleGestureDetector</code>，<code>ViewDragHelper</code>。</p>

<!-- more -->


<h4>ViewConfiguration</h4>

<p><code>ViewConfiguration</code>定义了一些UI系统用用到的常量，包括timeouts,sizes,distances。timeouts比如<code>DEFAULT_LONG_PRESS_TIMEOUT</code>,<code>DOUBLE_TAP_TIMEOUT</code>等，sizes包括<code>SCROLL_BAR_SIZE</code>等，distances我们平时自定义View的时候可能用的比较多，常用的有<code>getScaledTouchSlop</code>来判断是否是滑动，<code>getScaledPagingTouchSlop</code>来判断是否是翻页滑动，自己写<code>ViewPager</code>的时候可以用到，<code>getScaledMaximumFlingVelocity</code>和<code>getMinimumFlingVelocity</code>来对惯性滑动进行判断处理。</p>

<h3>Scroller &amp; OverScroller</h3>

<p><code>View</code>的<code>scrollTo</code>和<code>scrollBy</code>是瞬间完成的，如果需要<code>View</code>的滑动有个动画效果，说白了，就是View的位置移动有段时间间隔，可以使用<code>Scroller</code>或<code>OverScroller</code>来完成。<code>Scroller</code>本身无法让View滑动，它主要是个计算器，得配合View的<code>computeScroll</code>使用才能完成这个功能，或者不使用View的<code>computeScroll</code>，你自己写个<code>Runnable</code>，在<code>Runnable</code>里面进行<code>Scroller</code>计算完成的判断并调用View的<code>scrollTo</code>，然后再<code>postOnAnimation(this)</code>将自身传入再次调用即可。</p>

<p>使用<code>computeScroll</code>的样板代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Scroller</span> <span class="n">scroller</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scroller</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 缓慢滚动到指定位置</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">smoothScrollTo</span><span class="o">(</span><span class="kt">int</span> <span class="n">destX</span><span class="o">,</span> <span class="kt">int</span> <span class="n">destY</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">scrollx</span> <span class="o">=</span> <span class="n">getScrollX</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">dx</span> <span class="o">=</span> <span class="n">destX</span> <span class="o">-</span> <span class="n">scrollx</span><span class="o">;</span>
</span><span class='line'>    <span class="n">scroller</span><span class="o">.</span><span class="na">startScroll</span><span class="o">(</span><span class="n">scrollx</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">dx</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// 这步很重要，触发下面的 computeScroll</span>
</span><span class='line'>    <span class="n">invalidate</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">computeScroll</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">scroller</span><span class="o">.</span><span class="na">computeScrollOffset</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">scrollTo</span><span class="o">(</span><span class="n">scroller</span><span class="o">.</span><span class="na">getCurrX</span><span class="o">(),</span> <span class="n">scroller</span><span class="o">.</span><span class="na">getCurrY</span><span class="o">());</span>
</span><span class='line'>        <span class="c1">// 这步继续触发 computeScroll，Scroller会更新x,y，View继续scrollTo新位置</span>
</span><span class='line'>        <span class="n">postInvalidate</span><span class="o">();</span><span class="err">或者</span><span class="n">invalidate</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>OverScroller</code>的<code>startScroll</code>，<code>fling</code>方法和<code>Scroller</code>类似，不再赘述，除此之外<code>OverScroller</code>还有一个带over参数的<code>fling</code>函数<code>public void fling(int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY, int overX, int overY)</code>可以滑动超出View的边界。</p>

<h4>VelocityTracker</h4>

<p>速度追踪，用于追踪手指在滑动过程中的速度，包括水平和垂直方向的速度，一般配合<code>Scroller</code>的<code>fling</code>使用。它的使用过程很简单，首先，在View的<code>onTouchEvent</code>方法中追踪当前单击事件的速度：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// onTouchEvent</span>
</span><span class='line'><span class="n">VelocityTracker</span> <span class="n">velocityTracker</span> <span class="o">=</span> <span class="n">VelocityTracker</span><span class="o">.</span><span class="na">obtain</span><span class="o">();</span>
</span><span class='line'><span class="n">velocityTracker</span><span class="o">.</span><span class="na">addMovement</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>接着，在手指抬起，也就是<code>ACTION_UP</code>的时候，获取速度：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// onTouchEvent ACTION_UP</span>
</span><span class='line'><span class="n">velocityTracker</span><span class="o">.</span><span class="na">computeCurrentVelocity</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">xVel</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">velocityTracker</span><span class="o">.</span><span class="na">getXVelocity</span><span class="o">();</span>
</span><span class='line'><span class="kt">int</span> <span class="n">yVel</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">velocityTracker</span><span class="o">.</span><span class="na">getYVelocity</span><span class="o">();</span>
</span><span class='line'><span class="cm">/* do something like fling */</span>
</span><span class='line'><span class="n">velocityTracker</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'><span class="n">velocityTracker</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span> <span class="c1">// 重置并回收</span>
</span></code></pre></td></tr></table></div></figure>


<p>速度的计算公式是<code>速度=(终点位置 - 起点位置)/时间段</code>，所以逆着手机坐标系的正方向滑动，所产生的速度为负值。另外记得要重置并回收<code>VelocityTracker</code>。</p>

<h4>GestureDetector &amp; ScaleGestureDetector</h4>

<p><code>GestureDetector</code>手势检测，用于辅助检测用户的单击、滑动、长按、双击等行为。<code>ScaleGestureDetector</code>主要是双指或多指的pinch zoom放大缩小行为。要使用<code>GestureDetector</code>也很简单，参考如下过程。</p>

<p>首先，创建<code>GestureDetector</code>对象并实现<code>GestureDetector.OnGestureListener</code>接口，根据需要也可以实现<code>GestureDetector.OnDoubleTapListener</code>接口或者<code>GestureDetector.OnContextClickListener</code>接口，或者使用<code>SimpleOnGestureListener</code>来在自己感兴趣的方法中做处理。</p>

<table>
<thead>
<tr>
<th></th>
<th align="center">        方法名        </th>
<th align="center">                             描述                             </th>
<th align="center">      所属接口       </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">        onDown        </td>
<td align="center">            手指轻触屏幕，由1个<code>ACTION_DOWN</code>触发            </td>
<td align="center">  OnGestureListener  </td>
</tr>
<tr>
<td></td>
<td align="center">     onShowPress      </td>
<td align="center">    手指轻触屏幕，尚未松开或拖动，由1个<code>ACTION_DOWN</code>触发    </td>
<td align="center">  OnGestureListener  </td>
</tr>
<tr>
<td></td>
<td align="center">    onSingleTapUp     </td>
<td align="center">   手指轻触屏幕后松开，随着<code>ACTION_UP</code>触发，这是单击行为    </td>
<td align="center">  OnGestureListener  </td>
</tr>
<tr>
<td></td>
<td align="center">       onScroll       </td>
<td align="center"> 手指按下屏幕并拖动，由1个<code>ACTION_DOWN</code>及多个<code>ACTION_MOVE</code>触发，这是拖动行为 </td>
<td align="center">  OnGestureListener  </td>
</tr>
<tr>
<td></td>
<td align="center">     onLongPress      </td>
<td align="center">                             长按                             </td>
<td align="center">  OnGestureListener  </td>
</tr>
<tr>
<td></td>
<td align="center">       onFling        </td>
<td align="center"> 按下屏幕快速滑动后松开，由1个<code>ACTION_DOWN</code>多个<code>ACTION_MOVE</code>和1个<code>ACTION_UP</code>触发，快速滑动 </td>
<td align="center">  OnGestureListener  </td>
</tr>
<tr>
<td></td>
<td align="center">     onDoubleTap      </td>
<td align="center"> 双击，由2次连续的单击组成，不可能和onSingleTapConfirmed共存  </td>
<td align="center"> OnDoubleTapListener </td>
</tr>
<tr>
<td></td>
<td align="center"> onSingleTapConfirmed </td>
<td align="center">                        严格的单击行为                        </td>
<td align="center"> OnDoubleTapListener </td>
</tr>
<tr>
<td></td>
<td align="center">   onDoubleTapEvent   </td>
<td align="center"> 发生了双击行为，在双击期间，<code>ACTION_DOWN</code>、<code>ACTION_MOVE</code>、<code>ACTION_UP</code>都会触发此回调 </td>
<td align="center"> OnDoubleTapListener </td>
</tr>
</tbody>
</table>


<p>接着，接管目标View的<code>onTouchEvent</code>方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// onTouchEvent</span>
</span><span class='line'><span class="kt">boolean</span> <span class="n">consume</span> <span class="o">=</span> <span class="n">mGestureDetector</span><span class="o">.</span><span class="na">onTouchEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">consume</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>事件经过判断后就会回调我们实现的listener中的方法。如果只是监听滑动相关的可以自己在<code>onTouchEvent</code>方法的<code>ACTION_MOVE</code>中调用<code>View</code>的<code>scrollTo(x,y)</code>来实现View的滑动，如果是监听双击这种行为的话，就使用<code>GestureDetector</code>。</p>

<p><code>ScaleGestureDetector</code>是处理放大缩小手势的，使用和<code>GestureDetector</code>类似。</p>

<table>
<thead>
<tr>
<th></th>
<th align="center">                           方法名                            </th>
<th align="center">                             描述                             </th>
<th align="center">        所属接口        </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">   public boolean onScale(ScaleGestureDetector detector);    </td>
<td align="center"> 通过调用detector.getScaleFactor来获得放大的系数，来进行进一步处理，比如对ImageView的Matrix进行操作等等，返回值代表事件有没有被消费 </td>
<td align="center"> OnScaleGestureListener |</td>
</tr>
<tr>
<td></td>
<td align="center"> public boolean onScaleBegin(ScaleGestureDetector detector); </td>
<td align="center"> 如果要检测放大缩小手势，返回true，类似于<code>ACTION_DOWN</code>对事件感兴趣返回true </td>
<td align="center"> OnScaleGestureListener |</td>
</tr>
<tr>
<td></td>
<td align="center">   public void onScaleEnd(ScaleGestureDetector detector);    </td>
<td align="center"> 放大或缩小结束，可以调用detector.getFocusX()或detector.getFocusY()来获取焦点 </td>
<td align="center"> OnScaleGestureListener |</td>
</tr>
</tbody>
</table>


<h3>ViewDragHelper &amp; View.OnDragListener</h3>

<p><code>ViewDragHelper</code>可以实现各种不同的滑动、拖放需求，使用参考如下过程。<code>ViewDragHelper</code>一般在自定义<code>ViewGroup</code>中使用。</p>

<p>首先，初始化<code>ViewDragHelper</code>，实现<code>ViewDragHelper.Callback</code>。<code>mViewDragHelper = ViewDragHelper.create(viewgroup, callback);</code></p>

<p>然后，接管ViewGroup的事件处理，样板代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onInterceptTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">mViewDragHelper</span><span class="o">.</span><span class="na">shouldInterceptTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">ev</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mViewDragHelper</span><span class="o">.</span><span class="na">processTouchEvent</span><span class="o">(</span><span class="n">ev</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接着，处理<code>computeScroll</code>，<code>ViewDragHelper</code>内部也是通过<code>Scroller</code>来实现平滑移动的，样板代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">computeScroll</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">mViewDragHelper</span><span class="o">.</span><span class="na">continueSettling</span><span class="o">(</span><span class="kc">true</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ViewCompat</span><span class="o">.</span><span class="na">postInvalidateOnAnimation</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<table>
<thead>
<tr>
<th></th>
<th align="center">                            方法名                            </th>
<th align="center">                             描述                             </th>
<th align="center">        所属接口         </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center"> public abstract boolean tryCaptureView(View child, int pointerId); </td>
<td align="center">                哪个子View可以被拖动就返回true                </td>
<td align="center"> ViewDragHelper.Callback |</td>
</tr>
<tr>
<td></td>
<td align="center"> public int clampViewPositionVertical(View child, int top, int dy) {     return 0; } </td>
<td align="center">             限制被捕捉的View垂直方向上活动的范围             </td>
<td align="center"> ViewDragHelper.Callback |</td>
</tr>
<tr>
<td></td>
<td align="center"> public int clampViewPositionHorizontal(View child, int left, int dx) {     return 0; } </td>
<td align="center">              限制被捕捉View水平方向上活动的范围              </td>
<td align="center"> ViewDragHelper.Callback |</td>
</tr>
<tr>
<td></td>
<td align="center"> public void onViewCaptured(View capturedChild, int activePointerId) {} </td>
<td align="center">                    View被捕捉的时候被调用                    </td>
<td align="center"> ViewDragHelper.Callback |</td>
</tr>
<tr>
<td></td>
<td align="center"> public void onViewPositionChanged(View changedView, int left, int top, int dx, int dy) {} </td>
<td align="center">                被捕捉的View位置发生变化时调用                </td>
<td align="center"> ViewDragHelper.Callback |</td>
</tr>
<tr>
<td></td>
<td align="center">       public void onViewDragStateChanged(int state) {}       </td>
<td align="center"> drag state变化时调用，STATE_IDLE，STATE_DRAGGING，STATE_SETTLING </td>
<td align="center"> ViewDragHelper.Callback |</td>
</tr>
<tr>
<td></td>
<td align="center"> public void onViewReleased(View releasedChild, float xvel, float yvel) {} </td>
<td align="center">                       View被松开时调用                       </td>
<td align="center"> ViewDragHelper.Callback |</td>
</tr>
<tr>
<td></td>
<td align="center">  public void onEdgeTouched(int edgeFlags, int pointerId) {}  </td>
<td align="center">            没有View被捕捉，父View的边缘被touch到             </td>
<td align="center"> ViewDragHelper.Callback |</td>
</tr>
<tr>
<td></td>
<td align="center"> public boolean onEdgeLock(int edgeFlags) {     return false; } </td>
<td align="center">                                                              </td>
<td align="center"> ViewDragHelper.Callback |</td>
</tr>
<tr>
<td></td>
<td align="center"> public void onEdgeDragStarted(int edgeFlags, int pointerId) {} </td>
<td align="center">                                                              </td>
<td align="center"> ViewDragHelper.Callback |</td>
</tr>
<tr>
<td></td>
<td align="center"> public int getOrderedChildIndex(int index) {     return index; } </td>
<td align="center">                                                              </td>
<td align="center"> ViewDragHelper.Callback |</td>
</tr>
<tr>
<td></td>
<td align="center"> public int getViewHorizontalDragRange(View child) {     return 0; } </td>
<td align="center">                                                              </td>
<td align="center"> ViewDragHelper.Callback |</td>
</tr>
<tr>
<td></td>
<td align="center"> public int getViewVerticalDragRange(View child) {     return 0; } </td>
<td align="center">                                                              </td>
<td align="center"> ViewDragHelper.Callback |</td>
</tr>
</tbody>
</table>


<p><code>View.OnDragListener</code>只有一个方法<code>boolean onDrag(View v, DragEvent event);</code>，当拖拽事件被分发到View时调用。<code>DragEvent</code>有几个状态可以在其中做处理<code>ACTION_DRAG_STARTED</code>，<code>ACTION_DRAG_ENDED</code>，<code>ACTION_DRAG_ENTERED</code>，<code>ACTION_DRAG_EXITED</code>。View开始拖动可以调用<code>ViewCompat.startDragAndDrop(@NonNull View v, ClipData data,View.DragShadowBuilder shadowBuilder, Object localState, int flags)</code>来开始拖动，这样会在View上方出现一个Shadow来表示被拖动的View。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义View总结二]]></title>
    <link href="http://Solarex.github.io/blog/2019/02/12/summary-of-custom-views-part-ii/"/>
    <updated>2019-02-12T00:34:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2019/02/12/summary-of-custom-views-part-ii</id>
    <content type="html"><![CDATA[<h3>自定义View总结 &ndash; 布局</h3>

<h4>布局基础</h4>

<p>布局过程，就是程序在运行时利用布局文件中的代码来计算出实际尺寸和位置的过程。有两个阶段，测量阶段和布局阶段，分别对应<code>measure</code>和<code>layout</code>。</p>

<p>对于一个<code>View</code>而言，默认的<code>onMeasure</code>实现是：</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * &lt;p&gt;</span>
</span><span class='line'><span class="cm"> * Measure the view and its content to determine the measured width and the</span>
</span><span class='line'><span class="cm"> * measured height. This method is invoked by {@link #measure(int, int)} and</span>
</span><span class='line'><span class="cm"> * should be overridden by subclasses to provide accurate and efficient</span>
</span><span class='line'><span class="cm"> * measurement of their contents.</span>
</span><span class='line'><span class="cm"> * &lt;/p&gt;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;p&gt;</span>
</span><span class='line'><span class="cm"> * &lt;strong&gt;CONTRACT:&lt;/strong&gt; When overriding this method, you</span>
</span><span class='line'><span class="cm"> * &lt;em&gt;must&lt;/em&gt; call {@link #setMeasuredDimension(int, int)} to store the</span>
</span><span class='line'><span class="cm"> * measured width and height of this view. Failure to do so will trigger an</span>
</span><span class='line'><span class="cm"> * &lt;code&gt;IllegalStateException&lt;/code&gt;, thrown by</span>
</span><span class='line'><span class="cm"> * {@link #measure(int, int)}. Calling the superclass&#39;</span>
</span><span class='line'><span class="cm"> * {@link #onMeasure(int, int)} is a valid use.</span>
</span><span class='line'><span class="cm"> * &lt;/p&gt;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;p&gt;</span>
</span><span class='line'><span class="cm"> * The base class implementation of measure defaults to the background size,</span>
</span><span class='line'><span class="cm"> * unless a larger size is allowed by the MeasureSpec. Subclasses should</span>
</span><span class='line'><span class="cm"> * override {@link #onMeasure(int, int)} to provide better measurements of</span>
</span><span class='line'><span class="cm"> * their content.</span>
</span><span class='line'><span class="cm"> * &lt;/p&gt;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * &lt;p&gt;</span>
</span><span class='line'><span class="cm"> * If this method is overridden, it is the subclass&#39;s responsibility to make</span>
</span><span class='line'><span class="cm"> * sure the measured height and width are at least the view&#39;s minimum height</span>
</span><span class='line'><span class="cm"> * and width ({@link #getSuggestedMinimumHeight()} and</span>
</span><span class='line'><span class="cm"> * {@link #getSuggestedMinimumWidth()}).</span>
</span><span class='line'><span class="cm"> * &lt;/p&gt;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param widthMeasureSpec horizontal space requirements as imposed by the parent.</span>
</span><span class='line'><span class="cm"> *                         The requirements are encoded with</span>
</span><span class='line'><span class="cm"> *                         {@link android.view.View.MeasureSpec}.</span>
</span><span class='line'><span class="cm"> * @param heightMeasureSpec vertical space requirements as imposed by the parent.</span>
</span><span class='line'><span class="cm"> *                         The requirements are encoded with</span>
</span><span class='line'><span class="cm"> *                         {@link android.view.View.MeasureSpec}.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @see #getMeasuredWidth()</span>
</span><span class='line'><span class="cm"> * @see #getMeasuredHeight()</span>
</span><span class='line'><span class="cm"> * @see #setMeasuredDimension(int, int)</span>
</span><span class='line'><span class="cm"> * @see #getSuggestedMinimumHeight()</span>
</span><span class='line'><span class="cm"> * @see #getSuggestedMinimumWidth()</span>
</span><span class='line'><span class="cm"> * @see android.view.View.MeasureSpec#getMode(int)</span>
</span><span class='line'><span class="cm"> * @see android.view.View.MeasureSpec#getSize(int)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onMeasure</span><span class="o">(</span><span class="kt">int</span> <span class="n">widthMeasureSpec</span><span class="o">,</span> <span class="kt">int</span> <span class="n">heightMeasureSpec</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">setMeasuredDimension</span><span class="o">(</span><span class="n">getDefaultSize</span><span class="o">(</span><span class="n">getSuggestedMinimumWidth</span><span class="o">(),</span> <span class="n">widthMeasureSpec</span><span class="o">),</span>
</span><span class='line'>            <span class="n">getDefaultSize</span><span class="o">(</span><span class="n">getSuggestedMinimumHeight</span><span class="o">(),</span> <span class="n">heightMeasureSpec</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Utility to return a default size. Uses the supplied size if the</span>
</span><span class='line'><span class="cm"> * MeasureSpec imposed no constraints. Will get larger if allowed</span>
</span><span class='line'><span class="cm"> * by the MeasureSpec.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param size Default size for this view</span>
</span><span class='line'><span class="cm"> * @param measureSpec Constraints imposed by the parent</span>
</span><span class='line'><span class="cm"> * @return The size this view should be.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getDefaultSize</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">,</span> <span class="kt">int</span> <span class="n">measureSpec</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">specMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">getMode</span><span class="o">(</span><span class="n">measureSpec</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">specSize</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">getSize</span><span class="o">(</span><span class="n">measureSpec</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">switch</span> <span class="o">(</span><span class="n">specMode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">UNSPECIFIED</span><span class="o">:</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">:</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">:</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">specSize</span><span class="o">;</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Returns the suggested minimum width that the view should use. This</span>
</span><span class='line'><span class="cm"> * returns the maximum of the view&#39;s minimum width</span>
</span><span class='line'><span class="cm"> * and the background&#39;s minimum width</span>
</span><span class='line'><span class="cm"> *  ({@link android.graphics.drawable.Drawable#getMinimumWidth()}).</span>
</span><span class='line'><span class="cm"> * &lt;p&gt;</span>
</span><span class='line'><span class="cm"> * When being used in {@link #onMeasure(int, int)}, the caller should still</span>
</span><span class='line'><span class="cm"> * ensure the returned width is within the requirements of the parent.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @return The suggested minimum width of the view.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">int</span> <span class="nf">getSuggestedMinimumWidth</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">(</span><span class="n">mBackground</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="n">mMinWidth</span> <span class="o">:</span> <span class="n">max</span><span class="o">(</span><span class="n">mMinWidth</span><span class="o">,</span> <span class="n">mBackground</span><span class="o">.</span><span class="na">getMinimumWidth</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到在<code>getDefault</code>方法中对<code>AT_MOST</code>(<code>wrap_content</code>)和<code>EXACTLY</code>(<code>match_parent</code>)的处理都是用父View的size来作为了子View的size，这种处理有的时候是不合适的，需要我们额外做些处理，下面是一个在写自定义View的时候的一个utils方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">measure</span><span class="o">(</span><span class="kt">int</span> <span class="n">measureSpec</span><span class="o">,</span> <span class="kt">int</span> <span class="n">defaultSize</span><span class="o">){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">defaultSize</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">specMode</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">MeasureSpec</span><span class="o">.</span><span class="na">getMode</span><span class="o">(</span><span class="n">measureSpec</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">specSize</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">MeasureSpec</span><span class="o">.</span><span class="na">getSize</span><span class="o">(</span><span class="n">measureSpec</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">specMode</span> <span class="o">==</span> <span class="n">View</span><span class="o">.</span><span class="na">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">){</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">specSize</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">specMode</span> <span class="o">==</span> <span class="n">View</span><span class="o">.</span><span class="na">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">){</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">specSize</span><span class="o">,</span> <span class="n">defaultSize</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>测量阶段，<code>measure()</code>方法被父View调用，在<code>measure()</code>中做一些准备和优化工作后，调用<code>onMeasure()</code>来进行实际的自我测量。<code>onMeasure()</code>中做的事，<code>View</code>和<code>ViewGroup</code>不太一样：</p>

<ul>
<li><code>View</code>在<code>onMeasure()</code>中根据父View传过来的MeasureSpec约束计算自己的大小并调用<code>setMeasuredDimension</code>保存下来。</li>
<li><code>ViewGroup</code>在<code>onMeasure</code>中调用<code>measureChildren</code>测量子View，并根据子View计算出的期望大小来计算出它们的实际尺寸和位置然后保存。同时根据子View的尺寸和位置来计算出自己的尺寸并保存。</li>
</ul>


<p>在<code>ViewGroup</code>测量子View的时候，也就是调用<code>childView.measure()</code>的时候需要将自己的约束MeasureSpec传递给子View，这个MeasureSpec如何计算，下面会说。回到最顶层的父View，也即<code>DecorView</code>，它的MeasureSpec是<code>LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT</code>。</p>

<p>布局过程，<code>layout()</code>方法被父View调用，在<code>layout()</code>方法中它会保存父View传进来的自己的位置和尺寸，并且调用<code>onLayout</code>来进行实际的内部布局。<code>onLayout</code>中做的事，<code>View</code>和<code>ViewGroup</code>也不一样：</p>

<ul>
<li><code>View</code>由于没有子View，它的<code>onLayout</code>什么也不做</li>
<li><code>ViewGroup</code>在<code>onLayout</code>中会调用自己所有子View的<code>layout</code>方法，把它们的尺寸和位置传给它们，让它们完成自我的内部布局。</li>
</ul>


<h4>全新定义 View 的尺寸</h4>

<p>子View在计算的时候需要保证计算结果满足父View MeasureSpec对自己的尺寸限制。<code>ViewGroup</code>提供了几个工具方法供我们调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Ask all of the children of this view to measure themselves, taking into</span>
</span><span class='line'><span class="cm"> * account both the MeasureSpec requirements for this view and its padding.</span>
</span><span class='line'><span class="cm"> * We skip children that are in the GONE state The heavy lifting is done in</span>
</span><span class='line'><span class="cm"> * getChildMeasureSpec.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param widthMeasureSpec The width requirements for this view</span>
</span><span class='line'><span class="cm"> * @param heightMeasureSpec The height requirements for this view</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">measureChildren</span><span class="o">(</span><span class="kt">int</span> <span class="n">widthMeasureSpec</span><span class="o">,</span> <span class="kt">int</span> <span class="n">heightMeasureSpec</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">mChildrenCount</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">View</span><span class="o">[]</span> <span class="n">children</span> <span class="o">=</span> <span class="n">mChildren</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">View</span> <span class="n">child</span> <span class="o">=</span> <span class="n">children</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">((</span><span class="n">child</span><span class="o">.</span><span class="na">mViewFlags</span> <span class="o">&amp;</span> <span class="n">VISIBILITY_MASK</span><span class="o">)</span> <span class="o">!=</span> <span class="n">GONE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">measureChild</span><span class="o">(</span><span class="n">child</span><span class="o">,</span> <span class="n">widthMeasureSpec</span><span class="o">,</span> <span class="n">heightMeasureSpec</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Ask one of the children of this view to measure itself, taking into</span>
</span><span class='line'><span class="cm"> * account both the MeasureSpec requirements for this view and its padding.</span>
</span><span class='line'><span class="cm"> * The heavy lifting is done in getChildMeasureSpec.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param child The child to measure</span>
</span><span class='line'><span class="cm"> * @param parentWidthMeasureSpec The width requirements for this view</span>
</span><span class='line'><span class="cm"> * @param parentHeightMeasureSpec The height requirements for this view</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">measureChild</span><span class="o">(</span><span class="n">View</span> <span class="n">child</span><span class="o">,</span> <span class="kt">int</span> <span class="n">parentWidthMeasureSpec</span><span class="o">,</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">parentHeightMeasureSpec</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">LayoutParams</span> <span class="n">lp</span> <span class="o">=</span> <span class="n">child</span><span class="o">.</span><span class="na">getLayoutParams</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">childWidthMeasureSpec</span> <span class="o">=</span> <span class="n">getChildMeasureSpec</span><span class="o">(</span><span class="n">parentWidthMeasureSpec</span><span class="o">,</span>
</span><span class='line'>            <span class="n">mPaddingLeft</span> <span class="o">+</span> <span class="n">mPaddingRight</span><span class="o">,</span> <span class="n">lp</span><span class="o">.</span><span class="na">width</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">final</span> <span class="kt">int</span> <span class="n">childHeightMeasureSpec</span> <span class="o">=</span> <span class="n">getChildMeasureSpec</span><span class="o">(</span><span class="n">parentHeightMeasureSpec</span><span class="o">,</span>
</span><span class='line'>            <span class="n">mPaddingTop</span> <span class="o">+</span> <span class="n">mPaddingBottom</span><span class="o">,</span> <span class="n">lp</span><span class="o">.</span><span class="na">height</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">child</span><span class="o">.</span><span class="na">measure</span><span class="o">(</span><span class="n">childWidthMeasureSpec</span><span class="o">,</span> <span class="n">childHeightMeasureSpec</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Does the hard part of measureChildren: figuring out the MeasureSpec to</span>
</span><span class='line'><span class="cm"> * pass to a particular child. This method figures out the right MeasureSpec</span>
</span><span class='line'><span class="cm"> * for one dimension (height or width) of one child view.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * The goal is to combine information from our MeasureSpec with the</span>
</span><span class='line'><span class="cm"> * LayoutParams of the child to get the best possible results. For example,</span>
</span><span class='line'><span class="cm"> * if the this view knows its size (because its MeasureSpec has a mode of</span>
</span><span class='line'><span class="cm"> * EXACTLY), and the child has indicated in its LayoutParams that it wants</span>
</span><span class='line'><span class="cm"> * to be the same size as the parent, the parent should ask the child to</span>
</span><span class='line'><span class="cm"> * layout given an exact size.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * @param spec The requirements for this view</span>
</span><span class='line'><span class="cm"> * @param padding The padding of this view for the current dimension and</span>
</span><span class='line'><span class="cm"> *        margins, if applicable</span>
</span><span class='line'><span class="cm"> * @param childDimension How big the child wants to be in the current</span>
</span><span class='line'><span class="cm"> *        dimension</span>
</span><span class='line'><span class="cm"> * @return a MeasureSpec integer for the child</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getChildMeasureSpec</span><span class="o">(</span><span class="kt">int</span> <span class="n">spec</span><span class="o">,</span> <span class="kt">int</span> <span class="n">padding</span><span class="o">,</span> <span class="kt">int</span> <span class="n">childDimension</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">specMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">getMode</span><span class="o">(</span><span class="n">spec</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">specSize</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">getSize</span><span class="o">(</span><span class="n">spec</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">specSize</span> <span class="o">-</span> <span class="n">padding</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">resultSize</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">resultMode</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">switch</span> <span class="o">(</span><span class="n">specMode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Parent has imposed an exact size on us</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">childDimension</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to be our size. So be it.</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to determine its own size. It can&#39;t be</span>
</span><span class='line'>            <span class="c1">// bigger than us.</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Parent has imposed a maximum size on us</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants a specific size... so be it</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">childDimension</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to be our size, but our size is not fixed.</span>
</span><span class='line'>            <span class="c1">// Constrain child to not be bigger than us.</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to determine its own size. It can&#39;t be</span>
</span><span class='line'>            <span class="c1">// bigger than us.</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">AT_MOST</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Parent asked to see how big we want to be</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">UNSPECIFIED</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants a specific size... let him have it</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">childDimension</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">EXACTLY</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">MATCH_PARENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to be our size... find out how big it should</span>
</span><span class='line'>            <span class="c1">// be</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">sUseZeroUnspecifiedMeasureSpec</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">UNSPECIFIED</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">childDimension</span> <span class="o">==</span> <span class="n">LayoutParams</span><span class="o">.</span><span class="na">WRAP_CONTENT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Child wants to determine its own size.... find out how</span>
</span><span class='line'>            <span class="c1">// big it should be</span>
</span><span class='line'>            <span class="n">resultSize</span> <span class="o">=</span> <span class="n">View</span><span class="o">.</span><span class="na">sUseZeroUnspecifiedMeasureSpec</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>            <span class="n">resultMode</span> <span class="o">=</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">UNSPECIFIED</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">//noinspection ResourceType</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">MeasureSpec</span><span class="o">.</span><span class="na">makeMeasureSpec</span><span class="o">(</span><span class="n">resultSize</span><span class="o">,</span> <span class="n">resultMode</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到子View<code>MeasureSpec</code>是由3个因素共同决定的，父View的<code>MeasureSpec</code>，<code>padding</code>，<code>LayoutParams</code>中的值，其中父View的<code>MeasureSpec</code>是从<code>DecorView</code>一层层约束下来得到的，不难理解，那<code>LayoutParams</code>是从哪里来的呢？   其实<code>LayoutParams</code>是在<code>LayoutInflater</code>解析xml布局的时候，父布局会根据xml中的<code>layout_width</code>和<code>layout_height</code>来给子View<code>generateLayoutParams</code>保存在子View中，所以，可以认为子View的<code>LayoutParams</code>实际上保存的是布局中的开发者对View的要求。</p>

<p>着重看下<code>getChildMeasureSpec</code>这个方法，这个方法对父View尺寸有无限制的情况下子View的大小应该如何进行了处理，注释的比较清楚，就不解释了。</p>

<h4>定制 Layout(ViewGroup) 的内部布局</h4>

<p>通过重写<code>onMeasure()</code>来计算内部布局，重写<code>onLayout</code>来摆放子View。</p>

<p>重写<code>onMeasure()</code>的三个步骤：</p>

<ul>
<li>调用每个子View的<code>measure</code>方法来计算子View的尺寸</li>
<li>计算子View的位置并保存子View的位置和尺寸</li>
<li>计算自己的尺寸并用<code>setMeasuredDimension()</code>保存</li>
</ul>


<p>计算子View尺寸的关键在于<code>measure()</code>方法的两个MeasureSpec参数的计算。子View的<code>MeasureSpec</code>的计算方式：</p>

<ul>
<li>结合开发者的要求（xml中的layout_打头的属性）和自己的可用空间（自己的尺寸上限-已用尺寸）</li>
<li>尺寸上限根据自己的<code>MeasureSpec</code>中的mode而定，<code>EXACTLY/AT_MOST</code>尺寸上限为<code>MeasureSpec</code>中的size，<code>UNSPECIFIED</code>尺寸无上限。</li>
</ul>


<p>重写<code>onLayout</code>的方式，在<code>onLayout</code>里调用每个子View的<code>layout()</code>。</p>

<h4>reference</h4>

<ul>
<li><a href="https://hencoder.com/tag/bu-ju/">自定义 View &ndash; 布局</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义View总结一]]></title>
    <link href="http://Solarex.github.io/blog/2019/01/12/summary-of-custom-views-part-i/"/>
    <updated>2019-01-12T00:33:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2019/01/12/summary-of-custom-views-part-i</id>
    <content type="html"><![CDATA[<h2>自定义View总结 &ndash; 绘制</h2>

<h3>绘制基础</h3>

<ul>
<li><code>Canvas.drawColor(@ColorInt int color)</code> 颜色填充</li>
<li><code>drawCircle(float centerX, float centerY, float radius, Paint paint)</code> 画圆</li>
<li><code>Paint.setColor(int color)</code>,<code>Paint.setStyle(Paint.Style style)</code>,<code>Paint.setStrokeWidth(float width)</code>,<code>Paint.setAntiAlias(boolean aa)</code></li>
<li><code>drawRect(float left, float top, float right, float bottom, Paint paint)</code> 画矩形</li>
<li><code>drawPoint(float x, float y, Paint paint)</code> 画点</li>
<li><code>drawPoints(float[] pts, int offset, int count, Paint paint) / drawPoints(float[] pts, Paint paint)</code> 画点（批量）</li>
<li><code>drawOval(float left, float top, float right, float bottom, Paint paint)</code>画椭圆</li>
<li><code>drawLine(float startX, float startY, float stopX, float stopY, Paint paint)</code> 画线</li>
<li><code>drawLines(float[] pts, int offset, int count, Paint paint) / drawLines(float[] pts, Paint paint)</code> 画线（批量）</li>
<li><code>drawRoundRect(float left, float top, float right, float bottom, float rx, float ry, Paint paint)</code> 画圆角矩形</li>
<li><code>drawArc(float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean useCenter, Paint paint)</code> 绘制弧形或扇形</li>
<li><code>drawPath(Path path, Paint paint)</code> 画自定义图形</li>
<li><code>drawBitmap(Bitmap bitmap, float left, float top, Paint paint)</code> 画 Bitmap</li>
<li><code>drawText(String text, float x, float y, Paint paint)</code>绘制文字</li>
</ul>


<!-- more -->


<h4>Path</h4>

<ul>
<li><code>addCircle(float x, float y, float radius, Direction dir)</code> 添加圆</li>
<li><code>addOval(float left, float top, float right, float bottom, Direction dir) / addOval(RectF oval, Direction dir)</code>添加椭圆</li>
<li><code>addRect(float left, float top, float right, float bottom, Direction dir) / addRect(RectF rect, Direction dir)</code>添加矩形</li>
<li><code>addRoundRect(RectF rect, float rx, float ry, Direction dir) / addRoundRect(float left, float top, float right, float bottom, float rx, float ry, Direction dir) / addRoundRect(RectF rect, float[] radii, Direction dir) / addRoundRect(float left, float top, float right, float bottom, float[] radii, Direction dir)</code>添加圆角矩形</li>
<li><code>addPath(Path path)</code> 添加另一个 Path</li>
<li><code>lineTo(float x, float y) / rLineTo(float x, float y)</code>画直线</li>
<li><code>quadTo(float x1, float y1, float x2, float y2) / rQuadTo(float dx1, float dy1, float dx2, float dy2)</code>画二次贝塞尔曲线</li>
<li><code>cubicTo(float x1, float y1, float x2, float y2, float x3, float y3) / rCubicTo(float x1, float y1, float x2, float y2, float x3, float y3)</code> 画三次贝塞尔曲线</li>
<li><code>moveTo(float x, float y) / rMoveTo(float x, float y)</code>移动到目标位置</li>
<li><code>arcTo(RectF oval, float startAngle, float sweepAngle, boolean forceMoveTo) / arcTo(float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean forceMoveTo) / arcTo(RectF oval, float startAngle, float sweepAngle)</code> 画弧形</li>
<li><code>addArc(float left, float top, float right, float bottom, float startAngle, float sweepAngle) / addArc(RectF oval, float startAngle, float sweepAngle)</code>,<code>addArc()</code> 只是一个直接使用了 <code>forceMoveTo = true</code> 的简化版 <code>arcTo()</code></li>
<li><code>close()</code>封闭当前子图形</li>
<li><code>Path.setFillType(Path.FillType ft)</code> 设置填充方式</li>
</ul>


<h3>Paint详解</h3>

<center><p><img src="http://Solarex.github.io/images/canvas-color.jpg" alt="Canvas绘制的内容，有三层对颜色的处理"></p></center>


<h4>颜色</h4>

<table>
<thead>
<tr>
<th></th>
<th align="center">     canvas 方法      </th>
<th> 像素颜色的设置方式 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center"> drawColor/RGB/ARGB() </td>
<td> 直接作为参数传入   |</td>
</tr>
<tr>
<td></td>
<td align="center"> drawBitmap() </td>
<td> 与<code>bitmap</code>参数的像素颜色相同 |</td>
</tr>
<tr>
<td></td>
<td align="center"> 图形和文字(drawCircle()/drawPath()/drawText()&hellip;) </td>
<td> 在<code>paint</code>参数中设置 |</td>
</tr>
</tbody>
</table>


<h5>直接设置颜色<code>Paint.setColor(int color)</code>,<code>Paint.setARGB(int a,int r,int g,int b)</code></h5>

<h5>setShader(Shader shader) 设置shader</h5>

<ul>
<li><p>shader着色器，它和直接设置颜色的区别是，着色器设置的是一个颜色方案，或者说是一套着色规则。</p></li>
<li><p>LinearGradient 线性渐变</p></li>
<li><p>RadialGradient 辐射渐变，辐射渐变很好理解，就是从中心向周围辐射状的渐变。</p></li>
<li><p>SweepGradient 扫描渐变</p></li>
<li><p>BitmapShader 用 Bitmap 来着色，其实也就是用 Bitmap 的像素来作为图形或文字的填充。</p></li>
<li><p>ComposeShader 混合着色器 所谓混合，就是把两个 Shader 一起使用。</p></li>
</ul>


<h5>setColorFilter(ColorFilter colorFilter)</h5>

<p>为绘制设置颜色过滤。颜色过滤的意思，就是为绘制的内容设置一个统一的过滤策略，然后 Canvas.drawXXX() 方法会对每个像素都进行过滤后再绘制出来。</p>

<ul>
<li><code>LightingColorFilter(int mul, int add)</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">R</span><span class="err">&#39;</span> <span class="o">=</span> <span class="n">R</span> <span class="o">*</span> <span class="n">mul</span><span class="o">.</span><span class="na">R</span> <span class="o">/</span> <span class="mh">0xff</span> <span class="o">+</span> <span class="n">add</span><span class="o">.</span><span class="na">R</span>
</span><span class='line'><span class="n">G</span><span class="err">&#39;</span> <span class="o">=</span> <span class="n">G</span> <span class="o">*</span> <span class="n">mul</span><span class="o">.</span><span class="na">G</span> <span class="o">/</span> <span class="mh">0xff</span> <span class="o">+</span> <span class="n">add</span><span class="o">.</span><span class="na">G</span>
</span><span class='line'><span class="n">B</span><span class="err">&#39;</span> <span class="o">=</span> <span class="n">B</span> <span class="o">*</span> <span class="n">mul</span><span class="o">.</span><span class="na">B</span> <span class="o">/</span> <span class="mh">0xff</span> <span class="o">+</span> <span class="n">add</span><span class="o">.</span><span class="na">B</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>PorterDuffColorFilter(int color, PorterDuff.Mode mode)</code></li>
<li><code>ColorMatrixColorFilter</code></li>
</ul>


<p><code>ColorMatrixColorFilter</code> 使用一个 <code>ColorMatrix</code> 来对颜色进行处理。 <code>ColorMatrix</code> 这个类，内部是一个 4x5 的矩阵：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span> <span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="n">c</span><span class="o">,</span> <span class="n">d</span><span class="o">,</span> <span class="n">e</span><span class="o">,</span>
</span><span class='line'>  <span class="n">f</span><span class="o">,</span> <span class="n">g</span><span class="o">,</span> <span class="n">h</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">,</span>
</span><span class='line'>  <span class="n">k</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">n</span><span class="o">,</span> <span class="n">o</span><span class="o">,</span>
</span><span class='line'>  <span class="n">p</span><span class="o">,</span> <span class="n">q</span><span class="o">,</span> <span class="n">r</span><span class="o">,</span> <span class="n">s</span><span class="o">,</span> <span class="n">t</span> <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">R</span><span class="err">’</span> <span class="o">=</span> <span class="n">a</span><span class="o">*</span><span class="n">R</span> <span class="o">+</span> <span class="n">b</span><span class="o">*</span><span class="n">G</span> <span class="o">+</span> <span class="n">c</span><span class="o">*</span><span class="n">B</span> <span class="o">+</span> <span class="n">d</span><span class="o">*</span><span class="n">A</span> <span class="o">+</span> <span class="n">e</span><span class="o">;</span>
</span><span class='line'><span class="n">G</span><span class="err">’</span> <span class="o">=</span> <span class="n">f</span><span class="o">*</span><span class="n">R</span> <span class="o">+</span> <span class="n">g</span><span class="o">*</span><span class="n">G</span> <span class="o">+</span> <span class="n">h</span><span class="o">*</span><span class="n">B</span> <span class="o">+</span> <span class="n">i</span><span class="o">*</span><span class="n">A</span> <span class="o">+</span> <span class="n">j</span><span class="o">;</span>
</span><span class='line'><span class="n">B</span><span class="err">’</span> <span class="o">=</span> <span class="n">k</span><span class="o">*</span><span class="n">R</span> <span class="o">+</span> <span class="n">l</span><span class="o">*</span><span class="n">G</span> <span class="o">+</span> <span class="n">m</span><span class="o">*</span><span class="n">B</span> <span class="o">+</span> <span class="n">n</span><span class="o">*</span><span class="n">A</span> <span class="o">+</span> <span class="n">o</span><span class="o">;</span>
</span><span class='line'><span class="n">A</span><span class="err">’</span> <span class="o">=</span> <span class="n">p</span><span class="o">*</span><span class="n">R</span> <span class="o">+</span> <span class="n">q</span><span class="o">*</span><span class="n">G</span> <span class="o">+</span> <span class="n">r</span><span class="o">*</span><span class="n">B</span> <span class="o">+</span> <span class="n">s</span><span class="o">*</span><span class="n">A</span> <span class="o">+</span> <span class="n">t</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/chengdazhi/StyleImageView">StyleImageView</a></p>

<h5>setXfermode(Xfermode xfermode)</h5>

<ul>
<li><p>使用离屏缓冲（Off-screen Buffer）</p></li>
<li><p>控制好透明区域</p></li>
</ul>


<h4>效果</h4>

<h5>setAntiAlias (boolean aa) 设置抗锯齿</h5>

<h5>setStyle(Paint.Style style)</h5>

<h5>线条形状</h5>

<ul>
<li><p><code>setStrokeWidth(float width)</code></p></li>
<li><p><code>setStrokeCap(Paint.Cap cap)</code></p></li>
<li><p><code>setStrokeJoin(Paint.Join join)</code></p></li>
<li><p><code>setStrokeMiter(float miter)</code></p></li>
</ul>


<h5>色彩优化</h5>

<ul>
<li><p><code>setDither(boolean dither)</code> 设置图像的抖动</p></li>
<li><p><code>setFilterBitmap(boolean filter)</code> 设置是否使用双线性过滤来绘制 Bitmap</p></li>
</ul>


<h5>setPathEffect(PathEffect effect)</h5>

<p>使用 <code>PathEffect</code> 来给图形的轮廓设置效果。对 Canvas 所有的图形绘制有效，也就是  <code>drawLine() drawCircle() drawPath()</code> 这些方法。</p>

<ul>
<li><p><code>CornerPathEffect</code> 把所有拐角变成圆角</p></li>
<li><p><code>DiscretePathEffect</code> 把线条进行随机的偏离，让轮廓变得乱七八糟。</p></li>
<li><p><code>DashPathEffect</code> 使用虚线来绘制线条</p></li>
<li><p><code>PathDashPathEffect</code> 这个方法比 DashPathEffect 多一个前缀 Path ，所以顾名思义，它是使用一个 Path 来绘制「虚线」。</p></li>
<li><p><code>SumPathEffect</code> 这是一个组合效果类的 PathEffect 。它的行为特别简单，就是分别按照两种 PathEffect 分别对目标进行绘制。</p></li>
<li><p><code>ComposePathEffect</code> 这也是一个组合效果类的 PathEffect 。不过它是先对目标 Path 使用一个 PathEffect，然后再对这个改变后的 Path 使用另一个 PathEffect。它的构造方法 <code>ComposePathEffect(PathEffect outerpe, PathEffect innerpe)</code> 中的两个  PathEffect 参数， innerpe 是先应用的， outerpe 是后应用的。</p></li>
</ul>


<h5>setShadowLayer(float radius, float dx, float dy, int shadowColor)</h5>

<p>在之后的绘制内容下面加一层阴影。如果要清除阴影层，使用 clearShadowLayer() 。</p>

<ul>
<li><p>在硬件加速开启的情况下， setShadowLayer() 只支持文字的绘制，文字之外的绘制必须关闭硬件加速才能正常绘制阴影。</p></li>
<li><p>如果 shadowColor 是半透明的，阴影的透明度就使用 shadowColor 自己的透明度；而如果 shadowColor 是不透明的，阴影的透明度就使用 paint 的透明度。</p></li>
</ul>


<h5>setMaskFilter(MaskFilter maskfilter)</h5>

<p>为之后的绘制设置 <code>MaskFilter</code>。上一个方法 <code>setShadowLayer()</code> 是设置的在绘制层下方的附加效果；而这个 <code>MaskFilter</code> 和它相反，设置的是在绘制层上方的附加效果。</p>

<ul>
<li><p><code>BlurMaskFilter</code> 模糊效果的 MaskFilter。<code>BlurMaskFilter(float radius, BlurMaskFilter.Blur style)</code> 中， radius 参数是模糊的范围， style 是模糊的类型。NORMAL: 内外都模糊绘制，SOLID: 内部正常绘制，外部模糊，INNER: 内部模糊，外部不绘制，OUTER: 内部不绘制，外部模糊。</p></li>
<li><p><code>EmbossMaskFilter</code> 浮雕效果的 MaskFilter。</p></li>
</ul>


<h5>获取绘制的 Path</h5>

<p>根据 paint 的设置，计算出绘制 Path 或文字时的实际 Path。所谓实际 Path ，指的就是 drawPath() 的绘制内容的轮廓，要算上线条宽度和设置的 PathEffect。</p>

<ul>
<li><p><code>getFillPath(Path src, Path dst)</code>，<code>getFillPath(src, dst)</code> 方法就能获取这个实际 Path。方法的参数里，src 是原 Path ，而 dst 就是实际 Path 的保存位置。 <code>getFillPath(src, dst)</code> 会计算出实际 Path，然后把结果保存在 dst 里。</p></li>
<li><p><code>getTextPath(String text, int start, int end, float x, float y, Path path) / getTextPath(char[] text, int index, int count, float x, float y, Path path)</code> 文字的绘制，虽然是使用 Canvas.drawText() 方法，但其实在下层，文字信息全是被转化成图形，对图形进行绘制的。  getTextPath() 方法，获取的就是目标文字所对应的 Path</p></li>
</ul>


<h4>Paint初始化类</h4>

<ul>
<li><p><code>reset()</code></p></li>
<li><p><code>set(Paint src)</code></p></li>
<li><p><code>setFlags(int flags)</code></p></li>
</ul>


<h3>文字的绘制</h3>

<h5>Canvas 绘制文字的方式</h5>

<ul>
<li><p><code>drawText(String text, float x, float y, Paint paint)</code></p></li>
<li><p><code>drawTextRun()</code></p></li>
<li><p><code>drawTextOnPath()</code></p></li>
<li><p><code>StaticLayout</code></p></li>
</ul>


<h5>Paint 对文字绘制的辅助</h5>

<ul>
<li><p><code>setTextSize(float textSize)</code></p></li>
<li><p><code>setTypeface(Typeface typeface)</code></p></li>
<li><p><code>setFakeBoldText(boolean fakeBoldText)</code> 伪粗体（ fake bold ），因为它并不是通过选用更高 weight 的字体让文字变粗，而是通过程序在运行时把文字给「描粗」了</p></li>
<li><p><code>setStrikeThruText(boolean strikeThruText)</code> 是否加删除线</p></li>
<li><p><code>setUnderlineText(boolean underlineText)</code> 是否加下划线</p></li>
<li><p><code>setTextSkewX(float skewX)</code> 设置文字横向错切角度。其实就是文字倾斜度的啦。</p></li>
<li><p><code>setTextScaleX(float scaleX)</code> 设置文字横向放缩。也就是文字变胖变瘦。</p></li>
<li><p><code>setLetterSpacing(float letterSpacing)</code> 设置字符间距。默认值是 0。</p></li>
<li><p><code>setFontFeatureSettings(String settings)</code></p></li>
<li><p><code>setTextAlign(Paint.Align align)</code> 设置文字的对齐方式。一共有三个值：LEFT CETNER 和 RIGHT。默认值为 LEFT。</p></li>
<li><p><code>setTextLocale(Locale locale) / setTextLocales(LocaleList locales)</code> 设置绘制所使用的 Locale。</p></li>
<li><p><code>setHinting(int mode)</code> 设置是否启用字体的 hinting （字体微调）。</p></li>
<li><p><code>setElegantTextHeight(boolean elegant)</code> 设置是否开启文字的 elegant height 。开启之后，文字的高度就变优雅了</p></li>
<li><p><code>setSubpixelText(boolean subpixelText)</code> 是否开启次像素级的抗锯齿（ sub-pixel anti-aliasing ）。</p></li>
<li><p><code>setLinearText(boolean linearText)</code></p></li>
<li><p><code>hasGlyph(String string)</code> 检查指定的字符串中是否是一个单独的字形 (glyph）。</p></li>
</ul>


<h5>测量文字尺寸类</h5>

<ul>
<li><p><code>float getFontSpacing()</code> 获取推荐的行距。</p></li>
<li><p><code>FontMetircs getFontMetrics()</code> 获取 Paint 的 FontMetrics。<code>FontMetrics</code> 是个相对专业的工具类，它提供了几个文字排印方面的数值：<code>ascent</code>,  <code>descent</code>, <code>top</code>, <code>bottom</code>, <code>leading</code>。<code>ascent</code> 和 <code>descent</code> 这两个值还可以通过 <code>Paint.ascent()</code> 和 <code>Paint.descent()</code> 来快捷获取。</p></li>
<li><p><code>getTextBounds(String text, int start, int end, Rect bounds)</code> 获取文字的显示范围。</p></li>
<li><p><code>float measureText(String text)</code> 测量文字的宽度并返回。</p></li>
</ul>


<p>如果你用代码分别使用 getTextBounds() 和 measureText() 来测量文字的宽度，你会发现  measureText() 测出来的宽度总是比 getTextBounds() 大一点点。这是因为这两个方法其实测量的是两个不一样的东西。getTextBounds: 它测量的是文字的显示范围（关键词：显示）。形象点来说，你这段文字外放置一个可变的矩形，然后把矩形尽可能地缩小，一直小到这个矩形恰好紧紧包裹住文字，那么这个矩形的范围，就是这段文字的 bounds。measureText(): 它测量的是文字绘制时所占用的宽度（关键词：占用）。前面已经讲过，一个文字在界面中，往往需要占用比他的实际显示宽度更多一点的宽度，以此来让文字和文字之间保留一些间距，不会显得过于拥挤。</p>

<ul>
<li><p><code>getTextWidths(String text, float[] widths)</code> 获取字符串中每个字符的宽度，并把结果填入参数 widths。</p></li>
<li><p><code>int breakText(String text, boolean measureForwards, float maxWidth, float[] measuredWidth)</code> 这个方法也是用来测量文字宽度的。但和 measureText() 的区别是， breakText() 是在给出宽度上限的前提下测量文字的宽度。如果文字的宽度超出了上限，那么在临近超限的位置截断文字。</p></li>
</ul>


<h5>光标相关</h5>

<ul>
<li><p><code>getRunAdvance(CharSequence text, int start, int end, int contextStart, int contextEnd, boolean isRtl, int offset)</code> 对于一段文字，计算出某个字符处光标的 x 坐标。</p></li>
<li><p><code>getOffsetForAdvance(CharSequence text, int start, int end, int contextStart, int contextEnd, boolean isRtl, float advance)</code> 给出一个位置的像素值，计算出文字中最接近这个位置的字符偏移量</p></li>
</ul>


<h3>Canvas 对绘制的辅助 clipXXX() 和 Matrix</h3>

<h5>范围裁切</h5>

<p>范围裁切有两个方法： <code>clipRect()</code> 和 <code>clipPath()</code>。裁切方法之后的绘制代码，都会被限制在裁切范围内。</p>

<ul>
<li><p><code>clipRect()</code></p></li>
<li><p><code>clipPath()</code></p></li>
</ul>


<h5>几何变换</h5>

<p>几何变换的使用大概分为三类：</p>

<ul>
<li>使用 Canvas 来做常见的二维变换；</li>
<li>使用 Matrix 来做常见和不常见的二维变换；</li>
<li>使用 Camera 来做三维变换。</li>
</ul>


<h6>使用 Canvas 来做常见的二维变换</h6>

<ul>
<li><p><code>Canvas.translate(float dx, float dy)</code> 平移</p></li>
<li><p><code>Canvas.rotate(float degrees, float px, float py)</code> 旋转</p></li>
<li><p><code>Canvas.scale(float sx, float sy, float px, float py)</code> 放缩</p></li>
<li><p><code>skew(float sx, float sy)</code> 错切</p></li>
</ul>


<h6>使用 Matrix 来做变换</h6>

<p>Matrix 做常见变换的方式：</p>

<ul>
<li>创建 Matrix 对象；</li>
<li>调用 Matrix 的 <code>pre/postTranslate/Rotate/Scale/Skew()</code> 方法来设置几何变换；</li>
<li>使用 <code>Canvas.setMatrix(matrix)</code> 或 <code>Canvas.concat(matrix)</code> 来把几何变换应用到 Canvas。</li>
</ul>


<p>把 Matrix 应用到 Canvas 有两个方法： <code>Canvas.setMatrix(matrix)</code> 和 <code>Canvas.concat(matrix)</code>。</p>

<ul>
<li><code>Canvas.setMatrix(matrix)</code>：用 Matrix 直接替换 Canvas 当前的变换矩阵，即抛弃 Canvas 当前的变换，改用 Matrix 的变换（注：根据下面评论里以及我在微信公众号中收到的反馈，不同的系统中 setMatrix(matrix) 的行为可能不一致，所以还是尽量用  concat(matrix) 吧）；</li>
<li><code>Canvas.concat(matrix)</code>：用 Canvas 当前的变换矩阵和 Matrix 相乘，即基于 Canvas 当前的变换，叠加上 Matrix 中的变换。</li>
</ul>


<p>使用 Matrix 来做自定义变换</p>

<ul>
<li><code>Matrix.setPolyToPoly(float[] src, int srcIndex, float[] dst, int dstIndex, int pointCount)</code> 用点对点映射的方式设置变换。poly 就是「多」的意思。setPolyToPoly() 的作用是通过多点的映射的方式来直接设置变换。「多点映射」的意思就是把指定的点移动到给出的位置，从而发生形变。例如：(0, 0) &ndash;> (100, 100) 表示把 (0, 0) 位置的像素移动到 (100, 100) 的位置，这个是单点的映射，单点映射可以实现平移。而多点的映射，就可以让绘制内容任意地扭曲。</li>
</ul>


<h6>使用 Camera 来做三维变换</h6>

<p>Camera 的三维变换有三类：旋转、平移、移动相机。</p>

<ul>
<li><p><code>Camera.rotate*()</code> 三维旋转 <code>Camera.rotate*()</code> 一共有四个方法： <code>rotateX(deg) rotateY(deg) rotateZ(deg) rotate(x, y, z)</code>。</p></li>
<li><p><code>Camera.translate(float x, float y, float z)</code> 移动</p></li>
<li><p><code>Camera.setLocation(x, y, z)</code> 设置虚拟相机的位置。在 Camera 中，相机的默认位置是 (0, 0, -8)（英寸）。8 x 72 = 576，所以它的默认位置是 (0, 0, -576)（像素）。</p></li>
</ul>


<h3>绘制顺序</h3>

<h5>super.onDraw() 前 or 后？</h5>

<h5><code>dispatchDraw()</code>：绘制子 View 的方法</h5>

<h5>绘制过程简述</h5>

<p>绘制过程中最典型的两个部分是上面讲到的主体和子 View，但它们并不是绘制过程的全部。除此之外，绘制过程还包含一些其他内容的绘制。具体来讲，一个完整的绘制过程会依次绘制以下几个内容：</p>

<ul>
<li>背景</li>
<li>主体（onDraw()）</li>
<li>子 View（dispatchDraw()）</li>
<li>滑动边缘渐变和滑动条</li>
<li>前景</li>
</ul>


<center><p><img src="http://Solarex.github.io/images/canvas-draw-process.jpg"/></p></center>


<h5>onDrawForeground()</h5>

<p>在 onDrawForeground() 中，会依次绘制滑动边缘渐变、滑动条和前景。</p>

<h5>draw() 总调度方法</h5>

<center><p><img src="http://Solarex.github.io/images/canvas-draw.jpg"/></p></center>


<p>关于绘制方法，有两点需要注意一下：</p>

<ul>
<li><p>出于效率的考虑，ViewGroup 默认会绕过 <code>draw()</code> 方法，换而直接执行  <code>dispatchDraw()</code>，以此来简化绘制流程。所以如果你自定义了某个 ViewGroup 的子类（比如 LinearLayout）并且需要在它的除 <code>dispatchDraw()</code> 以外的任何一个绘制方法内绘制内容，你可能会需要调用 <code>View.setWillNotDraw(false)</code> 这行代码来切换到完整的绘制流程（是「可能」而不是「必须」的原因是，有些 ViewGroup 是已经调用过  setWillNotDraw(false) 了的，例如 ScrollView）。</p></li>
<li><p>有的时候，一段绘制代码写在不同的绘制方法中效果是一样的，这时你可以选一个自己喜欢或者习惯的绘制方法来重写。但有一个例外：如果绘制代码既可以写在  <code>onDraw()</code> 里，也可以写在其他绘制方法里，那么优先写在 <code>onDraw()</code> ，因为 Android 有相关的优化，可以在不需要重绘的时候自动跳过 <code>onDraw()</code> 的重复执行，以提升开发效率。享受这种优化的只有 <code>onDraw()</code> 一个方法。</p></li>
</ul>


<h3>属性动画 Property Animation</h3>

<p> Android 里动画是有一些分类的：动画可以分为两类：Animation 和 Transition；其中 Animation 又可以再分为 View Animation 和 Property Animation 两类： View Animation 是纯粹基于 framework 的绘制转变，Property Animation，属性动画，这是在 Android 3.0 开始引入的新的动画形式。</p>

<p> ##### ViewPropertyAnimator</p>

<p> <center><p><img src="http://Solarex.github.io/images/view-animate.jpg"/></p></center></p>

<p> ##### ObjectAnimator</p>

<p>使用方式：</p>

<ul>
<li>如果是自定义控件，需要添加 setter / getter 方法；</li>
<li>用 ObjectAnimator.ofXXX() 创建 ObjectAnimator 对象；</li>
<li>用 start() 方法执行动画。</li>
</ul>


<h5>通用方法</h5>

<ul>
<li><p><code>setDuration(int duration)</code> 设置动画时长</p></li>
<li><p><code>setInterpolator(Interpolator interpolator)</code> 设置 Interpolator,<code>AccelerateDecelerateInterpolator</code>,<code>LinearInterpolator</code>,<code>AccelerateInterpolator</code>,<code>DecelerateInterpolator</code>,<code>AnticipateInterpolator</code>,<code>OvershootInterpolator</code>,<code>AnticipateOvershootInterpolator</code>,<code>BounceInterpolator</code>,<code>CycleInterpolator</code>,<code>PathInterpolator</code>,<code>FastOutLinearInInterpolator</code>,<code>FastOutSlowInInterpolator</code>,<code>LinearOutSlowInInterpolator</code></p></li>
</ul>


<h5>设置监听器</h5>

<p>设置监听器的方法， ViewPropertyAnimator 和 ObjectAnimator 略微不一样：  ViewPropertyAnimator 用的是 setListener() 和 setUpdateListener() 方法，可以设置一个监听器，要移除监听器时通过 set[Update]Listener(null) 填 null 值来移除；而  ObjectAnimator 则是用 addListener() 和 addUpdateListener() 来添加一个或多个监听器，移除监听器则是通过 remove[Update]Listener() 来指定移除对象。另外，由于 ObjectAnimator 支持使用 pause() 方法暂停，所以它还多了一个  addPauseListener() / removePauseListener() 的支持；而 ViewPropertyAnimator 则独有  withStartAction() 和 withEndAction() 方法，可以设置一次性的动画开始或结束的监听。</p>

<p>AnimatorListener 共有 4 个回调方法：</p>

<ul>
<li><p><code>onAnimationStart(Animator animation)</code></p></li>
<li><p><code>onAnimationEnd(Animator animation)</code></p></li>
<li><p><code>onAnimationCancel(Animator animation)</code></p></li>
<li><p><code>onAnimationRepeat(Animator animation)</code></p></li>
</ul>


<p><code>AnimatorUpdateListener</code>它只有一个回调方法：<code>onAnimationUpdate(ValueAnimator animation)</code></p>

<p><code>ViewPropertyAnimator.withStartAction/EndAction()</code>，<code>withStartAction() / withEndAction()</code> 是一次性的，在动画执行结束后就自动弃掉了，就算之后再重用 <code>ViewPropertyAnimator</code> 来做别的动画，用它们设置的回调也不会再被调用。而 <code>set/addListener()</code> 所设置的 <code>AnimatorListener</code> 是持续有效的，当动画重复执行时，回调总会被调用。<code>withEndAction()</code> 设置的回调只有在动画正常结束时才会被调用，而在动画被取消时不会被执行。这点和 <code>AnimatorListener.onAnimationEnd()</code> 的行为是不一致的。</p>

<h5>TypeEvaluator</h5>

<ul>
<li><p><code>ArgbEvaluator</code></p></li>
<li><p>自定义 Evaluator</p></li>
</ul>


<p>借助于 TypeEvaluator，属性动画就可以通过 ofObject() 来对不限定类型的属性做动画了。方式很简单：</p>

<ul>
<li><p>为目标属性写一个自定义的 TypeEvaluator</p></li>
<li><p>使用 ofObject() 来创建 Animator，并把自定义的 TypeEvaluator 作为参数填入</p></li>
</ul>


<h5>PropertyValuesHolder 同一个动画中改变多个属性</h5>

<h5>AnimatorSet 多个动画配合执行</h5>

<h5>PropertyValuesHolders.ofKeyframe() 把同一个属性拆分</h5>

<h3>硬件加速</h3>

<ul>
<li><p><a href="https://developer.android.google.cn/guide/topics/graphics/hardware-accel.html">Hardware Acceleration | Android Developers</a></p></li>
<li><p><a href="https://www.youtube.com/watch?v=v9S5EO7CLjo">Google I/O 2011: Accelerated Android Rendering</a></p></li>
</ul>


<p>所谓硬件加速，指的是把某些计算工作交给专门的硬件来做，而不是和普通的计算工作一样交给 CPU 来处理。这样不仅减轻了 CPU 的压力，而且由于有了「专人」的处理，这份计算工作的速度也被加快了。这就是「硬件加速」。</p>

<p>而对于 Android 来说，硬件加速有它专属的意思：在 Android 里，硬件加速专指把 View 中绘制的计算工作交给 GPU 来处理。进一步地再明确一下，这个「绘制的计算工作」指的就是把绘制方法中的那些 Canvas.drawXXX() 变成实际的像素这件事。</p>

<p>在硬件加速关闭的时候，Canvas 绘制的工作方式是：把要绘制的内容写进一个  Bitmap，然后在之后的渲染过程中，这个 Bitmap 的像素内容被直接用于渲染到屏幕。这种绘制方式的主要计算工作在于把绘制操作转换为像素的过程（例如由一句  Canvas.drawCircle() 来获得一个具体的圆的像素信息），这个过程的计算是由 CPU 来完成的。而在硬件加速开启时，Canvas 的工作方式改变了：它只是把绘制的内容转换为 GPU 的操作保存了下来，然后就把它交给 GPU，最终由 GPU 来完成实际的显示工作。</p>

<p>硬件加速不只是好处，也有它的限制：受到 GPU 绘制方式的限制，Canvas 的有些方法在硬件加速开启式会失效或无法正常工作。比如，在硬件加速开启时， clipPath() 在 API 18 及以上的系统中才有效。具体的 API 限制和 API 版本的关系如下图：</p>

<center><p><img src="http://Solarex.github.io/images/hardware-acceleration.jpg"></p></center>


<h5>View Layer</h5>

<p>setLayerType() 这个方法，它的作用其实就是名字里的意思：设置 View Layer 的类型。所谓 View Layer，又称为离屏缓冲（Off-screen Buffer），它的作用是单独启用一块地方来绘制这个 View ，而不是使用软件绘制的 Bitmap 或者通过硬件加速的 GPU。这块「地方」可能是一块单独的 Bitmap，也可能是一块 OpenGL 的纹理（texture，OpenGL 的纹理可以简单理解为图像的意思），具体取决于硬件加速是否开启。采用什么来绘制 View 不是关键，关键在于当设置了 View Layer 的时候，它的绘制会被缓存下来，而且缓存的是最终的绘制结果，而不是像硬件加速那样只是把 GPU 的操作保存下来再交给 GPU 去计算。通过这样更进一步的缓存方式，View 的重绘效率进一步提高了：只要绘制的内容没有变，那么不论是 CPU 绘制还是 GPU 绘制，它们都不用重新计算，而只要只用之前缓存的绘制结果就可以了。</p>

<p>基于这样的原理，在进行移动、旋转等（无需调用 invalidate()）的属性动画的时候开启 Hardware Layer 将会极大地提升动画的效率，因为在动画过程中 View 本身并没有发生改变，只是它的位置或角度改变了，而这种改变是可以由 GPU 通过简单计算就完成的，并不需要重绘整个 View。所以在这种动画的过程中开启 Hardware Layer，可以让本来就依靠硬件加速而变流畅了的动画变得更加流畅。</p>

<p>不过一定要注意，只有你在对 translationX translationY rotation alpha 等无需调用  invalidate() 的属性做动画的时候，这种方法才适用，因为这种方法本身利用的就是当界面不发生时，缓存未更新所带来的时间的节省。所以简单地说——这种方式不适用于基于自定义属性绘制的动画。</p>

<p>另外，由于设置了 View Layer 后，View 在初次绘制时以及每次 invalidate() 后重绘时，需要进行两次的绘制工作（一次绘制到 Layer，一次从 Layer 绘制到显示屏），所以其实它的每次绘制的效率是被降低了的。所以一定要慎重使用 View Layer，在需要用到它的时候再去使用。</p>

<h3>reference</h3>

<ul>
<li><a href="https://github.com/xinghongfei/awesome-view">awesome-view</a></li>
<li><a href="https://github.com/GcsSloop/AndroidNote/tree/master/CustomView">GcsSloop CustomView</a></li>
<li><a href="https://blog.csdn.net/aigestudio/column/info/androidcustomview">Android自定义控件其实很简单</a></li>
<li><a href="https://hencoder.com/tag/hui-zhi/">自定义View-绘制</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[碎碎念]]></title>
    <link href="http://Solarex.github.io/blog/2018/09/12/a-few-lately-thoughts/"/>
    <updated>2018-09-12T21:51:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2018/09/12/a-few-lately-thoughts</id>
    <content type="html"><![CDATA[<p>最近项目不太忙，解bug的间隙把百合仙子最近几年的博客翻看了一下，想起很多往事，权且把应该放到饭否的一些碎碎念放到这里吧。</p>

<ul>
<li><p>仙子现在还在坚持使用InoReader，自从Google Reader关闭之后，我也尝试过几种替代工具，feedly，inoreader，QQ邮箱的阅读空间，把从Google Reader导出的OPML导入了进去，我登录了InoReader和feedly账号看了下，大部分博客都已经停更了，一片红，QQ邮箱阅读空间里面也一片狼藉，也懒得删，反正现在已经不用了。之前上大学的时候不像现在专一一个方向，订阅了好多博客，现在有了好多垂直的网站或者App来获取专一方向的信息，比如开发者头条，Gank.io，AndroidWeekly等。QQ邮箱的阅读空间被张小龙搬到微信弄成了公众号，不知不觉间订阅了好多公众号，直到上周微信弹出公众号订阅已达上限才发现原来自己订阅了这么多，可自从订阅号改版后打开更少了，有些公众号直接快捷方式放到了Launcher上，可也很少打开查看，sigh。</p>

<p><!-- more --></p></li>
<li><p>订阅号订阅了很多，可很少打开看，现在每天除了上班的时候在地铁上看会书或者听一下视频课程，感觉很少有提升自己的动作了，这样很不好，2018年已经过去了一大半，然而年前给自己定的计划还有很大一部分没有完成，还有许多是只有输入没有输出，有些知识只是看一遍学习一遍就过去了，没有把原理吃透，写成blog输出出来，现在要抓紧时间赶了。已经入秋了，天气慢慢转凉了，晚上不开空调都可以睡觉了，正好心不那么浮躁，适合整理总结提升。</p></li>
<li><p>在饭否上看到一位大学同学在腾讯已经升到T3了，sigh，回顾自己过去几年，走了好多弯路，现在要慢慢补上了。看到这位同学使用的饭否客户端是Twidere，开源的，于是想看下饭否API授权相关的源码，下载源码下来导入到Android Studio提示没有google-services.json文件，去Google Cloud Platform上下载生成的json文件时发现要自己创建工程，然而我的Google Cloud Platform上已经有好几个大学时候创建的僵尸project了，全部清理了一下，等到周末研究下google-services.json怎么从Google Cloud Platform上生成下载。</p></li>
<li><p>Google Cloud Platform上的project应该还是在上大学的时候建的，那时候还叫Google App Engine，就用App Engine的python sdk deploy了几个project到appspot上，google 收费政策改变之后，之前的都访问不了了，看v2ex都从app engine撤了，也就没管，一直保留到现在，没啥用，全删了。</p></li>
<li><p>Mac上的ShadowsocksX-NG客户端好像不太稳定，看log总是显示TCP Connection Timeout，还是换回了shadowsocks-libev的ss-local命令行和polipo配合。用Proxifier代理了Reeder，Telegram，Slack，Lepton，OhMyStar2。Lepton是管理gist的，OhMyStar2是管理github star repo的，github总算被管理起来了。Telegram上加了几个bot，感觉挺有意思的，第一次接触bot应该是在Gtalk群组里面仙子写的Lisa，可Gtalk也没了，群组里的小伙伴也都不见了。什么时候自己也写个Telegram bot，感觉应该不难，主要是没时间，今年是肯定不行了，等明年吧，拿Python练练手。</p></li>
<li><p>之前也看了python官方doc照着写了几个demo，现在服务器上还在跑着readfree的自动签到脚本，可总感觉没入python的门，归根结底还是写的少，现在机器学习很火，底层用的语言就是Python，感觉要好好补一下Python了，可又总没时间，不知道把这块安排到什么时间。</p></li>
<li><p>现在看一个语言的学习，抛开C语言的基础，循环啊什么基础的其实最主要的就是语言的基础类库的使用了，先做几个练手的项目把基础类库用起来再说，慢慢就熟练了，至于语法糖底层的原理，语言底层的机制，可以留到以后慢慢看。Java语言用了那么久，也是现在才开始看深入理解JVM，把深入理解JVM看完了，就要看Kotlin实战了，准备把Kotlin用起来。</p></li>
<li><p>Android学习方面的roadmap有了，可进展不是太如意，要抓紧一些时间了。</p></li>
<li><p>弟弟开学回学校了，第三年是实习，跟着学校去了外地实习。想想弟弟深圳的日子，每天下班到家就有热汤饭吃，而且是家乡的饭菜，想吃什么发个菜谱链接给弟弟就行了，真幸福啊。希望明年弟弟实习完了回校拿到毕业证之后能在深圳找到合适的工作，这样我和妈跟弟弟就又可以在一起了。十一本来妈准备回老家一趟的，可黄牛没抢到返程的票，跟妈商量了一下，不回去了，等到过年的时候一起回去。辛苦老爸一个人在家收玉米了，老家天气也不太好，跟爸商量好几次不种地的事了，可爸不同意，今年就剩爸一个人在家忙活，辛苦他了。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EffectiveJava2nd读书笔记]]></title>
    <link href="http://Solarex.github.io/blog/2018/07/12/notes-on-effective-java/"/>
    <updated>2018-07-12T14:30:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2018/07/12/notes-on-effective-java</id>
    <content type="html"><![CDATA[<p>已迁移到gitbook，请访问<a href="https://solarex.github.io/reading-notes/effective-java/readme.html">EffectiveJava笔记</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入理解Java虚拟机读书笔记]]></title>
    <link href="http://Solarex.github.io/blog/2018/07/11/notes-on-jvm/"/>
    <updated>2018-07-11T14:28:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2018/07/11/notes-on-jvm</id>
    <content type="html"><![CDATA[<p>已迁移到gitbook，请访问<a href="https://solarex.github.io/reading-notes/deep-into-jvm/readme.html">深入理解Java虚拟机笔记</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java泛型语法糖]]></title>
    <link href="http://Solarex.github.io/blog/2018/07/10/java-generics-syntactic-sugar/"/>
    <updated>2018-07-10T14:24:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2018/07/10/java-generics-syntactic-sugar</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java枚举语法糖]]></title>
    <link href="http://Solarex.github.io/blog/2018/07/10/java-enum-syntactic-sugar/"/>
    <updated>2018-07-10T14:24:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2018/07/10/java-enum-syntactic-sugar</id>
    <content type="html"><![CDATA[<p>Java从1.5引入枚举类型，EffectiveJava第2版item 30也建议我们使用枚举来代替int常量。我们从下面的<code>Enum</code>示例中看下枚举类型到底是什么。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">enum</span> <span class="n">ExceptionHandleStrategy</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">IGNORE</span><span class="o">,</span>
</span><span class='line'>        <span class="n">LOG</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getLocalizedMessage</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">},</span>
</span><span class='line'>        <span class="n">THROW</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ExceptionHandleStrategy</span><span class="o">.</span><span class="na">IGNORE</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ExceptionHandleStrategy</span><span class="o">.</span><span class="na">LOG</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ExceptionHandleStrategy</span><span class="o">.</span><span class="na">THROW</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">EnumWithoutMethod</span><span class="o">.</span><span class="na">A</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">EnumWithoutMethod</span><span class="o">.</span><span class="na">B</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">EnumWithoutMethod</span><span class="o">.</span><span class="na">C</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">EnumWithVariable</span><span class="o">.</span><span class="na">A</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">EnumWithVariable</span><span class="o">.</span><span class="na">B</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">EnumWithVariable</span><span class="o">.</span><span class="na">C</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">EnumWithVariable</span><span class="o">.</span><span class="na">A</span><span class="o">.</span><span class="na">name</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">EnumWithVariable</span><span class="o">.</span><span class="na">A</span><span class="o">.</span><span class="na">getxxx</span><span class="o">());</span>
</span><span class='line'>        <span class="n">ExceptionHandleStrategy</span><span class="o">.</span><span class="na">LOG</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span><span class="s">&quot;system just broken&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">enum</span> <span class="n">EnumWithoutMethod</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">A</span><span class="o">,</span>
</span><span class='line'>        <span class="n">B</span><span class="o">,</span>
</span><span class='line'>        <span class="n">C</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">enum</span> <span class="n">EnumWithVariable</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">A</span><span class="o">(</span><span class="s">&quot;wristband&quot;</span><span class="o">),</span>
</span><span class='line'>        <span class="n">B</span><span class="o">(</span><span class="s">&quot;glucometer&quot;</span><span class="o">),</span>
</span><span class='line'>        <span class="n">C</span><span class="o">(</span><span class="s">&quot;fit&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">getxxx</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">EnumWithVariable</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">){</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>执行<code>java -jar ~/Software/confs/cfr-0.140.jar --sugarenums false Main.class</code>后我们得到如下结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.PrintStream</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">arrstring</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(((</span><span class="n">Object</span><span class="o">)((</span><span class="n">Object</span><span class="o">)</span><span class="n">ExceptionHandleStrategy</span><span class="o">.</span><span class="na">IGNORE</span><span class="o">)).</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(((</span><span class="n">Object</span><span class="o">)((</span><span class="n">Object</span><span class="o">)</span><span class="n">ExceptionHandleStrategy</span><span class="o">.</span><span class="na">LOG</span><span class="o">)).</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(((</span><span class="n">Object</span><span class="o">)((</span><span class="n">Object</span><span class="o">)</span><span class="n">ExceptionHandleStrategy</span><span class="o">.</span><span class="na">THROW</span><span class="o">)).</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(((</span><span class="n">Object</span><span class="o">)((</span><span class="n">Object</span><span class="o">)</span><span class="n">EnumWithoutMethod</span><span class="o">.</span><span class="na">A</span><span class="o">)).</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(((</span><span class="n">Object</span><span class="o">)((</span><span class="n">Object</span><span class="o">)</span><span class="n">EnumWithoutMethod</span><span class="o">.</span><span class="na">B</span><span class="o">)).</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(((</span><span class="n">Object</span><span class="o">)((</span><span class="n">Object</span><span class="o">)</span><span class="n">EnumWithoutMethod</span><span class="o">.</span><span class="na">C</span><span class="o">)).</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(((</span><span class="n">Object</span><span class="o">)((</span><span class="n">Object</span><span class="o">)</span><span class="n">EnumWithVariable</span><span class="o">.</span><span class="na">A</span><span class="o">)).</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(((</span><span class="n">Object</span><span class="o">)((</span><span class="n">Object</span><span class="o">)</span><span class="n">EnumWithVariable</span><span class="o">.</span><span class="na">B</span><span class="o">)).</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(((</span><span class="n">Object</span><span class="o">)((</span><span class="n">Object</span><span class="o">)</span><span class="n">EnumWithVariable</span><span class="o">.</span><span class="na">C</span><span class="o">)).</span><span class="na">getClass</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">EnumWithVariable</span><span class="o">.</span><span class="na">A</span><span class="o">.</span><span class="na">name</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">EnumWithVariable</span><span class="o">.</span><span class="na">A</span><span class="o">.</span><span class="na">getxxx</span><span class="o">());</span>
</span><span class='line'>        <span class="n">ExceptionHandleStrategy</span><span class="o">.</span><span class="na">LOG</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span><span class="s">&quot;system just broken&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">EnumWithVariable</span>
</span><span class='line'>    <span class="kd">extends</span> <span class="n">Enum</span><span class="o">&lt;</span><span class="n">EnumWithVariable</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="cm">/* enum */</span> <span class="n">EnumWithVariable</span> <span class="n">A</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EnumWithVariable</span><span class="o">(</span><span class="s">&quot;A&quot;</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="s">&quot;wristband&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="cm">/* enum */</span> <span class="n">EnumWithVariable</span> <span class="n">B</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EnumWithVariable</span><span class="o">(</span><span class="s">&quot;B&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="s">&quot;glucometer&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="cm">/* enum */</span> <span class="n">EnumWithVariable</span> <span class="n">C</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EnumWithVariable</span><span class="o">(</span><span class="s">&quot;C&quot;</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="s">&quot;fit&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="cm">/* synthetic */</span> <span class="n">EnumWithVariable</span><span class="o">[]</span> <span class="n">$VALUES</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="n">EnumWithVariable</span><span class="o">[]</span> <span class="nf">values</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">(</span><span class="n">EnumWithVariable</span><span class="o">[])</span><span class="n">$VALUES</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="n">EnumWithVariable</span> <span class="nf">valueOf</span><span class="o">(</span><span class="n">String</span> <span class="n">string</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Enum</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">EnumWithVariable</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">string</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">getxxx</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="nf">EnumWithVariable</span><span class="o">(</span><span class="n">String</span> <span class="n">string</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="n">String</span> <span class="n">string2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">(</span><span class="n">string</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">string2</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">$VALUES</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EnumWithVariable</span><span class="o">[]{</span><span class="n">A</span><span class="o">,</span> <span class="n">B</span><span class="o">,</span> <span class="n">C</span><span class="o">};</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">EnumWithoutMethod</span>
</span><span class='line'>    <span class="kd">extends</span> <span class="n">Enum</span><span class="o">&lt;</span><span class="n">EnumWithoutMethod</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="cm">/* enum */</span> <span class="n">EnumWithoutMethod</span> <span class="n">A</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EnumWithoutMethod</span><span class="o">(</span><span class="s">&quot;A&quot;</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="cm">/* enum */</span> <span class="n">EnumWithoutMethod</span> <span class="n">B</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EnumWithoutMethod</span><span class="o">(</span><span class="s">&quot;B&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="cm">/* enum */</span> <span class="n">EnumWithoutMethod</span> <span class="n">C</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EnumWithoutMethod</span><span class="o">(</span><span class="s">&quot;C&quot;</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="cm">/* synthetic */</span> <span class="n">EnumWithoutMethod</span><span class="o">[]</span> <span class="n">$VALUES</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="n">EnumWithoutMethod</span><span class="o">[]</span> <span class="nf">values</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">(</span><span class="n">EnumWithoutMethod</span><span class="o">[])</span><span class="n">$VALUES</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="n">EnumWithoutMethod</span> <span class="nf">valueOf</span><span class="o">(</span><span class="n">String</span> <span class="n">string</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Enum</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">EnumWithoutMethod</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">string</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="nf">EnumWithoutMethod</span><span class="o">(</span><span class="n">String</span> <span class="n">string</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">(</span><span class="n">string</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">$VALUES</span> <span class="o">=</span> <span class="k">new</span> <span class="n">EnumWithoutMethod</span><span class="o">[]{</span><span class="n">A</span><span class="o">,</span> <span class="n">B</span><span class="o">,</span> <span class="n">C</span><span class="o">};</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ExceptionHandleStrategy</span>
</span><span class='line'>    <span class="kd">extends</span> <span class="n">Enum</span><span class="o">&lt;</span><span class="n">ExceptionHandleStrategy</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="cm">/* enum */</span> <span class="n">ExceptionHandleStrategy</span> <span class="n">IGNORE</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ExceptionHandleStrategy</span><span class="o">(</span><span class="s">&quot;IGNORE&quot;</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="cm">/* enum */</span> <span class="n">ExceptionHandleStrategy</span> <span class="n">LOG</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ExceptionHandleStrategy</span><span class="o">(</span><span class="s">&quot;LOG&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">){</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">exception</span><span class="o">.</span><span class="na">getLocalizedMessage</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="cm">/* enum */</span> <span class="n">ExceptionHandleStrategy</span> <span class="n">THROW</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ExceptionHandleStrategy</span><span class="o">(</span><span class="s">&quot;THROW&quot;</span><span class="o">,</span> <span class="mi">2</span><span class="o">){</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">exception</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="cm">/* synthetic */</span> <span class="n">ExceptionHandleStrategy</span><span class="o">[]</span> <span class="n">$VALUES</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="n">ExceptionHandleStrategy</span><span class="o">[]</span> <span class="nf">values</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">(</span><span class="n">ExceptionHandleStrategy</span><span class="o">[])</span><span class="n">$VALUES</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kd">static</span> <span class="n">ExceptionHandleStrategy</span> <span class="nf">valueOf</span><span class="o">(</span><span class="n">String</span> <span class="n">string</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Enum</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">ExceptionHandleStrategy</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">string</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="nf">ExceptionHandleStrategy</span><span class="o">(</span><span class="n">String</span> <span class="n">string</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">(</span><span class="n">string</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">$VALUES</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ExceptionHandleStrategy</span><span class="o">[]{</span><span class="n">IGNORE</span><span class="o">,</span> <span class="n">LOG</span><span class="o">,</span> <span class="n">THROW</span><span class="o">};</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到我们的枚举类型都继承了<code>Enum</code>，编译器为我们生成了<code>$VALUES</code>类型数组，并在<code>static</code>静态块中进行了初始化。每个枚举类型实际上是个继承了<code>Enum</code>的类，并在类初始化的时候实例化了枚举类型的实例，可以看到非常重量级，实际上在Android开发中Google已经建议不要使用<code>Enum</code>，改而使用<code>@IntDef</code>之类的注解进行约束。</p>

<p>在看EffectiveJava的时候，看到作者认为Enum是实现单例的一种方式，<code>Enum</code>实现的单例帮我们处理了反射和序列化相关的问题，那它是怎么处理的呢？我们不妨看下源码来找下答案。</p>

<p>首先看下<code>Enum</code>类的<code>readObject</code>方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">  * prevent default deserialization</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">readObject</span><span class="o">(</span><span class="n">ObjectInputStream</span> <span class="n">in</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span>
</span><span class='line'>    <span class="n">ClassNotFoundException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">InvalidObjectException</span><span class="o">(</span><span class="s">&quot;can&#39;t deserialize enum&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到这个方法直接抛出了一个异常来阻止反序列化。</p>

<p>再来看下如果我们想要使用反射来实例化一个枚举实例的时候会遇到什么问题，我们看下<code>Constructor</code>类的<code>newInstance</code>方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">T</span> <span class="nf">newInstance</span><span class="o">(</span><span class="n">Object</span> <span class="o">...</span> <span class="n">initargs</span><span class="o">)</span>
</span><span class='line'>        <span class="kd">throws</span> <span class="n">InstantiationException</span><span class="o">,</span> <span class="n">IllegalAccessException</span><span class="o">,</span>
</span><span class='line'>               <span class="n">IllegalArgumentException</span><span class="o">,</span> <span class="n">InvocationTargetException</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">override</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">Reflection</span><span class="o">.</span><span class="na">quickCheckMemberAccess</span><span class="o">(</span><span class="n">clazz</span><span class="o">,</span> <span class="n">modifiers</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">caller</span> <span class="o">=</span> <span class="n">Reflection</span><span class="o">.</span><span class="na">getCallerClass</span><span class="o">();</span>
</span><span class='line'>                <span class="n">checkAccess</span><span class="o">(</span><span class="n">caller</span><span class="o">,</span> <span class="n">clazz</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">modifiers</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">// 阻止了通过反射来实例化Enum实例</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">((</span><span class="n">clazz</span><span class="o">.</span><span class="na">getModifiers</span><span class="o">()</span> <span class="o">&amp;</span> <span class="n">Modifier</span><span class="o">.</span><span class="na">ENUM</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;Cannot reflectively create enum objects&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">ConstructorAccessor</span> <span class="n">ca</span> <span class="o">=</span> <span class="n">constructorAccessor</span><span class="o">;</span>   <span class="c1">// read volatile</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">ca</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">ca</span> <span class="o">=</span> <span class="n">acquireConstructorAccessor</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;unchecked&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">T</span> <span class="n">inst</span> <span class="o">=</span> <span class="o">(</span><span class="n">T</span><span class="o">)</span> <span class="n">ca</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">initargs</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">inst</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到在方法内如果发现要反射类的Modifier中有<code>Enum</code>标志，会直接抛出异常表示无法通过反射的方式来创建<code>Enum</code>实例。</p>

<h3>reference</h3>

<ul>
<li><a href="https://www.benf.org/other/cfr/how-are-enums-implemented.html">How are Enums implemented?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HashMap源码分析]]></title>
    <link href="http://Solarex.github.io/blog/2018/07/02/analysis-of-hashmap/"/>
    <updated>2018-07-02T19:31:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2018/07/02/analysis-of-hashmap</id>
    <content type="html"><![CDATA[<p><code>HashMap</code>是存储key-value的集合，底层采用<code>Node&lt;K,V&gt;[] table</code>实现，初始大小为2<sup>4</sup>即16。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">V</span> <span class="nf">put</span><span class="o">(</span><span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">table</span> <span class="o">==</span> <span class="n">EMPTY_TABLE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">inflateTable</span><span class="o">(</span><span class="n">threshold</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">putForNullKey</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">hash</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">indexFor</span><span class="o">(</span><span class="n">hash</span><span class="o">,</span> <span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">table</span><span class="o">[</span><span class="n">i</span><span class="o">];</span> <span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">next</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Object</span> <span class="n">k</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">hash</span> <span class="o">==</span> <span class="n">hash</span> <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="n">k</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">key</span><span class="o">)</span> <span class="o">==</span> <span class="n">key</span> <span class="o">||</span> <span class="n">key</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">k</span><span class="o">)))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">V</span> <span class="n">oldValue</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">recordAccess</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">oldValue</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">modCount</span><span class="o">++;</span>
</span><span class='line'>        <span class="n">addEntry</span><span class="o">(</span><span class="n">hash</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>put</code>操作首先根据<code>key</code>的hash值来找到要插入的<code>index</code>，如果存在相同<code>key</code>的元素则替换，否则插入。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="kt">int</span> <span class="nf">hash</span><span class="o">(</span><span class="n">Object</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="n">hashSeed</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="mi">0</span> <span class="o">!=</span> <span class="n">h</span> <span class="o">&amp;&amp;</span> <span class="n">k</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">sun</span><span class="o">.</span><span class="na">misc</span><span class="o">.</span><span class="na">Hashing</span><span class="o">.</span><span class="na">stringHash32</span><span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">k</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">h</span> <span class="o">^=</span> <span class="n">k</span><span class="o">.</span><span class="na">hashCode</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// This function ensures that hashCodes that differ only by</span>
</span><span class='line'>        <span class="c1">// constant multiples at each bit position have a bounded</span>
</span><span class='line'>        <span class="c1">// number of collisions (approximately 8 at default load factor).</span>
</span><span class='line'>        <span class="n">h</span> <span class="o">^=</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">20</span><span class="o">)</span> <span class="o">^</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">12</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">h</span> <span class="o">^</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">7</span><span class="o">)</span> <span class="o">^</span> <span class="o">(</span><span class="n">h</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">4</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>hash</code>方法采用的是<code>sun.misc.Hashing</code>中的方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">addEntry</span><span class="o">(</span><span class="kt">int</span> <span class="n">hash</span><span class="o">,</span> <span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">bucketIndex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">((</span><span class="n">size</span> <span class="o">&gt;=</span> <span class="n">threshold</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">table</span><span class="o">[</span><span class="n">bucketIndex</span><span class="o">]))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">resize</span><span class="o">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>            <span class="n">hash</span> <span class="o">=</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">key</span><span class="o">)</span> <span class="o">?</span> <span class="n">hash</span><span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>            <span class="n">bucketIndex</span> <span class="o">=</span> <span class="n">indexFor</span><span class="o">(</span><span class="n">hash</span><span class="o">,</span> <span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">createEntry</span><span class="o">(</span><span class="n">hash</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">bucketIndex</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">resize</span><span class="o">(</span><span class="kt">int</span> <span class="n">newCapacity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Entry</span><span class="o">[]</span> <span class="n">oldTable</span> <span class="o">=</span> <span class="n">table</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">oldCapacity</span> <span class="o">=</span> <span class="n">oldTable</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">oldCapacity</span> <span class="o">==</span> <span class="n">MAXIMUM_CAPACITY</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">threshold</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Entry</span><span class="o">[]</span> <span class="n">newTable</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Entry</span><span class="o">[</span><span class="n">newCapacity</span><span class="o">];</span>
</span><span class='line'>        <span class="n">transfer</span><span class="o">(</span><span class="n">newTable</span><span class="o">,</span> <span class="n">initHashSeedAsNeeded</span><span class="o">(</span><span class="n">newCapacity</span><span class="o">));</span>
</span><span class='line'>        <span class="n">table</span> <span class="o">=</span> <span class="n">newTable</span><span class="o">;</span>
</span><span class='line'>        <span class="n">threshold</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">newCapacity</span> <span class="o">*</span> <span class="n">loadFactor</span><span class="o">,</span> <span class="n">MAXIMUM_CAPACITY</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>添加元素的时候会检查是否需要扩容，如果需要会将数组大小增大一倍，同时进行<code>rehash</code>来将之前的元素转移到现在的数组中来。</p>

<p>如果不需要扩容，直接添加元素</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">createEntry</span><span class="o">(</span><span class="kt">int</span> <span class="n">hash</span><span class="o">,</span> <span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">bucketIndex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">table</span><span class="o">[</span><span class="n">bucketIndex</span><span class="o">];</span>
</span><span class='line'>        <span class="n">table</span><span class="o">[</span><span class="n">bucketIndex</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Entry</span><span class="o">&lt;&gt;(</span><span class="n">hash</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="n">size</span><span class="o">++;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>将<code>table</code>数组<code>index</code>位置元素指向插入元素，插入元素作为链表头。</p>

<p><code>get</code>操作和<code>put</code>操作差不多，根据<code>key</code>查找<code>Entry</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">getEntry</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">hash</span> <span class="o">=</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">hash</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">table</span><span class="o">[</span><span class="n">indexFor</span><span class="o">(</span><span class="n">hash</span><span class="o">,</span> <span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">)];</span>
</span><span class='line'>             <span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>             <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">next</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Object</span> <span class="n">k</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">hash</span> <span class="o">==</span> <span class="n">hash</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                <span class="o">((</span><span class="n">k</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">key</span><span class="o">)</span> <span class="o">==</span> <span class="n">key</span> <span class="o">||</span> <span class="o">(</span><span class="n">key</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">key</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">k</span><span class="o">))))</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">e</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>table</code>数组的长度是2<sup>n</sup>，这样2<sup>n</sup>-1的二进制表示每一位都是1，方便进行index计算。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">static</span> <span class="kt">int</span> <span class="nf">indexFor</span><span class="o">(</span><span class="kt">int</span> <span class="n">h</span><span class="o">,</span> <span class="kt">int</span> <span class="n">length</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// assert Integer.bitCount(length) == 1 : &quot;length must be a non-zero power of 2&quot;;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">h</span> <span class="o">&amp;</span> <span class="o">(</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>LinkedHashMap</code>的<code>Entry</code>除了有一个<code>next</code>来处理冲突，还有<code>before</code>和<code>after</code>来将所有元素连接成一个双向循环链表。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// LinkedHashMap</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">createEntry</span><span class="o">(</span><span class="kt">int</span> <span class="n">hash</span><span class="o">,</span> <span class="n">K</span> <span class="n">key</span><span class="o">,</span> <span class="n">V</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">bucketIndex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">HashMap</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">old</span> <span class="o">=</span> <span class="n">table</span><span class="o">[</span><span class="n">bucketIndex</span><span class="o">];</span>
</span><span class='line'>        <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Entry</span><span class="o">&lt;&gt;(</span><span class="n">hash</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">old</span><span class="o">);</span>
</span><span class='line'>        <span class="n">table</span><span class="o">[</span><span class="n">bucketIndex</span><span class="o">]</span> <span class="o">=</span> <span class="n">e</span><span class="o">;</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">addBefore</span><span class="o">(</span><span class="n">header</span><span class="o">);</span>
</span><span class='line'>        <span class="n">size</span><span class="o">++;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Inserts this entry before the specified existing entry in the list.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kd">private</span> <span class="kt">void</span> <span class="nf">addBefore</span><span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">existingEntry</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">after</span>  <span class="o">=</span> <span class="n">existingEntry</span><span class="o">;</span>
</span><span class='line'>            <span class="n">before</span> <span class="o">=</span> <span class="n">existingEntry</span><span class="o">.</span><span class="na">before</span><span class="o">;</span>
</span><span class='line'>            <span class="n">before</span><span class="o">.</span><span class="na">after</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>            <span class="n">after</span><span class="o">.</span><span class="na">before</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * This method is invoked by the superclass whenever the value</span>
</span><span class='line'><span class="cm">         * of a pre-existing entry is read by Map.get or modified by Map.set.</span>
</span><span class='line'><span class="cm">         * If the enclosing Map is access-ordered, it moves the entry</span>
</span><span class='line'><span class="cm">         * to the end of the list; otherwise, it does nothing.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kt">void</span> <span class="nf">recordAccess</span><span class="o">(</span><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">LinkedHashMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">lm</span> <span class="o">=</span> <span class="o">(</span><span class="n">LinkedHashMap</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;)</span><span class="n">m</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">lm</span><span class="o">.</span><span class="na">accessOrder</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">lm</span><span class="o">.</span><span class="na">modCount</span><span class="o">++;</span>
</span><span class='line'>                <span class="n">remove</span><span class="o">();</span>
</span><span class='line'>                <span class="n">addBefore</span><span class="o">(</span><span class="n">lm</span><span class="o">.</span><span class="na">header</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Entry</code>的<code>addBefore</code>将元素添加至双向循环链表的尾部，<code>recordAccess</code>将元素从双向循环链表原来的位置移除，重新添加到链表尾部。如果key元素已经存在Map中，在<code>put</code>时会替换value，同时<code>recordAccess</code>，<code>recordAccess</code>在<code>HashMap</code>的<code>Entry</code>中是空实现，在<code>LinkedHashMap</code>中进行移除到链表尾部的操作。<code>recordAccess</code>还在<code>LinkedHashMap</code>的<code>get</code>方法中被调用，这样每次执行<code>get</code>操作返回元素的同时将<code>Entry</code>移动到链表尾部。</p>

<p><code>WeakHashMap</code>的<code>Entry</code>是<code>WeakReference</code>的子类，创建的时候和<code>ReferenceQueue</code>进行关联，referent是key，当key被回收时将移除key对应的entry。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Expunges stale entries from the table.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">expungeStaleEntries</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Object</span> <span class="n">x</span><span class="o">;</span> <span class="o">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">poll</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">queue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;unchecked&quot;</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;)</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">indexFor</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">hash</span><span class="o">,</span> <span class="n">table</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">prev</span> <span class="o">=</span> <span class="n">table</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>                <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">prev</span><span class="o">;</span>
</span><span class='line'>                <span class="k">while</span> <span class="o">(</span><span class="n">p</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Entry</span><span class="o">&lt;</span><span class="n">K</span><span class="o">,</span><span class="n">V</span><span class="o">&gt;</span> <span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">p</span> <span class="o">==</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="o">(</span><span class="n">prev</span> <span class="o">==</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>                            <span class="n">table</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>                        <span class="k">else</span>
</span><span class='line'>                            <span class="n">prev</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>                        <span class="c1">// Must not null out e.next;</span>
</span><span class='line'>                        <span class="c1">// stale entries may be in use by a HashIterator</span>
</span><span class='line'>                        <span class="n">e</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">// Help GC</span>
</span><span class='line'>                        <span class="n">size</span><span class="o">--;</span>
</span><span class='line'>                        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                    <span class="n">prev</span> <span class="o">=</span> <span class="n">p</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">p</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>key被回收时<code>Entry</code>会被放入<code>ReferenceQueue</code>中。在调用<code>size()</code>和<code>resize()</code>方法时会调用<code>expungeStaleEntries</code>方法。</p>

<p>一般情况下，一个对象被标记为垃圾（并不代表被回收了）后会被加入引用队列。</p>

<p>对于虚引用来说，它指向的对象只有被回收后才会加入引用队列，所以可以作为记录该引用指向的对象是否被回收。</p>

<h2>reference</h2>

<ul>
<li><a href="https://android.googlesource.com/platform/libcore/+/8f9c9cae00ad906c39891890f7b9d7a0bc453c0a%5E2..8f9c9cae00ad906c39891890f7b9d7a0bc453c0a/">Android Hashing.java</a></li>
<li><a href="http://hg.openjdk.java.net/jdk7u/jdk7u6/jdk/file/8c2c5d63a17e/src/share/classes/sun/misc/Hashing.java">JDK Hashing.java</a></li>
<li><a href="http://learningviacode.blogspot.com/2014/02/reference-queues.html">Reference Queues</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
