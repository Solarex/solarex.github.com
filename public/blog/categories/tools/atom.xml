<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | Solarex's Blog]]></title>
  <link href="http://Solarex.github.io/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://Solarex.github.io/"/>
  <updated>2014-09-02T00:13:52+08:00</updated>
  <id>http://Solarex.github.io/</id>
  <author>
    <name><![CDATA[Solarex]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SSH key settings for multi github accounts]]></title>
    <link href="http://Solarex.github.io/blog/2014/06/02/ssh-key-config-for-multi-github-accounts/"/>
    <updated>2014-06-02T15:13:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2014/06/02/ssh-key-config-for-multi-github-accounts</id>
    <content type="html"><![CDATA[<p>在同一台电脑上有多个github账户时，切换ssh key会比较麻烦，可以使用ssh config来简化这一动作。</p>

<p>在使用<code>ssh-keygen</code>时，为不同的账户选择不同的ssh key文件。</p>

<p><code>bash
hrh@Solarex:~$ ls ~/.ssh/
id_rsa_accountA id_rsa_accountA.pub id_rsa_accountB id_rsa_accountB.pub known_hosts config
</code></p>

<p>在<code>~/.bashrc</code>中添加ssh key。</p>

<p><code>bash
ssh-add ~/.ssh/id_rsa_accountA &gt;/dev/null 2&gt;&amp;1
ssh-add ~/.ssh/id_rsa_accountB &gt;/dev/null 2&gt;&amp;1
</code></p>

<p>配置ssh config文件<code>~/.ssh/config</code>。
```bash</p>

<h1>AccountA</h1>

<p>Host github-a.com</p>

<pre><code>HostName github.com
User git
IdentityFile ~/.ssh/id_rsa_accountA
</code></pre>

<h1>AccountB</h1>

<p>Host github-b.com</p>

<pre><code>HostName github.com
User git
IdentityFile ~/.ssh/id_rsa_accountB
</code></pre>

<p>```</p>

<p>这样以后使用AccountA时可以<code>git clone git@github-a.com:user/repos.git local_dir</code>这样操作，clone下来后可以<code>cd local_dir</code>对<code>user.name</code>和<code>user.email</code>来进行config来覆盖global config，剩下的就和平时没有什么区别了，使用AccountB时相似操作就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git配置(持续更新)]]></title>
    <link href="http://Solarex.github.io/blog/2013/11/29/git-basic-config/"/>
    <updated>2013-11-29T23:14:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2013/11/29/git-basic-config</id>
    <content type="html"><![CDATA[<center><p><img src="http://Solarex.github.io/images/git-logo-black.png" width="182" height="76" alt="git"></p></center>


<p>用git大概有2年多了吧，不过大都停留在<code>add</code>，<code>commit</code>，<code>clone</code>，<code>push</code>这些简单的操作上，最近看了git-scm网站的维护者，Pro.Git的作者的一个演讲，准备好好研究下git。以下是笔记，会不间断更新。</p>

<p>最基础的git config莫过于<code>user.name</code>和<code>user.email</code>了吧。
<code>bash
git config --global user.name Solarex
git config --global user.email i@solarex.name
</code></p>

<p>git <code>commit</code>的时候有时会发现在comment中需要换行，在命令行直接输入的话非常不方便，其实可以在自己喜欢的编辑器里面操作。
<code>bash
git config --global core.editor vim
</code>
这样git在执行<code>commit</code>操作时就会打开vim，就可以像编辑文本一样写comment了。</p>

<p>在打印git log的时候，如果有色彩区分会好看很多。
<code>bash
git config --global color.ui auto
</code></p>

<p>看一些视频的时候，经常会看到他们输入一些非常短的命令就执行了相应的操作，其实，这些可以通过<code>alias</code>实现。
<code>bash
git config --global alias.st "status"
git config --global alias.ci "commit -a -v"
</code></p>

<p>另外强烈推荐<code>tig</code>来查看git log，非常方便。Ubuntu下通过命令<code>sudo apt-get install tig</code>，Mac下通过<code>brew install tig</code>均可直接安装。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacBook Pro 2011中安装Ubuntu 13.04]]></title>
    <link href="http://Solarex.github.io/blog/2013/11/21/install-ubuntu-13-dot-04-on-macbook-pro-2011/"/>
    <updated>2013-11-21T22:55:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2013/11/21/install-ubuntu-13-dot-04-on-macbook-pro-2011</id>
    <content type="html"><![CDATA[<center><p><img src="http://Solarex.github.io/images/logoubuntu.png" width="200" height="200" alt="ubuntu"></p></center>


<p>之前已经在MacBook上装过Ubuntu了，不知怎么搞的，最近Ubuntu更新后，分辨率一直保持在1024×768，屏幕惨不忍睹，网上搜了好多，都是使用<a href="https://wiki.ubuntu.com/X/Config/Resolution">xrandr</a>之类的，但是执行<code>xrandr</code>的时候老是报错，搜了下，貌似是一个bug。不管了，重装一下吧。</p>

<p>首先在MacBook下用<code>Disk Utility</code>分区，Ubuntu需要一个swap分区，一个<code>/</code>分区，用U盘安装的话有这两个就够了。但是我没有U盘，就又划分了一个2G的分区，把Ubuntu的镜像写进去，这样也便于以后恢复。分区全部使用FAT32格式。</p>

<p>分好区后就是写Ubuntu的镜像文件了，注意要从Ubuntu官方网站上面下载针对Mac特定版本的iso文件，下载下来后，校验下如果没错的话，就可以用<code>UNetbooin</code>来烧Ubuntu的镜像了，可以烧到U盘中也可以像我一样烧到一个专门的分区中。分区的编号可以通过命令<code>diskutil list</code>来查看。</p>

<!-- more -->


<p>然后下载<a href="http://refit.sourceforge.net/">rEFIt</a>并安装，重启，按下option键直到出现Windows启动项，选择进入，就可以看到<code>UNetbootin</code>生成的菜单了。选择<code>Install Ubuntu</code>剩下的就和平常安装Ubuntu没什么两样了。需要注意的是Ubuntu选择安装分区的时候，要把<code>bootloader</code>安装在Ubuntu将要安装的磁盘分区上，也就是在Mac下分区时创建的那个分配给<code>/</code>的那个分区。剩下的就没什么了，Ubuntu安装很快，稍等一会就可以重启了。</p>

<p>重启后会看到有企鹅的图标，点进去，运气好的话就可以直接进Ubuntu了，但是我点进去的时候提示<code>Missing Operating System</code>，嗯，MBR貌似没有同步，没关系，重启，进Mac。安装<a href="" title="http://sourceforge.net/projects/gptfdisk/">GPT fdisk</a>，在终端中敲入<code>sudo gdisk /dev/disk0</code>进入GPT fdisk菜单，按下<code>b</code>，会提示输入备份当前<code>mbr</code>的文件名称，输入并备份。现在需要更改<code>mbr</code>了，按下<code>r</code>再按下<code>p</code>，会打印出当前的分区信息，记住Mac和Ubuntu安装分区的编号，比如我的是2和6，现在按下<code>h</code>，会提示你输入分区编号，输入2 6回车，接下来会问是否把efi分区放在最前面，按下<code>y</code>，然后会让你输入每个分区的<code>mbr hex code</code>，mac的是AF，Windows的是07，Linux的是83，我的情况是2号分区安装mac，6号分区安装ubuntu，所以在提示输入2号分区的时候输入AF，接着提示设置boot flag时输入<code>n</code>，提示输入6号分区的时候输入83，接着提示输入设置boot flag时输入<code>n</code>，后面可能会提示发现free partition，是否使用其加密，<code>n</code>吧，如果使用加密的话启动时会卡在显示Mac和企鹅图标之前，必须按下Option键才能进入启动的选项菜单，太麻烦，还是直接否掉吧。OK，现在设置完了mbr，输入<code>w</code>保存覆盖掉旧的mbr文件。重启，选择企鹅图标，进入Ubuntu系统，Over，搞定了。</p>

<p>接下来就是Ubuntu下的操作了。</p>

<ul>
<li><p>更换软件源，使用163的镜像。
<code>bash
deb http://mirrors.163.com/ubuntu/ raring main restricted
deb http://mirrors.163.com/ubuntu/ raring-updates main restricted
deb http://mirrors.163.com/ubuntu/ raring universe
deb http://mirrors.163.com/ubuntu/ raring-updates universe
deb http://mirrors.163.com/ubuntu/ raring multiverse
deb http://mirrors.163.com/ubuntu/ raring-updates multiverse
deb http://mirrors.163.com/ubuntu/ raring-backports main restricted universe multiverse
deb http://mirrors.163.com/ubuntu/ raring-security main restricted
deb http://mirrors.163.com/ubuntu/ raring-security universe
deb http://mirrors.163.com/ubuntu/ raring-security multiverse
deb http://archive.canonical.com/ubuntu precise partner
deb-src http://archive.canonical.com/ubuntu precise partner
</code></p></li>
<li><p>添加ppa
<code>bash
sudo add-apt-repository ppa:fcitx-team/nightly
sudo add-apt-repository ppa:indicator-multiload/stable-daily
sudo add-apt-repository ppa:ubuntu-wine/ppa
sudo add-apt-repository ppa:synapse-core/ppa
sudo apt-get update &amp;&amp; sudo apt-get upgrade
sudo apt-get install fcitx fcitx-config-gtk fcitx-sunpinyin fcitx-googlepinyin fcitx-module-cloudpinyin  fcitx-sogoupinyin fcitx-table-all indicator-multiload wine synapse
</code></p></li>
<li><p>安装卸载软件
<code>bash
sudo apt-get update &amp;&amp; sudo apt-get upgrade
sudo apt-get install python3-dev python3-openssl libxss1 flashplugin-installer mplayer vim git-core tig xclip zathura unrar p7zip-full  p7zip-rar zip unzip rar chmsee bleachbit preload goldendict goldendict-wordnet tcpdump mtr curl nscd ack-grep meld
sudo apt-get purge ibus ibus-gtk ibus-gtk3 ibus-pinyin ibus-pinyin-db-android ibus-table
sudo apt-get autoremove unity-lens-music unity-lens-photos unity-lens-gwibber unity-lens-shopping unity-lens-video
</code></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Octopress和Github写博客]]></title>
    <link href="http://Solarex.github.io/blog/2012/07/27/blog-on-github/"/>
    <updated>2012-07-27T14:50:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2012/07/27/blog-on-github</id>
    <content type="html"><![CDATA[<center><em>Ubuntu下建立Octopress博客过程</em></center>


<center><p><img src="http://Solarex.github.io/images/octopress_logo.jpg" alt="Octopress"></p></center>


<ul>
<li><p>首先安装<code>git</code>
<code>bash
sudo apt-get install git
</code></p></li>
<li><p>安装<code>rvm</code>和<code>ruby 1.9.3</code>
<code>bash
curl -L https://get.rvm.io | bash -s stable --ruby=1.9.3
</code></p></li>
<li><p>克隆<code>octopress</code>到本地
<code>bash
git clone git://github.com/imathis/octopress.git
</code></p></li>
<li><p>安装依赖
<code>bash
gem sources -a http://ruby.taobao.org/
gem sources -r http://rubygems.org/
gem sources -l #确保只有淘宝的ruby镜像
gem install bundle
bundle install #建议更改Gemfile第一行source为taobao镜像
</code></p></li>
<li><p>安装<code>slash</code>主题
<code>bash
git clone git://github.com/tommy351/Octopress-Theme-Slash.git .themes/slash
rake install['slash']
</code>
可以定制<code>slash</code>主题，由于众所周知的原因，我把博客的分享换成了国内的jiathis，评论系统换成了国内的多说，需要更改的地方也不是很多，就不详细叙述了，具体可以参考我的代码。当然你也可以使用其他的分享、评论系统，或者使用默认的也行。至于其他的第三方帐号，我只使用了Google Analytics，这个也很简单，就不赘述了。</p></li>
<li><p>生成网站、预览
<code>bash
rake generate &amp;&amp; rake preview
</code>
如果你没有改动<code>Rakefile</code>里的<code>server_port</code>的话，默认就可以在 <a href="http://localhost:4000/">http://localhost:4000/</a> 查看博客了。</p></li>
</ul>


<!-- more -->


<ul>
<li>部署到github</li>
</ul>


<p>首先你得有一个github帐号，比如说yourname，然后create repo，名字是yourname.github.com。新手的话可能还需要设置下git和github服务器通信，可以参考github的帮助页，<a href="https://help.github.com/articles/set-up-git">setup-git</a>和<a href="https://help.github.com/articles/generating-ssh-keys">generating-ssh-keys</a>等来进行设置。
OK，以上搞定后，可以在本地操作了。
<code>bash
rake setup_github_pages
</code>
按照提示输入你的github repo url就可以了。
然后部署。
<code>bash
rake generate &amp;&amp; rake deploy
</code>
等几分种刷新下<a href="http://yourname.github.com">http://yourname.github.com</a> 应该就不会显示404页面而是你的博客页了。</p>

<ul>
<li><p>把修改后的<code>octopress</code>和<code>slash</code>主题也push到github
<code>bash
git add .
git commit -m 'push source'
git push origin source
</code>
这样子的话，这个repo就有了2个branch，一个是master，就是<code>rake generate</code>生成的博客网站，一个是source，就是你修改的octopress配置文件和slash主题。</p></li>
<li><p>设置域名
<code>bash
echo "youdomain.com" &gt;&gt;source/CNAME
</code>
到域名服务商那里设置DNS就可以了。</p></li>
<li><p>写文章、发表
<code>bash
rake new_post['new-post-title']
</code>
这个命令会在source/_posts目录下生成一个markdown文件，编辑这个markdown文件即可。markdown的语法可以在<a href="http://gitcafe.com/riku/Markdown-Syntax-CN/blob/master/syntax.md">gitcafe</a>上查看。</p></li>
</ul>


<p>写了新文章后，push到github。
<code>bash
git add .
git commit -m 'new post'
git push origin source
</code>
然后deploy到github page
<code>bash
rake generate
rake deploy
</code>
过不了多久就可以在<a href="http://yourname.github.com">http://yourname.github.com</a> 上查看最新写的文章了。</p>

<ul>
<li>更换工作环境后，恢复octopress和原来的文章
<code>bash
git clone -b source  git@github.com:yourname/yourname.github.com.git
</code>
剩下的安装<code>rvm</code>等参考前面文章。
获得博客网站有两种方式，一是<code>rake generate</code>直接在本地生成，另一种是从github服务器上取回来。
<code>bash
cd yourname.github.com
mkdir _deploy &amp;&amp; cd _deploy
git init
git remote add origin git@github.com:yourname/yourname.github.com.git
git pull origin master
</code>
OK，现在可以继续写博客，然后po了。</li>
</ul>


<hr />

<p>后记：</p>

<ul>
<li>写了文章，执行<code>rake deploy</code>可能会显示错误，修改Rakefile文件里的deploy函数中的<code>push</code>为<code>push -f</code>即可，注意文件中的第<strong>18</strong>行是修改过的。</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (push2forcepush.rb)</span> <a href='/downloads/code/ruby/push2forcepush.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">desc</span> <span class="s2">&quot;deploy public directory to github pages&quot;</span>
</span><span class='line'><span class="n">multitask</span> <span class="ss">:push</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;## Deploying branch to Github Pages &quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;## Pulling any updates from Github Pages &quot;</span>
</span><span class='line'>  <span class="n">cd</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">deploy_dir</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">system</span> <span class="s2">&quot;git pull&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="p">(</span><span class="no">Dir</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">deploy_dir</span><span class="si">}</span><span class="s2">/*&quot;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">rm_rf</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="ss">Rake</span><span class="p">:</span><span class="ss">:Task</span><span class="o">[</span><span class="ss">:copydot</span><span class="o">].</span><span class="n">invoke</span><span class="p">(</span><span class="n">public_dir</span><span class="p">,</span> <span class="n">deploy_dir</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Copying </span><span class="si">#{</span><span class="n">public_dir</span><span class="si">}</span><span class="s2"> to </span><span class="si">#{</span><span class="n">deploy_dir</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">cp_r</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">public_dir</span><span class="si">}</span><span class="s2">/.&quot;</span><span class="p">,</span> <span class="n">deploy_dir</span>
</span><span class='line'>  <span class="n">cd</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">deploy_dir</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">system</span> <span class="s2">&quot;git add -A&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Commiting: Site updated at </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">utc</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;Site updated at </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">utc</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">system</span> <span class="s2">&quot;git commit -m </span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Pushing generated </span><span class="si">#{</span><span class="n">deploy_dir</span><span class="si">}</span><span class="s2"> website&quot;</span>
</span><span class='line'>    <span class="nb">system</span> <span class="s2">&quot;git push -f origin </span><span class="si">#{</span><span class="n">deploy_branch</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Github Pages deploy complete&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>学习git可以参考<a href="http://Solarex.github.io/downloads/files/learninggit.pdf">看日记学git</a>和<a href="https://github.com/numbbbbb/progit-zh-pdf-epub-mobi">pro-git-zh</a>。</li>
</ul>

]]></content>
  </entry>
  
</feed>
