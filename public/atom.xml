<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Solarex's Blog]]></title>
  <link href="http://Solarex.github.io/atom.xml" rel="self"/>
  <link href="http://Solarex.github.io/"/>
  <updated>2014-10-27T15:22:07+08:00</updated>
  <id>http://Solarex.github.io/</id>
  <author>
    <name><![CDATA[Solarex]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dealing with AsyncTask and Screen Orientation]]></title>
    <link href="http://Solarex.github.io/blog/2014/10/26/android-dealing-with-asynctask-and-screen-orientation/"/>
    <updated>2014-10-26T19:31:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2014/10/26/android-dealing-with-asynctask-and-screen-orientation</id>
    <content type="html"><![CDATA[<p><center><img src="http://Solarex.github.io/images/android_logo.jpg"/></center></p>


<p>A common task in Android is to perform some background activity in another thread, meanwhile displaying a ProgressDialog to the user. Example of these tasks include downloading some data from internet, logging into an application, etc. Implementing an AsyncTask is fairly a simple job, the big challenge is how to handle it properly when an orientation change occurs.</p>

<!-- more -->


<p>In this article I will walk though a series of potential solutions to address the screen orientation issues when using an AsyncTask.</p>

<p>So, lets create a proof of concept application that makes use of an AsyncTask which does not handle configuration changes yet, and then present a few solutions.</p>

<p>Here’s the AsyncTask implementation that we will be using during the tutorial:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AsyncTaskExample</span> <span class="kd">extends</span> <span class="n">AsyncTask</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="kd">final</span> <span class="n">TaskListener</span> <span class="n">listener</span><span class="o">;</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="n">AsyncTaskExample</span><span class="o">(</span><span class="n">TaskListener</span> <span class="n">listener</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="k">this</span><span class="o">.</span><span class="na">listener</span> <span class="o">=</span> <span class="n">listener</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">    </span><span class="nd">@Override</span>
</span><span class='line'><span class="err">    </span><span class="kd">protected</span> <span class="kt">void</span> <span class="n">onPreExecute</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">listener</span><span class="o">.</span><span class="na">onTaskStarted</span><span class="o">();</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">    </span><span class="nd">@Override</span>
</span><span class='line'><span class="err">    </span><span class="kd">protected</span> <span class="n">String</span> <span class="n">doInBackground</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;GREC&quot;</span><span class="o">,</span> <span class="s">&quot;AsyncTask is working: &quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'><span class="err">            </span><span class="k">try</span> <span class="o">{</span>
</span><span class='line'><span class="err">                </span><span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'><span class="err">            </span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">                </span><span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="err">            </span><span class="o">}</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'><span class="err">        </span><span class="k">return</span> <span class="s">&quot;All Done!&quot;</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">    </span><span class="nd">@Override</span>
</span><span class='line'><span class="err">    </span><span class="kd">protected</span> <span class="kt">void</span> <span class="n">onPostExecute</span><span class="o">(</span><span class="n">String</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">listener</span><span class="o">.</span><span class="na">onTaskFinished</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>doInBackground()</code> – this will be called by the AsyncTask on a background thread, and performs all the heavy work. For the sake of this example, I just wrote a simple loop  with a delay of 1 sec between iterations to simulate a task that takes some time.</li>
<li>The constructor of the class takes a listener as a parameter. The listener will be used to delegate the work of <code>onPreExecute()/onPostExecute()</code> to the calling Activity.</li>
</ul>


<p>This is the interface definition used by AsyncTaskExample:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">TaskListener</span> <span class="o">{</span>
</span><span class='line'><span class="err">    </span><span class="kt">void</span> <span class="n">onTaskStarted</span><span class="o">();</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">    </span><span class="kt">void</span> <span class="n">onTaskFinished</span><span class="o">(</span><span class="n">String</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here’s the usage of AsyncTaskExample (the problematic case):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="kd">implements</span> <span class="n">TaskListener</span><span class="o">,</span> <span class="n">OnClickListener</span> <span class="o">{</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">ProgressDialog</span> <span class="n">progressDialog</span><span class="o">;</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">    </span><span class="nd">@Override</span>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="kt">void</span> <span class="n">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">main</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">start</span><span class="o">).</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">    </span><span class="nd">@Override</span>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="kt">void</span> <span class="n">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="k">if</span> <span class="o">(</span><span class="n">v</span><span class="o">.</span><span class="na">getId</span><span class="o">()</span> <span class="o">==</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">start</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="k">new</span> <span class="n">AsyncTaskExample</span><span class="o">(</span><span class="k">this</span><span class="o">).</span><span class="na">execute</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">    </span><span class="nd">@Override</span>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="kt">void</span> <span class="n">onTaskStarted</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">progressDialog</span> <span class="o">=</span> <span class="n">ProgressDialog</span><span class="o">.</span><span class="na">show</span><span class="o">(</span><span class="n">CopyOfMainActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="s">&quot;Loading&quot;</span><span class="o">,</span> <span class="s">&quot;Please wait a moment!&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">    </span><span class="nd">@Override</span>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="kt">void</span> <span class="n">onTaskFinished</span><span class="o">(</span><span class="n">String</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="k">if</span> <span class="o">(</span><span class="n">progressDialog</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">progressDialog</span><span class="o">.</span><span class="na">dismiss</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Activity implements the TaskListener interface and provides appropriate implementation for its methods,  displaying the ProgressDialog when the task is started, and dismissing it when the task is finished. The AsyncTask is fired when clicking on a button.</p>

<p>Now, if you run this example without changing the screen orientation, the AsyncTask will start and finish its work normally. Problems begin to appear when the device orientation is changed while the AsyncTask is in the middle of the work. The application will crash, and an exception similar to these ones will be thrown: java.lang.IllegalArgumentException: View not attached to window manager, or Activity has leaked window com.android.internal.policy….</p>

<p>The cause relies in the Activity life cycle. A change in device orientation is interpreted as a configuration change which causes the current activity to be destroyed and then recreated. Android calls onPause(), onStop(), and onDestroy() on currently instance of activity, then a new instance of the same activity is recreated calling onCreate(), onStart(), and onResume(). The reason why Android have to do this, is because depending of screen orientation, portrait or landscape, we may need to load and display different resources, and only through re-creation Android can guarantee that all our resources will be re-requested.</p>

<p>But don’t panic, you are not alone, there are several solutions that will help us to deal with this situation.</p>

<h3>Solution 1 – Think twice if you really need an AsyncTask.</h3>

<p>AsyncTasks are good for performing background work, but they are bound to the Activity which adds some complexity. For things like making HTTP requests to a server perhaps you should consider an IntentService. IntentService used in conjunction with a BroadcastReceiver or ResultReceiver to deliver results, could do a better job than an AsyncTask in certain situations.</p>

<h3>Solution 2 – Put the AsyncTask in a Fragment.</h3>

<p>Using fragments probably is the cleanest way to handle configuration changes. By default, Android destroys and recreates the fragments just like activities, however, fragments have the ability to retain their instances, simply by calling: <code>setRetainInstance(true)</code>, in one of its callback methods, for example in the onCreate().</p>

<p>There’s however one aspect that should be taken in consideration in order to achieve the desired result. Our AsyncTask uses a ProgressDialog to signal when the AsyncTask is started, and dismisses it when the task is done. This complicates a bit the things because even if we are using <code>setRetainInstance(true)</code>, we should close all windows and dialogs when the Activity is destroyed, otherwise we will get an: <code>Activity has leaked window com.android.internal.policy…</code>  exception. This happens when you try to show a dialog after you have exited the Activity.</p>

<p>In order to address this issue, we will add some logic to keep track of AsyncTask status (running/not running). We will dismiss the ProgressDialog when the fragment is detached from activity, and check in <code>onActivityCreated()</code> the status of AsyncTask. If the status is “running”, this means we are returning from a screen orientation and we will just re-create and display the ProgressDialog to show that the AsyncTask is still working.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExampleFragment</span> <span class="kd">extends</span> <span class="n">Fragment</span> <span class="kd">implements</span> <span class="n">TaskListener</span><span class="o">,</span> <span class="n">OnClickListener</span> <span class="o">{</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">ProgressDialog</span> <span class="n">progressDialog</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="kt">boolean</span> <span class="n">isTaskRunning</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="kd">private</span> <span class="n">AsyncTaskExample</span> <span class="n">asyncTask</span><span class="o">;</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">    </span><span class="nd">@Override</span>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="kt">void</span> <span class="n">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">setRetainInstance</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">    </span><span class="nd">@Override</span>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="kt">void</span> <span class="n">onActivityCreated</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="kd">super</span><span class="o">.</span><span class="na">onActivityCreated</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="c1">// If we are returning here from a screen orientation</span>
</span><span class='line'><span class="err">        </span><span class="c1">// and the AsyncTask is still working, re-create and display the</span>
</span><span class='line'><span class="err">        </span><span class="c1">// progress dialog.</span>
</span><span class='line'><span class="err">        </span><span class="k">if</span> <span class="o">(</span><span class="n">isTaskRunning</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">progressDialog</span> <span class="o">=</span> <span class="n">ProgressDialog</span><span class="o">.</span><span class="na">show</span><span class="o">(</span><span class="n">getActivity</span><span class="o">(),</span> <span class="s">&quot;Loading&quot;</span><span class="o">,</span> <span class="s">&quot;Please wait a moment!&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">    </span><span class="nd">@Override</span>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="n">View</span> <span class="n">onCreateView</span><span class="o">(</span><span class="n">LayoutInflater</span> <span class="n">inflater</span><span class="o">,</span> <span class="n">ViewGroup</span> <span class="n">container</span><span class="o">,</span> <span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">View</span> <span class="n">view</span> <span class="o">=</span> <span class="n">inflater</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">fragment_layout</span><span class="o">,</span> <span class="n">container</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">Button</span> <span class="n">button</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">view</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">start</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="n">button</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="err">        </span><span class="k">return</span> <span class="n">view</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">    </span><span class="nd">@Override</span>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="kt">void</span> <span class="n">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="k">if</span> <span class="o">(!</span><span class="n">isTaskRunning</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">asyncTask</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AsyncTaskExample</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="err">            </span><span class="n">asyncTask</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">    </span><span class="nd">@Override</span>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="kt">void</span> <span class="n">onTaskStarted</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">isTaskRunning</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'><span class="err">        </span><span class="n">progressDialog</span> <span class="o">=</span> <span class="n">ProgressDialog</span><span class="o">.</span><span class="na">show</span><span class="o">(</span><span class="n">getActivity</span><span class="o">(),</span> <span class="s">&quot;Loading&quot;</span><span class="o">,</span> <span class="s">&quot;Please wait a moment!&quot;</span><span class="o">);</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">    </span><span class="nd">@Override</span>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="kt">void</span> <span class="n">onTaskFinished</span><span class="o">(</span><span class="n">String</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="k">if</span> <span class="o">(</span><span class="n">progressDialog</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">progressDialog</span><span class="o">.</span><span class="na">dismiss</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'><span class="err">        </span><span class="n">isTaskRunning</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="err">    </span><span class="nd">@Override</span>
</span><span class='line'><span class="err">    </span><span class="kd">public</span> <span class="kt">void</span> <span class="n">onDetach</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="c1">// All dialogs should be closed before leaving the activity in order to avoid</span>
</span><span class='line'><span class="err">        </span><span class="c1">// the: Activity has leaked window com.android.internal.policy... exception</span>
</span><span class='line'><span class="err">        </span><span class="k">if</span> <span class="o">(</span><span class="n">progressDialog</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">progressDialog</span><span class="o">.</span><span class="na">isShowing</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'><span class="err">            </span><span class="n">progressDialog</span><span class="o">.</span><span class="na">dismiss</span><span class="o">();</span>
</span><span class='line'><span class="err">        </span><span class="o">}</span>
</span><span class='line'><span class="err">        </span><span class="kd">super</span><span class="o">.</span><span class="na">onDetach</span><span class="o">();</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Solution 3 – Lock the screen orientation</h3>

<p>You could do this in 2 ways:</p>

<p>a) permanently locking the screen orientation of the activity, specifying the screenOrientation attribute in the AndroidManifest with “portrait” or “landscape” values:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;activity</span>
</span><span class='line'>   <span class="na">android:screenOrientation=</span><span class="s">&quot;portrait&quot;</span>
</span><span class='line'>   <span class="err">...</span>  <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>b) or, temporarily locking the screen in <code>onPreExecute()</code>, and unlocking it in <code>onPostExecute()</code>, thus preventing any orientation change while the AsyncTask is working:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onTaskStarted</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">    </span><span class="n">lockScreenOrientation</span><span class="o">();</span>
</span><span class='line'><span class="err">    </span><span class="n">progressDialog</span> <span class="o">=</span> <span class="n">ProgressDialog</span><span class="o">.</span><span class="na">show</span><span class="o">(</span><span class="n">CopyOfCopyOfMainActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="s">&quot;Loading&quot;</span><span class="o">,</span> <span class="s">&quot;Please wait a moment!&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onTaskFinished</span><span class="o">(</span><span class="n">String</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">    </span><span class="k">if</span> <span class="o">(</span><span class="n">progressDialog</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">progressDialog</span><span class="o">.</span><span class="na">dismiss</span><span class="o">();</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="err">    </span><span class="n">unlockScreenOrientation</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">lockScreenOrientation</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">    </span><span class="kt">int</span> <span class="n">currentOrientation</span> <span class="o">=</span> <span class="n">getResources</span><span class="o">().</span><span class="na">getConfiguration</span><span class="o">().</span><span class="na">orientation</span><span class="o">;</span>
</span><span class='line'><span class="err">    </span><span class="k">if</span> <span class="o">(</span><span class="n">currentOrientation</span> <span class="o">==</span> <span class="n">Configuration</span><span class="o">.</span><span class="na">ORIENTATION_PORTRAIT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">setRequestedOrientation</span><span class="o">(</span><span class="n">ActivityInfo</span><span class="o">.</span><span class="na">SCREEN_ORIENTATION_PORTRAIT</span><span class="o">);</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'><span class="err">        </span><span class="n">setRequestedOrientation</span><span class="o">(</span><span class="n">ActivityInfo</span><span class="o">.</span><span class="na">SCREEN_ORIENTATION_LANDSCAPE</span><span class="o">);</span>
</span><span class='line'><span class="err">    </span><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="err"> </span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">unlockScreenOrientation</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'><span class="err">    </span><span class="n">setRequestedOrientation</span><span class="o">(</span><span class="n">ActivityInfo</span><span class="o">.</span><span class="na">SCREEN_ORIENTATION_SENSOR</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Solution 4 – Prevent the Activity from being recreated.</h4>

<p>This is the easiest way to handle configuration changes, but the less advised. The only thing you need to do is to specify the configChanges attribute followed by a list of values that specifies when the activity should prevent itself from restarting.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;activity</span>
</span><span class='line'>   <span class="na">android:configChanges=</span><span class="s">&quot;orientation|keyboardHidden&quot;</span>
</span><span class='line'>   <span class="na">android:name=</span><span class="s">&quot;.MainActivity&quot;</span>
</span><span class='line'>   <span class="err">....</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using this approach however, is not recommended, and this is clearly stated in the Android documentation: Using this attribute should be avoided and used only as a last-resort.</p>

<p>You may ask what’s wrong with this approach. Well, if you build the above example against Android 2.2 it will work fine, but if you build it against Android 3.0 and higher, you may notice that the application still crashes on orientation change. This is because starting  with Android 3.0 you need also to handle the <code>screenSize</code>, and <code>smallestScreenSize</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;activity</span>
</span><span class='line'>   <span class="na">android:configChanges=</span><span class="s">&quot;orientation|keyboardHidden|screenSize|smallestScreenSize&quot;</span>
</span><span class='line'>   <span class="na">android:name=</span><span class="s">&quot;.MainActivity&quot;</span>
</span><span class='line'>   <span class="err">....</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As it turns out, not only a screen orientation causes the Activity to recreate, there are also other events which may produce configuration changes and restart the Activity, and there’s a good chance that we won’t handle them all. This is why the use of this technique is discouraged.</p>

<p><embed src="http://player.youku.com/player.php/sid/XODExOTY3MzY0/v.swf" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></p>

<p><embed src="http://player.youku.com/player.php/sid/XODExOTg2MTgw/v.swf" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></p>

<p>REF:</p>

<ul>
<li><a href="http://androidresearch.wordpress.com/2013/05/10/dealing-with-asynctask-and-screen-orientation/">Dealing with AsyncTask and Screen Orientation</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android ContentProvider]]></title>
    <link href="http://Solarex.github.io/blog/2014/10/24/android-contentprovider/"/>
    <updated>2014-10-24T12:16:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2014/10/24/android-contentprovider</id>
    <content type="html"><![CDATA[<center><p><img src="http://Solarex.github.io/images/android_logo.jpg"/></p></center>


<ul>
<li><a href="#overview">Android ContentProvider</a>

<ul>
<li><a href="#basics">Content Provider Basics</a></li>
<li><a href="#using">Using Content Providers</a></li>
<li><a href="#writing">Writing your own Content Provider</a></li>
<li><a href="#performance">Better Performance with ContentProviderOperation</a></li>
</ul>
</li>
</ul>


<h2 id="overview">Android ContentProvider</h2>


<p>This is a tutorial covering Android&rsquo;s ContentProvider.</p>

<!-- more -->




<h3 id="basics">ContentProvider Basics</h3>


<h4>What are content providers?</h4>

<p>Content providers are Android’s central mechanism that enables you to access data of other applications – mostly information stored in databases or flat files. As such content providers are one of Android’s central component types to support the modular approach common to Android. Without content providers accessing data of other apps would be a mess.</p>

<p>Content providers support the four basic operations, normally called CRUD-operations. CRUD is the acronym for <code>create</code>, <code>read</code>, <code>update</code> and <code>delete</code>. With content providers those objects simply represent data – most often a record (tuple) of a database – but they could also be a photo on your SD-card or a video on the web.Android provides some standard content providers to access contacts, media files, preferences and so on.</p>

<h4>Content URIs</h4>

<p>The most important concept to understand when dealing with content providers is the content URI. Whenever you want to access data from a content provider you have to specify a URI. URIs for content providers look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>content://authority/optionalPath/optionalId
</span></code></pre></td></tr></table></div></figure>


<p>They contain four parts: The scheme to use, an authority, an optional path and an optional id.</p>

<ul>
<li>The scheme for content providers is always “content”. The colon and double-slash “://” are a fixed part of the URI-RFC and separate the scheme from the authority.</li>
<li>The next part is the authority for the content provider. Authorities have to be unique for every content provider. Thus the naming conventions should follow the Java package name rules. That is you should use the reversed domain name of your organization plus a qualifier for each and every content provider you publish. The Android documentation recommends to use the fully qualified class name of your ContentProvider-subclass.</li>
<li>The third part, the optional path, is used to distinguish the kinds of data your content provider offers. The content provider for Android’s mediastore, for example, distinguishes between audio files, video files and images using different paths for each of these types of media. This way a content provider can support different types of data that are nevertheless related. For totally unrelated data though you should use different content providers – and thus different authorities.</li>
<li>The last element is the optional id, which – if present – must be numeric. The id is used whenever you want to access a single record (e.g. a specific video file).</li>
</ul>


<p>There are two types of URIs: <code>directory-based</code> and <code>id-based</code> URIs. If no id is specified a URI is automatically a directory-based URI.</p>

<ul>
<li>You use <code>directory-based</code> URIs to access multiple elements of the same type (e.g. all songs of a band). All CRUD-operations are possible with directory-based URIs.</li>
<li>You use <code>id-based</code> URIs if you want to access a specific element. You cannot create objects using an id-based URI – but reading, updating and deleting is possible.</li>
</ul>


<p>The path of content URIs can contain additional information to limit the scope. The <code>MediaStore</code> content provider for example distinguishes between audio and other types. In addition to this it offers URIs that limit its operations to albums only or others to genres only. Content providers normally have constants for the URIs they support.</p>

<h4>Content Types</h4>

<p>Besides URIs another important concept to understand is the use of content types. Content types also have a standardized format which was first defined in RFC 1049 and refined in RFC 2045.</p>

<p>A content type consist of a media type and a subtype divided by a slash. A typical example is “image/png”. The media type “image” describes the content as an image file which is further specified to be of the Portable Network Graphic variety by the subtype “png”.</p>

<p>As with URIs there is also a standard for content types in Android. Table below lists the only two media types that Android accepts for content providers. As you can see, those two media types match the two types of URIs mentioned above.</p>

<table>
<caption><center>The media types used for content providers</center></caption>
<tr>
<th>Type</th>
<th>Usage</th>
<th>Constant</th>
</tr>
<tr>
<td>vnd.android.cursor.item</td>
<td>Used for single records</td>
<td>ContentResolver.CURSOR_ITEM_BASE_TYPE</td>
</tr>
<tr>
<td>vnd.android.cursor.dir</td>
<td>Used for multiple records</td>
<td>ContentResolver.CURSOR_DIR_BASE_TYPE</td>
</tr>
</table>


<p>The subtype on the other hand is used for content provider specific details and should differ for all types your content provider supports. The naming convention for subtypes is vnd.yourcompanyname.contenttype. Most content providers support multiple subtypes. In the case of a media player for example you might have subtypes for genre, band, titles, musicians and so on.</p>

<h4>Which standard Content Providers are available?</h4>

<p>A number of content providers are part of Android’s API. All these standard providers are defined in the package <code>android.provider</code>. The following table lists the standard providers and what they are used for.</p>

<table>
<caption>The standard content providers of Android</caption>
<tr>
<th>Provider</th>
<th>Since&nbsp;&nbsp;&nbsp;&nbsp;</th>
<th>Usage</th>
</tr>
<tr>
<td>Browser</td>
<td>SDK 1</td>
<td>Manages your web-searches, bookmarks and browsing-history.</td>
</tr>
<tr>
<td>CalendarContract</td>
<td>SDK 14</td>
<td>Manages the calendars on the user&#8217;s device.</td>
</tr>
<tr>
<td>CallLog</td>
<td>SDK 1</td>
<td>Keeps track of your call history.</td>
</tr>
<tr>
<td>Contacts</td>
<td>SDK 1</td>
<td>The old and deprecated content provider for managing contacts. You should only use this provider if you need to support an SDK prior to SDK 5!</td>
</tr>
<tr>
<td>ContactsContract</td>
<td>SDK 5</td>
<td>Deals with all aspects of contact management. Supersedes the Contacts-content provider.</td>
</tr>
<tr>
<td>MediaStore</td>
<td>SDK 1</td>
<td>The content provider responsible for all your media files like music, video and pictures.</td>
</tr>
<tr>
<td>Settings</td>
<td>SDK 1</td>
<td>Manages all global settings of your device.</td>
</tr>
<tr>
<td>UserDictionary</td>
<td>SDK 3</td>
<td>Keeps track of words you add to the default dictionary.</td>
</tr>
</table>


<p>Please make use of the standard providers whenever you need data they provide. For example there are apps that ignore the UserDictionary (e.g. Swype). So the user might end up adding the same words in multiple apps – which is pretty annoying. Something like this will not help your rating in Android’s Market.</p>

<p>Of course you should always keep in mind that not all of the standard providers might be present on certain devices. E.g. a tablet might have no CallLog. Thus you should always test for availability. <strong>One way to do so is querying a content provider and checking if the returned cursor is null</strong>. That’s the return value when the provider doesn’t exist. The other CRUD-methods though throw an exception in case you pass in an unknown URI.</p>

<h3 id="using">Using ContentProviders</h3>


<h4>ContentResolver</h4>

<p>Whenever you want to use another content provider you first have to access a <code>ContentResolver</code> object. This object is responsible for finding the correct content provider.</p>

<p>The <code>ContentResolver</code> decides which provider to use based on the authority part of the URI. <strong>A content provider must provide its authority within the manifest file.</strong> From these entries Android creates a mapping between the authorities and the corresponding ContentProvider implementations to use.</p>

<p>You always interact with the <code>ContentResolver</code> and never with <code>ContentProvider</code> objects themselves. This supports loose coupling and also guarantees the correct lifecycle of the content provider.</p>

<p>You can get the <code>ContentResolver</code> object by calling <code>getContentResolver()</code> on the <code>Context</code> object. The <code>Context</code> object should always be available since the Activity and Service classes inherit from Context and the other components also provide easy access to it.</p>

<p>Since you only use the class <code>ContentResolver</code> it has to provide all necessary CRUD-methods. Any arguments provided to the methods of the <code>ContentResolver</code> are passed on to the respective methods of the <code>ContentProvider</code> subclass.</p>

<table>
<caption>The CRUD methods of the ContentResolver object</caption>
<tr>
<th>Method</th>
<th>Usage</th>
</tr>
<tr>
<td>delete</td>
<td>Deletes the object(s) for the URI provided. The URI can be item- or directory-based</td>
</tr>
<tr>
<td>insert</td>
<td>Inserts one object. The URI must be directory-based</td>
</tr>
<tr>
<td>query</td>
<td>Queries for all objects that fit the URI. The URI can be item- or directory-based</td>
</tr>
<tr>
<td>update</td>
<td>Updates one or all object(s). The URI can be item- or directory-based</td>
</tr>
</table>


<p>There are also two methods for applying multiple CRUD operations at once as shown in the next table.</p>

<table>
<caption>ContentResolver methods for dealing with multiple content provider operations</caption>
<tr>
<th>Method</th>
<th>Usage</th>
</tr>
<tr>
<td>applyBatch</td>
<td>Allows you to execute a list of <code>ContentProviderOperation</code> objects. Each <code>ContentProviderOperation</code> object can take its own URI and type of operation</td>
</tr>
<tr>
<td>bulkInsert</td>
<td>Allows you to insert an array of <code>ContentValues</code> for a directory-based URI. You can only specify one URI for all objects you want to add</td>
</tr>
</table>


<h4>Querying for data</h4>

<p>Querying data is probably the operation you will use most often. That’s true for your own providers but also for standard providers which offer some very valuable information.</p>

<table>
<caption>The arguments of the query method</caption>
<tr>
<th>Type</th>
<th>Name</th>
<th>Usage</th>
</tr>
<tr>
<td>URI</td>
<td>uri</td>
<td>The URI of the object(s) to access. This is the only argument that must not be null</td>
</tr>
<tr>
<td>String[]</td>
<td>projection</td>
<td>This String array indicates which columns/attributes of the objects you want to access</td>
</tr>
<tr>
<td>String</td>
<td>selection</td>
<td>With this argument you can determine which records to return</td>
</tr>
<tr>
<td>String[]</td>
<td>selectionArgs</td>
<td>The binding parameters to the previous selection argument</td>
</tr>
<tr>
<td>String</td>
<td>sortOrder</td>
<td>If the result should be ordered you must use this argument to determine the sort order</td>
</tr>
</table>


<p>The return value of the query method is a <code>Cursor</code> object. The cursor is used to navigate between the rows of the result and to read the columns of the current row. Cursors are important resources that have to be closed whenever you have no more use for them – otherwise you keep valuable resources from being released.</p>

<p>The following code snippet shows how to make use of this provider. I use the <code>CONTENT_URI</code> of <code>UserDictionary.Words</code> to access the dictionary. For this example I am only interested in the IDs of the words and the words itself.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ContentResolver</span> <span class="n">resolver</span> <span class="o">=</span> <span class="n">getContentResolver</span><span class="o">();</span>
</span><span class='line'><span class="n">String</span><span class="o">[]</span> <span class="n">projection</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="n">BaseColumns</span><span class="o">.</span><span class="na">_ID</span><span class="o">,</span> <span class="n">UserDictionary</span><span class="o">.</span><span class="na">Words</span><span class="o">.</span><span class="na">WORD</span><span class="o">};</span>
</span><span class='line'><span class="n">Cursor</span> <span class="n">cursor</span> <span class="o">=</span>
</span><span class='line'>      <span class="n">resolver</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="n">UserDictionary</span><span class="o">.</span><span class="na">Words</span><span class="o">.</span><span class="na">CONTENT_URI</span><span class="o">,</span>
</span><span class='line'>            <span class="n">projection</span><span class="o">,</span>
</span><span class='line'>            <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>            <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>            <span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">cursor</span><span class="o">.</span><span class="na">moveToFirst</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">long</span> <span class="n">id</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getLong</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">word</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="c1">// do something meaningful</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">cursor</span><span class="o">.</span><span class="na">moveToNext</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Inserting new records</h4>

<p>Very often your app needs to insert data. For the built-in content providers of Android this could be because you want to add events to the Calendar provider, people to the Contacts provider, words to the UserDictionary provider and so on.</p>

<p>The correct content URI for inserts can only be a <code>directory-based</code> URI because only these represent a collection of related items.</p>

<p>The values to insert are specified using a <code>ContentValues</code> object.This object is not much more than a collection of key/value pairs. Of course, the keys of your ContentValues object must match columns/attributes of the objects you want to update – otherwise you will get an exception. For all columns of the new object for which no key/value-pair is provided the default value is used – which most often is null.</p>

<table>
<caption>The arguments of the insert method</caption>
<tr>
<th>Type</th>
<th>Name</th>
<th>Usage</th>
</tr>
<tr>
<td>URI</td>
<td>uri</td>
<td>The directory-based URI to which to add the object. This argument must not be null</td>
</tr>
<tr>
<td>ContentValues</td>
<td>values</td>
<td>The values for the object to add. This argument also must not be null</td>
</tr>
</table>


<p>The following code snippet shows you how to add data using a content provider:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ContentValues</span> <span class="n">values</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ContentValues</span><span class="o">();</span>
</span><span class='line'><span class="n">values</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Words</span><span class="o">.</span><span class="na">WORD</span><span class="o">,</span> <span class="s">&quot;Beeblebrox&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">resolver</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">UserDictionary</span><span class="o">.</span><span class="na">Words</span><span class="o">.</span><span class="na">CONTENT_URI</span><span class="o">,</span> <span class="n">values</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to add multiple records to the same URI you can use the <code>bulkInsert()</code> method. This method differs from the normal <code>insert()</code> method only in that it takes an array of <code>ContentValue</code> objects instead of just one <code>ContentValues</code> object. So for each record you want to add, there must be an entry within the <code>ContentValues</code> array. If you want to add to different URIs though – or if you want to mix insert, update and delete operations, you should use <code>applyBatch()</code>.</p>

<h4>Updating data</h4>

<p>To update records you basically provide the URI, a <code>ContentValues</code> object and optionally also a where-clause and arguments for this where-clause.</p>

<table>
<caption>The arguments of the update method</caption>
<tr>
<th>Type</th>
<th>Name</th>
<th>Usage</th>
</tr>
<tr>
<td>URI</td>
<td>uri</td>
<td>The URI of the object(s) to access. This argument must not be null</td>
</tr>
<tr>
<td>ContentValues</td>
<td>values</td>
<td>The values to substitute the current data with. This argument also must not be null</td>
</tr>
<tr>
<td>String</td>
<td>selection</td>
<td>With this argument you can determine which records to update</td>
</tr>
<tr>
<td>String[]</td>
<td>selectionArgs</td>
<td>The binding parameters to the previous selection argument</td>
</tr>
</table>


<p>In the next snippet I am going to change the word I’ve just added in the previous section.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">values</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'><span class="n">values</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Words</span><span class="o">.</span><span class="na">WORD</span><span class="o">,</span> <span class="s">&quot;Zaphod&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">Uri</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">ContentUris</span><span class="o">.</span><span class="na">withAppendedId</span><span class="o">(</span><span class="n">Words</span><span class="o">.</span><span class="na">CONTENT_URI</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'><span class="kt">long</span> <span class="n">noUpdated</span> <span class="o">=</span> <span class="n">resolver</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span> <span class="n">values</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we use a ContentValues object again. The keys of your ContentValues object must of course match columns/attributes of the objects you want to update – otherwise you would get an exception. The update method changes only those columns for which keys are present in the ContentValues object.</p>

<p>Note the call to <code>ContentUris.withAppendedId()</code>. This is a helper method to create an <code>id-based</code> URI from a directory-based one. You use it all the time since content providers only provide constants for directory-based URIs. So whenever you want to access a specific object you should use this method.</p>

<p>Since I changed only one record, a URI with an appended ID is sufficient. But if you want to update multiple values, you should use the normal URI and a selection clause. You will see an example for the latter when I show you how to delete entries.</p>

<p>There is also the call to <code>values.clear()</code>. This resets the ContentValues object and thus recycles the object. This way you are reducing costly garbage collector operations.</p>

<h4>Deleting data</h4>

<p>The next snippet shows how to delete records. It finally deletes the word. In this code sample you can see how to use the selection and selectionArgs arguments. The array of the selectionArgs argument is used to substitute all question marks found in the selection argument.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">long</span> <span class="n">noDeleted</span> <span class="o">=</span> <span class="n">resolver</span><span class="o">.</span><span class="na">delete</span>
</span><span class='line'>      <span class="o">(</span><span class="n">Words</span><span class="o">.</span><span class="na">CONTENT_URI</span><span class="o">,</span>
</span><span class='line'>      <span class="n">Words</span><span class="o">.</span><span class="na">WORD</span> <span class="o">+</span> <span class="s">&quot; = ? &quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="s">&quot;Zaphod&quot;</span><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The delete method takes the same arguments as the update method with the exception being the values argument. Since the record is deleted anyway, substitute values are not needed.</p>

<table>
<caption>The arguments of the delete method</caption>
<tr>
<th>Type</th>
<th>Name</th>
<th>Usage</th>
</tr>
<tr>
<td>URI</td>
<td>uri</td>
<td>The URI of the object(s) to access. This is the only argument which must not be null</td>
</tr>
<tr>
<td>String</td>
<td>selection</td>
<td>With this argument you can determine which records to delete</td>
</tr>
<tr>
<td>String[]</td>
<td>selectionArgs</td>
<td>The binding parameters to the previous selection argument</td>
</tr>
</table>




<h3 id="writing">Writing your own ContentProvider</h3>


<p>Implementing a content provider involves always the following steps:</p>

<ul>
<li>Create a class that extends <code>ContentProvider</code></li>
<li>Create a contract class</li>
<li>Create the <code>UriMatcher</code> definition</li>
<li>Implement the <code>onCreate()</code> method</li>
<li>Implement the <code>getType()</code> method</li>
<li>Implement the CRUD methods</li>
<li>Add the content provider to your <code>AndroidManifest.xml</code></li>
</ul>


<h4>Create a class that extends ContentProvider</h4>

<p>You start by sub-classing ContentProvider. Since ContentProvider is an abstract class you have to implement the six abstract methods. These methods are explained in detail later on, for now simply use the stubs created by the IDE of your choice.</p>

<table>
<caption>The abstract methods you have to implement</caption>
<tr>
<th>Method</th>
<th>Usage</th>
</tr>
<tr>
<td>onCreate()</td>
<td>Prepares the content provider</td>
</tr>
<tr>
<td>getType(Uri)</td>
<td>Returns the MIME type for this URI</td>
</tr>
<tr>
<td>delete(Uri uri, String selection, String[] selectionArgs)</td>
<td>Deletes records</td>
</tr>
<tr>
<td>insert(Uri uri, ContentValues values)</td>
<td>Adds records</td>
</tr>
<tr>
<td>query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)</td>
<td>Return records based on selection criteria</td>
</tr>
<tr>
<td>update(Uri uri, ContentValues values, String selection, String[] selectionArgs)</td>
<td>Modifies data</td>
</tr>
</table>


<h4>Create a contract class</h4>

<p>Up to now your code is still missing most of the functionality. But before implementing the CRUD methods you should think about your role as a provider. Content providers by its very definition provide data to clients. Those clients need to know how to access your data. And you should treat your URIs and authority like an API. You basically enter into a contract with your client. And your public API should reflect this.</p>

<p>Thus the official Android documentation recommends to create a contract class. This class defines all publicly available elements, like the authority, the content URIs of your tables, the columns, the content types and also any intents your app offers in addition to your provider.</p>

<p>This class is your public API. What you define here is what clients can use. It’s also the abstraction you provide. You can do behind the scenes whatever you like. The client won’t notice. You can change the data structure without problems – if your contract class remains unchanged.</p>

<p>The downside is: You shouldn’t change the contract in any way that might break existing clients. It’s a contract after all :&ndash;)</p>

<p>If you really think you must get rid of something you provided earlier on, use analytics to find out when a deprecated feature isn’t used anymore.</p>

<p>So here is what a typical contract class looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">LentItemsContract</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * The authority of the lentitems provider.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">AUTHORITY</span> <span class="o">=</span>
</span><span class='line'>        <span class="s">&quot;de.openminds.samples.cpsample.lentitems&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * The content URI for the top-level </span>
</span><span class='line'><span class="cm">  * lentitems authority.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Uri</span> <span class="n">CONTENT_URI</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">&quot;content://&quot;</span> <span class="o">+</span> <span class="n">AUTHORITY</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Constants for the Items table </span>
</span><span class='line'><span class="cm">  * of the lentitems provider.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Items</span>
</span><span class='line'>        <span class="kd">implements</span> <span class="n">CommonColumns</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Constants for the Photos table of the </span>
</span><span class='line'><span class="cm">  * lentitems provider. For each item there </span>
</span><span class='line'><span class="cm">  * is exactly one photo. You can </span>
</span><span class='line'><span class="cm">  * safely call insert with the an already </span>
</span><span class='line'><span class="cm">  * existing ITEMS_ID. You won&#39;t get constraint </span>
</span><span class='line'><span class="cm">  * violations. The content provider takes care </span>
</span><span class='line'><span class="cm">  * of this.&lt;br&gt; </span>
</span><span class='line'><span class="cm">  * Note: The _ID of the new record in this case</span>
</span><span class='line'><span class="cm">  * differs from the _ID of the old record.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Photos</span>
</span><span class='line'>        <span class="kd">implements</span> <span class="n">BaseColumns</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Constants for a joined view of Items and </span>
</span><span class='line'><span class="cm">  * Photos. The _id of this joined view is </span>
</span><span class='line'><span class="cm">  * the _id of the Items table.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">ItemEntities</span>
</span><span class='line'>        <span class="kd">implements</span> <span class="n">CommonColumns</span> <span class="o">{</span> <span class="o">...}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * This interface defines common columns </span>
</span><span class='line'><span class="cm">  * found in multiple tables.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">interface</span> <span class="nc">CommonColumns</span>
</span><span class='line'>        <span class="kd">extends</span> <span class="n">BaseColumns</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see the exported tables Photos, Items and ItemEntities which are separate inner classes of the contract class. There is also the authority of the provider and the root content URI. If your app also exports activities accessible via intents you should document those here as well. And you should document any permissions your provider uses.</p>

<p>One thing in the above snippet is noteworthy: The inner class ItemEntities represents a virtual table that doesn’t exist in the database. In this case I simply use joins in the query method but you could also use views within the database to back up virtual tables. Clients cannot join tables of content providers, thus you should consider offering plausible joins yourself.</p>

<p>The following snippet shows what to do within the inner classes of your contract class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Constants for the Items table </span>
</span><span class='line'><span class="cm"> * of the lentitems provider.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Items</span>
</span><span class='line'>      <span class="kd">implements</span> <span class="n">CommonColumns</span> <span class="o">{</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * The content URI for this table. </span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Uri</span> <span class="n">CONTENT_URI</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">Uri</span><span class="o">.</span><span class="na">withAppendedPath</span><span class="o">(</span>
</span><span class='line'>              <span class="n">LentItemsContract</span><span class="o">.</span><span class="na">CONTENT_URI</span><span class="o">,</span>
</span><span class='line'>              <span class="s">&quot;items&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * The mime type of a directory of items.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">CONTENT_TYPE</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">ContentResolver</span><span class="o">.</span><span class="na">CURSOR_DIR_BASE_TYPE</span> <span class="o">+</span>
</span><span class='line'>        <span class="s">&quot;/vnd.de.openminds.lentitems_items&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * The mime type of a single item.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">CONTENT_ITEM_TYPE</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">ContentResolver</span><span class="o">.</span><span class="na">CURSOR_ITEM_BASE_TYPE</span> <span class="o">+</span>
</span><span class='line'>        <span class="s">&quot;/vnd.de.openminds.lentitems_items&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * A projection of all columns </span>
</span><span class='line'><span class="cm">  * in the items table.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">PROJECTION_ALL</span> <span class="o">=</span>
</span><span class='line'>        <span class="o">{</span><span class="n">_ID</span><span class="o">,</span> <span class="n">NAME</span><span class="o">,</span> <span class="n">BORROWER</span><span class="o">};</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * The default sort order for </span>
</span><span class='line'><span class="cm">  * queries containing NAME fields.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SORT_ORDER_DEFAULT</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">NAME</span> <span class="o">+</span> <span class="s">&quot; ASC&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see the inner classes are the place for any column definitions, the content URIs and the content types of the respective tables.</p>

<h4>Create the UriMatcher definitions</h4>

<p>To deal with multiple URIs Android provides the helper class UriMatcher. This class eases the parsing of URIs. In the next code sample you can see that you initialize the UriMatcher by adding a set of paths with correspondig int values. Whenever you ask if a URI matches, the UriMatcher returns the corresponding int value to indicate which one matches. It is common practise to use constants for these int values. The code sample shows how to add id based paths as well as dir based paths.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// helper constants for use with the UriMatcher</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">ITEM_LIST</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">ITEM_ID</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">PHOTO_LIST</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">PHOTO_ID</span> <span class="o">=</span> <span class="mi">6</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">ENTITY_LIST</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">ENTITY_ID</span> <span class="o">=</span> <span class="mi">11</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">UriMatcher</span> <span class="n">URI_MATCHER</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// prepare the UriMatcher</span>
</span><span class='line'><span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">URI_MATCHER</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UriMatcher</span><span class="o">(</span><span class="n">UriMatcher</span><span class="o">.</span><span class="na">NO_MATCH</span><span class="o">);</span>
</span><span class='line'>  <span class="n">URI_MATCHER</span><span class="o">.</span><span class="na">addURI</span><span class="o">(</span><span class="n">LentItemsContract</span><span class="o">.</span><span class="na">AUTHORITY</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;items&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="n">ITEM_LIST</span><span class="o">);</span>
</span><span class='line'>  <span class="n">URI_MATCHER</span><span class="o">.</span><span class="na">addURI</span><span class="o">(</span><span class="n">LentItemsContract</span><span class="o">.</span><span class="na">AUTHORITY</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;items/#&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="n">ITEM_ID</span><span class="o">);</span>
</span><span class='line'>  <span class="n">URI_MATCHER</span><span class="o">.</span><span class="na">addURI</span><span class="o">(</span><span class="n">LentItemsContract</span><span class="o">.</span><span class="na">AUTHORITY</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;photos&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="n">PHOTO_LIST</span><span class="o">);</span>
</span><span class='line'>  <span class="n">URI_MATCHER</span><span class="o">.</span><span class="na">addURI</span><span class="o">(</span><span class="n">LentItemsContract</span><span class="o">.</span><span class="na">AUTHORITY</span><span class="o">,</span>
</span><span class='line'>        <span class="s">&quot;photos/#&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="n">PHOTO_ID</span><span class="o">);</span>
</span><span class='line'>   <span class="n">URI_MATCHER</span><span class="o">.</span><span class="na">addURI</span><span class="o">(</span><span class="n">LentItemsContract</span><span class="o">.</span><span class="na">AUTHORITY</span><span class="o">,</span>
</span><span class='line'>         <span class="s">&quot;entities&quot;</span><span class="o">,</span>
</span><span class='line'>         <span class="n">ENTITY_LIST</span><span class="o">);</span>
</span><span class='line'>   <span class="n">URI_MATCHER</span><span class="o">.</span><span class="na">addURI</span><span class="o">(</span><span class="n">LentItemsContract</span><span class="o">.</span><span class="na">AUTHORITY</span><span class="o">,</span>
</span><span class='line'>         <span class="s">&quot;entities/#&quot;</span><span class="o">,</span>
</span><span class='line'>         <span class="n">ENTITY_ID</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You pass the authority, a path pattern and an int value to the addURI() method. Android returns the int value later on when you try to match patterns.</p>

<p>The patterns of the sample above are the most common patterns. But you are not limited to those. Android’s calendar content provider for examples offers search URIs to find certain instances of events. And the content provider for contacts also offers non standard URIs – for example to provide access to the contact photo. You can take a look at the source of CalendarProvider2 or ContactsProvider2 to see how to use those non-standard URIs with the UriMatcher.</p>

<h4>Implement the onCreate() method</h4>

<p>Back to the actual content provider class. First implement the onCreate() method.</p>

<p>The onCreate() method is a lifecycle method and runs on the UI thread. Thus you should avoid executing any long-lasting tasks in this method. Your content provider is usually created at the start of your app. And you want this to be as fast as possible. So even if your users do not get any “Application Not Responding” error messages, they won’t like anything that delays the perceived starting time of your app. Thus consider to do any long lasting stuff within the CRUD methods.</p>

<p>Normally content providers use a database as the underlying data store. In this case you would create a reference to your SQLiteOpenHelper in onCreate() – but you wouldn’t try to get hold of an SQLiteDatabase object. In the original version of this post, my recommendation has been to get a reference to the database in this method. Please, do not do this!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LentItemsProvider</span> <span class="kd">extends</span> <span class="n">ContentProvider</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">LentItemsOpenHelper</span> <span class="n">mHelper</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onCreate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mHelper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LentItemsOpenHelper</span><span class="o">(</span><span class="n">getContext</span><span class="o">());</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">//...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Implement the getType() method</h4>

<p>Every content provider must return the content type for its supported URIs. The signature of the method takes a URI and returns a String. The next code sample shows the getType() method of the sample application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">getType</span><span class="o">(</span><span class="n">Uri</span> <span class="n">uri</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">switch</span> <span class="o">(</span><span class="n">URI_MATCHER</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="n">uri</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">case</span> <span class="nl">ITEM_LIST:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Items</span><span class="o">.</span><span class="na">CONTENT_TYPE</span><span class="o">;</span>
</span><span class='line'>   <span class="k">case</span> <span class="nl">ITEM_ID:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Items</span><span class="o">.</span><span class="na">CONTENT_ITEM_TYPE</span><span class="o">;</span>
</span><span class='line'>   <span class="k">case</span> <span class="nl">PHOTO_ID:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Photos</span><span class="o">.</span><span class="na">CONTENT_PHOTO_TYPE</span><span class="o">;</span>
</span><span class='line'>   <span class="k">case</span> <span class="nl">PHOTO_LIST:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Photos</span><span class="o">.</span><span class="na">CONTENT_TYPE</span><span class="o">;</span>
</span><span class='line'>   <span class="k">case</span> <span class="nl">ENTITY_ID:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ItemEntities</span><span class="o">.</span><span class="na">CONTENT_ENTITY_TYPE</span><span class="o">;</span>
</span><span class='line'>   <span class="k">case</span> <span class="nl">ENTITY_LIST:</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ItemEntities</span><span class="o">.</span><span class="na">CONTENT_TYPE</span><span class="o">;</span>
</span><span class='line'>   <span class="k">default</span><span class="o">:</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;Unsupported URI: &quot;</span> <span class="o">+</span> <span class="n">uri</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see this method is pretty simple. You just have to return the appropriate content type – defined within your contract class – for the URI passed into this method.</p>

<h4>UriMatcher</h4>

<p>The previous code sample shows how to make use of the UriMatcher. The pattern is also repeated within each of the CRUD methods, so let’s digg into it.</p>

<p>When you initialize the UriMatcher you state for each URI which int value belongs to it. Now whenever you need to react diffently depending on the URI you use the UriMatcher. It’s match() method returns the int value used during initialization. And usually you use this within a switch statement. This switch statement has case branches for the constants used during initialization.</p>

<p>You can use a “#” as a placeholder for an arbitrary numeric value and a “*” as a placeholder for arbitrary text. All other parts must be exactly as passed to the addURI() method.</p>

<h4>Adding records using insert()</h4>

<p>As expected this method is used by your clients to insert records into your datastore. The method only makes sense for dir based URIs, thus you first have to check if the right kind of URI is passed to the insert() method. Only then can you actually insert the values into the datastore you use.</p>

<p>The content provider API is record-based – probably since most underlying datastores are record based databases anyway. This makes implementing the insert() method very easy, since it allows you to simply pass the ContentValues object on to the SQLiteDatabase’s insert() method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">Uri</span> <span class="nf">insert</span><span class="o">(</span><span class="n">Uri</span> <span class="n">uri</span><span class="o">,</span> <span class="n">ContentValues</span> <span class="n">values</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">URI_MATCHER</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="n">uri</span><span class="o">)</span> <span class="o">!=</span> <span class="n">ITEM_LIST</span>
</span><span class='line'>         <span class="o">&amp;&amp;</span> <span class="n">URI_MATCHER</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="n">uri</span><span class="o">)</span> <span class="o">!=</span> <span class="n">PHOTO_LIST</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span>
</span><span class='line'>               <span class="s">&quot;Unsupported URI for insertion: &quot;</span> <span class="o">+</span> <span class="n">uri</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="n">SQLiteDatabase</span> <span class="n">db</span> <span class="o">=</span> <span class="n">mHelper</span><span class="o">.</span><span class="na">getWritableDatabase</span><span class="o">();</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">URI_MATCHER</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="n">uri</span><span class="o">)</span> <span class="o">==</span> <span class="n">ITEM_LIST</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">long</span> <span class="n">id</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">db</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span>
</span><span class='line'>                  <span class="n">DBSchema</span><span class="o">.</span><span class="na">TBL_ITEMS</span><span class="o">,</span>
</span><span class='line'>                  <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>                  <span class="n">values</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="nf">getUriForId</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">uri</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// this insertWithOnConflict is a special case; </span>
</span><span class='line'>      <span class="c1">// CONFLICT_REPLACE means that an existing entry </span>
</span><span class='line'>      <span class="c1">// which violates the UNIQUE constraint on the </span>
</span><span class='line'>      <span class="c1">// item_id column gets deleted. In this case this </span>
</span><span class='line'>      <span class="c1">// INSERT behaves nearly like an UPDATE. Though </span>
</span><span class='line'>      <span class="c1">// the new row has a new primary key.</span>
</span><span class='line'>      <span class="c1">// See how I mentioned this in the Contract class.</span>
</span><span class='line'>      <span class="kt">long</span> <span class="n">id</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">db</span><span class="o">.</span><span class="na">insertWithOnConflict</span><span class="o">(</span>
</span><span class='line'>                  <span class="n">DBSchema</span><span class="o">.</span><span class="na">TBL_PHOTOS</span><span class="o">,</span>
</span><span class='line'>                  <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>                  <span class="n">values</span><span class="o">,</span>
</span><span class='line'>                  <span class="n">SQLiteDatabase</span><span class="o">.</span><span class="na">CONFLICT_REPLACE</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="nf">getUriForId</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">uri</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">Uri</span> <span class="nf">getUriForId</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">,</span> <span class="n">Uri</span> <span class="n">uri</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">id</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Uri</span> <span class="n">itemUri</span> <span class="o">=</span> <span class="n">ContentUris</span><span class="o">.</span><span class="na">withAppendedId</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(!</span><span class="n">isInBatchMode</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>         <span class="c1">// notify all listeners of changes:</span>
</span><span class='line'>         <span class="n">getContext</span><span class="o">().</span>
</span><span class='line'>               <span class="n">getContentResolver</span><span class="o">().</span>
</span><span class='line'>                     <span class="n">notifyChange</span><span class="o">(</span><span class="n">itemUri</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">itemUri</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="c1">// s.th. went wrong:</span>
</span><span class='line'>   <span class="k">throw</span> <span class="k">new</span> <span class="nf">SQLException</span><span class="o">(</span>
</span><span class='line'>         <span class="s">&quot;Problem while inserting into uri: &quot;</span> <span class="o">+</span> <span class="n">uri</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Notifying listeners of dataset changes</h4>

<p>Clients often want to be notified about changes in the underlying datastore of your content provider. So inserting data, as well as deleting or updating data should trigger this notification.</p>

<p>That’s why I used the following line in the code sample above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">getContext</span><span class="o">().</span><span class="na">getContentResolver</span><span class="o">().</span><span class="na">notifyChange</span><span class="o">(</span><span class="n">itemUri</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course you should only call this method when there really has been a change – that’s why I test if the id is a positive number.</p>

<p>Alas, it is not possible to notify the client of the actual change that has occurred. You can only state which URI has changed. Most often this is enough – though sometimes a client would like to know if this was an addition of a record, a deletion of entries or an update. Sadly, Android offers us no possibility to help those clients</p>

<h4>Querying the content provider for records</h4>

<p>Returning records from your ContentProvider is pretty easy. Android has a helper class, you can use here: The SQLiteQueryBuilder. Within the query() method of a content provider you can use this class as shown below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Cursor</span> <span class="nf">query</span><span class="o">(</span><span class="n">Uri</span> <span class="n">uri</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">projection</span><span class="o">,</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">selection</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">selectionArgs</span><span class="o">,</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">sortOrder</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">SQLiteDatabase</span> <span class="n">db</span> <span class="o">=</span> <span class="n">mHelper</span><span class="o">.</span><span class="na">getReadableDatabase</span><span class="o">();</span>
</span><span class='line'>   <span class="n">SQLiteQueryBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SQLiteQueryBuilder</span><span class="o">();</span>
</span><span class='line'>   <span class="kt">boolean</span> <span class="n">useAuthorityUri</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>   <span class="k">switch</span> <span class="o">(</span><span class="n">URI_MATCHER</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="n">uri</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">case</span> <span class="nl">ITEM_LIST:</span>
</span><span class='line'>      <span class="n">builder</span><span class="o">.</span><span class="na">setTables</span><span class="o">(</span><span class="n">DBSchema</span><span class="o">.</span><span class="na">TBL_ITEMS</span><span class="o">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">TextUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">sortOrder</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">sortOrder</span> <span class="o">=</span> <span class="n">Items</span><span class="o">.</span><span class="na">SORT_ORDER_DEFAULT</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">break</span><span class="o">;</span>
</span><span class='line'>   <span class="k">case</span> <span class="nl">ITEM_ID:</span>
</span><span class='line'>      <span class="n">builder</span><span class="o">.</span><span class="na">setTables</span><span class="o">(</span><span class="n">DBSchema</span><span class="o">.</span><span class="na">TBL_ITEMS</span><span class="o">);</span>
</span><span class='line'>      <span class="c1">// limit query to one row at most:</span>
</span><span class='line'>      <span class="n">builder</span><span class="o">.</span><span class="na">appendWhere</span><span class="o">(</span><span class="n">Items</span><span class="o">.</span><span class="na">_ID</span> <span class="o">+</span> <span class="s">&quot; = &quot;</span> <span class="o">+</span>
</span><span class='line'>            <span class="n">uri</span><span class="o">.</span><span class="na">getLastPathSegment</span><span class="o">());</span>
</span><span class='line'>      <span class="k">break</span><span class="o">;</span>
</span><span class='line'>   <span class="k">case</span> <span class="nl">PHOTO_LIST:</span>
</span><span class='line'>      <span class="n">builder</span><span class="o">.</span><span class="na">setTables</span><span class="o">(</span><span class="n">DBSchema</span><span class="o">.</span><span class="na">TBL_PHOTOS</span><span class="o">);</span>
</span><span class='line'>      <span class="k">break</span><span class="o">;</span>
</span><span class='line'>   <span class="k">case</span> <span class="nl">PHOTO_ID:</span>
</span><span class='line'>      <span class="n">builder</span><span class="o">.</span><span class="na">setTables</span><span class="o">(</span><span class="n">DBSchema</span><span class="o">.</span><span class="na">TBL_PHOTOS</span><span class="o">);</span>
</span><span class='line'>      <span class="c1">// limit query to one row at most:</span>
</span><span class='line'>      <span class="n">builder</span><span class="o">.</span><span class="na">appendWhere</span><span class="o">(</span><span class="n">Photos</span><span class="o">.</span><span class="na">_ID</span> <span class="o">+</span>
</span><span class='line'>            <span class="s">&quot; = &quot;</span> <span class="o">+</span>
</span><span class='line'>            <span class="n">uri</span><span class="o">.</span><span class="na">getLastPathSegment</span><span class="o">());</span>
</span><span class='line'>      <span class="k">break</span><span class="o">;</span>
</span><span class='line'>   <span class="k">case</span> <span class="nl">ENTITY_LIST:</span>
</span><span class='line'>      <span class="n">builder</span><span class="o">.</span><span class="na">setTables</span><span class="o">(</span><span class="n">DBSchema</span><span class="o">.</span><span class="na">LEFT_OUTER_JOIN_STATEMENT</span><span class="o">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">TextUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">sortOrder</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">sortOrder</span> <span class="o">=</span> <span class="n">ItemEntities</span><span class="o">.</span><span class="na">SORT_ORDER_DEFAULT</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">useAuthorityUri</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="k">break</span><span class="o">;</span>
</span><span class='line'>   <span class="k">case</span> <span class="nl">ENTITY_ID:</span>
</span><span class='line'>      <span class="n">builder</span><span class="o">.</span><span class="na">setTables</span><span class="o">(</span><span class="n">DBSchema</span><span class="o">.</span><span class="na">LEFT_OUTER_JOIN_STATEMENT</span><span class="o">);</span>
</span><span class='line'>      <span class="c1">// limit query to one row at most:</span>
</span><span class='line'>      <span class="n">builder</span><span class="o">.</span><span class="na">appendWhere</span><span class="o">(</span><span class="n">DBSchema</span><span class="o">.</span><span class="na">TBL_ITEMS</span> <span class="o">+</span>
</span><span class='line'>            <span class="s">&quot;.&quot;</span> <span class="o">+</span>
</span><span class='line'>            <span class="n">Items</span><span class="o">.</span><span class="na">_ID</span> <span class="o">+</span>
</span><span class='line'>            <span class="s">&quot; = &quot;</span> <span class="o">+</span>
</span><span class='line'>            <span class="n">uri</span><span class="o">.</span><span class="na">getLastPathSegment</span><span class="o">());</span>
</span><span class='line'>      <span class="n">useAuthorityUri</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="k">break</span><span class="o">;</span>
</span><span class='line'>   <span class="k">default</span><span class="o">:</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span>
</span><span class='line'>            <span class="s">&quot;Unsupported URI: &quot;</span> <span class="o">+</span> <span class="n">uri</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="n">Cursor</span> <span class="n">cursor</span> <span class="o">=</span>
</span><span class='line'>         <span class="n">builder</span><span class="o">.</span><span class="na">query</span><span class="o">(</span>
</span><span class='line'>         <span class="n">db</span><span class="o">,</span>
</span><span class='line'>         <span class="n">projection</span><span class="o">,</span>
</span><span class='line'>         <span class="n">selection</span><span class="o">,</span>
</span><span class='line'>         <span class="n">selectionArgs</span><span class="o">,</span>
</span><span class='line'>         <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>         <span class="kc">null</span><span class="o">,</span>
</span><span class='line'>         <span class="n">sortOrder</span><span class="o">);</span>
</span><span class='line'>   <span class="c1">// if we want to be notified of any changes:</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">useAuthorityUri</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">cursor</span><span class="o">.</span><span class="na">setNotificationUri</span><span class="o">(</span>
</span><span class='line'>            <span class="n">getContext</span><span class="o">().</span><span class="na">getContentResolver</span><span class="o">(),</span>
</span><span class='line'>            <span class="n">LentItemsContract</span><span class="o">.</span><span class="na">CONTENT_URI</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">cursor</span><span class="o">.</span><span class="na">setNotificationUri</span><span class="o">(</span>
</span><span class='line'>            <span class="n">getContext</span><span class="o">().</span><span class="na">getContentResolver</span><span class="o">(),</span>
</span><span class='line'>            <span class="n">uri</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">cursor</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After creating a new object you first define into which table(s) to insert. Then you might want to add a default sort order if none is specified by the caller of your code. Next you have to add a WHERE clause that matches the id for id based queries before you finally pass all arguments on to the builder’s query() method. This method returns a Cursor object which you simply return to your caller.</p>

<p>There is one additional thing though you have to take care of. That is the SQLiteDatabase object you have to pass to the SQLiteQueryBuilder&rsquo;s query() method. I recommend to get access to the SQLiteDatabase object within each CRUD method.</p>

<p>Now you might wonder if I ever close the object. Well, I don’t :&ndash;) But this is no problem. SQLiteOpenHelper keeps just one SQLiteDatabase object per SQLiteSession. This makes accessing the object very efficient. With version checking and all that is happening in the background it wouldn’t work too well otherwise. I will delve into all these details in one of my upcoming posts within my SQLite series. So for now simply believe me: There is no leak here! If you use just one SQLiteOpenHelper object within your app you will only have at most one SQLiteDatabase object at any time – unless you pass this object needlessly around and leak it that way. Finally: Android destroys the content provider when it’s no longer needed and cleans up any ressources. Very convenient!</p>

<h4>Updating and deleting records of your content provider</h4>

<p>The code for updating and deleting records looks pretty much the same. I’m going to show you how to update records and afterwards I will briefly describe the necessary changes for deleting.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">update</span><span class="o">(</span><span class="n">Uri</span> <span class="n">uri</span><span class="o">,</span> <span class="n">ContentValues</span> <span class="n">values</span><span class="o">,</span> <span class="n">String</span> <span class="n">selection</span><span class="o">,</span>
</span><span class='line'>      <span class="n">String</span><span class="o">[]</span> <span class="n">selectionArgs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">SQLiteDatabase</span> <span class="n">db</span> <span class="o">=</span> <span class="n">mHelper</span><span class="o">.</span><span class="na">getWritableDatabase</span><span class="o">();</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">updateCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>   <span class="k">switch</span> <span class="o">(</span><span class="n">URI_MATCHER</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="n">uri</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">case</span> <span class="nl">ITEM_LIST:</span>
</span><span class='line'>      <span class="n">updateCount</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="na">update</span><span class="o">(</span>
</span><span class='line'>            <span class="n">DBSchema</span><span class="o">.</span><span class="na">TBL_ITEMS</span><span class="o">,</span>
</span><span class='line'>            <span class="n">values</span><span class="o">,</span>
</span><span class='line'>            <span class="n">selection</span><span class="o">,</span>
</span><span class='line'>            <span class="n">selectionArgs</span><span class="o">);</span>
</span><span class='line'>      <span class="k">break</span><span class="o">;</span>
</span><span class='line'>   <span class="k">case</span> <span class="nl">ITEM_ID:</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">idStr</span> <span class="o">=</span> <span class="n">uri</span><span class="o">.</span><span class="na">getLastPathSegment</span><span class="o">();</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">where</span> <span class="o">=</span> <span class="n">Items</span><span class="o">.</span><span class="na">_ID</span> <span class="o">+</span> <span class="s">&quot; = &quot;</span> <span class="o">+</span> <span class="n">idStr</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(!</span><span class="n">TextUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">selection</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">where</span> <span class="o">+=</span> <span class="s">&quot; AND &quot;</span> <span class="o">+</span> <span class="n">selection</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">updateCount</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="na">update</span><span class="o">(</span>
</span><span class='line'>            <span class="n">DBSchema</span><span class="o">.</span><span class="na">TBL_ITEMS</span><span class="o">,</span>
</span><span class='line'>            <span class="n">values</span><span class="o">,</span>
</span><span class='line'>            <span class="n">where</span><span class="o">,</span>
</span><span class='line'>            <span class="n">selectionArgs</span><span class="o">);</span>
</span><span class='line'>      <span class="k">break</span><span class="o">;</span>
</span><span class='line'>   <span class="k">default</span><span class="o">:</span>
</span><span class='line'>      <span class="c1">// no support for updating photos or entities!</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;Unsupported URI: &quot;</span> <span class="o">+</span> <span class="n">uri</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="c1">// notify all listeners of changes:</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">updateCount</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isInBatchMode</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">getContext</span><span class="o">().</span><span class="na">getContentResolver</span><span class="o">().</span><span class="na">notifyChange</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">updateCount</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>First you once again use your UriMatcher to distinguish between dir based and id based URIs. If you use a dir based URI, you simply pass this call on to the SQLiteDatabase&rsquo;s update() method substituting the URI with the correct table name. In case of an id based URI you have to extract the id from the URI to form a valid WHERE clause. After this call SQLiteDatabase‘s update() method. Finally you return the number of modified records.</p>

<p>The only changes you have to make for your delete() method is to change the method names and to get rid of the ContentValues object. Everthing else is exactly as shown in the update() method’s code sample.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">delete</span><span class="o">(</span><span class="n">Uri</span> <span class="n">uri</span><span class="o">,</span> <span class="n">String</span> <span class="n">selection</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">selectionArgs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">SQLiteDatabase</span> <span class="n">db</span> <span class="o">=</span> <span class="n">mHelper</span><span class="o">.</span><span class="na">getWritableDatabase</span><span class="o">();</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">delCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>   <span class="k">switch</span> <span class="o">(</span><span class="n">URI_MATCHER</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="n">uri</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">case</span> <span class="nl">ITEM_LIST:</span>
</span><span class='line'>      <span class="n">delCount</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span>
</span><span class='line'>            <span class="n">DBSchema</span><span class="o">.</span><span class="na">TBL_ITEMS</span><span class="o">,</span>
</span><span class='line'>            <span class="n">selection</span><span class="o">,</span>
</span><span class='line'>            <span class="n">selectionArgs</span><span class="o">);</span>
</span><span class='line'>      <span class="k">break</span><span class="o">;</span>
</span><span class='line'>   <span class="k">case</span> <span class="nl">ITEM_ID:</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">idStr</span> <span class="o">=</span> <span class="n">uri</span><span class="o">.</span><span class="na">getLastPathSegment</span><span class="o">();</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">where</span> <span class="o">=</span> <span class="n">Items</span><span class="o">.</span><span class="na">_ID</span> <span class="o">+</span> <span class="s">&quot; = &quot;</span> <span class="o">+</span> <span class="n">idStr</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(!</span><span class="n">TextUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">selection</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">where</span> <span class="o">+=</span> <span class="s">&quot; AND &quot;</span> <span class="o">+</span> <span class="n">selection</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">delCount</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span>
</span><span class='line'>            <span class="n">DBSchema</span><span class="o">.</span><span class="na">TBL_ITEMS</span><span class="o">,</span>
</span><span class='line'>            <span class="n">where</span><span class="o">,</span>
</span><span class='line'>            <span class="n">selectionArgs</span><span class="o">);</span>
</span><span class='line'>      <span class="k">break</span><span class="o">;</span>
</span><span class='line'>   <span class="k">default</span><span class="o">:</span>
</span><span class='line'>      <span class="c1">// no support for deleting photos or entities -</span>
</span><span class='line'>      <span class="c1">// photos are deleted by a trigger when the item is deleted</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;Unsupported URI: &quot;</span> <span class="o">+</span> <span class="n">uri</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="c1">// notify all listeners of changes:</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">delCount</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isInBatchMode</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">getContext</span><span class="o">().</span><span class="na">getContentResolver</span><span class="o">().</span><span class="na">notifyChange</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">delCount</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lifecycle</p>

<p>As with all components Android also manages the creation and destruction of a content provider. But a content provider has no visible state and there is also nothing the user has entered that should not be lost. Because of this Android can shut down the content provider whenever it sees fit.</p>

<p>So instead of the many methods you usually have to take care of in your activities or fragments, you have to implement just this one method: onCreate(). Keep this method as fast as possible. It runs on the UI thread when your app starts up. So it has to be fast otherwise the first impression with your app won’t be too impressive.</p>

<p>Normally that’s just it. But there are two other callback methods you might want to react to depending on circumstances:</p>

<ul>
<li>When your content provider needs to react to changed settings (e.g. the user selected language) you have to implement the onConfigurationChanged() method that takes a Configuration object as parameter.</li>
<li>When your content provider keeps large amounts of data around (which you should strive to avoid) you should also implement the onLowMemory() method to release these data.</li>
</ul>


<h4>Configuring your content provider</h4>

<p>As with any component in Android you also have to register your content provider within the AndroidManifest.xml file. The next code sample shows the configuration of the sample content provider.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;provider</span>
</span><span class='line'>   <span class="na">android:name=</span><span class="s">&quot;.provider.LentItemsProvider&quot;</span>
</span><span class='line'>   <span class="na">android:authorities=</span><span class="s">&quot;de.openminds.samples.cpsample.lentitems&quot;</span>
</span><span class='line'>   <span class="na">android:exported=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>   <span class="na">android:grantUriPermissions=</span><span class="s">&quot;true&quot;</span>
</span><span class='line'>   <span class="na">android:label=</span><span class="s">&quot;LentItemsProvider&quot;</span>
</span><span class='line'>   <span class="na">android:readPermission=</span><span class="s">&quot;de.openminds.samples.cpsample.lentitems.READ&quot;</span>
</span><span class='line'>   <span class="na">android:writePermission=</span><span class="s">&quot;de.openminds.samples.cpsample.lentitems.WRITE&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You use a <provider> element for each content provider you want to register. Of its many attributes you usually will use authorities, name and possibly one of the permission attributes.</p>

<p>The name attribute simply is the fully qualified class name of your ContentProvider subclass. As always it is possible to use a simple “.” for the default-package of your application.</p>

<p>I have explained the rules for authorities in detail in the post about content provider clients. It should be akin to Java’s package naming conventions and must be unique among all content providers on any device it is going to be installed on. So don’t be sloppy with the provider’s authority.</p>

<h4>Think about necessary permissions</h4>

<p>As you have seen above, you can – and probably should – add restrictions to your content provider. By using one of the permission attributes you force clients to be open to their users about the use of your content provider’s data.</p>

<p>If you do not export your content provider this is no issue for you. But if you do, think carefully about what you want clients to be able to do and how to set permissions accordingly.</p>

<h4>When to use content providers</h4>

<p>As described in the introductory post, one reason to use content providers, is to export data. So, should you use content providers only to provide data to external applications? Or when would it be appropriate to prefer them for your own application over directly accessing the database?</p>

<p>I recommend to use a content provider whenever your app needs to react to changes in the underlying data store – even to changes from within your app itself. And this of course is more often true than not. You might for example have a ListView which displays summary information of the data held in your data store. Now if you delete or add an entry and return to your list the list should reflect these changes. This is easily done using a content provider in combination with using Loaders. Using the database directly you would have to trigger a new query on your own.</p>

<p>You must use content providers if you want to use search suggestions. In that case Android leaves you no choice.</p>

<p>Android also demands that you use content providers with sync adapters. But contrary to search suggestions you can work around this requirement with a stub provider. But, well, I like content providers, so I recommend to use a proper one with sync adapters.</p>

<h3 id="performance">Better Performance with ContentProviderOperation</h3>


<p>ContentProviders are one of Android’s core building blocks. They represent a relational interface to data – either in databases or (cached) data from the cloud.</p>

<p>Sometimes you want to use them for multiple operations in a row. Like updating different sources and so on. In those cases you could call the respective ContentResolver methods multiple times or you could execute a batch of operations. The latter is the recommended practise.</p>

<p>To create, delete or update a set of data in a batch like fashion you should use the class ContentProviderOperation.</p>

<p>According to Android’s documentation it is recommended to use ContentProviderOperations for multiple reasons:</p>

<ul>
<li>All operations execute within the same transaction – thus data integrity is assured</li>
<li>This helps improve performance since starting, running and closing one transaction offers far better performance than opening and committing multiple transactions</li>
<li>Finally using one batch operation instead of multiple isolated operations reduces the number of context switches between your app and the content provider you are using. This of course also helps to improve the performance of your app – and by using less cpu cycles also reduces the power consumption.</li>
<li>To create an object of <code>ContentProviderOperation</code> you need to build it using the inner class <code>ContentProviderOperation.Builder</code>. You obtain an object of the Builder class by calling one of the three static methods newInsert, newUpdate or newDelete:</li>
</ul>


<table>
<caption>Methods to obtain a Builder object</caption>
<tr>
<th>Method</th>
<th>Usage</th>
</tr>
<tr>
<td>newInsert</td>
<td>Create a Builder object suitable for an insert operation</td>
</tr>
<tr>
<td>newUpdate</td>
<td>Create a Builder object suitable for an update operation</td>
</tr>
<tr>
<td>newDelete</td>
<td>Create a Builder object suitable for a delete operation</td>
</tr>
</table>


<p>The Builder is an example of the Gang of Four Builder pattern. A Builder defines an interface for how to create objects. Concrete instances then create specific objects for the task at hand. In this case we have three different Builders for creating ContentProviderOperation objects. These objects can be used to create, update or delete ContentProvider data sets.</p>

<p>Typically all steps necessary to create a ContentProviderOperation object are done in one round of method chaining. That’s possible because all methods of the Builder class return a Builder object themself. The one exception is the build() method, which instead returns the desired object: Our completely created ContentProviderOperation object. So a typical chain might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">ContentProviderOperation</span><span class="o">&gt;</span> <span class="n">ops</span> <span class="o">=</span>
</span><span class='line'>   <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">ContentProviderOperation</span><span class="o">&gt;();</span>
</span><span class='line'><span class="n">ops</span><span class="o">.</span><span class="na">add</span><span class="o">(</span>
</span><span class='line'>   <span class="n">ContentProviderOperation</span><span class="o">.</span><span class="na">newInsert</span><span class="o">(</span><span class="n">RawContacts</span><span class="o">.</span><span class="na">CONTENT_URI</span><span class="o">)</span>
</span><span class='line'>       <span class="o">.</span><span class="na">withValue</span><span class="o">(</span><span class="n">RawContacts</span><span class="o">.</span><span class="na">ACCOUNT_TYPE</span><span class="o">,</span> <span class="s">&quot;someAccountType&quot;</span><span class="o">)</span>
</span><span class='line'>       <span class="o">.</span><span class="na">withValue</span><span class="o">(</span><span class="n">RawContacts</span><span class="o">.</span><span class="na">ACCOUNT_NAME</span><span class="o">,</span> <span class="s">&quot;someAccountName&quot;</span><span class="o">)</span>
</span><span class='line'>       <span class="o">.</span><span class="na">withYieldAllowed</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
</span><span class='line'>       <span class="o">.</span><span class="na">build</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course you could also use a ContentValues object as usual and use the withValues(values) method instead.</p>

<p>The Builder class has among others these methods you can use to define which objects to delete or how to create or update an object:</p>

<table>
<caption>Some important methods of the Builder object</caption>
<tr>
<th>Method</th>
<th>Usage</th>
</tr>
<tr>
<td>withSelection (String selection, String[] selectionArgs)</td>
<td>Specifies on which subset of the existing data set to operate. Only usable with ContentProviderOperation objects used to update or delete data</td>
</tr>
<tr>
<td>withValue (String key, Object value)</td>
<td>Defines the desired value for one column. Only usable with ContentProviderOperation objects used to create or update data</td>
</tr>
<tr>
<td>withValues (ContentValues values)</td>
<td>Defines the desired values for multiple columns. Only usable with ContentProviderOperation objects used to create or update data</td>
</tr>
</table>


<p>As you can see in the code sample I presented above you need an ArrayList of ContentProviderOperation objects. For every ContentProvider-CRUD method you have to use one ContentProviderOperation object and add it to this list. I will explain in a later blog post about the method withValueBackReference() why it has to be an ArrayList and not say a LinkedList.</p>

<p>The list is finally passed to the applyBatch() method of the ContentResolver object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">getContentResolver</span><span class="o">().</span>
</span><span class='line'>      <span class="n">applyBatch</span><span class="o">(</span><span class="n">ContactsContract</span><span class="o">.</span><span class="na">AUTHORITY</span><span class="o">,</span> <span class="n">ops</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RemoteException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="c1">// do s.th.</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">OperationApplicationException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="c1">// do s.th.</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Loader]]></title>
    <link href="http://Solarex.github.io/blog/2014/10/24/android-loader/"/>
    <updated>2014-10-24T06:34:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2014/10/24/android-loader</id>
    <content type="html"><![CDATA[<p><center><img src="http://Solarex.github.io/images/android_logo.jpg"/></center></p>


<ul>
<li><a href="#overview">Android Loader</a>

<ul>
<li><a href="#before">Life before Loaders</a></li>
<li><a href="#loadermanager">Understanding the LoaderManager</a></li>
<li><a href="#implementing">Implementing Loaders</a></li>
</ul>
</li>
</ul>


<h2 id="overview">Android Loader</h2>


<p>This post gives a brief introduction to Loaders and the LoaderManager. The first section describes how data was loaded prior to the release of Android 3.0, pointing out out some of the flaws of the pre-Honeycomb APIs. The second section defines the purpose of each class and summarizes their powerful ability in asynchronously loading data.</p>

<!-- more -->




<h3 id="before">Life before Loaders</h3>


<p>Before Android 3.0, many Android applications lacked in responsiveness. UI interactions glitched, transitions between activities lagged, and ANR (Application Not Responding) dialogs rendered apps totally useless. This lack of responsiveness stemmed mostly from the fact that developers were performing queries on the UI thread—a very poor choice for lengthy operations like loading data.</p>

<p>While the <a href="http://developer.android.com/guide/practices/responsiveness.html">documentation</a> has always stressed the importance of instant feedback, the pre-Honeycomb APIs simply did not encourage this behavior. Before Loaders, cursors were primarily managed and queried for with two (now deprecated) Activity methods:</p>

<ul>
<li><p><code>public void startManagingCursor(Cursor)</code>:Tells the activity to take care of managing the cursor&rsquo;s lifecycle based on the activity&rsquo;s lifecycle. The cursor will automatically be deactivated (<code>deactivate()</code>) when the activity is stopped, and will automatically be closed (<code>close()</code>) when the activity is destroyed. When the activity is stopped and then later restarted, the Cursor is re-queried (<code>requery()</code>) for the most up-to-date data.</p></li>
<li><p><code>public Cursor managedQuery(Uri, String, String, String, String)</code>:A wrapper around the <code>ContentResolver's query()</code> method. In addition to performing the query, it begins management of the cursor (that is, <code>startManagingCursor(cursor)</code> is called before it is returned).</p></li>
</ul>


<p>While convenient, these methods were deeply flawed in that they performed queries on the UI thread. What&rsquo;s more, the &ldquo;managed cursors&rdquo; did not retain their data across Activity configuration changes. The need to <code>requery()</code> the cursor&rsquo;s data in these situations was unnecessary, inefficient, and made orientation changes clunky and sluggish as a result.</p>

<h4>The Problem with &ldquo;Managed Cursors&rdquo;</h4>

<p>Let&rsquo;s illustrate the problem with &ldquo;managed cursors&rdquo; through a simple code sample. Given below is a ListActivity that loads data using the pre-Honeycomb APIs. The activity makes a query to the ContentProvider and begins management of the returned cursor. The results are then bound to a SimpleCursorAdapter, and are displayed on the screen in a ListView. The code has been condensed for simplicity.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleListActivity</span> <span class="kd">extends</span> <span class="n">ListActivity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">PROJECTION</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span><span class="s">&quot;_id&quot;</span><span class="o">,</span> <span class="s">&quot;text_column&quot;</span><span class="o">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Performs a &quot;managed query&quot; to the ContentProvider. The Activity </span>
</span><span class='line'>    <span class="c1">// will handle closing and requerying the cursor.</span>
</span><span class='line'>    <span class="c1">//</span>
</span><span class='line'>    <span class="c1">// WARNING!! This query (and any subsequent re-queries) will be</span>
</span><span class='line'>    <span class="c1">// performed on the UI Thread!!</span>
</span><span class='line'>    <span class="n">Cursor</span> <span class="n">cursor</span> <span class="o">=</span> <span class="n">managedQuery</span><span class="o">(</span>
</span><span class='line'>        <span class="n">CONTENT_URI</span><span class="o">,</span>  <span class="c1">// The Uri constant in your ContentProvider class</span>
</span><span class='line'>        <span class="n">PROJECTION</span><span class="o">,</span>   <span class="c1">// The columns to return for each data row</span>
</span><span class='line'>        <span class="kc">null</span><span class="o">,</span>         <span class="c1">// No where clause</span>
</span><span class='line'>        <span class="kc">null</span><span class="o">,</span>         <span class="c1">// No where clause</span>
</span><span class='line'>        <span class="kc">null</span><span class="o">);</span>        <span class="c1">// No sort order</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span><span class="o">[]</span> <span class="n">dataColumns</span> <span class="o">=</span> <span class="o">{</span> <span class="s">&quot;text_column&quot;</span> <span class="o">};</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">viewIDs</span> <span class="o">=</span> <span class="o">{</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">text_view</span> <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Create the backing adapter for the ListView.</span>
</span><span class='line'>    <span class="c1">//</span>
</span><span class='line'>    <span class="c1">// WARNING!! While not readily obvious, using this constructor will </span>
</span><span class='line'>    <span class="c1">// tell the CursorAdapter to register a ContentObserver that will</span>
</span><span class='line'>    <span class="c1">// monitor the underlying data source. As part of the monitoring</span>
</span><span class='line'>    <span class="c1">// process, the ContentObserver will call requery() on the cursor </span>
</span><span class='line'>    <span class="c1">// each time the data is updated. Since Cursor#requery() is performed </span>
</span><span class='line'>    <span class="c1">// on the UI thread, this constructor should be avoided at all costs!</span>
</span><span class='line'>    <span class="n">SimpleCursorAdapter</span> <span class="n">adapter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleCursorAdapter</span><span class="o">(</span>
</span><span class='line'>        <span class="k">this</span><span class="o">,</span>                <span class="c1">// The Activity context</span>
</span><span class='line'>        <span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">list_item</span><span class="o">,</span>  <span class="c1">// Points to the XML for a list item</span>
</span><span class='line'>        <span class="n">cursor</span><span class="o">,</span>              <span class="c1">// Cursor that contains the data to display</span>
</span><span class='line'>        <span class="n">dataColumns</span><span class="o">,</span>         <span class="c1">// Bind the data in column &quot;text_column&quot;...</span>
</span><span class='line'>        <span class="n">viewIDs</span><span class="o">);</span>            <span class="c1">// ...to the TextView with id &quot;R.id.text_view&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Sets the ListView&#39;s adapter to be the cursor adapter that was </span>
</span><span class='line'>    <span class="c1">// just created.</span>
</span><span class='line'>    <span class="n">setListAdapter</span><span class="o">(</span><span class="n">adapter</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are three problems with the code above. If you have understood this post so far, the first two shouldn&rsquo;t be difficult to spot:</p>

<ul>
<li>managedQuery performs a query on the main UI thread. This leads to unresponsive apps and should no longer be used.</li>
<li>As seen in the <a href="http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/1.5_r4/android/app/Activity.java#Activity.managedQuery%28android.net.Uri%2Cjava.lang.String%5B%5D%2Cjava.lang.String%2Cjava.lang.String%29">Activity.java</a>, the call to <code>managedQuery</code> begins management of the returned cursor with a call to <code>startManagingCursor(cursor)</code>. Having the activity manage the cursor seems convenient at first, as we no longer need to worry about deactivating/closing the cursor ourselves. However, this signals the activity to call <code>requery()</code> on the cursor each time the activity returns from a stopped state, and therefore puts the UI thread at risk. This cost significantly outweighs the convenience of having the activity deactivate/close the cursor for us.</li>
<li>The <code>SimpleCursorAdapter</code> constructor (line 32) is deprecated and should not be used. The problem with this constructor is that it will have the <code>SimpleCursorAdapter</code> auto-requery its data when changes are made. More specifically, the <code>CursorAdapter</code> will register a <code>ContentObserver</code> that monitors the underlying data source for changes, calling <code>requery()</code> on its bound cursor each time the data is modified. The standard constructor should be used instead (if you intend on loading the adapter&rsquo;s data with a CursorLoader, make sure you pass 0 as the last argument). Don&rsquo;t worry if you couldn&rsquo;t spot this one&hellip; it&rsquo;s a very subtle bug.</li>
</ul>


<p>With the first Android tablet about to be released, something had to be done to encourage UI-friendly development. The larger, 7-10&#8221; Honeycomb tablets called for more complicated, interactive, multi-paned layouts. Further, the introduction of the Fragment meant that applications were about to become more dynamic and event-driven. A simple, single-threaded approach to loading data could no longer be encouraged. Thus, the Loader and the LoaderManager were born.</p>

<p>Prior to Honeycomb, it was difficult to manage cursors, synchronize correctly with the UI thread, and ensure all queries occurred on a background thread. Android 3.0 introduced the Loader and LoaderManager classes to help simplify the process. Both classes are available for use in the Android Support Library, which supports all Android platforms back to Android 1.6.</p>

<p>The new Loader API is a huge step forward, and significantly improves the user experience. Loaders ensure that all cursor operations are done asynchronously, thus eliminating the possibility of blocking the UI thread. Further, when managed by the LoaderManager, Loaders retain their existing cursor data across the activity instance (for example, when it is restarted due to a configuration change), thus saving the cursor from unnecessary, potentially expensive re-queries. As an added bonus, Loaders are intelligent enough to monitor the underlying data source for updates, re-querying automatically when the data is changed.</p>

<p>Since the introduction of Loaders in Honeycomb and Compatibility Library, Android applications have changed for the better. Making use of the now deprecated startManagingCursor and managedQuery methods are extremely discouraged; not only do they slow down your app, but they can potentially bring it to a screeching halt. Loaders, on the other hand, significantly speed up the user experience by offloading the work to a separate background thread.</p>

<h3 id="loadermanager">Understanding the LoaderManager</h3>


<p>For now, you should think of Loaders as simple, self-contained objects that (1) load data on a separate thread, and (2) monitor the underlying data source for updates, re-querying when changes are detected. This is more than enough to get you through the contents of this post.</p>

<h4>What is the LoaderManager?</h4>

<p>Simply stated, the <code>LoaderManager</code> is responsible for managing one or more Loaders associated with an <code>Activity</code> or <code>Fragment</code>. Each Activity and each Fragment has exactly one LoaderManager instance that is in charge of starting, stopping, retaining, restarting, and destroying its Loaders. These events are sometimes initiated directly by the client, by calling <code>initLoader()</code>, <code>restartLoader()</code>, or <code>destroyLoader()</code>. Just as often, however, these events are triggered by major Activity/Fragment lifecycle events. For example, when an Activity is destroyed, the Activity instructs its LoaderManager to destroy and close its Loaders (as well as any resources associated with them, such as a Cursor).</p>

<p>The <code>LoaderManager</code> does not know how data is loaded, nor does it need to. Rather, the <code>LoaderManager</code> instructs its <code>Loaders</code> when to start/stop/reset their load, retaining their state across configuration changes and providing a simple interface for delivering results back to the client. In this way, the <code>LoaderManager</code> is a much more intelligent and generic implementation of the now-deprecated <code>startManagingCursor</code> method. While both manage data across the twists and turns of the Activity lifecycle, the <code>LoaderManager</code> is far superior for several reasons:</p>

<ul>
<li><p><code>startManagingCursor</code> manages Cursors, whereas the <code>LoaderManager</code> manages <code>Loader&lt;D&gt;</code> objects. The advantage here is that <code>Loader&lt;D&gt;</code> is generic, where D is the container object that holds the loaded data. In other words, the data source doesn&rsquo;t have to be a <code>Cursor</code>; it could be a <code>List</code>, a <code>JSONArray</code>&hellip; anything. The <code>LoaderManager</code> is independent of the container object that holds the data and is much more flexible as a result.</p></li>
<li><p>Calling <code>startManagingCursor</code> will make the <code>Activity</code> call <code>requery()</code> on the managed cursor. As mentioned in the previous post, <code>requery()</code> is a potentially expensive operation that is performed on the main UI thread. Subclasses of the <code>Loader&lt;D&gt;</code> class, on the other hand, are expected to load their data asynchronously, so using the <code>LoaderManager</code> will never block the UI thread.</p></li>
<li><p><code>startManagingCursor</code> does not retain the Cursor&rsquo;s state across configuration changes. Instead, each time the Activity is destroyed due to a configuration change (a simple orientation change, for example), the <code>Cursor</code> is destroyed and must be requeried. The <code>LoaderManager</code> is much more intelligent in that it retains its Loaders&#8217; state across configuration changes, and thus doesn&rsquo;t need to requery its data.</p></li>
<li><p>The <code>LoaderManager</code> provides seamless monitoring of data! Whenever the Loader&rsquo;s data source is modified, the <code>LoaderManager</code> will receive a new asynchronous load from the corresponding Loader, and will return the updated data to the client. (Note: the LoaderManager will only be notified of these changes if the Loader is implemented correctly. ).</p></li>
</ul>


<p>If you feel overwhelmed by the details above, I wouldn&rsquo;t stress over it. The most important thing to take away from this is that the <code>LoaderManager</code> makes your life easy. It initializes, manages, and destroys Loaders for you, reducing both coding complexity and subtle lifecycle-related bugs in your Activitys and Fragments. Further, interacting with the <code>LoaderManager</code> involves implementing three simple callback methods. We discuss the <code>LoaderManager.LoaderCallbacks&lt;D&gt;</code> in the next section.</p>

<h4>Implementing the LoaderManager.LoaderCallbacks<D> Interface</h4>

<p>The <code>LoaderManager.LoaderCallbacks&lt;D&gt;</code> interface is a simple contract that the <code>LoaderManager</code> uses to report data back to the client. Each <code>Loader</code> gets its own callback object that the <code>LoaderManager</code> will interact with. This callback object fills in the gaps of the abstract <code>LoaderManager</code> implementation, telling it how to instantiate the <code>Loader (onCreateLoader)</code> and providing instructions when its load is complete/reset (<code>onLoadFinished</code> and <code>onLoadReset</code>, respectively). Most often you will implement the callbacks as part of the component itself, by having your Activity or Fragment implement the <code>LoaderManager.LoaderCallbacks&lt;D&gt;</code> interface:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="kd">implements</span> <span class="n">LoaderManager</span><span class="o">.</span><span class="na">LoaderCallbacks</span><span class="o">&lt;</span><span class="n">D</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Loader</span><span class="o">&lt;</span><span class="n">D</span><span class="o">&gt;</span> <span class="nf">onCreateLoader</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">,</span> <span class="n">Bundle</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLoadFinished</span><span class="o">(</span><span class="n">Loader</span><span class="o">&lt;</span><span class="n">D</span><span class="o">&gt;</span> <span class="n">loader</span><span class="o">,</span> <span class="n">D</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLoaderReset</span><span class="o">(</span><span class="n">Loader</span><span class="o">&lt;</span><span class="n">D</span><span class="o">&gt;</span> <span class="n">loader</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* ... */</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once instantiated, the client passes the callbacks object (&ldquo;this&rdquo;, in this case) as the third argument to the <code>LoaderManager</code>&rsquo;s <code>initLoader</code> method, and will be bound to the <code>Loader</code> as soon as it is created.</p>

<p>Overall, implementing the callbacks is straightforward. Each callback method serves a specific purpose that makes interacting with the <code>LoaderManager</code> easy:</p>

<ul>
<li><p><code>onCreateLoader</code> is a factory method that simply returns a new <code>Loader</code>. The <code>LoaderManager</code> will call this method when it first creates the <code>Loader</code>.</p></li>
<li><p><code>onLoadFinished</code> is called automatically when a <code>Loader</code> has finished its load. This method is typically where the client will update the application&rsquo;s UI with the loaded data. The client may (and should) assume that new data will be returned to this method each time new data is made available. Remember that it is the Loader&rsquo;s job to monitor the data source and to perform the actual asynchronous loads. The <code>LoaderManager</code> will receive these loads once they have completed, and then pass the result to the callback object&rsquo;s <code>onLoadFinished</code> method for the client (i.e. the Activity/Fragment) to use.</p></li>
<li><p>Lastly, <code>onLoadReset</code> is called when the Loader&rsquo;s data is about to be reset. This method gives you the opportunity to remove any references to old data that may no longer be available.</p></li>
</ul>


<h4>Transitioning from Managed Cursors to the LoaderManager</h4>

<p>The code below is similar in behavior to the sample in my previous section. The difference, of course, is that it has been updated to use the <code>LoaderManager</code>. The <code>CursorLoader</code> ensures that all queries are performed asynchronously, thus guaranteeing that we won&rsquo;t block the UI thread. Further, the <code>LoaderManager</code> manages the <code>CursorLoader</code> across the <code>Activity</code> lifecycle, retaining its data on configuration changes and directing each new data load to the callback&rsquo;s <code>onLoadFinished</code> method, where the Activity is finally free to make use of the queried <code>Cursor</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleListActivity</span> <span class="kd">extends</span> <span class="n">ListActivity</span> <span class="kd">implements</span>
</span><span class='line'>    <span class="n">LoaderManager</span><span class="o">.</span><span class="na">LoaderCallbacks</span><span class="o">&lt;</span><span class="n">Cursor</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">PROJECTION</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span> <span class="s">&quot;_id&quot;</span><span class="o">,</span> <span class="s">&quot;text_column&quot;</span> <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// The loader&#39;s unique id. Loader ids are specific to the Activity or</span>
</span><span class='line'>  <span class="c1">// Fragment in which they reside.</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">LOADER_ID</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// The callbacks through which we will interact with the LoaderManager.</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">LoaderManager</span><span class="o">.</span><span class="na">LoaderCallbacks</span><span class="o">&lt;</span><span class="n">Cursor</span><span class="o">&gt;</span> <span class="n">mCallbacks</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// The adapter that binds our data to the ListView</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">SimpleCursorAdapter</span> <span class="n">mAdapter</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span><span class="o">[]</span> <span class="n">dataColumns</span> <span class="o">=</span> <span class="o">{</span> <span class="s">&quot;text_column&quot;</span> <span class="o">};</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">viewIDs</span> <span class="o">=</span> <span class="o">{</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">text_view</span> <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Initialize the adapter. Note that we pass a &#39;null&#39; Cursor as the</span>
</span><span class='line'>    <span class="c1">// third argument. We will pass the adapter a Cursor only when the</span>
</span><span class='line'>    <span class="c1">// data has finished loading for the first time (i.e. when the</span>
</span><span class='line'>    <span class="c1">// LoaderManager delivers the data to onLoadFinished). Also note</span>
</span><span class='line'>    <span class="c1">// that we have passed the &#39;0&#39; flag as the last argument. This</span>
</span><span class='line'>    <span class="c1">// prevents the adapter from registering a ContentObserver for the</span>
</span><span class='line'>    <span class="c1">// Cursor (the CursorLoader will do this for us!).</span>
</span><span class='line'>    <span class="n">mAdapter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleCursorAdapter</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">list_item</span><span class="o">,</span>
</span><span class='line'>        <span class="kc">null</span><span class="o">,</span> <span class="n">dataColumns</span><span class="o">,</span> <span class="n">viewIDs</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Associate the (now empty) adapter with the ListView.</span>
</span><span class='line'>    <span class="n">setListAdapter</span><span class="o">(</span><span class="n">mAdapter</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// The Activity (which implements the LoaderCallbacks&lt;Cursor&gt;</span>
</span><span class='line'>    <span class="c1">// interface) is the callbacks object through which we will interact</span>
</span><span class='line'>    <span class="c1">// with the LoaderManager. The LoaderManager uses this object to</span>
</span><span class='line'>    <span class="c1">// instantiate the Loader and to notify the client when data is made</span>
</span><span class='line'>    <span class="c1">// available/unavailable.</span>
</span><span class='line'>    <span class="n">mCallbacks</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Initialize the Loader with id &#39;1&#39; and callbacks &#39;mCallbacks&#39;.</span>
</span><span class='line'>    <span class="c1">// If the loader doesn&#39;t already exist, one is created. Otherwise,</span>
</span><span class='line'>    <span class="c1">// the already created Loader is reused. In either case, the</span>
</span><span class='line'>    <span class="c1">// LoaderManager will manage the Loader across the Activity/Fragment</span>
</span><span class='line'>    <span class="c1">// lifecycle, will receive any new loads once they have completed,</span>
</span><span class='line'>    <span class="c1">// and will report this new data back to the &#39;mCallbacks&#39; object.</span>
</span><span class='line'>    <span class="n">LoaderManager</span> <span class="n">lm</span> <span class="o">=</span> <span class="n">getLoaderManager</span><span class="o">();</span>
</span><span class='line'>    <span class="n">lm</span><span class="o">.</span><span class="na">initLoader</span><span class="o">(</span><span class="n">LOADER_ID</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">mCallbacks</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Loader</span><span class="o">&lt;</span><span class="n">Cursor</span><span class="o">&gt;</span> <span class="nf">onCreateLoader</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">,</span> <span class="n">Bundle</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Create a new CursorLoader with the following query parameters.</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">CursorLoader</span><span class="o">(</span><span class="n">SampleListActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="n">CONTENT_URI</span><span class="o">,</span>
</span><span class='line'>        <span class="n">PROJECTION</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLoadFinished</span><span class="o">(</span><span class="n">Loader</span><span class="o">&lt;</span><span class="n">Cursor</span><span class="o">&gt;</span> <span class="n">loader</span><span class="o">,</span> <span class="n">Cursor</span> <span class="n">cursor</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// A switch-case is useful when dealing with multiple Loaders/IDs</span>
</span><span class='line'>    <span class="k">switch</span> <span class="o">(</span><span class="n">loader</span><span class="o">.</span><span class="na">getId</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nl">LOADER_ID:</span>
</span><span class='line'>        <span class="c1">// The asynchronous load is complete and the data</span>
</span><span class='line'>        <span class="c1">// is now available for use. Only now can we associate</span>
</span><span class='line'>        <span class="c1">// the queried Cursor with the SimpleCursorAdapter.</span>
</span><span class='line'>        <span class="n">mAdapter</span><span class="o">.</span><span class="na">swapCursor</span><span class="o">(</span><span class="n">cursor</span><span class="o">);</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// The listview now displays the queried data.</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLoaderReset</span><span class="o">(</span><span class="n">Loader</span><span class="o">&lt;</span><span class="n">Cursor</span><span class="o">&gt;</span> <span class="n">loader</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// For whatever reason, the Loader&#39;s data is now unavailable.</span>
</span><span class='line'>    <span class="c1">// Remove any references to the old data by replacing it with</span>
</span><span class='line'>    <span class="c1">// a null Cursor.</span>
</span><span class='line'>    <span class="n">mAdapter</span><span class="o">.</span><span class="na">swapCursor</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As its name suggests, the <code>LoaderManager</code> is responsible for managing Loaders across the Activity/Fragment lifecycle. The <code>LoaderManager</code> is simple and its implementation usually requires very little code.</p>

<h3 id="implementing">Implementing Loaders</h3>


<p>This section introduces the <code>Loader&lt;D&gt;</code> class as well as custom <code>Loader</code> implementations.</p>

<h4>Loader Basics</h4>

<p><code>Loaders</code> are responsible for performing queries on a separate thread, monitoring the data source for changes, and delivering new results to a registered listener (usually the <code>LoaderManager</code>) when changes are detected. These characteristics make <code>Loaders</code> a powerful addition to the Android SDK for several reasons:</p>

<ul>
<li><p>They encapsulate the actual loading of data. The <code>Activity/Fragment</code> no longer needs to know how to load data. Instead, the <code>Activity/Fragment</code> delegates the task to the <code>Loader</code>, which carries out the request behind the scenes and has its results delivered back to the <code>Activity/Fragment</code>.</p></li>
<li><p>They abstract out the idea of threads from the client. The Activity/Fragment does not need to worry about offloading queries to a separate thread, as the <code>Loader</code> will do this automatically. This reduces code complexity and eliminates potential thread-related bugs.</p></li>
<li><p>They are entirely event-driven. <code>Loaders</code> monitor the underlying data source and automatically perform new loads for up-to-date results when changes are detected. This makes working with Loaders easy, as the client can simply trust that the Loader will auto-update its data on its own. All the Activity/Fragment has to do is initialize the <code>Loader</code> and respond to any results that might be delivered. Everything in between is done by the Loader.</p></li>
</ul>


<p>Loaders are a somewhat advanced topic and may take some time getting used to. We begin by analyzing its four defining characteristics in the next section.</p>

<h4>What Makes Up a Loader?</h4>

<p>There are four characteristics which ultimately determine a Loader’s behavior:</p>

<ul>
<li><p>A task to perform the asynchronous load. To ensure that loads are done on a separate thread, subclasses should extend <code>AsyncTaskLoader&lt;D&gt;</code> as opposed to the <code>Loader&lt;D&gt;</code> class. <code>AsyncTaskLoader&lt;D&gt;</code> is an abstract Loader which provides an <code>AsyncTask</code> to do its work. When subclassed, implementing the asynchronous task is as simple as implementing the abstract <code>loadInBackground()</code> method, which is called on a worker thread to perform the data load.</p></li>
<li><p>A registered listener to receive the Loader&rsquo;s results when it completes a load. For each of its <code>Loaders</code>, the <code>LoaderManager</code> registers an <code>OnLoadCompleteListener&lt;D&gt;</code> which will forward the Loader’s delivered results to the client with a call to <code>onLoadFinished(Loader&lt;D&gt; loader, D result)</code>. Loaders should deliver results to these registered listeners with a call to <code>Loader#deliverResult(D result)</code>.You don&rsquo;t need to worry about registering a listener for your Loader unless you plan on using it without the <code>LoaderManager</code>. The <code>LoaderManager</code> will act as this &ldquo;listener&rdquo; and will forward any results that the Loader delivers to the <code>LoaderCallbacks#onLoadFinished</code> method.</p></li>
<li><p>One of three distinct states. Any given Loader will either be in a started, stopped, or reset state:</p>

<ul>
<li><code>Loaders</code> in a started state execute loads and may deliver their results to the listener at any time. Started Loaders should monitor for changes and perform new loads when changes are detected. Once started, the Loader will remain in a started state until it is either stopped or reset. This is the only state in which <code>onLoadFinished</code> will ever be called.</li>
<li><code>Loaders</code> in a stopped state continue to monitor for changes but should not deliver results to the client. From a stopped state, the <code>Loader</code> may either be started or reset.</li>
<li><code>Loaders</code> in a reset state should not execute new loads, should not deliver new results, and should not monitor for changes. When a loader enters a reset state, it should invalidate and free any data associated with it for garbage collection (likewise, the client should make sure they remove any references to this data, since it will no longer be available). More often than not, reset Loaders will never be called again; however, in some cases they may be started, so they should be able to start running properly again if necessary.</li>
</ul>
</li>
<li>An observer to receive notifications when the data source has changed. <code>Loaders</code> should implement an observer of some sort (i.e. a <code>ContentObserver</code>, a <code>BroadcastReceiver</code>, etc.) to monitor the underlying data source for changes. When a change is detected, the observer should call <code>Loader#onContentChanged()</code>, which will either (a) force a new load if the Loader is in a started state or, (b) raise a flag indicating that a change has been made so that if the <code>Loader</code> is ever started again, it will know that it should reload its data.</li>
</ul>


<p>By now you should have a basic understanding of how Loaders work. If not, I suggest you let it sink in for a bit and come back later to read through once more (reading the <a href="http://developer.android.com/reference/android/content/Loader.html">documentation</a> never hurts either!). That being said, let’s get our hands dirty with the actual code!</p>

<h4>Implementing the Loader</h4>

<p>As I stated earlier, there is a lot that you must keep in mind when implementing your own custom Loaders. Subclasses must implement <code>loadInBackground()</code> and should override <code>onStartLoading()</code>, <code>onStopLoading()</code>, <code>onReset()</code>, <code>onCanceled()</code>, and <code>deliverResult(D results)</code> to achieve a fully functioning <code>Loader</code>. Overriding these methods is very important as the <code>LoaderManager</code> will call them regularly depending on the state of the Activity/Fragment lifecycle. For example, when an Activity is first started, the Activity instructs the <code>LoaderManager</code> to start each of its <code>Loaders</code> in <code>Activity#onStart()</code>. If a <code>Loader</code> is not already started, the <code>LoaderManager</code> calls <code>startLoading()</code>, which puts the <code>Loader</code> in a started state and immediately calls the <code>Loader’s</code> <code>onStartLoading()</code> method. In other words, a lot of work that the <code>LoaderManager</code> does behind the scenes relies on the Loader being correctly implemented, so don’t take the task of implementing these methods lightly!</p>

<p>The code below serves as a template of what a <code>Loader</code> implementation typically looks like. The <code>SampleLoader</code> queries a list of <code>SampleItem</code> objects and delivers a <code>List&lt;SampleItem&gt;</code> to the client:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SampleLoader</span> <span class="kd">extends</span> <span class="n">AsyncTaskLoader</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">SampleItem</span><span class="o">&gt;&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// We hold a reference to the Loader’s data here.</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">SampleItem</span><span class="o">&gt;</span> <span class="n">mData</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">SampleLoader</span><span class="o">(</span><span class="n">Context</span> <span class="n">ctx</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Loaders may be used across multiple Activitys (assuming they aren&#39;t</span>
</span><span class='line'>    <span class="c1">// bound to the LoaderManager), so NEVER hold a reference to the context</span>
</span><span class='line'>    <span class="c1">// directly. Doing so will cause you to leak an entire Activity&#39;s context.</span>
</span><span class='line'>    <span class="c1">// The superclass constructor will store a reference to the Application</span>
</span><span class='line'>    <span class="c1">// Context instead, and can be retrieved with a call to getContext().</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">(</span><span class="n">ctx</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/****************************************************/</span>
</span><span class='line'>  <span class="cm">/** (1) A task that performs the asynchronous load **/</span>
</span><span class='line'>  <span class="cm">/****************************************************/</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">SampleItem</span><span class="o">&gt;</span> <span class="nf">loadInBackground</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// This method is called on a background thread and should generate a</span>
</span><span class='line'>    <span class="c1">// new set of data to be delivered back to the client.</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">SampleItem</span><span class="o">&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">SampleItem</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// TODO: Perform the query here and add the results to &#39;data&#39;.</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">data</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/********************************************************/</span>
</span><span class='line'>  <span class="cm">/** (2) Deliver the results to the registered listener **/</span>
</span><span class='line'>  <span class="cm">/********************************************************/</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">deliverResult</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">SampleItem</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">isReset</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// The Loader has been reset; ignore the result and invalidate the data.</span>
</span><span class='line'>      <span class="n">releaseResources</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Hold a reference to the old data so it doesn&#39;t get garbage collected.</span>
</span><span class='line'>    <span class="c1">// We must protect it until the new data has been delivered.</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">SampleItem</span><span class="o">&gt;</span> <span class="n">oldData</span> <span class="o">=</span> <span class="n">mData</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mData</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">isStarted</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// If the Loader is in a started state, deliver the results to the</span>
</span><span class='line'>      <span class="c1">// client. The superclass method does this for us.</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">deliverResult</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Invalidate the old data as we don&#39;t need it any more.</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">oldData</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">oldData</span> <span class="o">!=</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">releaseResources</span><span class="o">(</span><span class="n">oldData</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/*********************************************************/</span>
</span><span class='line'>  <span class="cm">/** (3) Implement the Loader’s state-dependent behavior **/</span>
</span><span class='line'>  <span class="cm">/*********************************************************/</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onStartLoading</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mData</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Deliver any previously loaded data immediately.</span>
</span><span class='line'>      <span class="n">deliverResult</span><span class="o">(</span><span class="n">mData</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Begin monitoring the underlying data source.</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mObserver</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mObserver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SampleObserver</span><span class="o">();</span>
</span><span class='line'>      <span class="c1">// TODO: register the observer</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">takeContentChanged</span><span class="o">()</span> <span class="o">||</span> <span class="n">mData</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// When the observer detects a change, it should call onContentChanged()</span>
</span><span class='line'>      <span class="c1">// on the Loader, which will cause the next call to takeContentChanged()</span>
</span><span class='line'>      <span class="c1">// to return true. If this is ever the case (or if the current data is</span>
</span><span class='line'>      <span class="c1">// null), we force a new load.</span>
</span><span class='line'>      <span class="n">forceLoad</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onStopLoading</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// The Loader is in a stopped state, so we should attempt to cancel the </span>
</span><span class='line'>    <span class="c1">// current load (if there is one).</span>
</span><span class='line'>    <span class="n">cancelLoad</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Note that we leave the observer as is. Loaders in a stopped state</span>
</span><span class='line'>    <span class="c1">// should still monitor the data source for changes so that the Loader</span>
</span><span class='line'>    <span class="c1">// will know to force a new load if it is ever started again.</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onReset</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Ensure the loader has been stopped.</span>
</span><span class='line'>    <span class="n">onStopLoading</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// At this point we can release the resources associated with &#39;mData&#39;.</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mData</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">releaseResources</span><span class="o">(</span><span class="n">mData</span><span class="o">);</span>
</span><span class='line'>      <span class="n">mData</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// The Loader is being reset, so we should stop monitoring for changes.</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mObserver</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// TODO: unregister the observer</span>
</span><span class='line'>      <span class="n">mObserver</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCanceled</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">SampleItem</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Attempt to cancel the current asynchronous load.</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCanceled</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// The load has been canceled, so we should release the resources</span>
</span><span class='line'>    <span class="c1">// associated with &#39;data&#39;.</span>
</span><span class='line'>    <span class="n">releaseResources</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">releaseResources</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">SampleItem</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// For a simple List, there is nothing to do. For something like a Cursor, we </span>
</span><span class='line'>    <span class="c1">// would close it in this method. All resources associated with the Loader</span>
</span><span class='line'>    <span class="c1">// should be released here.</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/*********************************************************************/</span>
</span><span class='line'>  <span class="cm">/** (4) Observer which receives notifications when the data changes **/</span>
</span><span class='line'>  <span class="cm">/*********************************************************************/</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// NOTE: Implementing an observer is outside the scope of this post (this example</span>
</span><span class='line'>  <span class="c1">// uses a made-up &quot;SampleObserver&quot; to illustrate when/where the observer should </span>
</span><span class='line'>  <span class="c1">// be initialized). </span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// The observer could be anything so long as it is able to detect content changes</span>
</span><span class='line'>  <span class="c1">// and report them to the loader with a call to onContentChanged(). For example,</span>
</span><span class='line'>  <span class="c1">// if you were writing a Loader which loads a list of all installed applications</span>
</span><span class='line'>  <span class="c1">// on the device, the observer could be a BroadcastReceiver that listens for the</span>
</span><span class='line'>  <span class="c1">// ACTION_PACKAGE_ADDED intent, and calls onContentChanged() on the particular </span>
</span><span class='line'>  <span class="c1">// Loader whenever the receiver detects that a new application has been installed.</span>
</span><span class='line'>  <span class="c1">// Please don’t hesitate to leave a comment if you still find this confusing! :)</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">SampleObserver</span> <span class="n">mObserver</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>REF:</p>

<ul>
<li><a href="http://www.androiddesignpatterns.com/2012/07/loaders-and-loadermanager-background.html">Life Before Loaders</a></li>
<li><a href="http://www.androiddesignpatterns.com/2012/07/understanding-loadermanager.html">Understanding the LoaderManager</a></li>
<li><a href="http://www.androiddesignpatterns.com/2012/08/implementing-loaders.html">Implementing the Loaders</a></li>
<li><a href="http://www.androiddesignpatterns.com/2012/09/tutorial-loader-loadermanager.html">Tutorial:AppListLoader</a>,<a href="https://github.com/alexjlockwood/AppListLoader">AppListLoader</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Hidden Pitfalls of AsyncTask]]></title>
    <link href="http://Solarex.github.io/blog/2014/10/19/android-asynctask-pitfalls/"/>
    <updated>2014-10-19T15:56:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2014/10/19/android-asynctask-pitfalls</id>
    <content type="html"><![CDATA[<p><center><img src="http://Solarex.github.io/images/android_logo.jpg"/></center></p>


<p>I originally wrote this article when I was (foolishly) still using AsyncTasks. Nowadays I simply consider it a mistake in all cases. As you&rsquo;ll see from the original article, there are a lot of problems with it &ndash; and there are much better solutions.</p>

<p>My preferred alternative these days are combining <a href="https://github.com/Netflix/RxJava">RxJava</a> with schedulers. You get the same effect as an <code>AsyncTask</code> with none of the problems, plus you get an awesome framework in addition. I know, recommending a library to solve a problem is irritating, but RxJava is worth looking at for many reasons.</p>

<p>When <code>AsyncTask</code> was introduced to Android, it was labeled as “<a href="http://android-developers.blogspot.com/2009/05/painless-threading.html">Painless Threading</a>.” Its goal was to make background Threads which could interact with the UI thread easier. It was successful on that count, but it’s not exactly painless – there are a number of cases where <code>AsyncTask</code> is not a silver bullet. It is easy to blindly use <code>AsyncTask</code> without realizing what can go wrong if not handled with care. Below are some of the problems that can arise when using <code>AsyncTask</code> without fully understanding it.</p>

<!-- more -->


<h2>AsyncTask and Rotation</h2>

<p>AsyncTask’s primary goal is to make it easy to run a Thread in the background that can later interact with the UI thread. Therefore the most common use case is to have an <code>AsyncTask</code> run a time-consuming operation that updates a portion of the UI when it’s completed (in <code>AsyncTask.onPostExecute()</code>).</p>

<p>This works great… until you rotate the screen. <strong>When an app is rotated, the entire <code>Activity</code> is destroyed and recreated. When the Activity is restarted, your AsyncTask’s reference to the <code>Activity</code> is invalid, so <code>onPostExecute()</code> will have no effect on the new Activity.</strong> This can be confusing if you are implicitly referencing the current Activity by having AsyncTask as an inner class of the Activity.</p>

<p>The usual solution to this problem is to hold onto a reference to AsyncTask that lasts between configuration changes, which updates the target Activity as it restarts. There are a variety of ways to do this, though they either boil down to using a global holder (such as in the <code>Application</code> object) or passing it through <code>Activity.onRetainNonConfigurationInstance()</code>. For a Fragment-based system, you could use a retained Fragment (via <code>Fragment.setRetainedInstance(true)</code>) to store running AsyncTasks.</p>

<h2>AsyncTasks and the Lifecycle</h2>

<p>Along the same lines as above, it is a misconception to think that just because the Activity that originally spawned the <code>AsyncTask</code> is dead, the <code>AsyncTask</code> is as well. It will continue running on its merry way even if you exit the entire application. <strong>The only way that an <code>AsyncTask</code> finishes early is if it is canceled via <code>AsyncTask.cancel()</code>.</strong></p>

<p>This means that you have to manage the cancellation of AsyncTasks yourself; otherwise you run the risk of bogging down your app with unnecessary background tasks, or of leaking memory. When you know you will no longer need an <code>AsyncTask</code>, be sure to cancel it so that it doesn’t cause any headaches later in the execution of your app.</p>

<h2>Cancelling AsyncTasks</h2>

<p>Suppose you’ve got a search query that runs in an <code>AsyncTask</code>. The user may be able to change the search parameters while the <code>AsyncTask</code> is running, so you call <code>AsyncTask.cancel()</code> and then fire up a new <code>AsyncTask</code> for the next query. <strong>This seems to work… until you check the logs and realize that your <code>AsyncTask</code>s all ran till completion, regardless of whether you called <code>cancel()</code> or not!</strong> This even happens if you pass mayInterruptIfRunning as true – what’s going on?</p>

<p>The problem is that there’s a misconception about what <code>AsyncTask.cancel()</code> actually does. It does not kill the Thread with no regard for the consequences! All it does is set the <code>AsyncTask</code> to a “cancelled” state. <strong>It’s up to you to check whether the AsyncTask has been canceled so that you can halt your operation</strong>. As for mayInterruptIfRunning – all it does is send an <code>interrupt()</code> to the running Thread. In the case that your Thread is uninterruptible, then it won’t stop the Thread at all.There are two simple solutions that cover most situations: Either check <code>AsyncTask.isCancelled()</code> on a regular basis during your long-running operation, or keep your Thread interruptible. Either way, when you call <code>AsyncTask.cancel()</code> these methods should prevent your operation from running longer than necessary.</p>

<p>This advice doesn’t always work, though – what if you’re calling a long-running method that is uninterruptible (such as <code>BitmapFactory.decodeStream()</code>)? The only success I’ve had in this situation is to create a situation which causes an Exception to be thrown (in this case, prematurely closing the stream that BitmapFactory was using). This meant that <code>cancel()</code> alone wouldn’t solve the problem – outside intervention was required.</p>

<h2>Limitations on Concurrent AsyncTasks</h2>

<p>I’m not encouraging people to start hundreds of threads in the background; however, it is worth noting that there are some limitations on the number of <code>AsyncTask</code>s that you can start. The modern <code>AsyncTask</code> is limited to 128 concurrent tasks, with an additional queue of 10 tasks (if supporting Android 1.5, it’s a limit of ten tasks at a time, with a maximum queue of 10 tasks). That means that if you queue up more than 138 tasks before they can complete, your app will crash. Most often I see this problem when people use <code>AsyncTask</code>s to load Bitmaps from the net.</p>

<p>If you are finding yourself running up against these limits, you should start by rethinking your design that calls for so many background threads. Alternatively, you could setup a more intelligent queue for your tasks so that you’re not starting them all at once. If you’re desperate, you can grab a copy of <code>AsyncTask</code> and adjust the pool sizes in the code itself.</p>

<ul>
<li><a href="http://blog.danlew.net/2014/06/21/the-hidden-pitfalls-of-asynctask/">The Hidden Pitfalls of AsyncTask</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Tips]]></title>
    <link href="http://Solarex.github.io/blog/2014/10/19/android-tips/"/>
    <updated>2014-10-19T13:00:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2014/10/19/android-tips</id>
    <content type="html"><![CDATA[<p><center><img src="http://Solarex.github.io/images/android_training.jpg"/></center></p>


<ul>
<li><a href="#overview">Android Tips and Tricks</a>

<ul>
<li><a href="#part1">Part I</a></li>
<li><a href="#part2">Part II</a></li>
<li><a href="#part3">Part III</a></li>
<li><a href="#part4">Part IV</a></li>
<li><a href="#part5">Part V</a></li>
</ul>
</li>
</ul>


<h2 id="overview">Android Tips and Tricks</h2>




<h3 id="part1">Part I</h3>


<ul>
<li><p><code>Activity.startActivities()</code> &ndash; Nice for launching to the middle of an app flow.</p></li>
<li><p><code>TextUtils.isEmpty()</code> &ndash; Simple utility I use everywhere.</p></li>
<li><p><code>Html.fromHtml()</code> &ndash; Quick method for formatting Html. It&rsquo;s not particularly fast so I wouldn&rsquo;t use it constantly (e.g., don&rsquo;t use it just to bold part of a string &ndash; construct the Spannable manually instead), but it&rsquo;s fine for rendering text obtained from the web.</p></li>
<li><p><code>TextView.setError()</code> &ndash; Nice UI when validating user input.</p></li>
<li><p><code>Build.VERSION_CODES</code> &ndash; Not only is it handy for routing code, it&rsquo;s also summarizes behavioral differences between each version of Android.</p></li>
</ul>


<!-- more -->


<ul>
<li><p><code>Log.getStackTraceString()</code> &ndash; Convenience utility for logging.</p></li>
<li><p><code>LayoutInflater.from()</code> &ndash; Wraps the long-winded getSystemService() call in a simple utility.</p></li>
<li><p><code>ViewConfiguration.getScaledTouchSlop()</code> &ndash; Using the values provided in ViewConfiguration ensures all touch interaction feels consistent across the OS.</p></li>
<li><p><code>PhoneNumberUtils.convertKeypadLettersToDigits</code> &ndash; Makes handling phone number data a snap, as some companies provide them as letters.</p></li>
<li><p><code>Context.getCacheDir()</code> &ndash; Use the cache dir for caching data. Simple enough but some don&rsquo;t know it exists.</p></li>
<li><p><code>ArgbEvaluator</code> &ndash; Transition from one color to another. As was pointed out by Chris Banes, this class creates a lot of autoboxing churn so it&rsquo;d be better to just rip out the logic and run it yourself.</p></li>
<li><p><code>ContextThemeWrapper</code> &ndash; Nice class for changing the theme of a Context on the fly.</p></li>
<li><p><code>Space</code> &ndash; Lightweight View which skips drawing. Great for any situation that might require a placeholder.</p></li>
<li><p><code>ValueAnimator.reverse()</code> &ndash; I love this for canceling animations smoothly.</p></li>
</ul>


<h3 id="part2">Part II</h3>


<ul>
<li><p><code>DateUtils.formatDateTime()</code> &ndash; One-stop shop for localized date/time strings.</p></li>
<li><p><code>AlarmManager.setInexactRepeating</code> &ndash; Saves on battery life by grouping multiple alarms together. Even if you&rsquo;re only calling a single alarm this is better (just make sure to call AlarmManager.cancel() when done).</p></li>
<li><p><code>Formatter.formatFileSize()</code> &ndash; A localized file size formatter.</p></li>
<li><p><code>ActionBar.hide()/.show()</code> &ndash; Animates the action bar hiding/showing. Lets you switch to full-screen gracefully.</p></li>
<li><p><code>Linkify.addLinks()</code> &ndash; If you need to control how links are added to text.</p></li>
<li><p><code>StaticLayout</code> &ndash; Useful for measuring text that you&rsquo;re about to render into a custom View.</p></li>
<li><p><code>Activity.onBackPressed()</code> &ndash; Easy way to manage the back button. While I wouldn&rsquo;t normally hijack back, sometimes it&rsquo;s necessary to make a flow work.</p></li>
<li><p><code>GestureDetector</code> &ndash; Listens to motion events and fires listener events for common actions (like clicks, scrolls and flings). So much easier than implementing your own motion event system.</p></li>
<li><p><code>DrawFilter</code> &ndash; Lets you manipulate a Canvas even if you&rsquo;re not calling the draw commands. For example, you could create a custom View which sets a DrawFilter which anti-aliases the draws of the parent View.</p></li>
<li><p><code>ActivityManager.getMemoryClass()</code> &ndash; Gives you an idea of how much memory the device has. Great for figuring out how large to make your caches.</p></li>
<li><p><code>SystemClock.sleep()</code> &ndash; Convenience method which guarantees sleeping the amount of time entered. I use it for debugging and simulating network delays.</p></li>
<li><p><code>ViewStub</code> &ndash; A View that initially does nothing, but can later inflate a layout. This is a great placeholder for lazy-loading Views. Its only drawback is that it doesn&rsquo;t support <merge> tags, so it can create unnecessary nesting in the hierarchy if you&rsquo;re not careful.</p></li>
<li><p><code>DisplayMetrics.density</code> &ndash; You can get the density of the screen this way. Most of the time you&rsquo;ll be better off letting the system scale dimensions automatically, but occasionally it&rsquo;s useful to have more control (especially with custom Views).</p></li>
<li><p><code>Pair.create()</code> &ndash; Handy class, handy creator method.</p></li>
</ul>


<h3 id="part3">Part III</h3>


<ul>
<li><p><code>UrlQuerySanitizer</code> &ndash; Sanitize URLs with this handy utility.</p></li>
<li><p><code>Fragment.setArguments</code> &ndash; Since you can&rsquo;t use a Fragment constructor w/ parameters this is the second best thing. Arguments set before creation last throughout the entire Fragment&rsquo;s lifecycle (even if it&rsquo;s destroyed/recreated due to a configuration change).</p></li>
<li><p><code>DialogFragment.setShowsDialog()</code> &ndash; Neat trick &ndash; DialogFragments can act like normal Fragments! That way you can have the same Fragment do double-duty. I usually create a third View generation method that both onCreateView() and onCreateDialog() call into when creating a dual-purpose Fragment.</p></li>
<li><p><code>FragmentManager.enableDebugLogging()</code> &ndash; Help when you need it when figuring out Fragments.</p></li>
<li><p><code>LocalBroadcastManager</code> &ndash; Safer than global broadcasts. Simple and quick. Event buses like otto may make more sense for your use case though.</p></li>
<li><p><code>PhoneNumberUtils.formatNumber()</code> &ndash; Let someone else figure out this problem for you.</p></li>
<li><p><code>Region.op()</code> &ndash; I found this useful for comparing two generic areas before rendering. If I&rsquo;ve got two Paths, do they overlap? I can figure that out with this method.</p></li>
<li><p><code>Application.registerActivityLifecycleCallbacks</code> &ndash; Though lacking documentation I feel this is self-evident. Just a handy tool.</p></li>
<li><p><code>versionNameSuffix</code> &ndash; This gradle setting lets you modify the versionName field in your manifest based on different build types. For example, I would setup my debug build type to end in &ldquo;-SNAPSHOT&rdquo;; that way you can easily tell if you&rsquo;re on a debug build or release build.</p></li>
<li><p><code>CursorJoiner</code> &ndash; If you&rsquo;re using a single database then a join in SQL is the natural solution, but what if you&rsquo;ve received data from two separate ContentProviders? In that case CursorJoiner can be helpful.</p></li>
<li><p><code>Genymotion</code> &ndash; A much faster Android emulator. I use it all day.</p></li>
<li><p><code>-nodpi</code> &ndash; Most qualifiers (-mdpi, -hdpi, -xhdpi, etc.) automatically scale assets/dimensions if you&rsquo;re on a device that isn&rsquo;t explicitly defined. Sometimes you just want something consistent though; in that case use -nodpi.</p></li>
<li><p><code>BroadcastRecevier.setDebugUnregister()</code> &ndash; Another handy debugging tool.</p></li>
<li><p><code>Activity.recreate()</code> &ndash; Forces an Activity to recreate itself for whatever reason.</p></li>
<li><p><code>PackageManager.checkSignatures()</code> &ndash; You can use this to find out if two apps (presumably your own) are installed at the same time. Without checking signatures someone could imitate your app easily by just using the same package name.</p></li>
</ul>


<h3 id="part4">Part IV</h3>


<ul>
<li><p><code>Activity.isChangingConfigurations()</code> &ndash; Often times you don&rsquo;t need to do quite as much saving of state if all that&rsquo;s happening is the configuration is changing.</p></li>
<li><p><code>SearchRecentSuggestionsProvider</code> &ndash; A quick and easy way to create a recents suggestion provider.</p></li>
<li><p><code>ViewTreeObserver</code> &ndash; This is an amazing utility; it can be grabbed from any View and used to monitor the state of the View hierarchy. My most often use for it is to determine when Views have been measured (usually for animation purposes).</p></li>
<li><p><code>org.gradle.daemon=true</code> &ndash; Helps reduce the startup time of of Gradle builds. Only really applies to command-line builds as Android Studio already tries to use the daemon.</p></li>
<li><p><code>DatabaseUtils</code> &ndash; A variety of useful tools for database operations.</p></li>
<li><p><code>android:weightSum</code> (LinearLayout) &ndash; Want to use layout weights, but don&rsquo;t want them to fill the entire LinearLayout? That&rsquo;s what weightSum can do by defining the total weight.</p></li>
<li><p><code>android:duplicateParentState</code> (View) &ndash; Makes the child duplicate the state of the parent &ndash; for example, if you&rsquo;ve got a ViewGroup that is clickable, then you can use this to make its children change state when it is clicked.</p></li>
<li><p><code>android:clipChildren</code> (ViewGroup) &ndash; If disabled, this lets the children of a ViewGroup draw outside their parent&rsquo;s bounds. Great for animations.</p></li>
<li><p><code>android:fillViewport</code> (ScrollView) &ndash; Best explained in this post, this helps solve a problem with ScrollViews that may not always have enough content to actually fill the height of the screen.</p></li>
<li><p><code>android:tileMode</code> (BitmapDrawable) &ndash; Lets you create repeated patterns with images.</p></li>
<li><p><code>android:enterFadeDuration/android:exitFadeDuration</code> (Drawables) &ndash; For Drawables that have multiple states, this lets you define a fade before/after the drawable shows.</p></li>
<li><p><code>android:scaleType</code> (ImageView) &ndash; Defines how to scale/crop a drawable within an ImageView. &ldquo;centerCrop&rdquo; and &ldquo;centerInside&rdquo; are regular settings for me.</p></li>
<li><p><code>&lt;merge&gt;</code> &ndash; Lets you include a layout in another without creating a duplicate ViewGroup (more info). Also good for custom ViewGroups; you can inflate a layout with <merge> inside the constructor to define its children automatically.</p></li>
<li><p><code>AtomicFile</code> &ndash; Manipulates a file atomically by using a backup file. I&rsquo;ve written this myself before, it&rsquo;s good to have an official (and better-written) version of it.</p></li>
</ul>


<h3 id="part5">Part V</h3>


<ul>
<li><p><code>ViewDragHelper</code> &ndash; Dragging Views is a complex problem and this class helps a lot. If you want an example, DrawerLayout uses it for swiping. Flavient Laurent also wrote an excellent article about it.</p></li>
<li><p><code>PopupWindow</code> &ndash; Used all around Android without you even realizing it (action bars, autocomplete, edittext errors), this class is the primary method for creating floating content.</p></li>
<li><p><code>ActionBar.getThemedContext()</code> &ndash; ActionBar theming is surprisingly complex (and can be different from the theming of the rest of the Activity). This gets you a Context so if you create your own Views they will be properly themed.</p></li>
<li><p><code>ThumbnailUtils</code> &ndash; Helps create thumbnails; in general I&rsquo;d just use whatever image library was already in place (e.g. Picasso or Volley), but it can also create video thumbnails!</p></li>
<li><p><code>Context.getExternalFilesDir()</code> &ndash; While you do have permission to write anywhere on the SD card if you ask for it, it&rsquo;s much more polite to write your data in the correct designated folder. That way it gets cleaned up and users get a common experience. Additionally, as of Kit Kat you can write to this folder without permission, and each user has their own external files dir.</p></li>
<li><p><code>SparseArray</code> &ndash; A more efficient version of Map&lt;Integer, Object>. Be sure to check out sister classes SparseBooleanArray, SparseIntArray and SparseLongArray as well.</p></li>
<li><p><code>PackageManager.setComponentEnabledSetting()</code> &ndash; Lets you enable/disable components in your app&rsquo;s manifest. What&rsquo;s nice here is being able to shut off unnecessary functionality &ndash; for example, a BroadcastReceiver that is unnecessary due to the current app configuration.</p></li>
<li><p><code>SQLiteDatabase.yieldIfContendedSafely()</code> &ndash; Lets you temporarily stop a db transaction so you don&rsquo;t tie up too much of the system.</p></li>
<li><p><code>Environment.getExternalStoragePublicDirectory()</code> &ndash; Again, users like a consistent experience with their SD card; using this method will grab the correct directory for placing typed files (music, pictures, etc.) on their drive.</p></li>
<li><p><code>View.generateViewId()</code> &ndash; Every once in a while I&rsquo;ve wanted to dynamically generate view IDs. The problem is ensuring you aren&rsquo;t clobbering existing IDs (or other generated ones).</p></li>
<li><p><code>ActivityManager.clearApplicationUserData()</code> &ndash; A reset button for your app. Perhaps the easiest way to log out a user, ever.</p></li>
<li><p><code>Context.createConfigurationContext()</code> &ndash; Customize your configuration context. Common problem I&rsquo;ve run into: forcing part of an app to render in a particular locale (not that I normally condone this sort of behavior, but you never know). This would make it a lot easier to do so.</p></li>
<li><p><code>ActivityOptions</code> &ndash; Nice custom animations when moving between Activities. ActivityOptionsCompat is good for backwards compatible functionality.</p></li>
<li><p><code>AdapterViewFlipper.fyiWillBeAdvancedByHostKThx()</code> &ndash; Because it&rsquo;s funny and for no other reason. There are other amusing tidbits in AOSP (like GRAVITY_DEATH_STAR_I) but unlike those this one is actually useful.</p></li>
<li><p><code>ViewParent.requestDisallowInterceptTouchEvent()</code> &ndash; The Android touch event system defaults handle what you want most of the time, but sometimes you need this method to wrest event control from parents. (By the way, if you want to know about the touch system, this talk is amazing.)</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解OAuth2.0]]></title>
    <link href="http://Solarex.github.io/blog/2014/10/18/oauth-2-dot-0/"/>
    <updated>2014-10-18T15:38:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2014/10/18/oauth-2-dot-0</id>
    <content type="html"><![CDATA[<p><center><img src="http://Solarex.github.io/images/oauth.png"/></center></p>


<p><a href="http://en.wikipedia.org/wiki/OAuth">OAuth</a>是一个关于授权（authorization）的开放网络标准，在全世界得到广泛应用，目前的版本是2.0版。本文对OAuth 2.0的设计思路和运行流程，做一个简明通俗的解释，主要参考材料为<a href="http://www.rfcreader.com/#rfc6749">RFC 6749</a>。</p>

<h2>应用场景</h2>

<p>为了理解OAuth的适用场合，让我举一个假设的例子。有一个&#8221;云冲印&#8221;的网站，可以将用户储存在Google的照片，冲印出来。用户为了使用该服务，必须让&#8221;云冲印&#8221;读取自己储存在Google上的照片。</p>

<p><center><img src="http://Solarex.github.io/images/google-print.png"/></center></p>


<p>问题是只有得到用户的授权，Google才会同意&#8221;云冲印&#8221;读取这些照片。那么，&#8221;云冲印&#8221;怎样获得用户的授权呢？传统方法是，用户将自己的Google用户名和密码，告诉&#8221;云冲印&#8221;，后者就可以读取用户的照片了。这样的做法有以下几个严重的缺点。</p>

<pre><code>（1）"云冲印"为了后续的服务，会保存用户的密码，这样很不安全。
（2）Google不得不部署密码登录，而我们知道，单纯的密码登录并不安全。
（3）"云冲印"拥有了获取用户储存在Google所有资料的权力，用户没法限制"云冲印"获得授权的范围和有效期。
（4）用户只有修改密码，才能收回赋予"云冲印"的权力。但是这样做，会使得其他所有获得用户授权的第三方应用程序全部失效。
（5）只要有一个第三方应用程序被破解，就会导致用户密码泄漏，以及所有被密码保护的数据泄漏。
</code></pre>

<p>OAuth就是为了解决上面这些问题而诞生的。</p>

<!-- more -->


<h2>名词定义</h2>

<p>在详细讲解OAuth 2.0之前，需要了解几个专用名词。它们对读懂后面的讲解，尤其是几张图，至关重要。</p>

<pre><code>（1） Third-party application：第三方应用程序，本文中又称"客户端"（client），即上一节例子中的"云冲印"。
（2）HTTP service：HTTP服务提供商，本文中简称"服务提供商"，即上一节例子中的Google。
（3）Resource Owner：资源所有者，本文中又称"用户"（user）。
（4）User Agent：用户代理，本文中就是指浏览器。
（5）Authorization server：认证服务器，即服务提供商专门用来处理认证的服务器。
（6）Resource server：资源服务器，即服务提供商存放用户生成的资源的服务器。它与认证服务器，可以是同一台服务器，也可以是不同的服务器。
</code></pre>

<p>知道了上面这些名词，就不难理解，OAuth的作用就是让&#8221;客户端&#8221;安全可控地获取&#8221;用户&#8221;的授权，与&#8221;服务商提供商&#8221;进行互动。</p>

<h2>OAuth的思路</h2>

<p>OAuth在&#8221;客户端&#8221;与&#8221;服务提供商&#8221;之间，设置了一个授权层（authorization layer）。&#8221;客户端&#8221;不能直接登录&#8221;服务提供商&#8221;，只能登录授权层，以此将用户与客户端区分开来。&#8221;客户端&#8221;登录授权层所用的令牌（token），与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。&#8221;客户端&#8221;登录授权层以后，&#8221;服务提供商&#8221;根据令牌的权限范围和有效期，向&#8221;客户端&#8221;开放用户储存的资料。</p>

<h2>运行流程</h2>

<p>OAuth 2.0的运行流程如下图，摘自RFC 6749。</p>

<p><center><img src="http://Solarex.github.io/images/oauth-flow.png"/></center></p>


<pre><code>（A）用户打开客户端以后，客户端要求用户给予授权。
（B）用户同意给予客户端授权。
（C）客户端使用上一步获得的授权，向认证服务器申请令牌。
（D）认证服务器对客户端进行认证以后，确认无误，同意发放令牌。
（E）客户端使用令牌，向资源服务器申请获取资源。
（F）资源服务器确认令牌无误，同意向客户端开放资源。
</code></pre>

<p>不难看出来，上面六个步骤之中，B是关键，即用户怎样才能给于客户端授权。有了这个授权以后，客户端就可以获取令牌，进而凭令牌获取资源。下面一一讲解客户端获取授权的四种模式。</p>

<h2>客户端的授权模式</h2>

<p>客户端必须得到用户的授权（authorization grant），才能获得令牌（access token）。OAuth 2.0定义了四种授权方式。</p>

<ul>
<li>授权码模式（authorization code）</li>
<li>简化模式（implicit）</li>
<li>密码模式（resource owner password credentials）</li>
<li>客户端模式（client credentials）</li>
</ul>


<h3>授权码模式</h3>

<p>授权码模式（authorization code）是功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与&#8221;服务提供商&#8221;的认证服务器进行互动。</p>

<p><center><img src="http://Solarex.github.io/images/auth-code.png"/></center></p>


<p>它的步骤如下：</p>

<pre><code>（A）用户访问客户端，后者将前者导向认证服务器。
（B）用户选择是否给予客户端授权。
（C）假设用户给予授权，认证服务器将用户导向客户端事先指定的"重定向URI"（redirection URI），同时附上一个授权码。
（D）客户端收到授权码，附上早先的"重定向URI"，向认证服务器申请令牌。这一步是在客户端的后台的服务器上完成的，对用户不可见。
（E）认证服务器核对了授权码和重定向URI，确认无误后，向客户端发送访问令牌（access token）和更新令牌（refresh token）。
</code></pre>

<p>下面是上面这些步骤所需要的参数。A步骤中，客户端申请认证的URI，包含以下参数：</p>

<ul>
<li>response_type：表示授权类型，必选项，此处的值固定为&#8221;code&#8221;</li>
<li>client_id：表示客户端的ID，必选项</li>
<li>redirect_uri：表示重定向URI，可选项</li>
<li>scope：表示申请的权限范围，可选项</li>
<li>state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。</li>
</ul>


<p>下面是一个例子。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz
</span><span class='line'>        &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1
</span><span class='line'>Host: server.example.com</span></code></pre></td></tr></table></div></figure>


<p>C步骤中，服务器回应客户端的URI，包含以下参数：</p>

<ul>
<li>code：表示授权码，必选项。该码的有效期应该很短，通常设为10分钟，客户端只能使用该码一次，否则会被授权服务器拒绝。该码与客户端ID和重定向URI，是一一对应关系。</li>
<li>state：如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数。</li>
</ul>


<p>下面是一个例子。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 302 Found
</span><span class='line'>Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
</span><span class='line'>          &state=xyz</span></code></pre></td></tr></table></div></figure>


<p>D步骤中，客户端向认证服务器申请令牌的HTTP请求，包含以下参数：</p>

<ul>
<li>grant_type：表示使用的授权模式，必选项，此处的值固定为&#8221;authorization_code&#8221;。</li>
<li>code：表示上一步获得的授权码，必选项。</li>
<li>redirect_uri：表示重定向URI，必选项，且必须与A步骤中的该参数值保持一致。</li>
<li>client_id：表示客户端ID，必选项。</li>
</ul>


<p>下面是一个例子。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>POST /token HTTP/1.1
</span><span class='line'>Host: server.example.com
</span><span class='line'>Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
</span><span class='line'>Content-Type: application/x-www-form-urlencoded
</span><span class='line'>
</span><span class='line'>grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA
</span><span class='line'>&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb</span></code></pre></td></tr></table></div></figure>


<p>E步骤中，认证服务器发送的HTTP回复，包含以下参数：</p>

<ul>
<li>access_token：表示访问令牌，必选项。</li>
<li>token_type：表示令牌类型，该值大小写不敏感，必选项，可以是bearer类型或mac类型。</li>
<li>expires_in：表示过期时间，单位为秒。如果省略该参数，必须其他方式设置过期时间。</li>
<li>refresh_token：表示更新令牌，用来获取下一次的访问令牌，可选项。</li>
<li>scope：表示权限范围，如果与客户端申请的范围一致，此项可省略。</li>
</ul>


<p>下面是一个例子。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Content-Type: application/json;charset=UTF-8
</span><span class='line'>Cache-Control: no-store
</span><span class='line'>Pragma: no-cache
</span><span class='line'>
</span><span class='line'>{
</span><span class='line'>    "access_token":"2YotnFZFEjr1zCsicMWpAA",
</span><span class='line'>    "token_type":"example",
</span><span class='line'>    "expires_in":3600,
</span><span class='line'>    "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
</span><span class='line'>    "example_parameter":"example_value"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>从上面代码可以看到，相关参数使用JSON格式发送（Content-Type: application/json）。此外，HTTP头信息中明确指定不得缓存。</p>

<h3>简化模式</h3>

<p>简化模式（implicit grant type）不通过第三方应用程序的服务器，直接在浏览器中向认证服务器申请令牌，跳过了&#8221;授权码&#8221;这个步骤，因此得名。所有步骤在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证。</p>

<p><center><img src="http://Solarex.github.io/images/implicit-grant-code.png"/></center></p>


<p>它的步骤如下：</p>

<pre><code>（A）客户端将用户导向认证服务器。
（B）用户决定是否给于客户端授权。
（C）假设用户给予授权，认证服务器将用户导向客户端指定的"重定向URI"，并在URI的Hash部分包含了访问令牌。
（D）浏览器向资源服务器发出请求，其中不包括上一步收到的Hash值。
（E）资源服务器返回一个网页，其中包含的代码可以获取Hash值中的令牌。
（F）浏览器执行上一步获得的脚本，提取出令牌。
（G）浏览器将令牌发给客户端。
</code></pre>

<p>下面是上面这些步骤所需要的参数。</p>

<p>A步骤中，客户端发出的HTTP请求，包含以下参数：</p>

<ul>
<li>response_type：表示授权类型，此处的值固定为&#8221;token&#8221;，必选项。</li>
<li>client_id：表示客户端的ID，必选项。</li>
<li>redirect_uri：表示重定向的URI，可选项。</li>
<li>scope：表示权限范围，可选项。</li>
<li>state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。
下面是一个例子。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET /authorize?response_type=token&client_id=s6BhdRkqt3&state=xyz
</span><span class='line'>        &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1
</span><span class='line'>Host: server.example.com</span></code></pre></td></tr></table></div></figure>


<p>C步骤中，认证服务器回应客户端的URI，包含以下参数：</p>

<ul>
<li>access_token：表示访问令牌，必选项。</li>
<li>token_type：表示令牌类型，该值大小写不敏感，必选项。</li>
<li>expires_in：表示过期时间，单位为秒。如果省略该参数，必须其他方式设置过期时间。</li>
<li>scope：表示权限范围，如果与客户端申请的范围一致，此项可省略。</li>
<li>state：如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数。</li>
</ul>


<p>下面是一个例子。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 302 Found
</span><span class='line'>Location: http://example.com/cb#access_token=2YotnFZFEjr1zCsicMWpAA
</span><span class='line'>            &state=xyz&token_type=example&expires_in=3600</span></code></pre></td></tr></table></div></figure>


<p>在上面的例子中，认证服务器用HTTP头信息的Location栏，指定浏览器重定向的网址。注意，在这个网址的Hash部分包含了令牌。根据上面的D步骤，下一步浏览器会访问Location指定的网址，但是Hash部分不会发送。接下来的E步骤，服务提供商的资源服务器发送过来的代码，会提取出Hash中的令牌。</p>

<h3>密码模式</h3>

<p>密码模式（Resource Owner Password Credentials Grant）中，用户向客户端提供自己的用户名和密码。客户端使用这些信息，向&#8221;服务商提供商&#8221;索要授权。在这种模式中，用户必须把自己的密码给客户端，但是客户端不得储存密码。这通常用在用户对客户端高度信任的情况下，比如客户端是操作系统的一部分，或者由一个著名公司出品。而认证服务器只有在其他授权模式无法执行的情况下，才能考虑使用这种模式。</p>

<p><center><img src="http://Solarex.github.io/images/resource-code.png"/></center></p>


<p>它的步骤如下：</p>

<pre><code>（A）用户向客户端提供用户名和密码。
（B）客户端将用户名和密码发给认证服务器，向后者请求令牌。
（C）认证服务器确认无误后，向客户端提供访问令牌。
</code></pre>

<p>B步骤中，客户端发出的HTTP请求，包含以下参数：</p>

<ul>
<li>grant_type：表示授权类型，此处的值固定为&#8221;password&#8221;，必选项。</li>
<li>username：表示用户名，必选项。</li>
<li>password：表示用户的密码，必选项。</li>
<li>scope：表示权限范围，可选项。</li>
</ul>


<p>下面是一个例子。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>POST /token HTTP/1.1
</span><span class='line'>Host: server.example.com
</span><span class='line'>Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
</span><span class='line'>Content-Type: application/x-www-form-urlencoded
</span><span class='line'>
</span><span class='line'>grant_type=password&username=johndoe&password=A3ddj3w</span></code></pre></td></tr></table></div></figure>


<p>C步骤中，认证服务器向客户端发送访问令牌，下面是一个例子。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Content-Type: application/json;charset=UTF-8
</span><span class='line'>Cache-Control: no-store
</span><span class='line'>Pragma: no-cache
</span><span class='line'>
</span><span class='line'>{
</span><span class='line'>    "access_token":"2YotnFZFEjr1zCsicMWpAA",
</span><span class='line'>    "token_type":"example",
</span><span class='line'>    "expires_in":3600,
</span><span class='line'>    "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
</span><span class='line'>    "example_parameter":"example_value"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>上面代码中，各个参数的含义参见《授权码模式》一节。整个过程中，客户端不得保存用户的密码。</p>

<h3>客户端模式</h3>

<p>客户端模式（Client Credentials Grant）指客户端以自己的名义，而不是以用户的名义，向&#8221;服务提供商&#8221;进行认证。严格地说，客户端模式并不属于OAuth框架所要解决的问题。在这种模式中，用户直接向客户端注册，客户端以自己的名义要求&#8221;服务提供商&#8221;提供服务，其实不存在授权问题。</p>

<p><center><img src="http://Solarex.github.io/images/client-grant.png"/></center></p>


<p>它的步骤如下：</p>

<pre><code>（A）客户端向认证服务器进行身份认证，并要求一个访问令牌。
（B）认证服务器确认无误后，向客户端提供访问令牌。
</code></pre>

<p>A步骤中，客户端发出的HTTP请求，包含以下参数：</p>

<ul>
<li>granttype：表示授权类型，此处的值固定为&#8221;clientcredentials&#8221;，必选项。</li>
<li>scope：表示权限范围，可选项。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>POST /token HTTP/1.1
</span><span class='line'>Host: server.example.com
</span><span class='line'>Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
</span><span class='line'>Content-Type: application/x-www-form-urlencoded
</span><span class='line'>
</span><span class='line'>grant_type=client_credentials</span></code></pre></td></tr></table></div></figure>


<p>认证服务器必须以某种方式，验证客户端身份。
B步骤中，认证服务器向客户端发送访问令牌，下面是一个例子。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Content-Type: application/json;charset=UTF-8
</span><span class='line'>Cache-Control: no-store
</span><span class='line'>Pragma: no-cache
</span><span class='line'>
</span><span class='line'>{
</span><span class='line'>    "access_token":"2YotnFZFEjr1zCsicMWpAA",
</span><span class='line'>    "token_type":"example",
</span><span class='line'>    "expires_in":3600,
</span><span class='line'>    "example_parameter":"example_value"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>上面代码中，各个参数的含义参见《授权码模式》一节。</p>

<h3>更新令牌</h3>

<p>如果用户访问的时候，客户端的&#8221;访问令牌&#8221;已经过期，则需要使用&#8221;更新令牌&#8221;申请一个新的访问令牌。
客户端发出更新令牌的HTTP请求，包含以下参数：</p>

<ul>
<li>granttype：表示使用的授权模式，此处的值固定为&#8221;refreshtoken&#8221;，必选项。</li>
<li>refresh_token：表示早前收到的更新令牌，必选项。</li>
<li>scope：表示申请的授权范围，不可以超出上一次申请的范围，如果省略该参数，则表示与上一次一致。
下面是一个例子。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>POST /token HTTP/1.1
</span><span class='line'>Host: server.example.com
</span><span class='line'>Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
</span><span class='line'>Content-Type: application/x-www-form-urlencoded
</span><span class='line'>
</span><span class='line'>grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA</span></code></pre></td></tr></table></div></figure>


<p>REF:<a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">理解OAuth 2.0</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入浅出单实例Singleton设计模式]]></title>
    <link href="http://Solarex.github.io/blog/2014/10/17/java-singleton/"/>
    <updated>2014-10-17T10:07:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2014/10/17/java-singleton</id>
    <content type="html"><![CDATA[<p><center><img src="http://Solarex.github.io/images/java-singleton.png"/></center></p>


<h3>前序</h3>

<p>单实例Singleton设计模式可能是被讨论和使用的最广泛的一个设计模式了，这可能也是面试中问得最多的一个设计模式了。这个设计模式主要目的是想在整个系统中只能出现一个类的实例。这样做当然是有必然的，比如你的软件的全局配置信息，或者是一个Factory，或是一个主控类，等等。你希望这个类在整个系统中只能出现一个实例。当然，作为一个技术负责人的你，你当然有权利通过使用非技术的手段来达到你的目的。比如：你在团队内部明文规定，“XX类只能有一个全局实例，如果某人使用两次以上，那么该人将被处于2000元的罚款！”（呵呵），你当然有权这么做。但是如果你的设计的是东西是一个类库，或是一个需要提供给用户使用的API，恐怕你的这项规定将会失效。因为，你无权要求别人会那么做。所以，这就是为什么，我们希望通过使用技术的手段来达成这样一个目的的原因。</p>

<p>本文会带着你深入整个Singleton的世界，当然，我会放弃使用C++语言而改用Java语言，因为使用Java这个语言可能更容易让我说明一些事情。</p>

<!-- more -->


<h3>Singleton的教学版本</h3>

<p>这里，我将直接给出一个Singleton的简单实现，因为我相信你已经有这方面的一些基础了。我们姑且把这具版本叫做1.0版</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// version 1.0</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Singleton</span> <span class="n">singleton</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">singleton</span><span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="n">singleton</span><span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">singleton</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的实例中，我想说明下面几个Singleton的特点：（下面这些东西可能是尽人皆知的，没有什么新鲜的）</p>

<ul>
<li>私有（private）的构造函数，表明这个类是不可能形成实例了。这主要是怕这个类会有多个实例。</li>
<li>即然这个类是不可能形成实例，那么，我们需要一个静态的方式让其形成实例：<code>getInstance()</code>。注意这个方法是在new自己，因为其可以访问私有的构造函数，所以他是可以保证实例被创建出来的。</li>
<li>在<code>getInstance()</code>中，先做判断是否已形成实例，如果已形成则直接返回，否则创建实例。</li>
<li>所形成的实例保存在自己类中的私有成员中。</li>
<li>我们取实例时，只需要使用<code>Singleton.getInstance()</code>就行了。</li>
</ul>


<p>当然，如果你觉得知道了上面这些事情后就学成了，那我给你当头棒喝一下了，事情远远没有那么简单。</p>

<h3>Singleton的实际版本</h3>

<p>上面的这个程序存在比较严重的问题，因为是全局性的实例，所以，在多线程情况下，所有的全局共享的东西都会变得非常的危险，这个也一样，在多线程情况下，如果多个线程同时调用<code>getInstance()</code>的话，那么，可能会有多个进程同时通过 (<code>singleton== null</code>)的条件检查，于是，多个实例就创建出来，并且很可能造成内存泄露问题。嗯，熟悉多线程的你一定会说——“我们需要线程互斥或同步”，没错，我们需要这个事情，于是我们的Singleton升级成1.1版，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// version 1.1</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Singleton</span> <span class="n">singleton</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">singleton</span><span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">Singleton</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">singleton</span><span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">singleton</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>嗯，使用了Java的<code>synchronized</code>方法，看起来不错哦。应该没有问题了吧？！错！这还是有问题！为什么呢？前面已经说过，如果有多个线程同时通过(<code>singleton== null</code>)的条件检查（因为他们并行运行），虽然我们的synchronized方法会帮助我们<strong>同步所有的线程，让我们并行线程变成串行</strong>的一个一个去new，那不还是一样的吗？同样会出现很多实例。嗯，确实如此！看来，还得把那个判断(<code>singleton== null</code>)条件也同步起来。于是，我们的Singleton再次升级成1.2版本，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// version 1.2</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Singleton</span> <span class="n">singleton</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="n">Singleton</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">singleton</span><span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="o">{</span>
</span><span class='line'>              <span class="n">singleton</span><span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">singleton</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>不错不错，看似很不错了。在多线程下应该没有什么问题了，不是吗？的确是这样的，1.2版的Singleton在多线程下的确没有问题了，因为我们同步了所有的线程。只不过嘛……，什么？！还不行？！是的，还是有点小问题，我们本来只是想让new这个操作并行就可以了，现在，只要是进入getInstance()的线程都得同步啊，注意，创建对象的动作只有一次，后面的动作全是读取那个成员变量，这些读取的动作不需要线程同步啊。这样的作法感觉非常极端啊，为了一个初始化的创建动作，居然让我们搭上了所有的读操作，严重影响后续的性能啊！</p>

<p>还得改！嗯，看来，在线程同步前还得加一个(<code>singleton== null</code>)的条件判断，如果对象已经创建了，那么就不需要线程的同步了。OK，下面是1.3版的Singleton。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// version 1.3</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Singleton</span> <span class="n">singleton</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">singleton</span><span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">Singleton</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>            <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">singleton</span><span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                <span class="o">{</span>
</span><span class='line'>                    <span class="n">singleton</span><span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">singleton</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>感觉代码开始变得有点罗嗦和复杂了，不过，这可能是最不错的一个版本了，这个版本又叫“双重检查”Double-Check。下面是说明：</p>

<p>第一个条件是说，如果实例创建了，那就不需要同步了，直接返回就好了。
不然，我们就开始同步线程。
第二个条件是说，如果被同步的线程中，有一个线程创建了对象，那么别的线程就不用再创建了。
相当不错啊，干得非常漂亮！请大家为我们的1.3版起立鼓掌！</p>

<h3>Singleton的其它问题</h3>

<p>怎么？还有问题？！当然还有，请记住下面这条规则——“无论你的代码写得有多好，其只能在特定的范围内工作，超出这个范围就要出Bug了”，这是“陈式第一定理”，呵呵。你能想一想还有什么情况会让这个我们上面的代码出问题吗？</p>

<p>在C++下，我不是很好举例，但是在Java的环境下，嘿嘿，还是让我们来看看下面的一些反例和一些别的事情的讨论（当然，有些反例可能属于钻牛角尖，可能有点学院派，不过也不排除其实际可能性，就算是提个醒吧）：</p>

<p>其一、<code>Class Loader</code>。不知道你对Java的Class Loader熟悉吗？“类装载器”？！C++可没有这个东西啊。这是Java动态性的核心。顾名思义，类装载器是用来把类(class)装载进JVM的。JVM规范定义了两种类型的类装载器：启动内装载器(bootstrap)和用户自定义装载器(user-defined class loader)。 在一个JVM中可能存在多个ClassLoader，每个ClassLoader拥有自己的NameSpace。一个ClassLoader只能拥有一个class对象类型的实例，但是不同的ClassLoader可能拥有相同的class对象实例，这时可能产生致命的问题。如ClassLoaderA，装载了类A的类型实例A1，而ClassLoaderB，也装载了类A的对象实例A2。逻辑上讲A1=A2，但是由于A1和A2来自于不同的ClassLoader，它们实际上是完全不同的，如果A中定义了一个静态变量c，则c在不同的ClassLoader中的值是不同的。</p>

<p>于是，如果咱们的Singleton 1.3版本如果面对着多个Class Loader会怎么样？呵呵，多个实例同样会被多个Class Loader创建出来，当然，这个有点牵强，不过他确实存在。难道我们还要整出个1.4版吗？可是，我们怎么可能在我的Singleton类中操作Class Loader啊？是的，你根本不可能。在这种情况下，你能做的只有是——“保证多个Class Loader不会装载同一个Singleton”。</p>

<p>其二、序例化。如果我们的这个Singleton类是一个关于我们程序配置信息的类。我们需要它有序列化的功能，那么，当反序列化的时候，我们将无法控制别人不多次反序列化。不过，我们可以利用一下Serializable接口的<code>readResolve()</code>方法，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="kd">implements</span> <span class="n">Serializable</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="o">......</span>
</span><span class='line'>    <span class="o">......</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">Object</span> <span class="nf">readResolve</span><span class="o">()</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">getInstance</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其三、多个Java虚拟机。如果我们的程序运行在多个Java的虚拟机中。什么？多个虚拟机？这是一种什么样的情况啊。嗯，这种情况是有点极端，不过还是可能出现，比如EJB或RMI之流的东西。要在这种环境下避免多实例，看来只能通过良好的设计或非技术来解决了。</p>

<p>其四，volatile变量。关于volatile这个关键字所声明的变量可以被看作是一种 “程度较轻的同步synchronized”；与 synchronized 块相比，volatile 变量所需的编码较少，并且运行时开销也较少，但是它所能实现的功能也仅是synchronized的一部分。当然，如前面所述，我们需要的Singleton只是在创建的时候线程同步，而后面的读取则不需要同步。所以，volatile变量并不能帮助我们即能解决问题，又有好的性能。而且，这种变量只能在JDK 1.5+版后才能使用。</p>

<p>其五、关于继承。是的，继承于Singleton后的子类也有可能造成多实例的问题。不过，因为我们早把Singleton的构造函数声明成了私有的，所以也就杜绝了继承这种事情。</p>

<p>其六，关于代码重用。也话我们的系统中有很多个类需要用到这个模式，如果我们在每一个类都中有这样的代码，那么就显得有点傻了。那么，我们是否可以使用一种方法，把这具模式抽象出去？在C++下这是很容易的，因为有模板和友元，还支持栈上分配内存，所以比较容易一些（程序如下所示），Java下可能比较复杂一些，聪明的你知道怎么做吗？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">t</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span> <span class="k">class</span> <span class="nc">Singleton</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="k">static</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">Instance</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">static</span> <span class="n">T</span> <span class="n">theSingleInstance</span><span class="p">;</span> <span class="c1">//假设T有一个protected默认构造函数</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">theSingleInstance</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">OnlyOne</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Singleton</span><span class="o">&lt;</span><span class="n">onlyone</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">friend</span> <span class="k">class</span> <span class="nc">Singleton</span><span class="o">&lt;</span><span class="n">onlyone</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">example_data</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">GetExampleData</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">example_data</span><span class="p">;}</span>
</span><span class='line'>    <span class="k">protected</span><span class="o">:</span>
</span><span class='line'>        <span class="n">OnlyOne</span><span class="p">()</span><span class="o">:</span> <span class="n">example_data</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span> <span class="p">{}</span>   <span class="c1">// 默认构造函数</span>
</span><span class='line'>        <span class="n">OnlyOne</span><span class="p">(</span><span class="n">OnlyOne</span><span class="o">&amp;</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">OnlyOne</span><span class="o">::</span><span class="n">Instance</span><span class="p">().</span><span class="n">GetExampleData</span><span class="p">()</span><span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>REF:</p>

<ul>
<li><a href="http://coolshell.cn/articles/265.html">深入浅出单实例Singleton设计模式</a></li>
<li><a href="https://en.wikipedia.org/wiki/Singleton_pattern">Singleton pattern</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Context]]></title>
    <link href="http://Solarex.github.io/blog/2014/10/14/android-context/"/>
    <updated>2014-10-14T10:11:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2014/10/14/android-context</id>
    <content type="html"><![CDATA[<center><p><img src="http://Solarex.github.io/images/android_robot.png" width="255" height="300"></p></center>


<p>Context is probably the most used element in Android applications…it may also be the most misused.Context objects are so common, and get passed around so frequently, it can be easy to create a situation you didn’t intend.  Loading resources, launching a new Activity, obtaining a system service, getting internal file paths, and creating views all require a Context (and that’s not even getting started on the full list!) to accomplish the task.  What I’d like to do is provide for you some insights on how Context works alongside some tips that will (hopefully) allow you to leverage it more effectively in your applications.</p>

<!-- more -->


<h2>Context Types</h2>

<p>Not all Context instances are created equal.  Depending on the Android application component, the Context you have access to varies slightly:</p>

<ul>
<li><p><strong>Application</strong> – is a singleton instance running in your application process.  It can be accessed via methods like getApplication() from an Activity or Service, and getApplicationContext() from any other object that inherits from Context.  Regardless of where or how it is accessed, you will always receive the same instance from within your process.</p></li>
<li><p><strong>Activity/Service</strong> – inherit from ContextWrapper which implements the same API, but proxies all of its method calls to a hidden internal Context instance, also known as its base context.  Whenever the framework creates a new Activity or Service instance, it also creates a new ContextImpl instance to do all of the heavy lifting that either component will wrap.  Each Activity or Service, and their corresponding base context, are unique per-instance.</p></li>
<li><p><strong>BroadcastReceiver</strong> – is not a Context in and of itself, but the framework passes a Context to it in onReceive() each time a new broadcast event comes in.  This instance is a ReceiverRestrictedContext with two main functions disabled; calling registerReceiver() and bindService().  These two functions are not allowed from within an existing BroadcastReceiver.onReceive().  Each time a receiver processes a broadcast, the Context handed to it is a new instance.</p></li>
<li><p><strong>ContentProvider</strong> – is also not a Context but is given one when created that can be accessed via <code>getContext()</code>.  If the <code>ContentProvider</code> is running local to the caller (i.e. same application process), then this will actually return the same Application singleton.  However, if the two are in separate processes, this will be a newly created instance representing the package the provider is running in.</p></li>
</ul>


<h2>Saved References</h2>

<p>The first issue we need to address comes from saving a reference to a <code>Context</code> in an object or class that has a lifecycle that extends beyond that of the instance you saved.  For example, creating a custom singleton that requires a <code>Context</code> to load resources or access a <code>ContentProvider</code>, and saving a reference to the current <code>Activity</code> or <code>Service</code> in that singleton.</p>

<p>Bad Singleton</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomManager</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">CustomManager</span> <span class="n">sInstance</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">CustomManager</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">sInstance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">sInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CustomManager</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">sInstance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Context</span> <span class="n">mContext</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">CustomManager</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mContext</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem here is we don’t know where that <code>Context</code> came from, and it is not safe to hold a reference to the object if it ends up being an <code>Activity</code> or a <code>Service</code>.  This is a problem because a singleton is managed by a single static reference inside the enclosing class.  This means that our object, and ALL the other objects referenced by it, will never be garbage collected.  If this <code>Context</code> were an Activity, we would effectively hold hostage in memory all the views and other potentially large objects associated with it; creating a leak.</p>

<p>To protect against this, we modify the singleton to always reference the application context:</p>

<p>Better Singleton</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomManager</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">CustomManager</span> <span class="n">sInstance</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">CustomManager</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">sInstance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">//Always pass in the Application Context</span>
</span><span class='line'>            <span class="n">sInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CustomManager</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getApplicationContext</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">sInstance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Context</span> <span class="n">mContext</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">CustomManager</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mContext</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now it doesn’t matter where our <code>Context</code> came from, because the reference we are holding is safe.  The application context is itself a singleton, so we aren’t leaking anything by creating another static reference to it.  Another great example of places where this can crop up is saving references to a <code>Context</code> from inside a running background thread or a pending Handler.</p>

<p>So why can’t we always just reference the application context?  Take the middleman out of the equation, as it were, and never have to worry about creating leaks?  The answer, as I alluded to in the introduction, is because one <code>Context</code> is not equal to another.</p>

<h2>Context Capabilities</h2>

<p>The common actions you can safely take with a given <code>Context</code> object depends on where it came from originally.  Below is a table of the common places an application will receive a <code>Context</code>, and in each case what it is useful for:</p>

<table border="1" width="90%" align="center">
<thead>
<tr>
<th></th>
<th align="center">Application</th>
<th align="center">Activity</th>
<th align="center">Service</th>
<th align="center">ContentProvider</th>
<th align="center">BroadcastReceiver</th>
</tr>
</thead>
<tbody>
<tr>
<td>Show a Dialog</td>
<td align="center">NO</td>
<td align="center">YES</td>
<td align="center">NO</td>
<td align="center">NO</td>
<td align="center">NO</td>
</tr>
<tr>
<td>Start an Activity</td>
<td align="center">NO<sup>1</sup></td>
<td align="center">YES</td>
<td align="center">NO<sup>1</sup></td>
<td align="center">NO<sup>1</sup></td>
<td align="center">NO<sup>1</sup></td>
</tr>
<tr>
<td>Layout Inflation</td>
<td align="center">NO<sup>2</sup></td>
<td align="center">YES</td>
<td align="center">NO<sup>2</sup></td>
<td align="center">NO<sup>2</sup></td>
<td align="center">NO<sup>2</sup></td>
</tr>
<tr>
<td>Start a Service</td>
<td align="center">YES</td>
<td align="center">YES</td>
<td align="center">YES</td>
<td align="center">YES</td>
<td align="center">YES</td>
</tr>
<tr>
<td>Bind to a Service</td>
<td align="center">YES</td>
<td align="center">YES</td>
<td align="center">YES</td>
<td align="center">YES</td>
<td align="center">NO</td>
</tr>
<tr>
<td>Send a Broadcast</td>
<td align="center">YES</td>
<td align="center">YES</td>
<td align="center">YES</td>
<td align="center">YES</td>
<td align="center">YES</td>
</tr>
<tr>
<td>Register BroadcastReceiver</td>
<td align="center">YES</td>
<td align="center">YES</td>
<td align="center">YES</td>
<td align="center">YES</td>
<td align="center">NO<sup>3</sup></td>
</tr>
<tr>
<td>Load Resource Values</td>
<td align="center">YES</td>
<td align="center">YES</td>
<td align="center">YES</td>
<td align="center">YES</td>
<td align="center">YES</td>
</tr>
</tbody>
</table>


<ul>
<li>An application CAN start an <code>Activity</code> from here, but it requires that a new task be created.  This may fit specific use cases, but can create non-standard back stack behaviors in your application and is generally not recommended or considered good practice.</li>
<li>This is legal, but inflation will be done with the default theme for the system on which you are running, not what’s defined in your application.</li>
<li>Allowed if the receiver is null, which is used for obtaining the current value of a sticky broadcast, on Android 4.2 and above.</li>
</ul>


<h2>User Interface</h2>

<p>You can see from looking at the previous table that there are a number of functions the application context is not properly suited to handle; all of them related to working with the UI.  In fact, the only implementation equipped to handle all tasks associated with the UI is <code>Activity</code>; the other instances fare pretty much the same in all categories.</p>

<p>Luckily, these three actions are things an application doesn’t really have any place doing outside the scope of an <code>Activity</code>; it’s almost like the framework was designed that way on purpose.  Attempting to show a Dialog that was created with a reference to the application context, or starting an <code>Activity</code> from the application context will throw an exception and crash your application…a strong indicator something has gone wrong.</p>

<p>The less obvious issue is inflating layouts.  If you read my last piece on layout inflation, you already know that it can be a slightly mysterious process with some hidden behaviors;  using the right <code>Context</code> is linked to another one of those behaviors.  While the framework will not complain and will return a perfectly good view hierarchy from a <code>LayoutInflater</code> created with the application context, the themes and styles from your app will not be considered in the process.  This is because <code>Activity</code> is the only <code>Context</code> on which the themes defined in your manifest are actually attached.  Any other instance will use the system default theme to inflate your views, leading to a display output you probably didn’t expect.</p>

<h2>The Intersection of these Rules</h2>

<p>Invariably, someone will arrive at the conclusion that these two rules conflict.  There is a case in the application’s current design where a long-term reference must be saved and we must save an <code>Activity</code> because the tasks we want to accomplish include manipulation of the UI.  If that is the case, I would urge you to reconsider your design, as this would be a textbook instance of fighting the framework.</p>

<h2>The Rule of Thumb</h2>

<p>In most cases, use the <code>Context</code> directly available to you from the enclosing component you’re working within.  You can safely hold a reference to it as long as that reference does not extend beyond the lifecycle of that component. As soon as you need to save a reference to a <code>Context</code> from an object that lives beyond your <code>Activity</code> or <code>Service</code>, even temporarily, switch that reference you save over to the application context.</p>

<p>REF:<a href="http://www.doubleencore.com/2013/06/context/">Context</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java thread tutorial]]></title>
    <link href="http://Solarex.github.io/blog/2014/10/14/java-thread-tutorial/"/>
    <updated>2014-10-14T08:49:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2014/10/14/java-thread-tutorial</id>
    <content type="html"><![CDATA[<center><p><img src="http://Solarex.github.io/images/java-thread-tutorial.png" ></p></center>


<ul>
<li><a href="#overview">Java Thread and Multithreading Tutorial</a>

<ul>
<li><a href="#example">Java Thread Example</a></li>
<li><a href="#sleep">Java Thread Sleep</a></li>
<li><a href="#join">Java Thread Join</a></li>
<li><a href="#states">Java Thread States</a></li>
<li><a href="#wait">Java Thread wait, notify and notifyAll</a></li>
<li><a href="#safety">Java Thread Safety and Java Synchronization</a></li>
<li><a href="#exception">Java Exception in thread main</a></li>
<li><a href="#singleton">Thread Safety in Singleton Class</a></li>
<li><a href="#daemon">Java Daemon Thread</a></li>
<li><a href="#threadlocal">Java Thread Local</a></li>
<li><a href="#dump">Java Thread Dump</a></li>
<li><a href="#deadlock">How to Analyze Deadlock and avoid it in Java</a></li>
<li><a href="#timer">Java Timer Thread</a></li>
<li><a href="#producer">Java Producer Consumer Problem</a></li>
<li><a href="#pool">Java Thread Pool</a></li>
<li><a href="#future">Java Callable Future</a></li>
<li><a href="#futuretask">Java FutureTask Example</a></li>
</ul>
</li>
</ul>


<h2 id="overview">Java Thread and Multithreading Tutorial</h2>


<p>There are two types of threads in an application – <code>user thread</code> and <code>daemon thread</code>. When we start an application, main is the first user thread created and we can create multiple user threads as well as daemon threads. When all the user threads are executed, JVM terminates the program.</p>

<p>We can set different priorities to different Threads but it doesn’t guarantee that higher priority thread will execute first than lower priority thread. Thread scheduler is the part of Operating System implementation and when a Thread is started, it’s execution is controlled by Thread Scheduler and JVM doesn’t have any control on it’s execution.</p>

<!-- more -->




<h3 id="example">Java Thread Example</h3>


<p>Every java application has at least one thread – main thread. Although there are so many other threads running in background like memory management, system management, signal processing etc. But from application point of view – main is the first thread and we can create multiple threads from it.</p>

<p>Multithreading refers to two or more threads executing concurrently in a single program. A computer single core processor can execute only one thread at a time and time slicing is the OS feature to share processor time between different processes and threads.</p>

<p>Benefits of Threads</p>

<ul>
<li>Threads are lightweight compared to processes, it takes less time and resource to create a thread.</li>
<li>Threads share their parent process data and code</li>
<li>Context switching between threads is usually less expensive than between processes.</li>
<li>Thread intercommunication is relatively easy than process communication.</li>
</ul>


<p>Java provides two ways to create a thread programmatically.</p>

<ul>
<li>Implementing the <code>java.lang.Runnable</code> interface.</li>
<li>Extending the <code>java.lang.Thread</code> class.</li>
</ul>


<p><strong>Once we start any thread, it’s execution depends on the OS implementation of time slicing and we can’t control their execution. However we can set threads priority but even then it doesn’t guarantee that higher priority thread will be executed first.</strong></p>

<p>As you have noticed that thread doesn’t return any value but what if we want our thread to do some processing and then return the result to our client program, check our <a href="#future">Java Callable Future</a>.</p>

<h3 id="sleep">Java Thread Sleep</h3>


<p><code>java.lang.Thread sleep()</code> method can be used to pause the execution of current thread for specified time in milliseconds. The argument value for milliseconds can’t be negative, else it throws <code>IllegalArgumentException</code>.</p>

<p>There is another method <code>sleep(long millis, int nanos)</code> that can be used to pause the execution of current thread for specified milliseconds and nanoseconds. The allowed nano second value is between 0 and 999999.</p>

<p>Thread Sleep important points</p>

<ul>
<li>It always pause the current thread execution.</li>
<li>The actual time thread sleeps before waking up and start execution depends on system timers and schedulers. For a quiet system, the actual time for sleep is near to the specified sleep time but for a busy system it will be little bit more.</li>
<li>Thread sleep doesn’t lose any monitors or locks current thread has acquired.</li>
<li>Any other thread can interrupt the current thread in sleep, in that case <code>InterruptedException</code> is thrown.</li>
</ul>


<p>How Thread Sleep Works</p>

<p><code>Thread.sleep()</code> interacts with the thread scheduler to put the current thread in wait state for specified period of time. Once the wait time is over, thread state is changed to runnable state and wait for the CPU for further execution. So the actual time that current thread sleep depends on the thread scheduler that is part of operating system.</p>

<h3 id="join">Java Thread Join</h3>


<p>Java Thread <code>join</code> method can be used to pause the current thread execution until unless the specified thread is dead. There are three overloaded join functions.</p>

<ul>
<li><p><code>public final void join()</code>: This method puts the current thread on wait until the thread on which it’s called is dead. If the thread is interrupted, it throws <code>InterruptedException</code>.</p></li>
<li><p><code>public final synchronized void join(long millis)</code>: This method is used to wait for the thread on which it’s called to be dead or wait for specified milliseconds. Since thread execution depends on OS implementation, it doesn’t guarantee that the current thread will wait only for given time.</p></li>
<li><p><code>public final synchronized void join(long millis, int nanos)</code>: This method is used to wait for thread to die for given milliseconds plus nanoseconds.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">solarex</span><span class="o">.</span><span class="na">threadtest</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadJoinExample</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Thread</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">MyRunnable</span><span class="o">(),</span> <span class="s">&quot;t1&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Thread</span> <span class="n">t2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">MyRunnable</span><span class="o">(),</span> <span class="s">&quot;t2&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Thread</span> <span class="n">t3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">MyRunnable</span><span class="o">(),</span> <span class="s">&quot;t3&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">t1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//start second thread after waiting for 2 seconds or if it&#39;s dead</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">t1</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">t2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//start third thread only when first thread is dead</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">t1</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">t3</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//let all threads finish execution before finishing main thread</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">t1</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
</span><span class='line'>            <span class="n">t2</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
</span><span class='line'>            <span class="n">t3</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;All threads are dead, exiting main thread&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">MyRunnable</span> <span class="kd">implements</span> <span class="n">Runnable</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Thread started:::&quot;</span><span class="o">+</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()+</span><span class="s">&quot;@&quot;</span><span class="o">+</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">4000</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Thread ended:::&quot;</span><span class="o">+</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()+</span><span class="s">&quot;@&quot;</span><span class="o">+</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">------------------------------------</span>
</span><span class='line'><span class="c1">// output begin</span>
</span><span class='line'><span class="n">hrh</span><span class="nd">@Solarex</span><span class="o">:</span><span class="n">Java$</span> <span class="n">java</span> <span class="n">org</span><span class="o">.</span><span class="na">solarex</span><span class="o">.</span><span class="na">threadtest</span><span class="o">.</span><span class="na">ThreadJoinExample</span>
</span><span class='line'><span class="n">Thread</span> <span class="nl">started:</span><span class="o">::</span><span class="n">t1</span><span class="err">@</span><span class="mi">1413344304212</span>
</span><span class='line'><span class="n">Thread</span> <span class="nl">started:</span><span class="o">::</span><span class="n">t2</span><span class="err">@</span><span class="mi">1413344306213</span>
</span><span class='line'><span class="n">Thread</span> <span class="nl">ended:</span><span class="o">::</span><span class="n">t1</span><span class="err">@</span><span class="mi">1413344308213</span>
</span><span class='line'><span class="n">Thread</span> <span class="nl">started:</span><span class="o">::</span><span class="n">t3</span><span class="err">@</span><span class="mi">1413344308214</span>
</span><span class='line'><span class="n">Thread</span> <span class="nl">ended:</span><span class="o">::</span><span class="n">t2</span><span class="err">@</span><span class="mi">1413344310213</span>
</span><span class='line'><span class="n">Thread</span> <span class="nl">ended:</span><span class="o">::</span><span class="n">t3</span><span class="err">@</span><span class="mi">1413344312214</span>
</span><span class='line'><span class="n">All</span> <span class="n">threads</span> <span class="n">are</span> <span class="n">dead</span><span class="o">,</span> <span class="n">exiting</span> <span class="n">main</span> <span class="n">thread</span>
</span><span class='line'><span class="c1">// output end</span>
</span></code></pre></td></tr></table></div></figure>


<h3 id="states">Java Thread States</h3>


<p>Thread States</p>

<p>Below diagram shows different states of thread in java, note that we can create a thread in java and start it but how the thread states change from Runnable to Running to Blocked depends on the OS implementation of thread scheduler and java doesn’t have full control on that.</p>

<center><p><img src="http://Solarex.github.io/images/thread-lifecycle-states.png"></p></center>


<ul>
<li><p><code>New</code>:When we create a new Thread object using new operator, thread state is New Thread. At this point, thread is not alive and it’s a state internal to Java programming.</p></li>
<li><p><code>Runnable</code>:When we call <code>start()</code> function on <code>Thread</code> object, it’s state is changed to <code>Runnable</code> and the control is given to <strong>Thread scheduler</strong> to finish it’s execution. Whether to run this thread instantly or keep it in runnable thread pool before running it depends on the OS implementation of thread scheduler.</p></li>
<li><p><code>Running</code>:When thread is executing, it’s state is changed to <code>Running</code>. Thread scheduler picks one of the thread from the runnable thread pool and change it’s state to Running and CPU starts executing this thread. A thread can change state to Runnable, Dead or Blocked from running state depends on time slicing, thread completion of run() method or waiting for some resources.</p></li>
<li><p><code>Blocked/Waiting</code>:A thread can be waiting for other thread to finish using thread <code>join</code> or it can be waiting for some resources to available, for example producer consumer problem or waiter notifier implementation or IO resources, then it’s state is changed to Waiting. Once the thread wait state is over, it’s state is changed to Runnable and it’s moved back to runnable thread pool.</p></li>
<li><p><code>Dead</code>:Once the thread finished executing, it’s state is changed to Dead and it’s considered to be not alive.</p></li>
</ul>


<h3 id="wait">Java Thread wait,notifyand notifyAll</h3>


<ul>
<li><p><strong>wait</strong>:Object <code>wait</code> methods has three variance, one which waits indefinitely for any other thread to call notify or notifyAll method on the object to wake up the current thread. Other two variances puts the current thread in wait for specific amount of time before they wake up.</p></li>
<li><p><strong>notify</strong>:<code>notify</code> method wakes up only one thread waiting on the object and that thread starts execution. So if there are multiple threads waiting for an object, this method will wake up only one of them. The choice of the thread to wake depends on the OS implementation of thread management.</p></li>
<li><p><strong>notifyAll</strong>:<code>notifyAll</code> method wakes up all the threads waiting on the object, although which one will process first depends on the OS implementation.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//Message.java</span>
</span><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">solarex</span><span class="o">.</span><span class="na">threadtest</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Message</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">msg</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Message</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">){</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">msg</span> <span class="o">=</span> <span class="n">str</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getMsg</span><span class="o">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">msg</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMsg</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">){</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">msg</span> <span class="o">=</span> <span class="n">str</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">//Waiter.java</span>
</span><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">solarex</span><span class="o">.</span><span class="na">threadtest</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Waiter</span> <span class="kd">implements</span> <span class="n">Runnable</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Message</span> <span class="n">msg</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Waiter</span><span class="o">(</span><span class="n">Message</span> <span class="n">m</span><span class="o">){</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">msg</span> <span class="o">=</span> <span class="n">m</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(){</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">synchronized</span><span class="o">(</span><span class="n">msg</span><span class="o">){</span>
</span><span class='line'>            <span class="k">try</span><span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span><span class="o">+</span><span class="s">&quot; waiting to get notified @ &quot;</span> <span class="o">+</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
</span><span class='line'>                <span class="n">msg</span><span class="o">.</span><span class="na">wait</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span><span class="o">+</span><span class="s">&quot; waiter thread got notified @ &quot;</span> <span class="o">+</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span><span class="o">+</span><span class="s">&quot; proccessed: &quot;</span> <span class="o">+</span> <span class="n">msg</span><span class="o">.</span><span class="na">getMsg</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">//Notifier.java</span>
</span><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">solarex</span><span class="o">.</span><span class="na">threadtest</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Notifier</span> <span class="kd">implements</span> <span class="n">Runnable</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Message</span> <span class="n">msg</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Notifier</span><span class="o">(</span><span class="n">Message</span> <span class="n">msg</span><span class="o">){</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">msg</span> <span class="o">=</span> <span class="n">msg</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(){</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span><span class="o">+</span><span class="s">&quot; started&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">try</span><span class="o">{</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>            <span class="kd">synchronized</span><span class="o">(</span><span class="n">msg</span><span class="o">){</span>
</span><span class='line'>                <span class="n">msg</span><span class="o">.</span><span class="na">setMsg</span><span class="o">(</span><span class="n">name</span><span class="o">+</span><span class="s">&quot; notifier work done&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="c1">// msg.notify();</span>
</span><span class='line'>                <span class="n">msg</span><span class="o">.</span><span class="na">notifyAll</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">//WaitNotifierTest.java</span>
</span><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">solarex</span><span class="o">.</span><span class="na">threadtest</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WaitNotifyTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
</span><span class='line'>        <span class="n">Message</span> <span class="n">msg</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Message</span><span class="o">(</span><span class="s">&quot;Hi&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Waiter</span> <span class="n">waiter0</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Waiter</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="n">waiter0</span><span class="o">,</span> <span class="s">&quot;waiter0&quot;</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Waiter</span> <span class="n">waiter1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Waiter</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="n">waiter1</span><span class="o">,</span> <span class="s">&quot;waiter1&quot;</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Notifier</span> <span class="n">notifier</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Notifier</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="n">notifier</span><span class="o">,</span> <span class="s">&quot;notifier&quot;</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;main thread exit&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// javac -d . Message.java Waiter.java Notifier.java WaitNotifierTest.java</span>
</span><span class='line'><span class="c1">// java org.solarex.threadtest.WaitNotifierTest</span>
</span><span class='line'><span class="c1">// --------begin output------------</span>
</span><span class='line'><span class="n">hrh</span><span class="nd">@Solarex</span><span class="o">:</span><span class="n">Java$</span> <span class="n">java</span> <span class="n">org</span><span class="o">.</span><span class="na">solarex</span><span class="o">.</span><span class="na">threadtest</span><span class="o">.</span><span class="na">WaitNotifyTest</span>
</span><span class='line'><span class="n">waiter0</span> <span class="n">waiting</span> <span class="n">to</span> <span class="n">get</span> <span class="n">notified</span> <span class="err">@</span> <span class="mi">1413423213359</span>
</span><span class='line'><span class="n">waiter1</span> <span class="n">waiting</span> <span class="n">to</span> <span class="n">get</span> <span class="n">notified</span> <span class="err">@</span> <span class="mi">1413423213360</span>
</span><span class='line'><span class="n">main</span> <span class="n">thread</span> <span class="n">exit</span>
</span><span class='line'><span class="n">notifier</span> <span class="n">started</span>
</span><span class='line'><span class="n">waiter1</span> <span class="n">waiter</span> <span class="n">thread</span> <span class="n">got</span> <span class="n">notified</span> <span class="err">@</span> <span class="mi">1413423214362</span>
</span><span class='line'><span class="n">waiter1</span> <span class="nl">proccessed:</span> <span class="n">notifier</span> <span class="n">notifier</span> <span class="n">work</span> <span class="n">done</span>
</span><span class='line'><span class="n">waiter0</span> <span class="n">waiter</span> <span class="n">thread</span> <span class="n">got</span> <span class="n">notified</span> <span class="err">@</span> <span class="mi">1413423214362</span>
</span><span class='line'><span class="n">waiter0</span> <span class="nl">proccessed:</span> <span class="n">notifier</span> <span class="n">notifier</span> <span class="n">work</span> <span class="n">done</span>
</span><span class='line'><span class="c1">// --------end output----------</span>
</span></code></pre></td></tr></table></div></figure>




<h3 id="safety">Java Thread Safety and Java Synchronization</h3>


<p>Thread safety is the process to make our program safe to use in multithreaded environment, there are different ways through which we can make our program thread safe.</p>

<ul>
<li>Synchronization is the easiest and most widely used tool for thread safety in java.</li>
<li>Use of Atomic Wrapper classes from <code>java.util.concurrent.atomic</code> package. For example <code>AtomicInteger</code></li>
<li>Use of locks from <code>java.util.concurrent.locks</code> package.</li>
<li>Using thread safe collection classes, check this post for usage of <code>ConcurrentHashMap</code> for thread safety.</li>
<li>Using volatile keyword with variables to make every thread read the data from memory, not read from thread cache.</li>
</ul>


<p>Synchronization is the tool using which we can achieve thread safety, JVM guarantees that synchronized code will be executed by only one thread at a time. java keyword synchronized is used to create synchronized code and internally it uses locks on Object or Class to make sure only one thread is executing the synchronized code.</p>

<ul>
<li>Java synchronization works on locking and unlocking of resource, before any thread enters into synchronized code, it has to acquire lock on the Object and when code execution ends, it unlocks the resource that can be locked by other threads. In the mean time other threads are in wait state to lock the synchronized resource.</li>
<li>We can use synchronized keyword in two ways, one is to make a complete method synchronized and other way is to create synchronized block.可以创建synchronized方法或者synchronized代码块</li>
<li>When a method is synchronized, it locks the Object, if method is static it locks the Class, so it’s always best practice to use synchronized block to lock the only sections of method that needs synchronization.</li>
<li>While creating synchronized block, we need to provide the resource on which lock will be acquired, it can be XYZ.class or any Object field of the class.</li>
<li><code>synchronized(this)</code> will lock the Object before entering into the synchronized block.</li>
<li>You should use the lowest level of locking, for example if there are multiple synchronized block in a class and one of them is locking the Object, then other synchronized blocks will also be not available for execution by other threads. When we lock an Object, it acquires lock on all the fields of the Object.</li>
<li>Java Synchronization provides data integrity on the cost of performance, so it should be used only when it’s absolutely necessary.</li>
<li>Java Synchronization works only in the same JVM, so if you need to lock some resource in multiple JVM environment, it will not work and you might have to look after some global locking mechanism.</li>
<li>Java Synchronization could result in deadlocks, check this post about <a href="#deadlock">deadlock in java and how to avoid them</a>.</li>
<li>Java synchronized keyword cannot be used for constructors and variables.</li>
<li>It is preferable to create a dummy private Object to use for synchronized block, so that it’s reference can’t be changed by any other code. For example if you have a setter method for Object on which you are synchronizing, it’s reference can be changed by some other code leads to parallel execution of the synchronized block.</li>
<li>We should not use any object that is maintained in a constant pool, for example String should not be used for synchronization because if any other code is also locking on same String, it will try to acquire lock on the same reference object from String pool and even though both the codes are unrelated, they will lock each other.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//dummy object variable for synchronization</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Object</span> <span class="n">mutex</span><span class="o">=</span><span class="k">new</span> <span class="n">Object</span><span class="o">();</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="c1">//using synchronized block to read, increment and update count value synchronously</span>
</span><span class='line'><span class="kd">synchronized</span> <span class="o">(</span><span class="n">mutex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">count</span><span class="o">++;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyObject</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Locks on the object&#39;s monitor</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Hackers code</span>
</span><span class='line'><span class="n">MyObject</span> <span class="n">myObject</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyObject</span><span class="o">();</span>
</span><span class='line'><span class="kd">synchronized</span> <span class="o">(</span><span class="n">myObject</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Indefinitely delay myObject</span>
</span><span class='line'>    <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that hacker’s code is trying to lock the myObject instance and once it gets the lock, it’s never releasing it causing <code>doSomething()</code> method to block on waiting for the lock, this will cause system to go on deadlock and cause Denial of Service (DoS).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyObject</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Object</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">synchronized</span> <span class="o">(</span><span class="n">lock</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//untrusted code</span>
</span><span class='line'>
</span><span class='line'><span class="n">MyObject</span> <span class="n">myObject</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyObject</span><span class="o">();</span>
</span><span class='line'><span class="c1">//change the lock Object reference</span>
</span><span class='line'><span class="n">myObject</span><span class="o">.</span><span class="na">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that lock Object is public and by changing it’s reference, we can execute synchronized block parallel in multiple threads. Similar case is true if you have private Object but have setter method to change it’s reference.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyObject</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//locks on the class object&#39;s monitor</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// hackers code</span>
</span><span class='line'><span class="kd">synchronized</span> <span class="o">(</span><span class="n">MyObject</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">);</span> <span class="c1">// Indefinitely delay MyObject</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that hacker code is getting lock on class monitor and not releasing it, it will cause deadlock and DoS in the system.</p>

<h3 id="exception">Java Exception in thread main</h3>


<p>These are some of the common java exceptions in thread main, whenever you face any one of these check following:</p>

<ul>
<li>Same JRE version is used to compile and run the java program</li>
<li>You are running java class from the classes directory and package is provided as directory.</li>
<li>Your java classpath is set properly to include all the dependency classes</li>
<li>You are using only file name without .class extension while running a java program</li>
<li>Java class main method syntax is correct</li>
</ul>


<h3 id="singleton">Thread Safety in Singleton Class</h3>


<p><strong>Singleton</strong> is one of the most widely used creational design pattern to restrict the object creation by applications. In real world applications, resources like Database connections or Enterprise Information Systems (EIS) are limited and should be used wisely to avoid any resource crunch. To achieve this, we can implement Singleton design pattern to create a wrapper class around the resource and limit the number of object created at runtime to one.</p>

<p>In general we follow below steps to create a singleton class:</p>

<ul>
<li>Override the private constructor to avoid any new object creation with new operator.</li>
<li>Declare a private static instance of the same class</li>
<li><p>Provide a public static method that will return the singleton class instance variable. If the variable is not initialized then initialize it or else simply return the instance variable.</p></li>
<li><p>Create the instance variable at the time of class loading:</p></li>
<li><strong>Pros</strong>:Thread safety without synchronization,Easy to implement</li>
<li><p><strong>Cons</strong>:Early creation of resource that might not be used in the application,The client application can’t pass any argument, so we can’t reuse it. For example, having a generic singleton class for database connection where client application supplies database server properties.</p></li>
<li><p>Synchronize the <code>getInstance()</code> method:</p></li>
<li><strong>Pros</strong>:Thread safety is guaranteed,Client application can pass parameters,Lazy initialization achieved</li>
<li><p><strong>Cons</strong>:Slow performance because of locking overhead,Unnecessary synchronization that is not required once the instance variable is initialized.</p></li>
<li><p>Use synchronized block inside the if loop:</p></li>
<li><strong>Pros</strong>:Thread safety is guaranteed,Client application can pass arguments,Lazy initialization achieved,Synchronization overhead is minimal and applicable only for first few threads when the variable is null.</li>
<li><strong>Cons</strong>:Extra if condition</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ASingleton</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">ASingleton</span> <span class="n">instance</span><span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Object</span> <span class="n">mutex</span><span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">ASingleton</span><span class="o">(){</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">ASingleton</span> <span class="nf">getInstance</span><span class="o">(){</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="n">instance</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span>
</span><span class='line'>            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">mutex</span><span class="o">){</span>
</span><span class='line'>                <span class="k">if</span><span class="o">(</span><span class="n">instance</span><span class="o">==</span><span class="kc">null</span><span class="o">)</span> <span class="n">instance</span><span class="o">=</span> <span class="k">new</span> <span class="n">ASingleton</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3 id="daemon">Java Daemon Thread</h3>


<p>When we create a Thread in java, by default it’s a user thread and if it’s running JVM will not terminate the program. When a thread is marked as daemon thread, JVM doesn’t wait it to finish and as soon as all the user threads are finished, it terminates the program as well as all the associated daemon threads</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">solarex</span><span class="o">.</span><span class="na">threadtest</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JavaDaemonThread</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span><span class="o">{</span>
</span><span class='line'>        <span class="n">Thread</span> <span class="n">dt</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">DaemonThread</span><span class="o">(),</span> <span class="s">&quot;dt&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">dt</span><span class="o">.</span><span class="na">setDaemon</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="n">dt</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">30000</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;main thread exit&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">DaemonThread</span> <span class="kd">implements</span> <span class="n">Runnable</span><span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(){</span>
</span><span class='line'>        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">){</span>
</span><span class='line'>            <span class="n">processSth</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">processSth</span><span class="o">(){</span>
</span><span class='line'>        <span class="k">try</span><span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;process @ &quot;</span> <span class="o">+</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">5000</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//----------begin output-----------</span>
</span><span class='line'><span class="n">hrh</span><span class="nd">@Solarex</span><span class="o">:</span><span class="n">Java$</span> <span class="n">java</span> <span class="n">org</span><span class="o">.</span><span class="na">solarex</span><span class="o">.</span><span class="na">threadtest</span><span class="o">.</span><span class="na">JavaDaemonThread</span>
</span><span class='line'><span class="n">process</span> <span class="err">@</span> <span class="mi">1413426032024</span>
</span><span class='line'><span class="n">process</span> <span class="err">@</span> <span class="mi">1413426037024</span>
</span><span class='line'><span class="n">process</span> <span class="err">@</span> <span class="mi">1413426042024</span>
</span><span class='line'><span class="n">process</span> <span class="err">@</span> <span class="mi">1413426047025</span>
</span><span class='line'><span class="n">process</span> <span class="err">@</span> <span class="mi">1413426052025</span>
</span><span class='line'><span class="n">process</span> <span class="err">@</span> <span class="mi">1413426057025</span>
</span><span class='line'><span class="n">main</span> <span class="n">thread</span> <span class="n">exit</span>
</span><span class='line'><span class="c1">//----------end output-------------</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we don’t set the thread to be run as daemon thread, the program will never terminate even after main thread is finished it’s execution. Usually we create a daemon thread for functionalities that are not critical to system, for example logging thread or monitoring thread to capture the system resource details and their state.</p>

<h3 id="threadlocal">Java Thread Local</h3>


<p>Java <code>ThreadLocal</code> is used to create thread-local variables. We know that all threads of an Object share it’s variables, so if the variable is not thread safe, we can use synchronization but if we want to avoid synchronization, we can use ThreadLocal variables.Every thread has it’s own <code>ThreadLocal</code> variable and they can use it’s <code>get()</code> and <code>set()</code> methods to get the default value or change it’s value local to Thread. <code>ThreadLocal</code> instances are typically private static fields in classes that wish to associate state with a thread.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">solarex</span><span class="o">.</span><span class="na">threadtest</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.text.SimpleDateFormat</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadLocalExample</span> <span class="kd">implements</span> <span class="n">Runnable</span><span class="o">{</span>
</span><span class='line'>    <span class="c1">// SimpleDateFormat is not thread-safe, so give one to each thread</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">SimpleDateFormat</span><span class="o">&gt;</span> <span class="n">formatter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">SimpleDateFormat</span><span class="o">&gt;(){</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">protected</span> <span class="n">SimpleDateFormat</span> <span class="nf">initialValue</span><span class="o">()</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">SimpleDateFormat</span><span class="o">(</span><span class="s">&quot;yyyyMMdd HHmm&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ThreadLocalExample</span> <span class="n">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThreadLocalExample</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span> <span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span><span class='line'>            <span class="n">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">obj</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">+</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="k">new</span> <span class="n">Random</span><span class="o">().</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">1000</span><span class="o">));</span>
</span><span class='line'>            <span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Thread Name= &quot;</span><span class="o">+</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()+</span><span class="s">&quot; default Formatter = &quot;</span><span class="o">+</span><span class="n">formatter</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">toPattern</span><span class="o">());</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="k">new</span> <span class="n">Random</span><span class="o">().</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">1000</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">formatter</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="k">new</span> <span class="n">SimpleDateFormat</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Thread Name= &quot;</span><span class="o">+</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()+</span><span class="s">&quot; formatter = &quot;</span><span class="o">+</span><span class="n">formatter</span><span class="o">.</span><span class="na">get</span><span class="o">().</span><span class="na">toPattern</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">//------begin output----------</span>
</span><span class='line'><span class="n">hrh</span><span class="nd">@Solarex</span><span class="o">:</span><span class="n">Java$</span> <span class="n">java</span> <span class="n">org</span><span class="o">.</span><span class="na">solarex</span><span class="o">.</span><span class="na">threadtest</span><span class="o">.</span><span class="na">ThreadLocalExample</span>
</span><span class='line'><span class="n">Thread</span> <span class="n">Name</span><span class="o">=</span> <span class="mi">0</span> <span class="k">default</span> <span class="n">Formatter</span> <span class="o">=</span> <span class="n">yyyyMMdd</span> <span class="n">HHmm</span>
</span><span class='line'><span class="n">Thread</span> <span class="n">Name</span><span class="o">=</span> <span class="mi">1</span> <span class="k">default</span> <span class="n">Formatter</span> <span class="o">=</span> <span class="n">yyyyMMdd</span> <span class="n">HHmm</span>
</span><span class='line'><span class="n">Thread</span> <span class="n">Name</span><span class="o">=</span> <span class="mi">1</span> <span class="n">formatter</span> <span class="o">=</span> <span class="n">M</span><span class="o">/</span><span class="n">d</span><span class="o">/</span><span class="n">yy</span> <span class="nl">h:</span><span class="n">mm</span> <span class="n">a</span>
</span><span class='line'><span class="n">Thread</span> <span class="n">Name</span><span class="o">=</span> <span class="mi">0</span> <span class="n">formatter</span> <span class="o">=</span> <span class="n">M</span><span class="o">/</span><span class="n">d</span><span class="o">/</span><span class="n">yy</span> <span class="nl">h:</span><span class="n">mm</span> <span class="n">a</span>
</span><span class='line'><span class="n">Thread</span> <span class="n">Name</span><span class="o">=</span> <span class="mi">2</span> <span class="k">default</span> <span class="n">Formatter</span> <span class="o">=</span> <span class="n">yyyyMMdd</span> <span class="n">HHmm</span>
</span><span class='line'><span class="n">Thread</span> <span class="n">Name</span><span class="o">=</span> <span class="mi">3</span> <span class="k">default</span> <span class="n">Formatter</span> <span class="o">=</span> <span class="n">yyyyMMdd</span> <span class="n">HHmm</span>
</span><span class='line'><span class="n">Thread</span> <span class="n">Name</span><span class="o">=</span> <span class="mi">2</span> <span class="n">formatter</span> <span class="o">=</span> <span class="n">M</span><span class="o">/</span><span class="n">d</span><span class="o">/</span><span class="n">yy</span> <span class="nl">h:</span><span class="n">mm</span> <span class="n">a</span>
</span><span class='line'><span class="n">Thread</span> <span class="n">Name</span><span class="o">=</span> <span class="mi">4</span> <span class="k">default</span> <span class="n">Formatter</span> <span class="o">=</span> <span class="n">yyyyMMdd</span> <span class="n">HHmm</span>
</span><span class='line'><span class="n">Thread</span> <span class="n">Name</span><span class="o">=</span> <span class="mi">3</span> <span class="n">formatter</span> <span class="o">=</span> <span class="n">M</span><span class="o">/</span><span class="n">d</span><span class="o">/</span><span class="n">yy</span> <span class="nl">h:</span><span class="n">mm</span> <span class="n">a</span>
</span><span class='line'><span class="n">Thread</span> <span class="n">Name</span><span class="o">=</span> <span class="mi">4</span> <span class="n">formatter</span> <span class="o">=</span> <span class="n">M</span><span class="o">/</span><span class="n">d</span><span class="o">/</span><span class="n">yy</span> <span class="nl">h:</span><span class="n">mm</span> <span class="n">a</span>
</span><span class='line'><span class="n">Thread</span> <span class="n">Name</span><span class="o">=</span> <span class="mi">5</span> <span class="k">default</span> <span class="n">Formatter</span> <span class="o">=</span> <span class="n">yyyyMMdd</span> <span class="n">HHmm</span>
</span><span class='line'><span class="n">Thread</span> <span class="n">Name</span><span class="o">=</span> <span class="mi">6</span> <span class="k">default</span> <span class="n">Formatter</span> <span class="o">=</span> <span class="n">yyyyMMdd</span> <span class="n">HHmm</span>
</span><span class='line'><span class="n">Thread</span> <span class="n">Name</span><span class="o">=</span> <span class="mi">5</span> <span class="n">formatter</span> <span class="o">=</span> <span class="n">M</span><span class="o">/</span><span class="n">d</span><span class="o">/</span><span class="n">yy</span> <span class="nl">h:</span><span class="n">mm</span> <span class="n">a</span>
</span><span class='line'><span class="n">Thread</span> <span class="n">Name</span><span class="o">=</span> <span class="mi">7</span> <span class="k">default</span> <span class="n">Formatter</span> <span class="o">=</span> <span class="n">yyyyMMdd</span> <span class="n">HHmm</span>
</span><span class='line'><span class="n">Thread</span> <span class="n">Name</span><span class="o">=</span> <span class="mi">8</span> <span class="k">default</span> <span class="n">Formatter</span> <span class="o">=</span> <span class="n">yyyyMMdd</span> <span class="n">HHmm</span>
</span><span class='line'><span class="n">Thread</span> <span class="n">Name</span><span class="o">=</span> <span class="mi">7</span> <span class="n">formatter</span> <span class="o">=</span> <span class="n">M</span><span class="o">/</span><span class="n">d</span><span class="o">/</span><span class="n">yy</span> <span class="nl">h:</span><span class="n">mm</span> <span class="n">a</span>
</span><span class='line'><span class="n">Thread</span> <span class="n">Name</span><span class="o">=</span> <span class="mi">6</span> <span class="n">formatter</span> <span class="o">=</span> <span class="n">M</span><span class="o">/</span><span class="n">d</span><span class="o">/</span><span class="n">yy</span> <span class="nl">h:</span><span class="n">mm</span> <span class="n">a</span>
</span><span class='line'><span class="n">Thread</span> <span class="n">Name</span><span class="o">=</span> <span class="mi">8</span> <span class="n">formatter</span> <span class="o">=</span> <span class="n">M</span><span class="o">/</span><span class="n">d</span><span class="o">/</span><span class="n">yy</span> <span class="nl">h:</span><span class="n">mm</span> <span class="n">a</span>
</span><span class='line'><span class="n">Thread</span> <span class="n">Name</span><span class="o">=</span> <span class="mi">9</span> <span class="k">default</span> <span class="n">Formatter</span> <span class="o">=</span> <span class="n">yyyyMMdd</span> <span class="n">HHmm</span>
</span><span class='line'><span class="n">Thread</span> <span class="n">Name</span><span class="o">=</span> <span class="mi">9</span> <span class="n">formatter</span> <span class="o">=</span> <span class="n">M</span><span class="o">/</span><span class="n">d</span><span class="o">/</span><span class="n">yy</span> <span class="nl">h:</span><span class="n">mm</span> <span class="n">a</span>
</span><span class='line'><span class="c1">//------end output------------</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see from the output that Thread-0 has changed the value of formatter but still thread-2 default formatter is same as the initialized value.</p>

<h3 id="dump">Java Thread Dump</h3>


<p>Java comes with <code>jstack</code> tool through which we can generate thread dump for a java process. This is a two step process.</p>

<ul>
<li>Find out the PID of the java process using <code>ps -eaf | grep java</code> command</li>
<li>Run <code>jstack</code> tool as <code>jstack PID</code> to generate the thread dump output to console, you can append thread dump output to file using command <code>jstack PID &gt;&gt; mydumps.tdump</code></li>
</ul>


<h3 id="deadlock">How to Analytize Deadlock and avoid it in Java</h3>


<p>Deadlock is a programming situation where two or more threads are blocked forever, this situation arises with at least two threads and two or more resources.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">solarex</span><span class="o">.</span><span class="na">threadtest</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadDeadlock</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Object</span> <span class="n">obj1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Object</span> <span class="n">obj2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Object</span> <span class="n">obj3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Thread</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">SyncThread</span><span class="o">(</span><span class="n">obj1</span><span class="o">,</span> <span class="n">obj2</span><span class="o">),</span> <span class="s">&quot;t1&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Thread</span> <span class="n">t2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">SyncThread</span><span class="o">(</span><span class="n">obj2</span><span class="o">,</span> <span class="n">obj3</span><span class="o">),</span> <span class="s">&quot;t2&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Thread</span> <span class="n">t3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">SyncThread</span><span class="o">(</span><span class="n">obj3</span><span class="o">,</span> <span class="n">obj1</span><span class="o">),</span> <span class="s">&quot;t3&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">t1</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">5000</span><span class="o">);</span>
</span><span class='line'>        <span class="n">t2</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">5000</span><span class="o">);</span>
</span><span class='line'>        <span class="n">t3</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">SyncThread</span> <span class="kd">implements</span> <span class="n">Runnable</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Object</span> <span class="n">obj1</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Object</span> <span class="n">obj2</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">SyncThread</span><span class="o">(</span><span class="n">Object</span> <span class="n">o1</span><span class="o">,</span> <span class="n">Object</span> <span class="n">o2</span><span class="o">){</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">obj1</span><span class="o">=</span><span class="n">o1</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">obj2</span><span class="o">=</span><span class="n">o2</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">&quot; acquiring lock on &quot;</span><span class="o">+</span><span class="n">obj1</span><span class="o">);</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="n">obj1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">&quot; acquired lock on &quot;</span><span class="o">+</span><span class="n">obj1</span><span class="o">);</span>
</span><span class='line'>         <span class="n">work</span><span class="o">();</span>
</span><span class='line'>         <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">&quot; acquiring lock on &quot;</span><span class="o">+</span><span class="n">obj2</span><span class="o">);</span>
</span><span class='line'>         <span class="kd">synchronized</span> <span class="o">(</span><span class="n">obj2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">&quot; acquired lock on &quot;</span><span class="o">+</span><span class="n">obj2</span><span class="o">);</span>
</span><span class='line'>            <span class="n">work</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>         <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">&quot; released lock on &quot;</span><span class="o">+</span><span class="n">obj2</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">&quot; released lock on &quot;</span><span class="o">+</span><span class="n">obj1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">&quot; finished execution.&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">work</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">30000</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For analyzing deadlock, we need to look out for the threads with state as <code>BLOCKED</code> and then the resources it’s waiting to lock, every resource has a unique ID using which we can find which thread is already holding the lock on the object.</p>

<p>These are some of the guidelines using which we can avoid most of the deadlock situations.</p>

<ul>
<li><strong>Avoid Nested Locks</strong>: This is the most common reason for deadlocks, avoid locking another resource if you already hold one. It’s almost impossible to get deadlock situation if you are working with only one object lock.</li>
<li><strong>Lock Only What is Required</strong>: You should acquire lock only on the resources you have to work on, for example in above program I am locking the complete Object resource but if we are only interested in one of it’s fields, then we should lock only that specific field not complete object.</li>
<li><strong>Avoid waiting indefinitely</strong>: You can get deadlock if two threads are waiting for each other to finish indefinitely using thread join. If your thread has to wait for another thread to finish, it’s always best to use join with maximum time you want to wait for thread to finish.</li>
</ul>


<h3 id="timer">Java Timer Thread</h3>


<p><code>java.util.Timer</code> is a utility class that can be used to schedule a thread to be executed at certain time in future. Java <code>Timer</code> class can be used to schedule a task to be run one-time or to be run at regular intervals.<code>java.util.TimerTask</code> is an abstract class that implements <code>Runnable</code> interface and we need to extend this class to create our own <code>TimerTask</code> that can be scheduled using java <code>Timer</code> class.Timer class is thread safe and multiple threads can share a single Timer object without need for external synchronization. Timer class uses <code>java.util.TaskQueue</code> to add tasks at given regular interval and at any time there can be only one thread running the <code>TimerTask</code>, for example if you are creating a Timer to run every 10 seconds but single thread execution takes 20 seconds, then Timer object will keep adding tasks to the queue and as soon as one thread is finished, it will notify the queue and another thread will start executing.</p>

<p>Timer class uses Object <strong>wait and notify</strong> methods to schedule the tasks.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">solarex</span><span class="o">.</span><span class="na">threadtest</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Timer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.TimerTask</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyTimerTask</span> <span class="kd">extends</span> <span class="n">TimerTask</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Timer task started at:&quot;</span><span class="o">+</span><span class="k">new</span> <span class="n">Date</span><span class="o">());</span>
</span><span class='line'>        <span class="n">completeTask</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Timer task finished at:&quot;</span><span class="o">+</span><span class="k">new</span> <span class="n">Date</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">completeTask</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">//assuming it takes 20 secs to complete the task</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">20000</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[]){</span>
</span><span class='line'>        <span class="n">TimerTask</span> <span class="n">timerTask</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyTimerTask</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">//running timer task as daemon thread</span>
</span><span class='line'>        <span class="n">Timer</span> <span class="n">timer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Timer</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="n">timer</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(</span><span class="n">timerTask</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">10</span><span class="o">*</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;TimerTask started&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">//cancel after sometime</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">120000</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">timer</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;TimerTask cancelled&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">30000</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//------begin output-----------</span>
</span><span class='line'><span class="n">hrh</span><span class="nd">@Solarex</span><span class="o">:</span><span class="n">Java$</span> <span class="n">java</span> <span class="n">org</span><span class="o">.</span><span class="na">solarex</span><span class="o">.</span><span class="na">threadtest</span><span class="o">.</span><span class="na">MyTimerTask</span>
</span><span class='line'><span class="n">TimerTask</span> <span class="n">started</span>
</span><span class='line'><span class="n">Timer</span> <span class="n">task</span> <span class="n">started</span> <span class="nl">at:</span><span class="n">Thu</span> <span class="n">Oct</span> <span class="mi">16</span> <span class="mi">13</span><span class="o">:</span><span class="mi">55</span><span class="o">:</span><span class="mi">16</span> <span class="n">CST</span> <span class="mi">2014</span>
</span><span class='line'><span class="n">Timer</span> <span class="n">task</span> <span class="n">finished</span> <span class="nl">at:</span><span class="n">Thu</span> <span class="n">Oct</span> <span class="mi">16</span> <span class="mi">13</span><span class="o">:</span><span class="mi">55</span><span class="o">:</span><span class="mi">36</span> <span class="n">CST</span> <span class="mi">2014</span>
</span><span class='line'><span class="n">Timer</span> <span class="n">task</span> <span class="n">started</span> <span class="nl">at:</span><span class="n">Thu</span> <span class="n">Oct</span> <span class="mi">16</span> <span class="mi">13</span><span class="o">:</span><span class="mi">55</span><span class="o">:</span><span class="mi">36</span> <span class="n">CST</span> <span class="mi">2014</span>
</span><span class='line'><span class="n">Timer</span> <span class="n">task</span> <span class="n">finished</span> <span class="nl">at:</span><span class="n">Thu</span> <span class="n">Oct</span> <span class="mi">16</span> <span class="mi">13</span><span class="o">:</span><span class="mi">55</span><span class="o">:</span><span class="mi">56</span> <span class="n">CST</span> <span class="mi">2014</span>
</span><span class='line'><span class="n">Timer</span> <span class="n">task</span> <span class="n">started</span> <span class="nl">at:</span><span class="n">Thu</span> <span class="n">Oct</span> <span class="mi">16</span> <span class="mi">13</span><span class="o">:</span><span class="mi">55</span><span class="o">:</span><span class="mi">56</span> <span class="n">CST</span> <span class="mi">2014</span>
</span><span class='line'><span class="n">Timer</span> <span class="n">task</span> <span class="n">finished</span> <span class="nl">at:</span><span class="n">Thu</span> <span class="n">Oct</span> <span class="mi">16</span> <span class="mi">13</span><span class="o">:</span><span class="mi">56</span><span class="o">:</span><span class="mi">16</span> <span class="n">CST</span> <span class="mi">2014</span>
</span><span class='line'><span class="n">Timer</span> <span class="n">task</span> <span class="n">started</span> <span class="nl">at:</span><span class="n">Thu</span> <span class="n">Oct</span> <span class="mi">16</span> <span class="mi">13</span><span class="o">:</span><span class="mi">56</span><span class="o">:</span><span class="mi">16</span> <span class="n">CST</span> <span class="mi">2014</span>
</span><span class='line'><span class="n">Timer</span> <span class="n">task</span> <span class="n">finished</span> <span class="nl">at:</span><span class="n">Thu</span> <span class="n">Oct</span> <span class="mi">16</span> <span class="mi">13</span><span class="o">:</span><span class="mi">56</span><span class="o">:</span><span class="mi">36</span> <span class="n">CST</span> <span class="mi">2014</span>
</span><span class='line'><span class="n">Timer</span> <span class="n">task</span> <span class="n">started</span> <span class="nl">at:</span><span class="n">Thu</span> <span class="n">Oct</span> <span class="mi">16</span> <span class="mi">13</span><span class="o">:</span><span class="mi">56</span><span class="o">:</span><span class="mi">36</span> <span class="n">CST</span> <span class="mi">2014</span>
</span><span class='line'><span class="n">Timer</span> <span class="n">task</span> <span class="n">finished</span> <span class="nl">at:</span><span class="n">Thu</span> <span class="n">Oct</span> <span class="mi">16</span> <span class="mi">13</span><span class="o">:</span><span class="mi">56</span><span class="o">:</span><span class="mi">56</span> <span class="n">CST</span> <span class="mi">2014</span>
</span><span class='line'><span class="n">Timer</span> <span class="n">task</span> <span class="n">started</span> <span class="nl">at:</span><span class="n">Thu</span> <span class="n">Oct</span> <span class="mi">16</span> <span class="mi">13</span><span class="o">:</span><span class="mi">56</span><span class="o">:</span><span class="mi">56</span> <span class="n">CST</span> <span class="mi">2014</span>
</span><span class='line'><span class="n">TimerTask</span> <span class="n">cancelled</span>
</span><span class='line'><span class="n">Timer</span> <span class="n">task</span> <span class="n">finished</span> <span class="nl">at:</span><span class="n">Thu</span> <span class="n">Oct</span> <span class="mi">16</span> <span class="mi">13</span><span class="o">:</span><span class="mi">57</span><span class="o">:</span><span class="mi">16</span> <span class="n">CST</span> <span class="mi">2014</span>
</span><span class='line'><span class="c1">//------end output--------------</span>
</span></code></pre></td></tr></table></div></figure>


<p>The output confirms that if a task is already executing, Timer will <strong>wait for it to finish and once finished</strong>, it will start again the next task from the queue.</p>

<p>Timer object can be created to run the associated tasks as a daemon thread. Timer <code>cancel()</code> method is used to terminate the timer and discard any scheduled tasks, however it doesn’t interfere with the currently executing task and let it finish. If the timer is run as daemon thread, whether we cancel it or not, it will terminate as soon as all the user threads are finished executing.</p>

<p>Timer class contains several <code>schedule()</code> methods to schedule a task to run once at given date or after some delay. There are several <code>scheduleAtFixedRate()</code> methods to run a task periodically with certain interval.</p>

<p>While scheduling tasks using Timer, you should make sure that time interval is more than normal thread execution, otherwise tasks queue size will keep growing and eventually task will be executing always.</p>

<h3 id="producer">Java Producer Consumer Problem</h3>


<p><code>java.util.concurrent.BlockingQueue</code> is a Queue that supports operations that wait for the queue to become non-empty when retrieving and removing an element, and wait for space to become available in the queue when adding an element.</p>

<p><code>BlockingQueue</code> doesn’t accept null values and throw <code>NullPointerException</code> if you try to store null value in the queue.<code>BlockingQueue</code> implementations are thread-safe. All queuing methods are atomic in nature and use internal locks or other forms of concurrency control.</p>

<p><code>BlockingQueue</code> interface is part of java collections framework and it’s primarily used for implementing producer consumer problem. We don’t need to worry about waiting for the space to be available for producer or object to be available for consumer in <code>BlockingQueue</code> as it’s handled by implementation classes of <code>BlockingQueue</code>.Java provides several <code>BlockingQueue</code> implementations such as <code>ArrayBlockingQueue</code>, <code>LinkedBlockingQueue</code>, <code>PriorityBlockingQueue</code>, <code>SynchronousQueue</code> etc.</p>

<p>While implementing producer consumer problem, we will use <code>ArrayBlockingQueue</code> implementation and following methods are important to know.</p>

<ul>
<li><code>put(E e)</code>: This method is used to insert elements to the queue, if the queue is full it waits for the space to be available.</li>
<li><code>E take()</code>: This method retrieves and remove the element from the head of the queue, if queue is empty it waits for the element to be available.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//Message.java</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Message</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">msg</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Message</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">){</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">msg</span><span class="o">=</span><span class="n">str</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getMsg</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">msg</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Producer.java</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.BlockingQueue</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Producer</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">BlockingQueue</span><span class="o">&lt;</span><span class="n">Message</span><span class="o">&gt;</span> <span class="n">queue</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Producer</span><span class="o">(</span><span class="n">BlockingQueue</span><span class="o">&lt;</span><span class="n">Message</span><span class="o">&gt;</span> <span class="n">q</span><span class="o">){</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">queue</span><span class="o">=</span><span class="n">q</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//produce messages</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">100</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span><span class='line'>            <span class="n">Message</span> <span class="n">msg</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Message</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">+</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>                <span class="n">queue</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Produced &quot;</span><span class="o">+</span><span class="n">msg</span><span class="o">.</span><span class="na">getMsg</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">//adding exit message</span>
</span><span class='line'>        <span class="n">Message</span> <span class="n">msg</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Message</span><span class="o">(</span><span class="s">&quot;exit&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">queue</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Consumer.java</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.BlockingQueue</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Consumer</span> <span class="kd">implements</span> <span class="n">Runnable</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="n">BlockingQueue</span><span class="o">&lt;</span><span class="n">Message</span><span class="o">&gt;</span> <span class="n">queue</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Consumer</span><span class="o">(</span><span class="n">BlockingQueue</span><span class="o">&lt;</span><span class="n">Message</span><span class="o">&gt;</span> <span class="n">q</span><span class="o">){</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">queue</span><span class="o">=</span><span class="n">q</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span><span class="o">{</span>
</span><span class='line'>            <span class="n">Message</span> <span class="n">msg</span><span class="o">;</span>
</span><span class='line'>            <span class="c1">//consuming messages until exit message is received</span>
</span><span class='line'>            <span class="k">while</span><span class="o">((</span><span class="n">msg</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">take</span><span class="o">()).</span><span class="na">getMsg</span><span class="o">()</span> <span class="o">!=</span><span class="s">&quot;exit&quot;</span><span class="o">){</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Consumed &quot;</span><span class="o">+</span><span class="n">msg</span><span class="o">.</span><span class="na">getMsg</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//ProducerConsumerService.java</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.ArrayBlockingQueue</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.BlockingQueue</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProducerConsumerService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//Creating BlockingQueue of size 10</span>
</span><span class='line'>        <span class="n">BlockingQueue</span><span class="o">&lt;</span><span class="n">Message</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayBlockingQueue</span><span class="o">&lt;&gt;(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Producer</span> <span class="n">producer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Producer</span><span class="o">(</span><span class="n">queue</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Consumer</span> <span class="n">consumer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Consumer</span><span class="o">(</span><span class="n">queue</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">//starting producer to produce messages in queue</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="n">producer</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">//starting consumer to consume messages from queue</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="n">consumer</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Producer and Consumer has been started&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3 id="pool">Java Thread Pool</h3>


<p>A thread pool manages the pool of worker threads, it contains a queue that keeps tasks waiting to get executed.</p>

<p>A thread pool manages the collection of <code>Runnable</code> threads and worker threads execute Runnable from the queue.</p>

<p><code>java.util.concurrent.Executors</code> provide implementation of <code>java.util.concurrent.Executor</code> interface to create the thread pool in java.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// WorkerThread.java</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WorkerThread</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">command</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">WorkerThread</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">){</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">command</span><span class="o">=</span><span class="n">s</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()+</span><span class="s">&quot; Start. Command = &quot;</span><span class="o">+</span><span class="n">command</span><span class="o">);</span>
</span><span class='line'>        <span class="n">processCommand</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()+</span><span class="s">&quot; End.&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">processCommand</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">5000</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">command</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//SimpleThreadPool.java</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.ExecutorService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleThreadPool</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Runnable</span> <span class="n">worker</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WorkerThread</span><span class="o">(</span><span class="s">&quot;&quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>            <span class="n">executor</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">worker</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>        <span class="n">executor</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(!</span><span class="n">executor</span><span class="o">.</span><span class="na">isTerminated</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Finished all threads&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Executors class provide simple implementation of <code>ExecutorService</code> using <code>ThreadPoolExecutor</code> but <code>ThreadPoolExecutor</code> provides much more feature than that. We can specify the number of threads that will be alive when we create <code>ThreadPoolExecutor</code> instance and we can limit the size of thread pool and create our own <code>RejectedExecutionHandler</code> implementation to handle the jobs that can’t fit in the worker queue.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// RejectedExecutionHandlerImpl.java</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.RejectedExecutionHandler</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.ThreadPoolExecutor</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RejectedExecutionHandlerImpl</span> <span class="kd">implements</span> <span class="n">RejectedExecutionHandler</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">rejectedExecution</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">r</span><span class="o">,</span> <span class="n">ThreadPoolExecutor</span> <span class="n">executor</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; is rejected&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// MyMonitorThread.java</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.ThreadPoolExecutor</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyMonitorThread</span> <span class="kd">implements</span> <span class="n">Runnable</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ThreadPoolExecutor</span> <span class="n">executor</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">seconds</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">run</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">MyMonitorThread</span><span class="o">(</span><span class="n">ThreadPoolExecutor</span> <span class="n">executor</span><span class="o">,</span> <span class="kt">int</span> <span class="n">delay</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">executor</span> <span class="o">=</span> <span class="n">executor</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">seconds</span><span class="o">=</span><span class="n">delay</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">shutdown</span><span class="o">(){</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">run</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">while</span><span class="o">(</span><span class="n">run</span><span class="o">){</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span>
</span><span class='line'>                    <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;[monitor] [%d/%d] Active: %d, Completed: %d, Task: %d, isShutdown: %s, isTerminated: %s&quot;</span><span class="o">,</span>
</span><span class='line'>                        <span class="k">this</span><span class="o">.</span><span class="na">executor</span><span class="o">.</span><span class="na">getPoolSize</span><span class="o">(),</span>
</span><span class='line'>                        <span class="k">this</span><span class="o">.</span><span class="na">executor</span><span class="o">.</span><span class="na">getCorePoolSize</span><span class="o">(),</span>
</span><span class='line'>                        <span class="k">this</span><span class="o">.</span><span class="na">executor</span><span class="o">.</span><span class="na">getActiveCount</span><span class="o">(),</span>
</span><span class='line'>                        <span class="k">this</span><span class="o">.</span><span class="na">executor</span><span class="o">.</span><span class="na">getCompletedTaskCount</span><span class="o">(),</span>
</span><span class='line'>                        <span class="k">this</span><span class="o">.</span><span class="na">executor</span><span class="o">.</span><span class="na">getTaskCount</span><span class="o">(),</span>
</span><span class='line'>                        <span class="k">this</span><span class="o">.</span><span class="na">executor</span><span class="o">.</span><span class="na">isShutdown</span><span class="o">(),</span>
</span><span class='line'>                        <span class="k">this</span><span class="o">.</span><span class="na">executor</span><span class="o">.</span><span class="na">isTerminated</span><span class="o">()));</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">seconds</span><span class="o">*</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// WorkerPool.java</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.ArrayBlockingQueue</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.ThreadFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.ThreadPoolExecutor</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.TimeUnit</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WorkerPool</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="kd">throws</span> <span class="n">InterruptedException</span><span class="o">{</span>
</span><span class='line'>        <span class="c1">//RejectedExecutionHandler implementation</span>
</span><span class='line'>        <span class="n">RejectedExecutionHandlerImpl</span> <span class="n">rejectionHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RejectedExecutionHandlerImpl</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">//Get the ThreadFactory implementation to use</span>
</span><span class='line'>        <span class="n">ThreadFactory</span> <span class="n">threadFactory</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">defaultThreadFactory</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">//creating the ThreadPoolExecutor</span>
</span><span class='line'>        <span class="n">ThreadPoolExecutor</span> <span class="n">executorPool</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThreadPoolExecutor</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">,</span> <span class="k">new</span> <span class="n">ArrayBlockingQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;(</span><span class="mi">2</span><span class="o">),</span> <span class="n">threadFactory</span><span class="o">,</span> <span class="n">rejectionHandler</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">//start the monitoring thread</span>
</span><span class='line'>        <span class="n">MyMonitorThread</span> <span class="n">monitor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyMonitorThread</span><span class="o">(</span><span class="n">executorPool</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Thread</span> <span class="n">monitorThread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">monitor</span><span class="o">);</span>
</span><span class='line'>        <span class="n">monitorThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">//submit work to the thread pool</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span><span class='line'>            <span class="n">executorPool</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">WorkerThread</span><span class="o">(</span><span class="s">&quot;cmd&quot;</span><span class="o">+</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">30000</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">//shut down the pool</span>
</span><span class='line'>        <span class="n">executorPool</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">//shut down the monitor thread</span>
</span><span class='line'>        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">5000</span><span class="o">);</span>
</span><span class='line'>        <span class="n">monitor</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Notice</span> <span class="n">that</span> <span class="k">while</span> <span class="n">initializing</span> <span class="n">the</span> <span class="n">ThreadPoolExecutor</span><span class="o">,</span> <span class="n">we</span> <span class="n">are</span> <span class="n">keeping</span> <span class="n">initial</span> <span class="n">pool</span> <span class="n">size</span> <span class="n">as</span> <span class="mi">2</span><span class="o">,</span> <span class="n">maximum</span> <span class="n">pool</span> <span class="n">size</span> <span class="n">to</span> <span class="mi">4</span> <span class="n">and</span> <span class="n">work</span> <span class="n">queue</span> <span class="n">size</span> <span class="n">as</span> <span class="mi">2</span><span class="o">.</span> <span class="n">So</span> <span class="k">if</span> <span class="n">there</span> <span class="n">are</span> <span class="mi">4</span> <span class="n">running</span> <span class="n">tasks</span> <span class="n">and</span> <span class="n">more</span> <span class="n">tasks</span> <span class="n">are</span> <span class="n">submitted</span><span class="o">,</span> <span class="n">the</span> <span class="n">work</span> <span class="n">queue</span> <span class="n">will</span> <span class="n">hold</span> <span class="n">only</span> <span class="mi">2</span> <span class="n">of</span> <span class="n">them</span> <span class="n">and</span> <span class="n">rest</span> <span class="n">of</span> <span class="n">them</span> <span class="n">will</span> <span class="n">be</span> <span class="n">handled</span> <span class="n">by</span> <span class="n">RejectedExecutionHandlerImpl</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">Notice</span> <span class="n">the</span> <span class="n">change</span> <span class="n">in</span> <span class="n">active</span><span class="o">,</span> <span class="n">completed</span> <span class="n">and</span> <span class="n">total</span> <span class="n">completed</span> <span class="n">task</span> <span class="n">count</span> <span class="n">of</span> <span class="n">the</span> <span class="n">executor</span><span class="o">.</span> <span class="n">We</span> <span class="n">can</span> <span class="n">invoke</span> <span class="err">``</span><span class="n">shutdown</span><span class="o">()</span><span class="err">``</span> <span class="n">method</span> <span class="n">to</span> <span class="n">finish</span> <span class="n">execution</span> <span class="n">of</span> <span class="n">all</span> <span class="n">the</span> <span class="n">submitted</span> <span class="n">tasks</span> <span class="n">and</span> <span class="n">terminate</span> <span class="n">the</span> <span class="n">thread</span> <span class="n">pool</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<h3 id="future">Java Callable Future</h3>


<p>In last few posts, we learned a lot about java threads but sometimes we wish that <strong>a thread could return some value that we can use</strong>. Java 5 introduced <code>java.util.concurrent.Callable</code> interface in concurrency package that is similar to Runnable interface but it can return any Object and able to throw Exception.</p>

<p>Callable interface use Generic to define the return type of Object. <code>Executors</code> class provide useful methods to execute <code>Callable</code> in a thread pool. Since callable tasks run in parallel, we have to wait for the returned Object. Callable tasks return <code>java.util.concurrent.Future</code> object. Using Future we can find out the status of the Callable task and get the returned Object. It provides <code>get()</code> method that can wait for the Callable to finish and then return the result.</p>

<p>Future provides <code>cancel()</code> method to cancel the associated <code>Callable</code> task. There is an overloaded version of <code>get()</code> method where we can specify the time to wait for the result, it’s useful to avoid current thread getting blocked for longer time. There are <code>isDone()</code> and <code>isCancelled()</code> methods to find out the current status of associated <code>Callable</code> task.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.Callable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.ExecutionException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.ExecutorService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.Future</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyCallable</span> <span class="kd">implements</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">//return the thread name executing this callable task</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[]){</span>
</span><span class='line'>        <span class="c1">//Get ExecutorService from Executors utility class, thread pool size is 10</span>
</span><span class='line'>        <span class="n">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">//create a list to hold the Future object associated with Callable</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Future</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Future</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;();</span>
</span><span class='line'>        <span class="c1">//Create MyCallable instance</span>
</span><span class='line'>        <span class="n">Callable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">callable</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyCallable</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span> <span class="mi">100</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span><span class='line'>            <span class="c1">//submit Callable tasks to be executed by thread pool</span>
</span><span class='line'>            <span class="n">Future</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">future</span> <span class="o">=</span> <span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="n">callable</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">//add Future to the list, we can get return value using Future</span>
</span><span class='line'>            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">future</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="n">Future</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">fut</span> <span class="o">:</span> <span class="n">list</span><span class="o">){</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">//print the return value of Future, notice the output delay in console</span>
</span><span class='line'>                <span class="c1">// because Future.get() waits for task to get completed</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">Date</span><span class="o">()+</span> <span class="s">&quot;::&quot;</span><span class="o">+</span><span class="n">fut</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="o">|</span> <span class="n">ExecutionException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">//shut down the executor service now</span>
</span><span class='line'>        <span class="n">executor</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<h3 id="futuretask">Java FutureTask Example</h3>


<p><code>FutureTask</code> is base concrete implementation of <code>Future</code> interface and provides asynchronous processing. It contains the methods to start and cancel a task and also methods that can return the state of the <code>FutureTask</code> as whether it’s completed or cancelled. We need a callable object to create a future task and then we can use Java Thread Pool Executor to process these asynchronously.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// MyCallable.java</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.Callable</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyCallable</span> <span class="kd">implements</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">long</span> <span class="n">waitTime</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">MyCallable</span><span class="o">(</span><span class="kt">int</span> <span class="n">timeInMillis</span><span class="o">){</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">waitTime</span><span class="o">=</span><span class="n">timeInMillis</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">waitTime</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">//return the thread name executing this callable task</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// FutureTaskExample.java</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.ExecutionException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.ExecutorService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.FutureTask</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.TimeUnit</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.TimeoutException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FutureTaskExample</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">MyCallable</span> <span class="n">callable1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyCallable</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
</span><span class='line'>        <span class="n">MyCallable</span> <span class="n">callable2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyCallable</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">FutureTask</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">futureTask1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FutureTask</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span><span class="n">callable1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">FutureTask</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">futureTask2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FutureTask</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span><span class="n">callable2</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>        <span class="n">executor</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">futureTask1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">executor</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">futureTask2</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span><span class="o">(</span><span class="n">futureTask1</span><span class="o">.</span><span class="na">isDone</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">futureTask2</span><span class="o">.</span><span class="na">isDone</span><span class="o">()){</span>
</span><span class='line'>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Done&quot;</span><span class="o">);</span>
</span><span class='line'>                    <span class="c1">//shut down executor service</span>
</span><span class='line'>                    <span class="n">executor</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'>                    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span><span class="o">(!</span><span class="n">futureTask1</span><span class="o">.</span><span class="na">isDone</span><span class="o">()){</span>
</span><span class='line'>                <span class="c1">//wait indefinitely for future task to complete</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;FutureTask1 output=&quot;</span><span class="o">+</span><span class="n">futureTask1</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Waiting for FutureTask2 to complete&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">futureTask2</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">200L</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span><span class="o">(</span><span class="n">s</span> <span class="o">!=</span><span class="kc">null</span><span class="o">){</span>
</span><span class='line'>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;FutureTask2 output=&quot;</span><span class="o">+</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="o">|</span> <span class="n">ExecutionException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">TimeoutException</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>                <span class="c1">//do nothing</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we run above program, you will notice that it doesn’t print anything for sometime because <code>get()</code> method of <code>FutureTask</code> waits for the task to get completed and then returns the output object. There is an overloaded method also to wait for only specified amount of time and we are using it for futureTask2. Also notice the use of <code>isDone()</code> method to make sure program gets terminated once all the tasks are executed.</p>

<p>Ref:</p>

<ul>
<li><a href="http://www.journaldev.com/1079/java-thread-tutorial">Java Thread and Multithreading Tutorial</a></li>
<li><a href="http://docs.oracle.com/javase/tutorial/essential/concurrency/">Concurrency</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A journey on the Android Main Thread]]></title>
    <link href="http://Solarex.github.io/blog/2014/10/13/android-main-thread/"/>
    <updated>2014-10-13T16:51:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2014/10/13/android-main-thread</id>
    <content type="html"><![CDATA[<p>When facing bugs that were related to how we interact with the main thread, I decided to get a closer look at what the main thread really is.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BigBang</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// The Java universe starts here.</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>All Java programs start with a call to a <code>public static void main()</code> method. This is true for Java Desktop programs, JEE servlet containers, and Android applications.</p>

<p>When the Android system boots, it starts a Linux process called <code>ZygoteInit</code>. This process is a Dalvik VM that loads the <a href="https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/preloaded-classes">most common classes</a> of the Android SDK on a thread, and then waits.</p>

<!-- more -->


<p>When starting a new Android application, the Android system forks the <code>ZygoteInit</code> process. The thread in the child fork stops waiting, and calls <code>ActivityThread.main()</code>.</p>

<h2>Loopers</h2>

<p>Before going any further, we need to look at the <code>Looper</code> class.</p>

<p>Using a looper is a good way to dedicate one thread to process messages serially.</p>

<p>Each looper has a queue of <code>Message</code> objects (a <code>MessageQueue</code>).</p>

<p>A looper has a <code>loop()</code> method that will process each message in the queue, and block when the queue is empty.</p>

<p>The <code>Looper.loop()</code> method code is similar to this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">loop</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Message</span> <span class="n">message</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">next</span><span class="o">();</span> <span class="c1">// blocks if empty.</span>
</span><span class='line'>    <span class="n">dispatchMessage</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>    <span class="n">message</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each looper is associated with one thread. To create a new looper and associate it to the current thread, you must call <code>Looper.prepare()</code>. The loopers are stored in a static <code>ThreadLocal</code> in the <code>Looper</code> class. You can retrieve the <code>Looper</code> associated to the current thread by calling <code>Looper.myLooper()</code>.</p>

<p>The <code>HandlerThread</code> class does everything for you:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">HandlerThread</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HandlerThread</span><span class="o">(</span><span class="s">&quot;SquareHandlerThread&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span> <span class="c1">// starts the thread.</span>
</span><span class='line'><span class="n">Looper</span> <span class="n">looper</span> <span class="o">=</span> <span class="n">thread</span><span class="o">.</span><span class="na">getLooper</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Its code is similar to this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">HandlerThread</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Looper</span> <span class="n">looper</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Looper</span><span class="o">.</span><span class="na">prepare</span><span class="o">();</span> <span class="c1">// Create a Looper and store it in a ThreadLocal.</span>
</span><span class='line'>    <span class="n">looper</span> <span class="o">=</span> <span class="n">Looper</span><span class="o">.</span><span class="na">myLooper</span><span class="o">();</span> <span class="c1">// Retrieve the looper instance from the ThreadLocal, for later use.</span>
</span><span class='line'>    <span class="n">Looper</span><span class="o">.</span><span class="na">loop</span><span class="o">();</span> <span class="c1">// Loop forever.</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Handlers</h2>

<p>A handler is the natural companion to a looper.</p>

<p>A handler has two purposes:</p>

<ul>
<li>Send messages to a looper message queue from any thread.</li>
<li>Hndle messages dequeued by a looper on the thread associated to that looper.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Each handler is associated to one looper.</span>
</span><span class='line'><span class="n">Handler</span> <span class="n">handler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">(</span><span class="n">looper</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleMessage</span><span class="o">(</span><span class="n">Message</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Handle the message on the thread associated to the given looper.</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">what</span> <span class="o">==</span> <span class="n">DO_SOMETHING</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// do something</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create a new message associated to that handler.</span>
</span><span class='line'><span class="n">Message</span> <span class="n">message</span> <span class="o">=</span> <span class="n">handler</span><span class="o">.</span><span class="na">obtainMessage</span><span class="o">(</span><span class="n">DO_SOMETHING</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Add the message to the looper queue.</span>
</span><span class='line'><span class="c1">// Can be called from any thread.</span>
</span><span class='line'><span class="n">handler</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can associate multiple handlers to one looper. The looper delivers the message to <code>message.target</code>.</p>

<p>A popular and simpler way to use a handler is to post a <code>Runnable</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Create a message containing a reference to the runnable and add it to the looper queue</span>
</span><span class='line'><span class="n">handler</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Runs on the thread associated to the looper associated to that handler.</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>A handler can also be created without providing any looper:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// DON&#39;T DO THIS</span>
</span><span class='line'><span class="n">Handler</span> <span class="n">handler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>The handler no argument constructor calls <code>Looper.myLooper()</code> and retrieves the looper associated with the current thread. This may or may not be the thread you actually want the handler to be associated with.</p>

<p>Most of the time, you just want to create a handler to post on the main thread:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Handler</span> <span class="n">handler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">(</span><span class="n">Looper</span><span class="o">.</span><span class="na">getMainLooper</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Back to PSVM
Let&rsquo;s look at <code>ActivityThread.main()</code> again. Here is what it is essentially doing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ActivityThread</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Looper</span><span class="o">.</span><span class="na">prepare</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// You can now retrieve the main looper at any time by calling Looper.getMainLooper().</span>
</span><span class='line'>    <span class="n">Looper</span><span class="o">.</span><span class="na">setMainLooper</span><span class="o">(</span><span class="n">Looper</span><span class="o">.</span><span class="na">myLooper</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Post the first messages to the looper.</span>
</span><span class='line'>    <span class="c1">// { ... }</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Looper</span><span class="o">.</span><span class="na">loop</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you know why this thread is called the main thread :) .</p>

<p>Note: As you would expect, one of the first things that the main thread will do is create the <code>Application</code> and call <code>Application.onCreate()</code>.</p>

<h2>Activities love orientation changes</h2>

<p>Let&rsquo;s start with the activity lifecycle and the magic behind the handling of configuration changes.</p>

<h3>Why it matters</h3>

<p>This article was inspired by a real crash that occurred in Square Register.
A simplified version of the code is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Handler</span> <span class="n">handler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">(</span><span class="n">Looper</span><span class="o">.</span><span class="na">getMainLooper</span><span class="o">());</span>
</span><span class='line'>    <span class="n">handler</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">doSomething</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Uses the activity instance</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we will see, <code>doSomething()</code> can be called after the activity <code>onDestroy()</code> method has been called due to a configuration change. At that point, you should not use the activity instance anymore.</p>

<h3>A refresher on orientation changes</h3>

<p>The device orientation can change at any time. We will simulate an orientation change while the activity is being created using <code>Activity#setRequestedOrientation(int)</code>.</p>

<p>Can you predict the log output when starting this activity in portrait?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;Square&quot;</span><span class="o">,</span> <span class="s">&quot;onCreate()&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">savedInstanceState</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;Square&quot;</span><span class="o">,</span> <span class="s">&quot;Requesting orientation change&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">setRequestedOrientation</span><span class="o">(</span><span class="n">ActivityInfo</span><span class="o">.</span><span class="na">SCREEN_ORIENTATION_LANDSCAPE</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onResume</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onResume</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;Square&quot;</span><span class="o">,</span> <span class="s">&quot;onResume()&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPause</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onPause</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;Square&quot;</span><span class="o">,</span> <span class="s">&quot;onPause()&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDestroy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onDestroy</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;Square&quot;</span><span class="o">,</span> <span class="s">&quot;onDestroy()&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you know the Android lifecycle, you probably predicted this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">onCreate</span><span class="o">()</span>
</span><span class='line'><span class="n">Requesting</span> <span class="n">orientation</span> <span class="n">change</span>
</span><span class='line'><span class="nf">onResume</span><span class="o">()</span>
</span><span class='line'><span class="n">onPause</span><span class="o">()</span>
</span><span class='line'><span class="n">onDestroy</span><span class="o">()</span>
</span><span class='line'><span class="n">onCreate</span><span class="o">()</span>
</span><span class='line'><span class="n">onResume</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Android Lifecycle goes on normally, the activity is created, resumed, and then the orientation change is taken into account and the activity is paused, destroyed, and a new activity is created and resumed.</p>

<h3>Orientation changes and the main thread</h3>

<p>Here is an important detail to remember: an orientation change leads to recreating the activity via a simple post of a message to the main thread looper queue.</p>

<p>Let&rsquo;s look at that by writing a spy that will read the content of the looper queue via reflection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainLooperSpy</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Field</span> <span class="n">messagesField</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Field</span> <span class="n">nextField</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">MessageQueue</span> <span class="n">mainMessageQueue</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">MainLooperSpy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Field</span> <span class="n">queueField</span> <span class="o">=</span> <span class="n">Looper</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&quot;mQueue&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">queueField</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>      <span class="n">messagesField</span> <span class="o">=</span> <span class="n">MessageQueue</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&quot;mMessages&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">messagesField</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>      <span class="n">nextField</span> <span class="o">=</span> <span class="n">Message</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&quot;next&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">nextField</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Looper</span> <span class="n">mainLooper</span> <span class="o">=</span> <span class="n">Looper</span><span class="o">.</span><span class="na">getMainLooper</span><span class="o">();</span>
</span><span class='line'>      <span class="n">mainMessageQueue</span> <span class="o">=</span> <span class="o">(</span><span class="n">MessageQueue</span><span class="o">)</span> <span class="n">queueField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">mainLooper</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">dumpQueue</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Message</span> <span class="n">nextMessage</span> <span class="o">=</span> <span class="o">(</span><span class="n">Message</span><span class="o">)</span> <span class="n">messagesField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">mainMessageQueue</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;MainLooperSpy&quot;</span><span class="o">,</span> <span class="s">&quot;Begin dumping queue&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">dumpMessages</span><span class="o">(</span><span class="n">nextMessage</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;MainLooperSpy&quot;</span><span class="o">,</span> <span class="s">&quot;End dumping queue&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IllegalAccessException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">dumpMessages</span><span class="o">(</span><span class="n">Message</span> <span class="n">message</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IllegalAccessException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">message</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;MainLooperSpy&quot;</span><span class="o">,</span> <span class="n">message</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>      <span class="n">Message</span> <span class="n">next</span> <span class="o">=</span> <span class="o">(</span><span class="n">Message</span><span class="o">)</span> <span class="n">nextField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>      <span class="n">dumpMessages</span><span class="o">(</span><span class="n">next</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the message queue is merely a linked list where each message has a reference to the next message.</p>

<p>We log the content of the queue right after the orientation change:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">MainLooperSpy</span> <span class="n">mainLooperSpy</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MainLooperSpy</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;Square&quot;</span><span class="o">,</span> <span class="s">&quot;onCreate()&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">savedInstanceState</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;Square&quot;</span><span class="o">,</span> <span class="s">&quot;Requesting orientation change&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">setRequestedOrientation</span><span class="o">(</span><span class="n">ActivityInfo</span><span class="o">.</span><span class="na">SCREEN_ORIENTATION_LANDSCAPE</span><span class="o">);</span>
</span><span class='line'>      <span class="n">mainLooperSpy</span><span class="o">.</span><span class="na">dumpQueue</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">onCreate</span><span class="o">()</span>
</span><span class='line'><span class="n">Requesting</span> <span class="n">orientation</span> <span class="n">change</span>
</span><span class='line'><span class="n">Begin</span> <span class="n">dumping</span> <span class="n">queue</span>
</span><span class='line'><span class="o">{</span> <span class="n">what</span><span class="o">=</span><span class="mi">118</span> <span class="n">when</span><span class="o">=-</span><span class="mi">94</span><span class="n">ms</span> <span class="n">obj</span><span class="o">={</span><span class="mf">1.0</span> <span class="mi">208</span><span class="n">mcc15mnc</span> <span class="n">en_US</span> <span class="n">ldltr</span> <span class="n">sw360dp</span> <span class="n">w598dp</span> <span class="n">h335dp</span> <span class="mi">320</span><span class="n">dpi</span> <span class="n">nrml</span> <span class="n">land</span> <span class="n">finger</span> <span class="o">-</span><span class="n">keyb</span><span class="o">/</span><span class="n">v</span><span class="o">/</span><span class="n">h</span> <span class="o">-</span><span class="n">nav</span><span class="o">/</span><span class="n">h</span> <span class="n">s</span><span class="o">.</span><span class="mi">44</span><span class="o">?</span><span class="n">spn</span><span class="o">}</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="n">what</span><span class="o">=</span><span class="mi">126</span> <span class="n">when</span><span class="o">=-</span><span class="mi">32</span><span class="n">ms</span> <span class="n">obj</span><span class="o">=</span><span class="n">ActivityRecord</span><span class="o">{</span><span class="mi">41</span><span class="n">fd2b48</span> <span class="n">token</span><span class="o">=</span><span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">BinderProxy</span><span class="err">@</span><span class="mi">41</span><span class="n">fcce50</span> <span class="n">no</span> <span class="n">component</span> <span class="n">name</span><span class="o">}</span> <span class="o">}</span>
</span><span class='line'><span class="n">End</span> <span class="n">dumping</span> <span class="n">queue</span>
</span></code></pre></td></tr></table></div></figure>


<p>A quick look at the <code>ActivityThread</code> class tells us what those 118 and 126 messages are:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">ActivityThread</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">class</span> <span class="nc">H</span> <span class="kd">extends</span> <span class="n">Handler</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">CONFIGURATION_CHANGED</span>   <span class="o">=</span> <span class="mi">118</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">RELAUNCH_ACTIVITY</span>       <span class="o">=</span> <span class="mi">126</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Requesting an orientation change added <code>CONFIGURATION_CHANGED</code> and a <code>RELAUNCH_ACTIVITY</code> message to the main thread looper queue.</p>

<p>Let&rsquo;s take a step back and think about what&rsquo;s going on:</p>

<p>When the activity starts for the first time, the queue is empty. The message currently being executed is <code>LAUNCH_ACTIVITY</code>, which creates the activity instance, calls <code>onCreate()</code> and then <code>onResume()</code> in a row. Then only the main looper processes the next message in the queue.</p>

<p>When a device orientation change is detected, a <code>RELAUNCH_ACTIVITY</code> is posted to the queue.</p>

<p>When that message is processed, it:</p>

<ul>
<li>calls <code>onSaveInstanceState()</code>, <code>onPause()</code>, <code>onDestroy()</code> on the old activity instance,</li>
<li>creates a new activity instance,</li>
<li>calls <code>onCreate()</code> and <code>onResume()</code> on that new activity instance.</li>
</ul>


<p>All that in one message handling. Any message you post in the meantime will be handled after <code>onResume()</code> has been called.</p>

<h3>Tying it all together</h3>

<p>What could happen if you post to a handler in <code>onCreate()</code> during an orientation change? Let&rsquo;s look at the two cases, right before and right after the orientation change:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">MainLooperSpy</span> <span class="n">mainLooperSpy</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MainLooperSpy</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;Square&quot;</span><span class="o">,</span> <span class="s">&quot;onCreate()&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">savedInstanceState</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Handler</span> <span class="n">handler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">(</span><span class="n">Looper</span><span class="o">.</span><span class="na">getMainLooper</span><span class="o">());</span>
</span><span class='line'>      <span class="n">handler</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;Square&quot;</span><span class="o">,</span> <span class="s">&quot;Posted before requesting orientation change&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;Square&quot;</span><span class="o">,</span> <span class="s">&quot;Requesting orientation change&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">setRequestedOrientation</span><span class="o">(</span><span class="n">ActivityInfo</span><span class="o">.</span><span class="na">SCREEN_ORIENTATION_LANDSCAPE</span><span class="o">);</span>
</span><span class='line'>      <span class="n">handler</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;Square&quot;</span><span class="o">,</span> <span class="s">&quot;Posted after requesting orientation change&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>      <span class="n">mainLooperSpy</span><span class="o">.</span><span class="na">dumpQueue</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onResume</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onResume</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;Square&quot;</span><span class="o">,</span> <span class="s">&quot;onResume()&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPause</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onPause</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;Square&quot;</span><span class="o">,</span> <span class="s">&quot;onPause()&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDestroy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onDestroy</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;Square&quot;</span><span class="o">,</span> <span class="s">&quot;onDestroy()&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">onCreate</span><span class="o">()</span>
</span><span class='line'><span class="n">Requesting</span> <span class="n">orientation</span> <span class="n">change</span>
</span><span class='line'><span class="n">Begin</span> <span class="n">dumping</span> <span class="n">queue</span>
</span><span class='line'><span class="o">{</span> <span class="n">what</span><span class="o">=</span><span class="mi">0</span> <span class="n">when</span><span class="o">=-</span><span class="mi">129</span><span class="n">ms</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="n">what</span><span class="o">=</span><span class="mi">118</span> <span class="n">when</span><span class="o">=-</span><span class="mi">96</span><span class="n">ms</span> <span class="n">obj</span><span class="o">={</span><span class="mf">1.0</span> <span class="mi">208</span><span class="n">mcc15mnc</span> <span class="n">en_US</span> <span class="n">ldltr</span> <span class="n">sw360dp</span> <span class="n">w598dp</span> <span class="n">h335dp</span> <span class="mi">320</span><span class="n">dpi</span> <span class="n">nrml</span> <span class="n">land</span> <span class="n">finger</span> <span class="o">-</span><span class="n">keyb</span><span class="o">/</span><span class="n">v</span><span class="o">/</span><span class="n">h</span> <span class="o">-</span><span class="n">nav</span><span class="o">/</span><span class="n">h</span> <span class="n">s</span><span class="o">.</span><span class="mi">46</span><span class="o">?</span><span class="n">spn</span><span class="o">}</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="n">what</span><span class="o">=</span><span class="mi">126</span> <span class="n">when</span><span class="o">=-</span><span class="mi">69</span><span class="n">ms</span> <span class="n">obj</span><span class="o">=</span><span class="n">ActivityRecord</span><span class="o">{</span><span class="mi">41</span><span class="n">fd6b68</span> <span class="n">token</span><span class="o">=</span><span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">BinderProxy</span><span class="err">@</span><span class="mi">41</span><span class="n">fd0ae0</span> <span class="n">no</span> <span class="n">component</span> <span class="n">name</span><span class="o">}</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="n">what</span><span class="o">=</span><span class="mi">0</span> <span class="n">when</span><span class="o">=-</span><span class="mi">6</span><span class="n">ms</span> <span class="o">}</span>
</span><span class='line'><span class="n">End</span> <span class="n">dumping</span> <span class="n">queue</span>
</span><span class='line'><span class="nf">onResume</span><span class="o">()</span>
</span><span class='line'><span class="n">Posted</span> <span class="n">before</span> <span class="n">requesting</span> <span class="n">orientation</span> <span class="n">change</span>
</span><span class='line'><span class="nf">onPause</span><span class="o">()</span>
</span><span class='line'><span class="n">onDestroy</span><span class="o">()</span>
</span><span class='line'><span class="n">onCreate</span><span class="o">()</span>
</span><span class='line'><span class="n">onResume</span><span class="o">()</span>
</span><span class='line'><span class="n">Posted</span> <span class="n">after</span> <span class="n">requesting</span> <span class="n">orientation</span> <span class="n">change</span>
</span></code></pre></td></tr></table></div></figure>


<p>To sum things up: at the end on <code>onCreate()</code>, the queue contained four messages. The first was the post before the orientation change, then the two messages related to the orientation change, and then only the post after the orientation change. The logs show that these were executed in order.</p>

<p>Therefore, any message posted before the orientation change will be handled before <code>onPause()</code> of the leaving activity, and any message posted after the orientation change will be handled after <code>onResume()</code> of the incoming activity.</p>

<p>The practical implication is that when you post a message, you have no guarantee that the activity instance that existed at the time it was sent will still be running when the message is handled (even if you post from <code>onCreate()</code> or <code>onResume()</code>). If your message holds a reference to a view or an activity, the activity won&rsquo;t be garbage collected until the message is handled.</p>

<h3>What could you do?</h3>

<h4>The real fix</h4>

<p>Stop calling <code>handler.post()</code> when you are already on the main thread. In most cases, <code>handler.post()</code> is used as a quick fix to ordering problems. Fix your architecture instead of messing it up with random <code>handler.post()</code> calls.</p>

<h4>If you have a good reason to post</h4>

<p>Make sure your message does not hold a reference to an activity, as you would do for a background operation.</p>

<h4>If you really need that activity reference</h4>

<p>Remove the message from the queue with <code>handler.removeCallbacks()</code> in the activity <code>onPause()</code>.</p>

<h4>If you want to get fired</h4>

<p>Use <code>handler.postAtFrontOfQueue()</code> to make sure a message posted before <code>onPause()</code> is always handled before <code>onPause()</code>. Your code will become really hard to read and understand. Seriously, don&rsquo;t.</p>

<h4>A word on <code>runOnUiThread()</code></h4>

<p>Did you notice that we created a handler and used <code>handler.post()</code> instead of directly calling <code>Activity.runOnUiThread()</code>?</p>

<p>Here is why:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Activity</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">runOnUiThread</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">action</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">()</span> <span class="o">!=</span> <span class="n">mUiThread</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mHandler</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="n">action</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">action</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unlike <code>handler.post()</code>, <code>runOnUiThread()</code> does not post the runnable if the current thread is already the main thread. Instead, it calls <code>run()</code> synchronously.</p>

<h2>Services</h2>

<p>There is a common misconception that needs to die: a service does not run on a background thread.</p>

<p>All service lifecycle methods (<code>onCreate()</code>, <code>onStartCommand()</code>, etc) run on the main thread (the very same thread that&rsquo;s used to play funky animations in your activities).</p>

<p>Whether you are in a service or an activity, long tasks must be executed in a dedicated background thread. This background thread can live as long as the process of your app lives, even when your activities are long gone.</p>

<p>However, at any time the Android system can decide to kill the app process. A service is a way to ask the system to let us live if possible and be polite by letting the service know before killing the process.</p>

<p>Side note: When an <code>IBinder</code> returned from <code>onBind()</code> receives a call from another process, the method will be executed in a background thread.</p>

<p>Take the time to read the Service documentation &mdash; it&rsquo;s pretty good.</p>

<h2>IntentService</h2>

<p>IntentService provides a simple way to serially process a queue of intents on a background thread.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyService</span> <span class="kd">extends</span> <span class="n">IntentService</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">MyService</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">(</span><span class="s">&quot;MyService&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onHandleIntent</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// This is called on a background thread.</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Internally, it uses a <code>Looper</code> to handle the intents on a dedicated <code>HandlerThread</code>. When the service is destroyed, the looper lets you finish handling the current intent, and then the background thread terminates.</p>

<h2>Conclusion</h2>

<p>Most Android lifecycle methods are called on the main thread. Think of these callbacks as simple messages sent to a looper queue.</p>

<p>This article wouldn&rsquo;t be complete without the reminder that goes into almost every Android dev article: Do not block the main thread.</p>

<p>REF:<a href="http://corner.squareup.com/2013/10/android-main-thread-1.html">A journey on the Android Main Thread</a>,<a href="http://corner.squareup.com/2013/12/android-main-thread-2.html">A journey on the Android Main Thread &ndash; Lifecycle bits</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro to Android Loopers and Handlers]]></title>
    <link href="http://Solarex.github.io/blog/2014/10/13/android-looper-handler/"/>
    <updated>2014-10-13T11:24:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2014/10/13/android-looper-handler</id>
    <content type="html"><![CDATA[<p>What can you do with <code>Loopers</code> and <code>Handlers</code>? Basically, they implement a common concurrency pattern that I call the <code>Pipeline Thread</code>. Here’s how it works:</p>

<ul>
<li>The Pipeline Thread holds a queue of tasks which are just some units of work that can be executed or processed.</li>
<li>Other threads can safely push new tasks into the Pipeline Thread’s queue at any time.</li>
<li>The Pipeline Thread processes the queued tasks one after another. If there are no tasks queued, it blocks until a task appears in the queue.</li>
<li>Sometimes tasks can called messages and other names.</li>
</ul>


<!-- more -->


<p>我们能用<code>Loopers</code>和<code>Handlers</code>来干什么？这两个类实现了一种通用的并发模型，我把它叫做：Pipeline 线程。它是这样工作的：</p>

<ul>
<li>Pipeline 线程持有一个任务队列，这些任务就是一些可以执行的工作单元</li>
<li>其他线程可以自由的将任务加到Pipeline线程的任务队列中去</li>
<li>Pipeline线程就按次序一个一个执行任务，如果任务队列中没有任务了，它就会自动阻塞直到有任务到来</li>
<li>有些时候，任务可以叫做消息（messages）或者其他名字</li>
</ul>


<p><code>Looper</code> is a class that turns a thread into a <code>Pipeline Thread</code> and <code>Handler</code> gives you a mechanism to push tasks into it from any other threads.The <code>Looper</code> is named so because it implements the loop – takes the next task, executes it, then takes the next one and so on. The <code>Handler</code> is called a handler because someone could not invent a better name.</p>

<p>Looper类可以将一个线程转换成Pipeline线程，而Handler提供了一种机制，你可以通过它将任务添加到Pipeline线程中。Looper之所以这么命名是因为它实现了循环——取一个task执行，然后再取下一个task执行，如此循环；Handler如此命名是因为他们无法想出一个更好的名字了~</p>

<p>Here’s what you should put into a Thread&rsquo;s <code>run()</code> method to turn it into a Pipeline Thread and to create a <code>Handler</code> so that other threads can assign tasks to it:</p>

<p>下面就是你需要添加到Thread类的run方法中的代码来创建一个你自己的Pipeline线程，并创建一个<code>Handler</code>以便其他线程可以将任务分发到此Pipeline线程中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// preparing a looper on current thread</span>
</span><span class='line'>    <span class="c1">// the current thread is being detected implicitly</span>
</span><span class='line'>    <span class="n">Looper</span><span class="o">.</span><span class="na">prepare</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// now, the handler will automatically bind to the</span>
</span><span class='line'>    <span class="c1">// Looper that is attached to the current thread</span>
</span><span class='line'>    <span class="c1">// You don&#39;t need to specify the Looper explicitly</span>
</span><span class='line'>    <span class="n">handler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// After the following line the thread will start</span>
</span><span class='line'>    <span class="c1">// running the message loop and will not normally</span>
</span><span class='line'>    <span class="c1">// exit the loop unless a problem happens or you</span>
</span><span class='line'>    <span class="c1">// quit() the looper (see below)</span>
</span><span class='line'>    <span class="n">Looper</span><span class="o">.</span><span class="na">loop</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;halted due to an error&quot;</span><span class="o">,</span> <span class="n">t</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After that, you can just pass the handler to any other thread. It has a thread-safe interface that includes many operations, but the most straightforward ones are <code>postMessage()</code> and its relatives.</p>

<p>然后，你只要将这个handler对象传到其他任何线程中去，它有一个线程安全的接口，包括了很多操作，但是最主要的操作就是postMessage()以及相关的方法了。</p>

<p>For example, imagine another thread has a reference to the handler that was created in our Pipeline Thread. Here’s how that other thread can schedule an operation to be executed in the Pipeline Thread:</p>

<p>想象一下，一个线程A持有了handler对象的引用，此handler是在Pipeline线程中创建的，下面代码就可以让这个线程A在Pipeline线程中执行操作了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">handler</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// this will be done in the Pipeline Thread</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>By the way, the UI thread has a <code>Looper</code> created for it implicitly, so you can just create a <code>Handler</code> in activity&rsquo;s <code>onCreate()</code> and it will work fine:</p>

<p>UI线程拥有一个Looper（可以通过<code>Looper.getMainLooper()</code>方法获取，判断一个线程是否为主线程可以使用<code>Looper.getLooper() == Looper.getMainLooper()</code>来判断）。所以，你可以在<code>Activity</code>的<code>onCreate()</code>方法中直接新建一个handler对象：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>    <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">main</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Create the Handler. It will implicitly bind to the Looper</span>
</span><span class='line'>    <span class="c1">// that is internally created for this thread (since it is the UI thread)</span>
</span><span class='line'>    <span class="n">handler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>什么时候使用多线程:</p>

<ul>
<li>耗时操作使用多线程, 耗时操作放在UI线程中会导致用户的操作无法得到响应.</li>
<li>阻塞操作使用多线程, 理由同上.</li>
<li>多核CPU的设备使用多线程, 可以有效提高CPU的利用率.</li>
<li>并行操作使用多线程.</li>
</ul>


<p>android中的多线程模型主要涉及的类有:Looper, Handler, MessageQueue, Message等.</p>

<p>Looper类用来创建消息队列. 每个线程最多只能有一个消息队列, android中UI线程默认具有消息队列, 但非UI线程在默认情况下是不具备消息队列的. 如果需要在非UI线程中开启消息队列, 需要调用<code>Looper.prepare()</code>方法, 在该方法的执行过程中会创建一个<code>Looper</code>对象, 而<code>Looper</code>的构造函数中会创建一个<code>MessageQueue</code> instance(Looper的构造函数是私有的, 在Looper类之外无法创建其对象).  此后再为该线程绑定一个Handler instance, 然后调用Looper.loop()方法, 就可以不断的从消息队列中取出消息和处理消息了. <code>Looper.myLooper()</code>方法可以得到线程的Looper对象, 如果为null, 说明此时该线程尚未开启消息队列.</p>

<p>Handler类用于处理消息. 该类具有四个构造函数:</p>

<ul>
<li><code>public Handler()</code>. 创建好的<code>Handler</code> instance将绑定在代码所在的线程的消息队列上, 因此一定要确定该线程开启了消息队列, 否则程序将发生错误. 使用这个构造函数创建<code>Handler</code> instance, 一般来说, 我们需要重写<code>Hanler</code>类的<code>handleMessage()</code>方法, 以便在之后的消息处理时调用.</li>
<li><code>public Handler(Callback callback)</code>. <code>Callback</code>是<code>Handler</code>内部定义的一个接口, 因此想要使用这个构造函数创建<code>Handler</code>对象, 需要自定义一个类实现<code>Callback</code>接口, 并重写接口中定义的<code>handleMessage()</code>方法. 这个构造函数其实与无参的构造函数类似, 也要确保代码所在的线程开启了消息队列. 不同的是在之后处理消息时, 将调用<code>callback</code>的<code>handleMessage()</code>方法, 而不是<code>Handler</code>对象的<code>handleMssage()</code>方法.</li>
<li><code>public Handler(Looper looper)</code>. 这个构造函数表示创建一个<code>Handler</code> instance, 并将其绑定在looper所在的线程上. 此时looper不能为null. 此时一般也需要重写<code>Hanler</code>类的<code>handleMessage()</code>方法</li>
<li><code>public Handler(Looper looper, Callback callback)</code>. 可以结合2和3理解.</li>
</ul>


<p><code>MessageQueue</code>类用于表示消息队列. 队列中的每一个Message都有一个when字段, 这个字段用来决定Message应该何时出对处理. 消息队列中的每一个Message根据when字段的大小由小到大排列, 排在最前面的消息会首先得到处理, 因此可以说消息队列并不是一个严格的先进先出的队列.</p>

<p><code>Message</code>类用于表示消息. <code>Message</code>对象可以通过arg1, arg2, obj字段和<code>setData()</code>携带数据, 此外还具有很多字段. when字段决定Message应该何时处理, target字段用来表示将由哪个Handler对象处理这个消息, next字段表示在消息队列中排在这个Message之后的下一个Message, callback字段如果不为null表示这个Message包装了一个runnable对象, what字段表示code, 即这个消息具体是什么类型的消息. 每个what都在其handler的namespace中, 我们只需要确保将由同一个handler处理的消息的what属性不重复就可以.</p>

<p>将消息压入消息队列: <code>Message</code>对象的<code>target</code>字段关联了哪个线程的消息队列, 这个消息就会被压入哪个线程的消息队列中.</p>

<ul>
<li>调用<code>Handler</code>类中以<code>send</code>开头的方法可以将<code>Message</code>对象压入消息队列中, 调用Handler类中以post开头的方法可以将一个runnable对象包装在一个Message对象中, 然后再压入消息队列, 此时入队的Message其callback字段不为null, 值就是这个runnable对象. 调用<code>Handler</code>对象的这些方法入队的<code>Message</code>, 其target属性会被赋值为这个handler对象.</li>
<li>调用<code>Message</code>对象的<code>sendToTarget()</code>方法可以将其本身压入与其target字段(即handler对象)所关联的消息队列中.</li>
</ul>


<p>将未来得及处理的消息从消息队列中删除:调用Handler对象中以remove开头的方法就可以.</p>

<p>从消息队列中取出消息并处理消息: 所有在消息队列中的消息, 都具有target字段. 消息是在target所关联的线程上被取出和处理的.</p>

<ul>
<li>如果取出的<code>Message</code>对象的callback字段不为null, 那么就调用<code>callback</code>字段的<code>run()</code>方法(callback字段的类型是runnable). 注意此时并不开启一个新的线程运行run()方法, 而是直接在handler对象(即<code>Message</code>的target字段)所关联的线程上运行.</li>
<li>如果取出的Message对象的callback字段为null, 且<code>Handler</code>对象中的callback字段也为null, 那么这个消息将由<code>Handler</code>对象的<code>handleMessage(msg)</code>方法处理. 注意Message对象的callback字段是Runnable类型的而Handler对象的callback字段是Callback类型的, Handler对象的callback字段是在创建Handler instance的时候指定的, 如果没有指定则这个字段为null, 详见Handler类的四个构造方法.</li>
<li>如果取出的<code>Message</code>对象的callback字段为null, 且Handler对象中的callback字段不为null, 那么这个消息将由<code>Handler</code>对象中的callback字段的handleMessage方法处理.</li>
</ul>


<p>线程间通信: 有了以上的叙述, 线程间的通信也就好理解了. 假如一个handler关联了A线程上的消息队列, 那么我们可以在B线程上调用handler的相关方法向A线程上的消息队列压入一个Message, 这个Message将在A线程上得到处理.</p>

<p>REF:<a href="http://mindtherobot.com/blog/159/android-guts-intro-to-loopers-and-handlers/">Android Guts: Intro to Loopers and Handlers</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android反编译]]></title>
    <link href="http://Solarex.github.io/blog/2014/10/12/android-decompile/"/>
    <updated>2014-10-12T09:21:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2014/10/12/android-decompile</id>
    <content type="html"><![CDATA[<p>有时候在Google Play Store看到一些有趣的应用，或者对有些应用的资源图片之类的很感兴趣，这时候就需要用到Android反编译APK的一些工具了。</p>

<!-- more -->


<p>在Google Play上安装应用默认安装完成后是不保留应用apk文件的，要下载apk文件，可以从<a href="http://apkleecher.com/">Online APK Downloader</a>或<a href="http://apps.evozi.com/apk-downloader/">Apk Downloader</a>下载。</p>

<p>其实反编译APK主要用到3个工具，<a href="https://code.google.com/p/android-apktool/">apktool</a>用来获取资源文件，<a href="https://code.google.com/p/dex2jar/">dex2jar</a>用来将dex文件转换为jar文件格式，<a href="http://jd.benow.ca/">jd-gui</a>用来查看jar文件中源码。</p>

<ul>
<li>获取资源文件<code>java -jar apktool.jar d example.apk</code></li>
<li>获取jar文件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mv example.apk example.zip
</span><span class='line'>unzip example.zip
</span><span class='line'>dex2jar.sh classes.dex
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>使用jd-dui查看jar文件<code>jd-gui classes.jar</code></li>
</ul>


<p>上述工具在linux平台下的我已经打包了，可以在<a href="http://Solarex.github.io/downloads/files/decompile.tgz">这里</a>下载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving bitbucket repo to github]]></title>
    <link href="http://Solarex.github.io/blog/2014/09/30/moving-bitbucket-repo-to-github/"/>
    <updated>2014-09-30T15:38:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2014/09/30/moving-bitbucket-repo-to-github</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://bitbucket.org/username/repos.git local_dir
</span><span class='line'><span class="nb">cd </span>local_dir
</span><span class='line'>git remote rename origin bitbucket
</span><span class='line'>git remote add origin git@github.com:username/repos.git
</span><span class='line'>git push -u origin master
</span><span class='line'>git remote rm bitbucket
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Guides]Animation and Graphics]]></title>
    <link href="http://Solarex.github.io/blog/2014/09/28/android-guide-animation-and-graphics/"/>
    <updated>2014-09-28T06:21:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2014/09/28/android-guide-animation-and-graphics</id>
    <content type="html"><![CDATA[<center><p><img src="http://Solarex.github.io/images/android_robot.png" width="255" height="300"></p></center>


<p>Android provides a variety of powerful APIs for applying animation to UI elements and drawing custom 2D and 3D graphics.</p>

<!-- more -->


<p>// todo</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Snippets]]></title>
    <link href="http://Solarex.github.io/blog/2014/09/27/android-snippets/"/>
    <updated>2014-09-27T12:50:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2014/09/27/android-snippets</id>
    <content type="html"><![CDATA[<center><p><img src="http://Solarex.github.io/images/android_robot.png" width="255" height="300"></p></center>




<script src="https://gist.github.com/flyfire/43442fbd80367f18ea86.js"></script>


<p></p>

<!-- more -->




<script src="https://gist.github.com/flyfire/2bced0bc7b19d20bd8ab.js"></script>




<script src="https://gist.github.com/flyfire/98a8b9b54c59276ed615.js"></script>




<script src="https://gist.github.com/flyfire/882aa9f2ea02462d6a2c.js"></script>




<script src="https://gist.github.com/flyfire/9760733.js"></script>




<script src="https://gist.github.com/flyfire/90a2d6b78f0273f7d395.js"></script>




<script src="https://gist.github.com/flyfire/7112ce9e1d66d85a2500.js"></script>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// show fullscreen</span>
</span><span class='line'><span class="n">requestWindowFeature</span><span class="o">(</span><span class="n">Window</span><span class="o">.</span><span class="na">FEATURE_NO_TITLE</span><span class="o">);</span>
</span><span class='line'><span class="n">getWindow</span><span class="o">().</span><span class="na">setFlags</span><span class="o">(</span><span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">FLAG_FULLSCREEN</span><span class="o">,</span> <span class="n">WindowManager</span><span class="o">.</span><span class="na">LayoutParams</span><span class="o">.</span><span class="na">FLAG_FULLSCREEN</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<script src="https://gist.github.com/flyfire/2b5c7836f54d0fed56ac.js"></script>




<script src="https://gist.github.com/flyfire/7149f493c1d357748535.js"></script>




<script src="https://gist.github.com/flyfire/8752caf631e126de99fe.js"></script>




<script src="https://gist.github.com/flyfire/53956718df22613f53dc.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Guides]App Component]]></title>
    <link href="http://Solarex.github.io/blog/2014/09/21/android-guide-app-component/"/>
    <updated>2014-09-21T12:04:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2014/09/21/android-guide-app-component</id>
    <content type="html"><![CDATA[<center><p><img src="http://Solarex.github.io/images/android_robot.png" width="255" height="300"></p></center>


<p>TL,DR;</p>

<!-- more -->


<p>Once installed on a device, each Android application lives in its own security sandbox:</p>

<ul>
<li>The Android operating system is a multi-user Linux system in which each application is a different user.</li>
<li>By default, the system assigns each application a unique Linux user ID (the ID is used only by the system and is unknown to the application). The system sets permissions for all the files in an application so that only the user ID assigned to that application can access them.</li>
<li>Each process has its own virtual machine (VM), so an application&rsquo;s code runs in isolation from other applications.每个进程都有自己的虚拟机，应用运行彼此隔离。</li>
<li>By default, every application runs in its own Linux process. Android starts the process when any of the application&rsquo;s components need to be executed, then shuts down the process when it&rsquo;s no longer needed or when the system must recover memory for other applications.每个应用默认运行在自己的Linux进程中，当应用中的组建被激活时进程启动，当需要为其他应用恢复内存时杀死进程。</li>
</ul>


<p>There are ways for an application to share data with other applications and for an application to access system services:</p>

<ul>
<li>It&rsquo;s possible to arrange for two applications to share the same Linux user ID, in which case they are able to access each other&rsquo;s files. To conserve system resources, applications with the same user ID can also arrange to run in the same Linux process and share the same VM (the applications must also be signed with the same certificate).通过sharedUid方式来共享数据。</li>
<li>An application can request permission to access device data such as the user&rsquo;s contacts, SMS messages, the mountable storage (SD card), camera, Bluetooth, and more. All application permissions must be granted by the user at install time.应用可以通过申请权限来访问其他应用的数据。</li>
</ul>


<p>There are four different types of application components. Each type serves a distinct purpose and has a distinct lifecycle that defines how the component is created and destroyed.Here are the four types of application components:</p>

<ul>
<li>Activities:An activity represents a single screen with a user interface.An activity is implemented as a subclass of Activity.Activity是一个用户界面。</li>
<li>Services:A service is a component that runs in the background to perform long-running operations or to perform work for remote processes. A service does not provide a user interface.A service is implemented as a subclass of Service.Service是在后台运行的组件，不提供用户界面。</li>
<li>Content providers:A content provider manages a shared set of application data. You can store the data in the file system, an SQLite database, on the web, or any other persistent storage location your application can access. Through the content provider, other applications can query or even modify the data (if the content provider allows it).Content providers are also useful for reading and writing data that is private to your application and not shared.A content provider is implemented as a subclass of ContentProvider and must implement a standard set of APIs that enable other applications to perform transactions. 一个ContentProvider管理共享的数据，可以把数据保存在文件系统中，SQLite数据库中或者在网上或者其他你的应用程序可以访问到的用于持久化数据的位置。其他应用如果有相关权限可以通过ContentProvider来查询或者修改数据。</li>
<li>Broadcast receivers:A broadcast receiver is a component that responds to system-wide broadcast announcements.Although broadcast receivers don&rsquo;t display a user interface, they may create a status bar notification to alert the user when a broadcast event occurs. More commonly, though, a broadcast receiver is just a &ldquo;gateway&rdquo; to other components and is intended to do a very minimal amount of work. For instance, it might initiate a service to perform some work based on the event.A broadcast receiver is implemented as a subclass of <code>BroadcastReceiver</code> and each broadcast is delivered as an <code>Intent</code> object.一个Broadcast receiver会对系统范围内的广播进行响应。Broadcast receiver不会显示用户界面，但可以创建一个状态栏通知来告诉发生了广播事件。</li>
</ul>


<p>When the system starts a component, it starts the process for that application (if it&rsquo;s not already running) and instantiates the classes needed for the component.系统启动一个组件时，就会启动组件所在引用的进程并实例化组件所需要的相关类。 For example, if your application starts the activity in the camera application that captures a photo, that activity runs in the process that belongs to the camera application, not in your application&rsquo;s process. Therefore, unlike applications on most other systems, Android applications don&rsquo;t have a single entry point (there&rsquo;s no main() function, for example).</p>

<p>Three of the four component types—<code>activities</code>, <code>services</code>, and <code>broadcast receivers</code>—are activated by an asynchronous message called an intent. Intents bind individual components to each other at runtime (you can think of them as the messengers that request an action from other components), whether the component belongs to your application or another.<code>Activity</code>,<code>Service</code>,<code>Broadcast receiver</code>可以通过<code>Intent</code>来被激活。</p>

<p>An intent is created with an Intent object, which defines a message to activate either a specific component or a specific type of component—an intent can be either explicit or implicit, respectively.</p>

<p>The other component type, content provider, is not activated by intents. Rather, it is activated when targeted by a request from a <code>ContentResolver</code>. The content resolver handles all direct transactions with the content provider so that the component that&rsquo;s performing transactions with the provider doesn&rsquo;t need to and instead calls methods on the ContentResolver object. This leaves a layer of abstraction between the content provider and the component requesting information (for security).<code>ContentProvider</code>会在请求调用<code>ContentResolver</code>时来被激活。</p>

<p>There are separate methods for activating each type of component:</p>

<ul>
<li>You can start an activity (or give it something new to do) by passing an <code>Intent</code> to <code>startActivity()</code> or <code>startActivityForResult()</code> (when you want the activity to return a result).</li>
<li>You can start a service (or give new instructions to an ongoing service) by passing an <code>Intent</code> to <code>startService()</code>. Or you can bind to the service by passing an Intent to <code>bindService()</code>.</li>
<li>You can initiate a broadcast by passing an Intent to methods like <code>sendBroadcast(), sendOrderedBroadcast(), or sendStickyBroadcast()</code>.</li>
<li>You can perform a query to a content provider by calling <code>query()</code> on a <code>ContentResolver</code>.</li>
</ul>


<p>Activities, services, and content providers that you include in your source but do not declare in the manifest are not visible to the system and, consequently, can never run. However, broadcast receivers can be either declared in the manifest or created dynamically in code (as BroadcastReceiver objects) and registered with the system by calling <code>registerReceiver()</code>.</p>

<p>For every resource that you include in your Android project, the SDK build tools define a unique integer ID, which you can use to reference the resource from your application code or from other resources defined in XML.Android工程中的每个资源，都会被sdk build tools定义为一个唯一的id.One of the most important aspects of providing resources separate from your source code is the ability for you to provide alternative resources for different device configurations.</p>

<h2>Activities</h2>

<p>An application usually consists of multiple activities that are loosely bound to each other. Typically, one activity in an application is specified as the &ldquo;main&rdquo; activity, which is presented to the user when launching the application for the first time. Each activity can then start another activity in order to perform different actions. Each time a new activity starts, the previous activity is stopped, but the system preserves the activity in a stack (the &ldquo;back stack&rdquo;). When a new activity starts, it is pushed onto the back stack and takes user focus. The back stack abides to the basic &ldquo;last in, first out&rdquo; stack mechanism, so, when the user is done with the current activity and presses the Back button, it is popped from the stack (and destroyed) and the previous activity resumes.一个应用通常有一个主activity,启动应用的时候呈现给用户。一个activity启动其他activity时会被压入到back stack中去。</p>

<p>When an activity is stopped because a new activity starts, it is notified of this change in state through the activity&rsquo;s lifecycle callback methods. There are several callback methods that an activity might receive, due to a change in its state—whether the system is creating it, stopping it, resuming it, or destroying it—and each callback provides you the opportunity to perform specific work that&rsquo;s appropriate to that state change.当一个activity因为其他activity启动而进入stopped状态时，会触发相应的lifecycle callback方法。</p>

<p>In your subclass, you need to implement callback methods that the system calls when the activity transitions between various states of its lifecycle, such as when the activity is being created, stopped, resumed, or destroyed. The two most important callback methods are:</p>

<ul>
<li><code>onCreate()</code>:You must implement this method. The system calls this when creating your activity. Within your implementation, you should initialize the essential components of your activity. Most importantly, this is where you must call <code>setContentView()</code> to define the layout for the activity&rsquo;s user interface.必须实现此方法，这是调用<code>setContentView()</code>的地方。</li>
<li><code>onPause()</code>:The system calls this method as the first indication that the user is leaving your activity (though it does not always mean the activity is being destroyed). This is usually where you should commit any changes that should be persisted beyond the current user session (because the user might not come back).用户离开activity时会调用此方法，实现此方法中通常应该将应该持久化保存的数据保存下来。</li>
</ul>


<p>The user interface for an activity is provided by a hierarchy of views—objects derived from the <code>View</code> class. Each view controls a particular rectangular space within the activity&rsquo;s window and can respond to user interaction.Activity的用户界面由View来提供。</p>

<p>The most common way to define a layout using views is with an XML layout file saved in your application resources. This way, you can maintain the design of your user interface separately from the source code that defines the activity&rsquo;s behavior. You can set the layout as the UI for your activity with <code>setContentView()</code>, passing the resource ID for the layout. However, you can also create new Views in your activity code and build a view hierarchy by inserting new Views into a <code>ViewGroup</code>, then use that layout by passing the root <code>ViewGroup</code> to <code>setContentView()</code>.可以使用xml来定义布局，也可以在代码中动态创建view和<code>ViewGroup</code>来传递给<code>setContentView</code>。</p>

<p>You must declare your activity in the manifest file in order for it to be accessible to the system. 必须在manifest文件中声明activity来被系统所知悉并可以运行之。An <code>&lt;activity&gt;</code> element can also specify various intent filters—using the <code>&lt;intent-filter&gt;</code> element—in order to declare how other application components may activate it.可以通过声明<code>intent filter</code>来告知系统该activity可以被什么intent来激活响应。</p>

<p>If you want your activity to respond to implicit intents that are delivered from other applications (and your own), then you must define additional intent filters for your activity. For each type of intent to which you want to respond, you must include an <code>&lt;intent-filter&gt;</code> that includes an <code>&lt;action&gt;</code> element and, optionally, a <code>&lt;category&gt;</code> element and/or a <code>&lt;data&gt;</code> element. These elements specify the type of intent to which your activity can respond.如果你的activity想要对其他组件发起的隐式intent进行响应，就需要在manifest中声明<code>&lt;intent-filter&gt;</code>，每个<code>&lt;intent-filter&gt;</code>必须包换<code>&lt;action&gt;</code>，可以包含<code>&lt;category&gt;</code>或<code>&lt;data&gt;</code>。</p>

<p>You can start another activity by calling <code>startActivity()</code>, passing it an <code>Intent</code> that describes the activity you want to start. The intent specifies either the exact activity you want to start or describes the type of action you want to perform (and the system selects the appropriate activity for you, which can even be from a different application). An intent can also carry small amounts of data to be used by the activity that is started.Your application might also want to perform some action, such as send an email, text message, or status update, using data from your activity. In this case, your application might not have its own activities to perform such actions, so you can instead leverage the activities provided by other applications on the device, which can perform the actions for you. This is where intents are really valuable—you can create an intent that describes an action you want to perform and the system launches the appropriate activity from another application. If there are multiple activities that can handle the intent, then the user can select which one to use.显式intent和隐式intent。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">ACTION_SEND</span><span class="o">);</span>
</span><span class='line'><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">EXTRA_EMAIL</span><span class="o">,</span> <span class="n">recipientArray</span><span class="o">);</span>
</span><span class='line'><span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sometimes, you might want to receive a result from the activity that you start. In that case, start the activity by calling <code>startActivityForResult()</code> (instead of <code>startActivity()</code>). To then receive the result from the subsequent activity, implement the <code>onActivityResult()</code> callback method. When the subsequent activity is done, it returns a result in an Intent to your <code>onActivityResult()</code> method.</p>

<p>You can shut down an activity by calling its <code>finish()</code> method. You can also shut down a separate activity that you previously started by calling <code>finishActivity()</code>.</p>

<p>Managing the lifecycle of your activities by implementing callback methods is crucial to developing a strong and flexible application. The lifecycle of an activity is directly affected by its association with other activities, its task and back stack.An activity can exist in essentially three states:</p>

<ul>
<li><code>Resumed</code>:The activity is in the foreground of the screen and has user focus. (This state is also sometimes referred to as &ldquo;running&rdquo;.)</li>
<li><code>Paused</code>:Another activity is in the foreground and has focus, but this one is still visible. That is, another activity is visible on top of this one and that activity is partially transparent or doesn&rsquo;t cover the entire screen. A paused activity is completely alive (the Activity object is retained in memory, it maintains all state and member information, and remains attached to the window manager), but can be killed by the system in extremely low memory situations.</li>
<li><code>Stopped</code>:The activity is completely obscured by another activity (the activity is now in the &ldquo;background&rdquo;). A stopped activity is also still alive (the Activity object is retained in memory, it maintains all state and member information, but is not attached to the window manager). However, it is no longer visible to the user and it can be killed by the system when memory is needed elsewhere.</li>
</ul>


<p>If an activity is paused or stopped, the system can drop it from memory either by asking it to finish (calling its <code>finish()</code> method), or simply killing its process. When the activity is opened again (after being finished or killed), it must be created all over.
在<code>paused</code>或者<code>stopped</code>状态的activity可能会被系统杀死。<code>paused</code>部分可见，<code>stopped</code>完全不可见。</p>

<p>When an activity transitions into and out of the different states described above, it is notified through various callback methods. All of the callback methods are hooks that you can override to do appropriate work when the state of your activity changes. 当一个activity在不同状态之间切换时，会调用不同的lifecycle callback方法。Your implementation of these lifecycle methods must always call the superclass implementation before doing any work, as shown in the examples above.实现这些生命周期方法时，必须调用父类的方法。</p>

<p>Taken together, these methods define the entire lifecycle of an activity. By implementing these methods, you can monitor three nested loops in the activity lifecycle:</p>

<ul>
<li>The <strong>entire lifetime</strong> of an activity happens between the call to <code>onCreate()</code> and the call to <code>onDestroy()</code>. Your activity should perform setup of &ldquo;global&rdquo; state (such as defining layout) in <code>onCreate()</code>, and release all remaining resources in <code>onDestroy()</code>. For example, if your activity has a thread running in the background to download data from the network, it might create that thread in <code>onCreate()</code> and then stop the thread in <code>onDestroy()</code>.Activity的整个生命周期从<code>onCreate</code>初始化开始，到<code>onDestory</code>释放资源结束。</li>
<li>The <strong>visible lifetime</strong> of an activity happens between the call to <code>onStart()</code> and the call to <code>onStop()</code>. During this time, the user can see the activity on-screen and interact with it. For example, <code>onStop()</code> is called when a new activity starts and this one is no longer visible. Between these two methods, you can maintain resources that are needed to show the activity to the user. For example, you can register a BroadcastReceiver in onStart() to monitor changes that impact your UI, and unregister it in onStop() when the user can no longer see what you are displaying. The system might call onStart() and onStop() multiple times during the entire lifetime of the activity, as the activity alternates between being visible and hidden to the user.对用户可见的阶段是从<code>onStart</code>生命周期开始，到<code>onStop</code>生命周期结束。</li>
<li>The <strong>foreground lifetime</strong> of an activity happens between the call to <code>onResume()</code> and the call to <code>onPause()</code>. During this time, the activity is in front of all other activities on screen and has user input focus. An activity can frequently transition in and out of the foreground—for example, onPause() is called when the device goes to sleep or when a dialog appears. Because this state can transition often, the code in these two methods should be fairly lightweight in order to avoid slow transitions that make the user wait.前台生命周期从<code>onResume</code>到<code>onPause</code>。</li>
</ul>


<center><p><img src="http://Solarex.github.io/images/activity_lifecycle.png" alt="activity lifecycle"></p></center>


<p>Once the activity is created, <code>onPause()</code> is the last method that&rsquo;s guaranteed to be called before the process can be killed—if the system must recover memory in an emergency, then <code>onStop()</code> and <code>onDestroy()</code> might not be called. Therefore, you should use <code>onPause()</code> to write crucial persistent data (such as user edits) to storage. However, you should be selective about what information must be retained during <code>onPause()</code>, because any blocking procedures in this method block the transition to the next activity and slow the user experience.Activity一旦被创建，<code>onPause</code>是在进程被杀之前保证被调到的最后一个方法，如果系统内存紧缺，<code>onStop</code>和<code>onDestory</code>也许不会被调用。</p>

<p>When the system destroys an activity in order to recover memory, the Activity object is destroyed, so the system cannot simply resume it with its state intact. Instead, the system must recreate the Activity object if the user navigates back to it. Yet, the user is unaware that the system destroyed the activity and recreated it and, thus, probably expects the activity to be exactly as it was. In this situation, you can ensure that important information about the activity state is preserved by implementing an additional callback method that allows you to save information about the state of your activity: <code>onSaveInstanceState()</code>.系统将activity摧毁后，activity重新创建后之前的状态不会被保存。The system calls <code>onSaveInstanceState()</code> before making the activity vulnerable to destruction. The system passes this method a Bundle in which you can save state information about the activity as name-value pairs, using methods such as <code>putString()</code> and <code>putInt()</code>. Then, if the system kills your application process and the user navigates back to your activity, the system recreates the activity and passes the Bundle to both <code>onCreate()</code> and <code>onRestoreInstanceState()</code>. Using either of these methods, you can extract your saved state from the Bundle and restore the activity state. If there is no state information to restore, then the Bundle passed to you is <code>null</code> (which is the case when the activity is created for the first time).在<code>onSaveInstanceState()</code>中被保存下来的状态会在<code>onCreate</code>或者<code>onRestoreInstanceState()</code>方法中被传递过去。There&rsquo;s no guarantee that <code>onSaveInstanceState()</code> will be called before your activity is destroyed, because there are cases in which it won&rsquo;t be necessary to save the state (such as when the user leaves your activity using the Back button, because the user is explicitly closing the activity). If the system calls <code>onSaveInstanceState()</code>, it does so before <code>onStop()</code> and possibly before <code>onPause()</code>.<code>onSaveInstanceState</code>无法保证被调用，如果被调用，可能会是在<code>onStop()</code>或者<code>onPause</code>之前。</p>

<p>However, even if you do nothing and do not implement <code>onSaveInstanceState()</code>, some of the activity state is restored by the Activity class&rsquo;s default implementation of <code>onSaveInstanceState()</code>. Specifically, the default implementation calls the corresponding <code>onSaveInstanceState()</code> method for every View in the layout, which allows each view to provide information about itself that should be saved. Almost every widget in the Android framework implements this method as appropriate, such that any visible changes to the UI are automatically saved and restored when your activity is recreated. The only work required by you is to provide a unique ID (with the <code>android:id</code> attribute) for each widget you want to save its state. If a widget does not have an ID, then the system cannot save its state.布局中的view组件如果提供了<code>android:id</code>属性，状态会被自动保存。Because the default implementation of onSaveInstanceState() helps save the state of the UI, if you override the method in order to save additional state information, you should always call the superclass implementation of onSaveInstanceState() before doing any work. Likewise, you should also call the superclass implementation of onRestoreInstanceState() if you override it, so the default implementation can restore view states.如果要重写<code>onSaveInstanceState</code>或者<code>onRestoreInstanceState</code>，一定要调用父类的方法。 Because onSaveInstanceState() is not guaranteed to be called, you should use it only to record the transient state of the activity (the state of the UI)—you should never use it to store persistent data. Instead, you should use onPause() to store persistent data (such as data that should be saved to a database) when the user leaves the activity.<code>onSaveInstnceState</code>不保证被调用，如果一定要使用，保存瞬时数据，使用<code>onPause</code>来保存持久化数据。</p>

<p>Some device configurations can change during runtime (such as screen orientation, keyboard availability, and language). When such a change occurs, Android recreates the running activity (the system calls onDestroy(), then immediately calls onCreate()). This behavior is designed to help your application adapt to new configurations by automatically reloading your application with alternative resources that you&rsquo;ve provided (such as different layouts for different screen orientations and sizes).Device configuration发生变化时，系统会销毁掉Activity然后重新创建，即调用<code>onDestory</code>然后调用<code>onCreate</code>。</p>

<p>The order of lifecycle callbacks is well defined, particularly when the two activities are in the same process and one is starting the other. Here&rsquo;s the order of operations that occur when Activity A starts Acivity B:</p>

<ul>
<li>Activity A&rsquo;s <code>onPause()</code> method executes.</li>
<li>Activity B&rsquo;s <code>onCreate()</code>, <code>onStart()</code>, and <code>onResume()</code> methods execute in sequence. (Activity B now has user focus.)</li>
<li>Then, if Activity A is no longer visible on screen, its <code>onStop()</code> method executes.</li>
</ul>


<p>同一个进程中ActivityA启动ActivityB时，方法执行顺序是固定的，A的<code>onPause</code>方法被调用，B的<code>onCreate</code>,<code>onStart</code>和<code>onResume</code>方法被调用，如果A不可见了，则A的<code>onStop</code>方法会被调用。</p>

<h3>Fragment</h3>

<p>A fragment must always be embedded in an activity and the fragment&rsquo;s lifecycle is directly affected by the host activity&rsquo;s lifecycle.However, while an activity is running (it is in the resumed lifecycle state), you can manipulate each fragment independently, such as add or remove them. When you perform such a fragment transaction, you can also add it to a back stack that&rsquo;s managed by the activity—each back stack entry in the activity is a record of the fragment transaction that occurred. The back stack allows the user to reverse a fragment transaction (navigate backwards), by pressing the Back button.Fragment必须嵌入到Activity中去，并且生命周期显著受到Activity生命周期影响。一个Activity在运行状态时，可以添加或者去除fragment，进行这些fragment transaction时，可以将这些动作压入back stack。When you add a fragment as a part of your activity layout, it lives in a ViewGroup inside the activity&rsquo;s view hierarchy and the fragment defines its own view layout. You can insert a fragment into your activity layout by declaring the fragment in the activity&rsquo;s layout file, as a <fragment> element, or from your application code by adding it to an existing ViewGroup. However, a fragment is not required to be a part of the activity layout; you may also use a fragment without its own UI as an invisible worker for the activity.Fragment可以有UI，也可以无UI，可以在manifest文件中声明，也可以在代码中添加。</p>

<p>To create a fragment, you must create a subclass of Fragment (or an existing subclass of it). The Fragment class has code that looks a lot like an Activity. It contains callback methods similar to an activity, such as onCreate(), onStart(), onPause(), and onStop().<code>Fragment</code>生命周期方法和<code>Activity</code>非常类似。</p>

<p>Usually, you should implement at least the following lifecycle methods:</p>

<ul>
<li><code>onCreate()</code>:The system calls this when creating the fragment. Within your implementation, you should initialize essential components of the fragment that you want to retain when the fragment is paused or stopped, then resumed.系统调用这个方法来创建fragment。在这个方法实现中，应该初始化必须的组件。</li>
<li><code>onCreateView()</code>:The system calls this when it&rsquo;s time for the fragment to draw its user interface for the first time. To draw a UI for your fragment, you must return a View from this method that is the root of your fragment&rsquo;s layout. You can return null if the fragment does not provide a UI.系统调用这个方法来绘制fragment的UI。</li>
<li><code>onPause()</code>:The system calls this method as the first indication that the user is leaving the fragment (though it does not always mean the fragment is being destroyed). This is usually where you should commit any changes that should be persisted beyond the current user session (because the user might not come back).用户离开fragment时系统会调用这个方法。</li>
</ul>


<center><p><img src="http://Solarex.github.io/images/fragment_lifecycle.png" alt="fragment lifecycle"></p></center>


<p>除了直接继承Fragment，还可以继承<code>DialogFragment</code>，<code>ListFragment</code>或者<code>PreferenceFragment</code>。</p>

<p>When the system creates this activity layout, it instantiates each fragment specified in the layout and calls the <code>onCreateView()</code> method for each one, to retrieve each fragment&rsquo;s layout. The system inserts the View returned by the fragment directly in place of the <code>&lt;fragment&gt;</code> element.系统创建Activity布局时，会实例化各个<code>fragment</code>并调用其<code>onCreateView</code>方法来将其布局展开来插入到<code>Activity</code>布局文件中<code>fragment</code>标签所占的位置。</p>

<p>Each fragment requires a unique identifier that the system can use to restore the fragment if the activity is restarted (and which you can use to capture the fragment to perform transactions, such as remove it). There are three ways to provide an ID for a fragment:
+ Supply the <code>android:id</code> attribute with a unique ID.
+ Supply the <code>android:tag</code> attribute with a unique string.
+ If you provide neither of the previous two, the system uses the ID of the container view.</p>

<p>每个fragment需要一个唯一的id来使系统在Activity restart的时候来恢复fragment状态，或者来进行fragment transaction。<code>android:id</code>，<code>android:tag</code>都可以作为id，如果没有提供系统将使用包含fragment的containver view的id。</p>

<p>To make fragment transactions in your activity (such as add, remove, or replace a fragment), you must use APIs from <code>FragmentTransaction</code>. You can get an instance of FragmentTransaction from your Activity like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">FragmentManager</span> <span class="n">fragmentManager</span> <span class="o">=</span> <span class="n">getFragmentManager</span><span class="o">()</span>
</span><span class='line'><span class="n">FragmentTransaction</span> <span class="n">fragmentTransaction</span> <span class="o">=</span> <span class="n">fragmentManager</span><span class="o">.</span><span class="na">beginTransaction</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can then add a fragment using the <code>add()</code> method, specifying the fragment to add and the view in which to insert it. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ExampleFragment</span> <span class="n">fragment</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ExampleFragment</span><span class="o">();</span>
</span><span class='line'><span class="n">fragmentTransaction</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">fragment_container</span><span class="o">,</span> <span class="n">fragment</span><span class="o">);</span>
</span><span class='line'><span class="n">fragmentTransaction</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you&rsquo;ve made your changes with FragmentTransaction, you must call <code>commit()</code> for the changes to take effect.Before you call <code>commit()</code>, however, you might want to call <code>addToBackStack()</code>, in order to add the transaction to a back stack of fragment transactions. This back stack is managed by the activity and allows the user to return to the previous fragment state, by pressing the Back button.If you add multiple changes to the transaction (such as another <code>add()</code> or <code>remove()</code>) and call <code>addToBackStack()</code>, then all changes applied before you call <code>commit()</code> are added to the back stack as a single transaction and the Back button will reverse them all together.If you do not call <code>addToBackStack()</code> when you perform a transaction that removes a fragment, then that fragment is destroyed when the transaction is committed and the user cannot navigate back to it. Whereas, if you do call <code>addToBackStack()</code> when removing a fragment, then the fragment is stopped and will be resumed if the user navigates back.调用<code>addToBackStack</code>方法后，remove掉掉一个fragment，fragment会进入stopped状态，返回后会重新resume，如果么有调用会销毁掉fragment，无法返回。</p>

<p>To manage the fragments in your activity, you need to use <code>FragmentManager</code>. To get it, call <code>getFragmentManager()</code> from your activity.为了管理activity中的fragment，需要使用FragmentManager。</p>

<p>Some things that you can do with FragmentManager include:</p>

<ul>
<li>Get fragments that exist in the activity, with <code>findFragmentById()</code> (for fragments that provide a UI in the activity layout) or <code>findFragmentByTag()</code> (for fragments that do or don&rsquo;t provide a UI).</li>
<li>Pop fragments off the back stack, with <code>popBackStack()</code> (simulating a Back command by the user).</li>
<li>Register a listener for changes to the back stack, with <code>addOnBackStackChangedListener()</code>.</li>
</ul>


<p>Calling <code>commit()</code> does not perform the transaction immediately. Rather, it schedules it to run on the activity&rsquo;s UI thread (the &ldquo;main&rdquo; thread) as soon as the thread is able to do so. If necessary, however, you may call <code>executePendingTransactions()</code> from your UI thread to immediately execute transactions submitted by commit(). Doing so is usually not necessary unless the transaction is a dependency for jobs in other threads.调用commit后，fragment transaction不会立即执行，而是会在UI线程中被规划调度执行，如果需要立即执行可以调用<code>executePendingTransactions()</code>方法。You can commit a transaction using <code>commit()</code> only prior to the activity saving its state (when the user leaves the activity). If you attempt to commit after that point, an exception will be thrown. This is because the state after the commit can be lost if the activity needs to be restored. For situations in which its okay that you lose the commit, use <code>commitAllowingStateLoss()</code>.如果需要保持fragment的状态，应该在用户离开activity之前调用commit，避免状态丢失，如果对这些状态不在意的话可以使用<code>commitAllowingStateLoss()</code>方法。</p>

<p>Although a Fragment is implemented as an object that&rsquo;s independent from an Activity and can be used inside multiple activities, a given instance of a fragment is directly tied to the activity that contains it.fragment和包含他的activity紧密相连。Specifically, the fragment can access the Activity instance with <code>getActivity()</code> and easily perform tasks such as find a view in the activity layout:<code>View listView = getActivity().findViewById(R.id.list);</code>.Likewise, your activity can call methods in the fragment by acquiring a reference to the Fragment from <code>FragmentManager</code>, using <code>findFragmentById()</code> or <code>findFragmentByTag()</code>. For example:<code>ExampleFragment fragment = (ExampleFragment) getFragmentManager().findFragmentById(R.id.example_fragment);</code>.Fragment和Activity交互的方式。</p>

<p>fragment和Activity之间交互事件可以通过在fragment中定义一个interface,Activity来实现这个interface，在fragment中<code>onAttach</code>方法中将Activity强制转换为fragment持有的一个interface实例。</p>

<p>Managing the lifecycle of a fragment is a lot like managing the lifecycle of an activity. Like an activity, a fragment can exist in three states:</p>

<ul>
<li><code>Resumed</code>:The fragment is visible in the running activity.</li>
<li><code>Paused</code>:Another activity is in the foreground and has focus, but the activity in which this fragment lives is still visible (the foreground activity is partially transparent or doesn&rsquo;t cover the entire screen).</li>
<li><code>Stopped</code>:The fragment is not visible. Either the host activity has been stopped or the fragment has been removed from the activity but added to the back stack. A stopped fragment is still alive (all state and member information is retained by the system). However, it is no longer visible to the user and will be killed if the activity is killed.</li>
</ul>


<p>Also like an activity, you can retain the state of a fragment using a <code>Bundle</code>, in case the activity&rsquo;s process is killed and you need to restore the fragment state when the activity is recreated. You can save the state during the fragment&rsquo;s <code>onSaveInstanceState()</code> callback and restore it during either <code>onCreate()</code>, <code>onCreateView()</code>, or <code>onActivityCreated()</code>.</p>

<p>The most significant difference in lifecycle between an activity and a fragment is how one is stored in its respective back stack. An activity is placed into a back stack of activities that&rsquo;s managed by the system when it&rsquo;s stopped, by default.However, a fragment is placed into a back stack managed by the host activity only when you explicitly request that the instance be saved by calling addToBackStack() during a transaction that removes the fragment.fragment和activity生命周期的一个不同点在于，activity会被放入系统管理的back stack中，用户返回时会重新进入activity。而fragment只有在显式调用<code>addToBackStack</code>后才会被保存状态在host activity管理的back stack中。</p>

<p>If you need a Context object within your Fragment, you can call getActivity(). However, be careful to call getActivity() only when the fragment is attached to an activity. When the fragment is not yet attached, or was detached during the end of its lifecycle, getActivity() will return null.如果fragment需要一个context，可以调用<code>getActivity</code>来获取，但是只能在fragment attach到activity之后才能调用，否则会返回null。</p>

<p>Fragments have a few extra lifecycle callbacks, however, that handle unique interaction with the activity in order to perform actions such as build and destroy the fragment&rsquo;s UI. These additional callback methods are:</p>

<ul>
<li><code>onAttach()</code>:Called when the fragment has been associated with the activity (the Activity is passed in here).</li>
<li><code>onCreateView()</code>:Called to create the view hierarchy associated with the fragment.</li>
<li><code>onActivityCreated()</code>:Called when the activity&rsquo;s onCreate() method has returned.</li>
<li><code>onDestroyView()</code>:Called when the view hierarchy associated with the fragment is being removed.</li>
<li><code>onDetach()</code>:Called when the fragment is being disassociated from the activity.</li>
</ul>


<center><p><img src="http://Solarex.github.io/images/activity_fragment_lifecycle.png"></p></center>


<h3>Loaders</h3>

<p>Loaders make it easy to asynchronously load data in an activity or fragment. Loaders have these characteristics:</p>

<ul>
<li>They are available to every Activity and Fragment.</li>
<li>They provide asynchronous loading of data.</li>
<li>They monitor the source of their data and deliver new results when the content changes.</li>
<li>They automatically reconnect to the last loader&rsquo;s cursor when being recreated after a configuration change. Thus, they don&rsquo;t need to re-query their data.</li>
</ul>


<p>An application that uses loaders typically includes the following:</p>

<ul>
<li>An Activity or Fragment.</li>
<li>An instance of the LoaderManager.</li>
<li>A CursorLoader to load data backed by a ContentProvider. Alternatively, you can implement your own subclass of Loader or AsyncTaskLoader to load data from some other source.</li>
<li>An implementation for LoaderManager.LoaderCallbacks. This is where you create new loaders and manage your references to existing loaders.</li>
<li>A way of displaying the loader&rsquo;s data, such as a SimpleCursorAdapter.</li>
<li>A data source, such as a ContentProvider, when using a CursorLoader.</li>
</ul>


<p>You typically initialize a Loader within the activity&rsquo;s onCreate() method, or within the fragment&rsquo;s onActivityCreated() method. You do this as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">getLoaderManager</span><span class="o">().</span><span class="na">initLoader</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>initLoader()</code> call ensures that a loader is initialized and active. It has two possible outcomes:</p>

<ul>
<li>If the loader specified by the ID already exists, the last created loader is reused.</li>
<li>If the loader specified by the ID does not exist, <code>initLoader()</code> triggers the <code>LoaderManager.LoaderCallbacks</code> method <code>onCreateLoader()</code>. This is where you implement the code to instantiate and return a new loader.</li>
</ul>


<p>When you use <code>initLoader()</code>, as shown above, it uses an existing loader with the specified ID if there is one. If there isn&rsquo;t, it creates one. But sometimes you want to discard your old data and start over.To discard your old data, you use <code>restartLoader()</code>. 重新获取数据使用<code>restartLoader()</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onQueryTextChanged</span><span class="o">(</span><span class="n">String</span> <span class="n">newText</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Called when the action bar search text has changed.  Update</span>
</span><span class='line'>    <span class="c1">// the search filter, and restart the loader to do a new query</span>
</span><span class='line'>    <span class="c1">// with this filter.</span>
</span><span class='line'>    <span class="n">mCurFilter</span> <span class="o">=</span> <span class="o">!</span><span class="n">TextUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">newText</span><span class="o">)</span> <span class="o">?</span> <span class="n">newText</span> <span class="o">:</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="n">getLoaderManager</span><span class="o">().</span><span class="na">restartLoader</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>LoaderManager.LoaderCallbacks</code> is a callback interface that lets a client interact with the LoaderManager.Loaders, in particular <code>CursorLoader</code>, are expected to retain their data after being stopped. This allows applications to keep their data across the activity or fragment&rsquo;s <code>onStop()</code> and <code>onStart()</code> methods, so that when users return to an application, they don&rsquo;t have to wait for the data to reload. You use the <code>LoaderManager.LoaderCallbacks</code> methods when to know when to create a new loader, and to tell the application when it is time to stop using a loader&rsquo;s data.<code>LoaderManager.LoaderCallbacks</code> includes these methods:</p>

<ul>
<li><code>onCreateLoader()</code> — Instantiate and return a new Loader for the given ID.实例化创建一个Loader。</li>
<li><code>onLoadFinished()</code> — Called when a previously created loader has finished its load.数据加载完成后调用。</li>
<li><code>onLoaderReset()</code> — Called when a previously created loader is being reset, thus making its data unavailable.之前调用的Loader被reset时调用。</li>
</ul>


<h3>Tasks and Back stack</h3>

<p>A task is a collection of activities that users interact with when performing a certain job. The activities are arranged in a stack (the &ldquo;back stack&rdquo;), in the order in which each activity is opened.</p>

<p>The device Home screen is the starting place for most tasks. When the user touches an icon in the application launcher (or a shortcut on the Home screen), that application&rsquo;s task comes to the foreground. If no task exists for the application (the application has not been used recently), then a new task is created and the &ldquo;main&rdquo; activity for that application opens as the root activity in the stack.Launcher是大部分task开始的地方。If the user continues to press Back, then each activity in the stack is popped off to reveal the previous one, until the user returns to the Home screen (or to whichever activity was running when the task began). When all activities are removed from the stack, the task no longer exists.如果用户在一个task中不停的按返回键，每个被压栈的activity逐个弹出直到回到Launcher。</p>

<p>A task is a cohesive unit that can move to the &ldquo;background&rdquo; when users begin a new task or go to the Home screen, via the Home button. While in the background, all the activities in the task are stopped, but the back stack for the task remains intact—the task has simply lost focus while another task takes place.用户启动其他task或者按下Home键时，当前task进入后台状态。</p>

<p>To summarize the default behavior for activities and tasks:</p>

<ul>
<li>When Activity A starts Activity B, Activity A is stopped, but the system retains its state (such as scroll position and text entered into forms). If the user presses the Back button while in Activity B, Activity A resumes with its state restored.</li>
<li>When the user leaves a task by pressing the Home button, the current activity is stopped and its task goes into the background. The system retains the state of every activity in the task. If the user later resumes the task by selecting the launcher icon that began the task, the task comes to the foreground and resumes the activity at the top of the stack.</li>
<li>If the user presses the Back button, the current activity is popped from the stack and destroyed. The previous activity in the stack is resumed. When an activity is destroyed, the system does not retain the activity&rsquo;s state.</li>
<li>Activities can be instantiated multiple times, even from other tasks.</li>
</ul>


<p>The way Android manages tasks and the back stack, as described above—by placing all activities started in succession in the same task and in a &ldquo;last in, first out&rdquo; stack—works great for most applications and you shouldn&rsquo;t have to worry about how your activities are associated with tasks or how they exist in the back stack. However, you might decide that you want to interrupt the normal behavior. Perhaps you want an activity in your application to begin a new task when it is started (instead of being placed within the current task); or, when you start an activity, you want to bring forward an existing instance of it (instead of creating a new instance on top of the back stack); or, you want your back stack to be cleared of all activities except for the root activity when the user leaves the task.Android默认管理task和back stack的方式一般情况下不需要开发者担心，但是开发者也许想要与默认方式不同的方式来管理task和back stack。</p>

<p>You can do these things and more, with attributes in the <code>&lt;activity&gt;</code> manifest element and with flags in the intent that you pass to <code>startActivity()</code>.In this regard, the principal <code>&lt;activity&gt;</code> attributes you can use are: <a href="http://www.slideshare.net/RanNachmany/manipulating-android-tasks-and-back-stack">http://www.slideshare.net/RanNachmany/manipulating-android-tasks-and-back-stack</a></p>

<iframe src="http://Solarex.github.io//www.slideshare.net/slideshow/embed_code/10060458" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/RanNachmany/manipulating-android-tasks-and-back-stack" title="Manipulating Android tasks and back stack" target="_blank">Manipulating Android tasks and back stack</a> </strong> from <strong><a href="http://www.slideshare.net/RanNachmany" target="_blank">Ran Nachmany</a></strong> </div></p>

<ul>
<li><code>taskAffinity</code></li>
<li><code>launchMode</code>:<code>standard</code>,<code>singleTop</code>,<code>singleTask</code>,<code>singleInstance</code></li>
<li><code>allowTaskReparenting</code></li>
<li><code>clearTaskOnLaunch</code></li>
<li><code>alwaysRetainTaskState</code></li>
<li><code>finishOnTaskLaunch</code></li>
</ul>


<p>And the principal intent flags you can use are:</p>

<ul>
<li><code>FLAG_ACTIVITY_NEW_TASK</code></li>
<li><code>FLAG_ACTIVITY_CLEAR_TOP</code></li>
<li><code>FLAG_ACTIVITY_SINGLE_TOP</code></li>
</ul>


<h2>Service</h2>

<p>A Service is an application component that can perform long-running operations in the background and does not provide a user interface. Another application component can start a service and it will continue to run in the background even if the user switches to another application. Additionally, a component can bind to a service to interact with it and even perform interprocess communication (IPC).Service在后台运行，不提供UI。</p>

<p>A service can essentially take two forms:</p>

<ul>
<li><code>Started</code>:A service is &ldquo;started&rdquo; when an application component (such as an activity) starts it by calling <code>startService()</code>. Once started, a service can run in the background indefinitely, even if the component that started it is destroyed. Usually, a started service performs a single operation and does not return a result to the caller. <code>startService</code>后，service会在后台一直运行下去。</li>
<li><code>Bound</code>:A service is &ldquo;bound&rdquo; when an application component binds to it by calling <code>bindService()</code>. A bound service offers a client-server interface that allows components to interact with the service, send requests, get results, and even do so across processes with interprocess communication (IPC). A bound service runs only as long as another application component is bound to it. Multiple components can bind to the service at once, but when all of them unbind, the service is destroyed.其他应用组件调用<code>bindService</code>来绑定service。</li>
</ul>


<p>Service can work both ways—it can be started (to run indefinitely) and also allow binding. It&rsquo;s simply a matter of whether you implement a couple callback methods: onStartCommand() to allow components to start it and onBind() to allow binding.service可以同时在两种状态下工作，只要实现了相应的回调方法，实现<code>onStartCommand</code>来start service，实现<code>onBind</code>来bind service。</p>

<p>Regardless of whether your application is started, bound, or both, any application component can use the service (even from a separate application), in the same way that any component can use an activity—by starting it with an Intent. However, you can declare the service as private, in the manifest file, and block access from other applications.不管service是started状态还是bound状态，其他应用组件可以通过Intent来启动service。可以在manifest中将<code>service</code>设置为private，<code>android:export=false</code>，来阻止其他应用来启动该service。</p>

<p>A service runs in the main thread of its hosting process—the service does not create its own thread and does not run in a separate process.Service运行在主线程。</p>

<p>A service is simply a component that can run in the background even when the user is not interacting with your application. Thus, you should create a service only if that is what you need.Service只是一个运行在后台不需要与用户交互的组件。If you need to perform work outside your main thread, but only while the user is interacting with your application, then you should probably instead create a new thread and not a service. For example, if you want to play some music, but only while your activity is running, you might create a thread in <code>onCreate()</code>, start running it in <code>onStart()</code>, then stop it in <code>onStop()</code>. Also consider using <code>AsyncTask</code> or <code>HandlerThread</code>, instead of the traditional <code>Thread</code> class.如果想在主线程之外做些操作，应该创建一个线程而不是service。可以使用<code>AsynTask</code>或者<code>HandlerThread</code>来进行相关工作而不是简单的使用<code>Thread</code>类。Remember that if you do use a service, it still runs in your application&rsquo;s main thread by default, so you should still create a new thread within the service if it performs intensive or blocking operations.Service运行在主线程，如果需要做耗时或者阻塞操作，应该在Service中创建线程。</p>

<p>To create a service, you must create a subclass of <code>Service</code> (or one of its existing subclasses). In your implementation, you need to override some callback methods that handle key aspects of the service lifecycle and provide a mechanism for components to bind to the service, if appropriate. The most important callback methods you should override are:</p>

<ul>
<li><code>onStartCommand()</code>:The system calls this method when another component, such as an activity, requests that the service be started, by calling <code>startService()</code>. Once this method executes, the service is started and can run in the background indefinitely. If you implement this, it is your responsibility to stop the service when its work is done, by calling <code>stopSelf()</code> or <code>stopService()</code>. (If you only want to provide binding, you don&rsquo;t need to implement this method.)其他组件调用<code>startService</code>时，<code>onStartCommand</code>方法会被调用，如果调用了此方法，应该自己来停止Service运行，调用<code>stopSelf</code>或者<code>stopService</code>来停止服务运行。</li>
<li><code>onBind()</code>:The system calls this method when another component wants to bind with the service (such as to perform RPC), by calling <code>bindService()</code>. In your implementation of this method, you must provide an interface that clients use to communicate with the service, by returning an <code>IBinder</code>. You must always implement this method, but if you don&rsquo;t want to allow binding, then you should return null.其他组件调用<code>bindService</code>时，此方法会被调用，如果希望与其他组件进行交互，可以返回一个<code>IBinder</code>，否则，可以返回<code>null</code>。</li>
<li><code>onCreate()</code>:The system calls this method when the service is first created, to perform one-time setup procedures (before it calls either onStartCommand() or onBind()). If the service is already running, this method is not called.系统在Service被创建时调用<code>onCreate</code>一次来进行初始化工作，如果Service已经在运行了，不会调用此方法。</li>
<li><code>onDestroy()</code>The system calls this method when the service is no longer used and is being destroyed. Your service should implement this to clean up any resources such as threads, registered listeners, receivers, etc. This is the last call the service receives.系统调用<code>onDestory</code>来摧毁Service，在此方法实现中，应该释放资源。</li>
</ul>


<p>If a component starts the service by calling startService() (which results in a call to onStartCommand()), then the service remains running until it stops itself with stopSelf() or another component stops it by calling stopService().If a component calls bindService() to create the service (and onStartCommand() is not called), then the service runs only as long as the component is bound to it. Once the service is unbound from all clients, the system destroys it.如果通过<code>startService</code>方式来启动一个service，则必须通过<code>stopSelf</code>或者<code>stopService</code>方式来停止service运行，如果是通过<code>bindService</code>方式来创建service，<code>onStartCommand</code>不会被调用，只要有应用组件bind到这个service上，这个service就会一直运行，否则当所有的应用组件从service unbind后，service会被系统销毁。</p>

<p>Just like an activity, a service can define intent filters that allow other components to invoke the service using implicit intents. By declaring intent filters, components from any application installed on the user&rsquo;s device can potentially start your service if your service declares an intent filter that matches the intent another application passes to startService().可以在manifest文件service标签下定义<code>intent filter</code>来指定startService启动所对应的<code>intent filter</code>。</p>

<p>If you plan on using your service only locally (other applications do not use it), then you don&rsquo;t need to (and should not) supply any intent filters. Without any intent filters, you must start the service using an intent that explicitly names the service class. 如果只打算在一个应用中使用service，不用提供<code>intent filter</code>，只能显式调用来<code>startService</code>。</p>

<p>A started service is one that another component starts by calling <code>startService()</code>, resulting in a call to the service&rsquo;s <code>onStartCommand()</code> method.When a service is started, it has a lifecycle that&rsquo;s independent of the component that started it and the service can run in the background indefinitely, even if the component that started it is destroyed. As such, the service should stop itself when its job is done by calling <code>stopSelf()</code>, or another component can stop it by calling <code>stopService()</code>.An application component such as an activity can start the service by calling <code>startService()</code> and passing an Intent that specifies the service and includes any data for the service to use. The service receives this Intent in the <code>onStartCommand()</code> method.A services runs in the same process as the application in which it is declared and in the main thread of that application, by default. So, if your service performs intensive or blocking operations while the user interacts with an activity from the same application, the service will slow down activity performance.Service运行在主线程，如果有耗时操作需要另起线程。 To avoid impacting application performance, you should start a new thread inside the service.</p>

<p>Traditionally, there are two classes you can extend to create a started service:</p>

<ul>
<li><code>Service</code>:This is the base class for all services. When you extend this class, it&rsquo;s important that you create a new thread in which to do all the service&rsquo;s work, because the service uses your application&rsquo;s main thread, by default, which could slow the performance of any activity your application is running.</li>
<li><code>IntentService</code>:This is a subclass of Service that uses a worker thread to handle all start requests, one at a time. This is the best option if you don&rsquo;t require that your service handle multiple requests simultaneously. All you need to do is implement <code>onHandleIntent()</code>, which receives the intent for each start request so you can do the background work.<code>IntentService</code>逐个处理任务。</li>
</ul>


<p>The IntentService does the following:</p>

<ul>
<li>Creates a default worker thread that executes all intents delivered to <code>onStartCommand()</code> separate from your application&rsquo;s main thread.创建一个工作线程来逐个处理传送到<code>onStartCommand</code>的Intent。</li>
<li>Creates a work queue that passes one intent at a time to your <code>onHandleIntent()</code> implementation, so you never have to worry about multi-threading.创建一个工作队列来给你的<code>onHandleIntent</code>实现每次发送一个<code>Intent</code>。</li>
<li>Stops the service after all start requests have been handled, so you never have to call <code>stopSelf()</code>.</li>
<li>Provides default implementation of <code>onBind()</code> that returns null.</li>
<li>Provides a default implementation of <code>onStartCommand()</code> that sends the intent to the work queue and then to your <code>onHandleIntent()</code> implementation.</li>
</ul>


<p>That&rsquo;s all you need: a constructor and an implementation of onHandleIntent().If you decide to also override other callback methods, such as onCreate(), onStartCommand(), or onDestroy(), be sure to call the super implementation, so that the IntentService can properly handle the life of the worker thread.只需要重载<code>onHandleIntent</code>方法，提供一个构造方法就可以了，如果需要重载其他方法，记得调用父类的对应方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloService</span> <span class="kd">extends</span> <span class="n">Service</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Looper</span> <span class="n">mServiceLooper</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">ServiceHandler</span> <span class="n">mServiceHandler</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Handler that receives messages from the thread</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">ServiceHandler</span> <span class="kd">extends</span> <span class="n">Handler</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="nf">ServiceHandler</span><span class="o">(</span><span class="n">Looper</span> <span class="n">looper</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="kd">super</span><span class="o">(</span><span class="n">looper</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleMessage</span><span class="o">(</span><span class="n">Message</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// Normally we would do some work here, like download a file.</span>
</span><span class='line'>          <span class="c1">// For our sample, we just sleep for 5 seconds.</span>
</span><span class='line'>          <span class="kt">long</span> <span class="n">endTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">+</span> <span class="mi">5</span><span class="o">*</span><span class="mi">1000</span><span class="o">;</span>
</span><span class='line'>          <span class="k">while</span> <span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">endTime</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                      <span class="n">wait</span><span class="o">(</span><span class="n">endTime</span> <span class="o">-</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
</span><span class='line'>                  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="c1">// Stop the service using the startId, so that we don&#39;t stop</span>
</span><span class='line'>          <span class="c1">// the service in the middle of handling another job</span>
</span><span class='line'>          <span class="n">stopSelf</span><span class="o">(</span><span class="n">msg</span><span class="o">.</span><span class="na">arg1</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Start up the thread running the service.  Note that we create a</span>
</span><span class='line'>    <span class="c1">// separate thread because the service normally runs in the process&#39;s</span>
</span><span class='line'>    <span class="c1">// main thread, which we don&#39;t want to block.  We also make it</span>
</span><span class='line'>    <span class="c1">// background priority so CPU-intensive work will not disrupt our UI.</span>
</span><span class='line'>    <span class="n">HandlerThread</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HandlerThread</span><span class="o">(</span><span class="s">&quot;ServiceStartArguments&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="n">Process</span><span class="o">.</span><span class="na">THREAD_PRIORITY_BACKGROUND</span><span class="o">);</span>
</span><span class='line'>    <span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Get the HandlerThread&#39;s Looper and use it for our Handler </span>
</span><span class='line'>    <span class="n">mServiceLooper</span> <span class="o">=</span> <span class="n">thread</span><span class="o">.</span><span class="na">getLooper</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mServiceHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServiceHandler</span><span class="o">(</span><span class="n">mServiceLooper</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">onStartCommand</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="o">,</span> <span class="kt">int</span> <span class="n">startId</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">&quot;service starting&quot;</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// For each start request, send a message to start a job and deliver the</span>
</span><span class='line'>      <span class="c1">// start ID so we know which request we&#39;re stopping when we finish the job</span>
</span><span class='line'>      <span class="n">Message</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">mServiceHandler</span><span class="o">.</span><span class="na">obtainMessage</span><span class="o">();</span>
</span><span class='line'>      <span class="n">msg</span><span class="o">.</span><span class="na">arg1</span> <span class="o">=</span> <span class="n">startId</span><span class="o">;</span>
</span><span class='line'>      <span class="n">mServiceHandler</span><span class="o">.</span><span class="na">sendMessage</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// If we get killed, after returning from here, restart</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">START_STICKY</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">IBinder</span> <span class="nf">onBind</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// We don&#39;t provide binding, so return null</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onDestroy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">&quot;service done&quot;</span><span class="o">,</span> <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_SHORT</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that the <code>onStartCommand()</code> method must return an integer. The integer is a value that describes how the system should continue the service in the event that the system kills it.The return value from onStartCommand() must be one of the following constants:</p>

<ul>
<li><code>START_NOT_STICKY</code>:If the system kills the service after <code>onStartCommand()</code> returns, do not recreate the service, unless there are pending intents to deliver. This is the safest option to avoid running your service when not necessary and when your application can simply restart any unfinished jobs.不重新创建</li>
<li><code>START_STICKY</code>:If the system kills the service after onStartCommand() returns, recreate the service and call onStartCommand(), but do not redeliver the last intent. Instead, the system calls onStartCommand() with a null intent, unless there were pending intents to start the service, in which case, those intents are delivered. This is suitable for media players (or similar services) that are not executing commands, but running indefinitely and waiting for a job.重新创建，但不传入Intent。</li>
<li><code>START_REDELIVER_INTENT</code>:If the system kills the service after <code>onStartCommand()</code> returns, recreate the service and call <code>onStartCommand()</code> with the last intent that was delivered to the service. Any pending intents are delivered in turn. This is suitable for services that are actively performing a job that should be immediately resumed, such as downloading a file.重新创建并将最后的Intent传入。</li>
</ul>


<p>You can start a service from an activity or other application component by passing an Intent (specifying the service to start) to <code>startService()</code>. The Android system calls the service&rsquo;s <code>onStartCommand()</code> method and passes it the Intent. 其他应用组件调用<code>startService(intent)</code>来启动服务，系统调用service的<code>onStartCommand(intent,flags,startId)</code>方法，并将intent传入。</p>

<p>If the service does not also provide binding, the intent delivered with <code>startService()</code> is the only mode of communication between the application component and the service. However, if you want the service to send a result back, then the client that starts the service can create a <code>PendingIntent</code> for a broadcast (with <code>getBroadcast()</code>) and deliver it to the service in the Intent that starts the service. The service can then use the broadcast to deliver a result.可以使用<code>PendingIntent</code>来启动service，来让service返回给发送者一个结果。</p>

<p><a href="https://stackoverflow.com/questions/6099364/how-to-use-pendingintent-to-communicate-from-a-service-to-a-client-activity">https://stackoverflow.com/questions/6099364/how-to-use-pendingintent-to-communicate-from-a-service-to-a-client-activity</a></p>

<p>Multiple requests to start the service result in multiple corresponding calls to the service&rsquo;s onStartCommand(). However, only one request to stop the service (with stopSelf() or stopService()) is required to stop it.多次对<code>startService</code>的请求调用会调用<code>onStartCommand</code>，但是<code>onCreate</code>只会调用一次。</p>

<p>A started service must manage its own lifecycle. That is, the system does not stop or destroy the service unless it must recover system memory and the service continues to run after onStartCommand() returns. So, the service must stop itself by calling stopSelf() or another component can stop it by calling stopService().Once requested to stop with stopSelf() or stopService(), the system destroys the service as soon as possible.However, if your service handles multiple requests to onStartCommand() concurrently, then you shouldn&rsquo;t stop the service when you&rsquo;re done processing a start request, because you might have since received a new start request (stopping at the end of the first request would terminate the second one). To avoid this problem, you can use stopSelf(int) to ensure that your request to stop the service is always based on the most recent start request. That is, when you call stopSelf(int), you pass the ID of the start request (the startId delivered to onStartCommand()) to which your stop request corresponds. Then if the service received a new start request before you were able to call stopSelf(int), then the ID will not match and the service will not stop.必须自己来管控service的生命周期，通过<code>stopSelf(int)</code>中不同的startId值来实现停止service。It&rsquo;s important that your application stops its services when it&rsquo;s done working, to avoid wasting system resources and consuming battery power. If necessary, other components can stop the service by calling stopService(). Even if you enable binding for the service, you must always stop the service yourself if it ever received a call to onStartCommand().</p>

<p>You should create a bound service when you want to interact with the service from activities and other components in your application or to expose some of your application&rsquo;s functionality to other applications, through interprocess communication (IPC).需哟啊从activity或者其他组件来与service进行交互时，可以创建bound service。To create a bound service, you must implement the onBind() callback method to return an IBinder that defines the interface for communication with the service. Other application components can then call bindService() to retrieve the interface and begin calling methods on the service. The service lives only to serve the application component that is bound to it, so when there are no components bound to the service, the system destroys it.</p>

<p>A foreground service is a service that&rsquo;s considered to be something the user is actively aware of and thus not a candidate for the system to kill when low on memory. A foreground service must provide a notification for the status bar, which is placed under the &ldquo;Ongoing&rdquo; heading, which means that the notification cannot be dismissed unless the service is either stopped or removed from the foreground.一个前台service必须提供一个notification。</p>

<p>To request that your service run in the foreground, call startForeground(). This method takes two parameters: an integer that uniquely identifies the notification and the Notification for the status bar. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Notification</span> <span class="n">notification</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Notification</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">icon</span><span class="o">,</span> <span class="n">getText</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">ticker_text</span><span class="o">),</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
</span><span class='line'><span class="n">Intent</span> <span class="n">notificationIntent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">ExampleActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">PendingIntent</span> <span class="n">pendingIntent</span> <span class="o">=</span> <span class="n">PendingIntent</span><span class="o">.</span><span class="na">getActivity</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">notificationIntent</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="n">notification</span><span class="o">.</span><span class="na">setLatestEventInfo</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">getText</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">notification_title</span><span class="o">),</span>
</span><span class='line'>        <span class="n">getText</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">notification_message</span><span class="o">),</span> <span class="n">pendingIntent</span><span class="o">);</span>
</span><span class='line'><span class="n">startForeground</span><span class="o">(</span><span class="n">ONGOING_NOTIFICATION_ID</span><span class="o">,</span> <span class="n">notification</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The integer ID you give to startForeground() must not be 0.</p>

<p>To remove the service from the foreground, call <code>stopForeground()</code>. This method takes a boolean, indicating whether to remove the status bar notification as well. This method does not stop the service. However, if you stop the service while it&rsquo;s still running in the foreground, then the notification is also removed.调用<code>stopForeground</code>来停止service前台执行，传入boolean值来指定是否去除statusbar notification，这个方法不会停止service执行，但如果service停止执行了，notification也会被移除。</p>

<p>The service lifecycle—from when it&rsquo;s created to when it&rsquo;s destroyed—can follow two different paths:</p>

<ul>
<li><code>A started service</code>:The service is created when another component calls startService(). The service then runs indefinitely and must stop itself by calling stopSelf(). Another component can also stop the service by calling stopService(). When the service is stopped, the system destroys it..</li>
<li><code>A bound service</code>:The service is created when another component (a client) calls bindService(). The client then communicates with the service through an IBinder interface. The client can close the connection by calling unbindService(). Multiple clients can bind to the same service and when all of them unbind, the system destroys the service. (The service does not need to stop itself.)</li>
</ul>


<center><p><img src="http://Solarex.github.io/images/service_lifecycle.png"></p></center>


<p>By implementing these methods, you can monitor two nested loops of the service&rsquo;s lifecycle:</p>

<ul>
<li>The entire lifetime of a service happens between the time onCreate() is called and the time onDestroy() returns. Like an activity, a service does its initial setup in onCreate() and releases all remaining resources in onDestroy(). For example, a music playback service could create the thread where the music will be played in onCreate(), then stop the thread in onDestroy().The onCreate() and onDestroy() methods are called for all services, whether they&rsquo;re created by startService() or bindService().</li>
<li>The active lifetime of a service begins with a call to either onStartCommand() or onBind(). Each method is handed the Intent that was passed to either startService() or bindService(), respectively.
If the service is started, the active lifetime ends the same time that the entire lifetime ends (the service is still active even after onStartCommand() returns). If the service is bound, the active lifetime ends when onUnbind() returns.</li>
</ul>


<h3>Bound Services</h3>

<h3>AIDL</h3>

<h2>ContentProviders</h2>

<p>Content providers manage access to a structured set of data. They encapsulate the data, and provide mechanisms for defining data security. Content providers are the standard interface that connects data in one process with code running in another process.ContentProvider提供管理数据的方法，他们封装数据并保证数据安全性。When you want to access data in a content provider, you use the <code>ContentResolver</code> object in your application&rsquo;s <code>Context</code> to communicate with the provider as a client. The <code>ContentResolver</code> object communicates with the provider object, an instance of a class that implements <code>ContentProvider</code>. The provider object receives data requests from clients, performs the requested action, and returns the results.想要访问ContentProvider提供的数据，需要使用ContentResolver来做一层代理。</p>

<p>Android itself includes content providers that manage data such as audio, video, images, and personal contact information. You can see some of them listed in the reference documentation for the <code>android.provider</code> package. With some restrictions, these providers are accessible to any Android application.Android本身提供了访问audio,video,images和personal contact information等数据的ContentProvider，其他应用程序只需要有一定的权限就可以使用这些数据。</p>

<h3>ContentProvider Basics</h3>

<p>A content provider manages access to a central repository of data. A provider is part of an Android application, which often provides its own UI for working with the data. However, content providers are primarily intended to be used by other applications, which access the provider using a provider client object. Together, providers and provider clients offer a consistent, standard interface to data that also handles inter-process communication and secure data access.ContentProvider是Android应用程序的一部分，通常提供操作数据的自己的UI。Provider和Provider clients 提供了一个持久的标准接口来操作数据，同事进行 IPC 和 数据安全性。An application accesses the data from a content provider with a <code>ContentResolver</code> client object. This object has methods that call identically-named methods in the provider object, an instance of one of the concrete subclasses of ContentProvider. The <code>ContentResolver</code>methods provide the basic &ldquo;CRUD&rdquo; (create, retrieve, update, and delete) functions of persistent storage.The <code>ContentResolver</code> object in the client application&rsquo;s process and the <code>ContentProvider</code> object in the application that owns the provider automatically handle inter-process communication. <code>ContentProvider</code> also acts as an abstraction layer between its repository of data and the external appearance of data as tables.<code>ContentResolver</code>和<code>ContentProvider</code>自动进行IPC，<code>CotentProvider</code>在数据和操作数据的接口之间充当了一个抽象层。</p>

<p>A content URI is a URI that identifies data in a provider. Content URIs include the symbolic name of the entire provider (its authority) and a name that points to a table (a path). When you call a client method to access a table in a provider, the content URI for the table is one of the arguments.In the preceding lines of code, the constant CONTENT_URI contains the content URI of the user dictionary&rsquo;s &ldquo;words&rdquo; table. The ContentResolver object parses out the URI&rsquo;s authority, and uses it to &ldquo;resolve&rdquo; the provider by comparing the authority to a system table of known providers.<code>ContentResolver</code>解析URI authority，利用他来和系统中所知的providet table进行对比解析得出正确的ContentProvider。 The ContentResolver can then dispatch the query arguments to the correct provider.</p>

<p>The <code>Uri</code> and <code>Uri.Builder</code> classes contain convenience methods for constructing well-formed Uri objects from strings. The <code>ContentUris</code> contains convenience methods for appending id values to a URI. The previous snippet <code>Uri singleUri = ContentUris.withAppendedId(UserDictionary.Words.CONTENT_URI,4);</code>uses <code>withAppendedId()</code> to append an id to the UserDictionary content URI.</p>

<p>To retrieve data from a provider, follow these basic steps:</p>

<ul>
<li>Request the read access permission for the provider.</li>
<li>Define the code that sends a query to the provider.</li>
</ul>


<p>为了从ContentProvider中获取数据，需要申请ContentProvider的读权限，定义查询ContentProvider的代码。</p>

<p>To retrieve data from a provider, your application needs &ldquo;read access permission&rdquo; for the provider. You can&rsquo;t request this permission at run-time; instead, you have to specify that you need this permission in your manifest, using the &lt;uses-permission> element and the exact permission name defined by the provider. When you specify this element in your manifest, you are in effect &ldquo;requesting&rdquo; this permission for your application. When users install your application, they implicitly grant this request.为了读取ContentProvider的数据，应用需要有ContentProvider定义的权限，可以读取数据。</p>

<p>To retrieve data from a provider, your application needs &ldquo;read access permission&rdquo; for the provider. You can&rsquo;t request this permission at run-time; instead, you have to specify that you need this permission in your manifest, using the <code>&lt;uses-permission&gt;</code> element and the exact permission name defined by the provider. When you specify this element in your manifest, you are in effect &ldquo;requesting&rdquo; this permission for your application. When users install your application, they implicitly grant this request.为了获取ContentProvider的数据，必须在manifest中申请相关权限。</p>

<p>The <code>ContentResolver.query()</code> client method always returns a <code>Cursor</code> containing the columns specified by the query&rsquo;s projection for the rows that match the query&rsquo;s selection criteria. A <code>Cursor</code> object provides <strong>random read access</strong> to the rows and columns it contains. Using Cursor methods, you can iterate over the rows in the results, determine the data type of each column, get the data out of a column, and examine other properties of the results. Some <code>Cursor</code> implementations automatically update the object when the provider&rsquo;s data changes, or trigger methods in an observer object when the Cursor changes, or both.<code>ContentResolver.query()</code>返回一个<code>Cursor</code>。If no rows match the selection criteria, the provider returns a <code>Cursor</code> object for which <code>Cursor.getCount()</code> is 0 (an empty cursor).如果没有行匹配查询条件，则返回一个<code>Cursor.getCount()</code>为0的<code>Cursor</code>。If an internal error occurs, the results of the query depend on the particular provider. It may choose to return null, or it may throw an Exception.Since a Cursor is a &ldquo;list&rdquo; of rows, a good way to display the contents of a Cursor is to link it to a <code>ListView</code> via a <code>SimpleCursorAdapter</code>.To back a ListView with a Cursor, the cursor must contain a column named <em>ID. Because of this, the query shown previously retrieves the <code>_ID</code> column for the &ldquo;words&rdquo; table, even though the ListView doesn&rsquo;t display it. This restriction also explains why most providers have a </em>ID column for each of their tables.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Defines a list of columns to retrieve from the Cursor and load into an output row</span>
</span><span class='line'><span class="n">String</span><span class="o">[]</span> <span class="n">mWordListColumns</span> <span class="o">=</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">UserDictionary</span><span class="o">.</span><span class="na">Words</span><span class="o">.</span><span class="na">WORD</span><span class="o">,</span>   <span class="c1">// Contract class constant containing the word column name</span>
</span><span class='line'>    <span class="n">UserDictionary</span><span class="o">.</span><span class="na">Words</span><span class="o">.</span><span class="na">LOCALE</span>  <span class="c1">// Contract class constant containing the locale column name</span>
</span><span class='line'><span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Defines a list of View IDs that will receive the Cursor columns for each row</span>
</span><span class='line'><span class="kt">int</span><span class="o">[]</span> <span class="n">mWordListItems</span> <span class="o">=</span> <span class="o">{</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">dictWord</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">locale</span><span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Creates a new SimpleCursorAdapter</span>
</span><span class='line'><span class="n">mCursorAdapter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleCursorAdapter</span><span class="o">(</span>
</span><span class='line'>    <span class="n">getApplicationContext</span><span class="o">(),</span>               <span class="c1">// The application&#39;s Context object</span>
</span><span class='line'>    <span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">wordlistrow</span><span class="o">,</span>                  <span class="c1">// A layout in XML for one row in the ListView</span>
</span><span class='line'>    <span class="n">mCursor</span><span class="o">,</span>                               <span class="c1">// The result from the query</span>
</span><span class='line'>    <span class="n">mWordListColumns</span><span class="o">,</span>                      <span class="c1">// A string array of column names in the cursor</span>
</span><span class='line'>    <span class="n">mWordListItems</span><span class="o">,</span>                        <span class="c1">// An integer array of view IDs in the row layout</span>
</span><span class='line'>    <span class="mi">0</span><span class="o">);</span>                                    <span class="c1">// Flags (usually none are needed)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Sets the adapter for the ListView</span>
</span><span class='line'><span class="n">mWordList</span><span class="o">.</span><span class="na">setAdapter</span><span class="o">(</span><span class="n">mCursorAdapter</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Determine the column index of the column named &quot;word&quot;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">mCursor</span><span class="o">.</span><span class="na">getColumnIndex</span><span class="o">(</span><span class="n">UserDictionary</span><span class="o">.</span><span class="na">Words</span><span class="o">.</span><span class="na">WORD</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Only executes if the cursor is valid. The User Dictionary Provider returns null if</span>
</span><span class='line'><span class="cm"> * an internal error occurs. Other providers may throw an Exception instead of returning null.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">mCursor</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * Moves to the next row in the cursor. Before the first movement in the cursor, the</span>
</span><span class='line'><span class="cm">     * &quot;row pointer&quot; is -1, and if you try to retrieve data at that position you will get an</span>
</span><span class='line'><span class="cm">     * exception.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">mCursor</span><span class="o">.</span><span class="na">moveToNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Gets the value from the column.</span>
</span><span class='line'>        <span class="n">newWord</span> <span class="o">=</span> <span class="n">mCursor</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Insert code here to process the retrieved word.</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// end of while loop</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Insert code here to report an error if the cursor is null or the provider threw an exception.</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A provider&rsquo;s application can specify permissions that other applications must have in order to access the provider&rsquo;s data. These permissions ensure that the user knows what data an application will try to access. Based on the provider&rsquo;s requirements, other applications request the permissions they need in order to access the provider. End users see the requested permissions when they install the application.包含ContentProvider的应用程序定义一个应用程序获取这个ContentProvider所需的权限，要获取应用数据的应用程序申请权限，应用程序在安装时会将需要的各种权限展现给用户。</p>

<p>If a provider&rsquo;s application doesn&rsquo;t specify any permissions, then other applications have no access to the provider&rsquo;s data. However, components in the provider&rsquo;s application always have full read and write access, regardless of the specified permissions.如果包含ContentProvider的应用程序没有定义访问ContentProvider数据需要的各种权限，则在这个应用程序外部无法访问这个ContentProvider数据，但是应用程序内部可以读写ContentProvider数据。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Defines a new Uri object that receives the result of the insertion</span>
</span><span class='line'><span class="n">Uri</span> <span class="n">mNewUri</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Defines an object to contain the new values to insert</span>
</span><span class='line'><span class="n">ContentValues</span> <span class="n">mNewValues</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ContentValues</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Sets the values of each column and inserts the word. The arguments to the &quot;put&quot;</span>
</span><span class='line'><span class="cm"> * method are &quot;column name&quot; and &quot;value&quot;</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">mNewValues</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">UserDictionary</span><span class="o">.</span><span class="na">Words</span><span class="o">.</span><span class="na">APP_ID</span><span class="o">,</span> <span class="s">&quot;example.user&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">mNewValues</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">UserDictionary</span><span class="o">.</span><span class="na">Words</span><span class="o">.</span><span class="na">LOCALE</span><span class="o">,</span> <span class="s">&quot;en_US&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">mNewValues</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">UserDictionary</span><span class="o">.</span><span class="na">Words</span><span class="o">.</span><span class="na">WORD</span><span class="o">,</span> <span class="s">&quot;insert&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">mNewValues</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">UserDictionary</span><span class="o">.</span><span class="na">Words</span><span class="o">.</span><span class="na">FREQUENCY</span><span class="o">,</span> <span class="s">&quot;100&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">mNewUri</span> <span class="o">=</span> <span class="n">getContentResolver</span><span class="o">().</span><span class="na">insert</span><span class="o">(</span>
</span><span class='line'>    <span class="n">UserDictionary</span><span class="o">.</span><span class="na">Word</span><span class="o">.</span><span class="na">CONTENT_URI</span><span class="o">,</span>   <span class="c1">// the user dictionary content URI</span>
</span><span class='line'>    <span class="n">mNewValues</span>                          <span class="c1">// the values to insert</span>
</span><span class='line'><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The data for the new row goes into a single <code>ContentValues</code> object, which is similar in form to a one-row <code>cursor</code>.要插入的一行数据。The columns in this object don&rsquo;t need to have the same data type, and if you don&rsquo;t want to specify a value at all, you can set a column to null using <code>ContentValues.putNull()</code>.</p>

<p>The content URI returned in newUri identifies the newly-added row, with the following format:<code>content://user_dictionary/words/&lt;id_value&gt;</code>,The &lt;id_value> is the contents of <code>_ID</code> for the new row. Most providers can detect this form of content URI automatically and then perform the requested operation on that particular row.To get the value of <code>_ID</code> from the returned <code>Uri</code>, call <code>ContentUris.parseId()</code>.插入数据后返回一个URI，可以使用<code>ContentUris.parseId(uri)</code>来获取插入数据的<code>_ID</code>字段。</p>

<p>To update a row, you use a ContentValues object with the updated values just as you do with an insertion, and selection criteria just as you do with a query. The client method you use is ContentResolver.update(). You only need to add values to the ContentValues object for columns you&rsquo;re updating. If you want to clear the contents of a column, set the value to null.更新操作和插入操作差不多。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Defines an object to contain the updated values</span>
</span><span class='line'><span class="n">ContentValues</span> <span class="n">mUpdateValues</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ContentValues</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Defines selection criteria for the rows you want to update</span>
</span><span class='line'><span class="n">String</span> <span class="n">mSelectionClause</span> <span class="o">=</span> <span class="n">UserDictionary</span><span class="o">.</span><span class="na">Words</span><span class="o">.</span><span class="na">LOCALE</span> <span class="o">+</span>  <span class="s">&quot;LIKE ?&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">String</span><span class="o">[]</span> <span class="n">mSelectionArgs</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;en_%&quot;</span><span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Defines a variable to contain the number of updated rows</span>
</span><span class='line'><span class="kt">int</span> <span class="n">mRowsUpdated</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Sets the updated value and updates the selected words.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">mUpdateValues</span><span class="o">.</span><span class="na">putNull</span><span class="o">(</span><span class="n">UserDictionary</span><span class="o">.</span><span class="na">Words</span><span class="o">.</span><span class="na">LOCALE</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">mRowsUpdated</span> <span class="o">=</span> <span class="n">getContentResolver</span><span class="o">().</span><span class="na">update</span><span class="o">(</span>
</span><span class='line'>    <span class="n">UserDictionary</span><span class="o">.</span><span class="na">Words</span><span class="o">.</span><span class="na">CONTENT_URI</span><span class="o">,</span>   <span class="c1">// the user dictionary content URI</span>
</span><span class='line'>    <span class="n">mUpdateValues</span>                       <span class="c1">// the columns to update</span>
</span><span class='line'>    <span class="n">mSelectionClause</span>                    <span class="c1">// the column to select on</span>
</span><span class='line'>    <span class="n">mSelectionArgs</span>                      <span class="c1">// the value to compare to</span>
</span><span class='line'><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Deleting rows is similar to retrieving row data: you specify selection criteria for the rows you want to delete and the client method returns the number of deleted rows. The following snippet deletes rows whose appid matches &ldquo;user&rdquo;. The method returns the number of deleted rows.删除操作返回删除的行数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Defines selection criteria for the rows you want to delete</span>
</span><span class='line'><span class="n">String</span> <span class="n">mSelectionClause</span> <span class="o">=</span> <span class="n">UserDictionary</span><span class="o">.</span><span class="na">Words</span><span class="o">.</span><span class="na">APP_ID</span> <span class="o">+</span> <span class="s">&quot; LIKE ?&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">String</span><span class="o">[]</span> <span class="n">mSelectionArgs</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;user&quot;</span><span class="o">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Defines a variable to contain the number of rows deleted</span>
</span><span class='line'><span class="kt">int</span> <span class="n">mRowsDeleted</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Deletes the words that match the selection criteria</span>
</span><span class='line'><span class="n">mRowsDeleted</span> <span class="o">=</span> <span class="n">getContentResolver</span><span class="o">().</span><span class="na">delete</span><span class="o">(</span>
</span><span class='line'>    <span class="n">UserDictionary</span><span class="o">.</span><span class="na">Words</span><span class="o">.</span><span class="na">CONTENT_URI</span><span class="o">,</span>   <span class="c1">// the user dictionary content URI</span>
</span><span class='line'>    <span class="n">mSelectionClause</span>                    <span class="c1">// the column to select on</span>
</span><span class='line'>    <span class="n">mSelectionArgs</span>                      <span class="c1">// the value to compare to</span>
</span><span class='line'><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Three alternative forms of provider access are important in application development:</p>

<ul>
<li><code>Batch access</code>: You can create a batch of access calls with methods in the ContentProviderOperation class, and then apply them with <code>ContentResolver.applyBatch()</code>.批量操作</li>
<li><code>Asynchronous queries</code>: You should do queries in a separate thread. One way to do this is to use a <code>CursorLoader</code> object. 异步查询</li>
<li><code>Data access via intents</code>: Although you can&rsquo;t send an intent directly to a provider, you can send an intent to the provider&rsquo;s application, which is usually the best-equipped to modify the provider&rsquo;s data.向包含ContentProvider的应用程序发Intent，由应用程序来操作数据。</li>
</ul>


<p>To access a provider in &ldquo;batch mode&rdquo;, you create an <code>array</code> of <code>ContentProviderOperation</code> objects and then dispatch them to a content provider with <code>ContentResolver.applyBatch()</code>. You pass the content provider&rsquo;s authority to this method, rather than a particular content URI. This allows each <code>ContentProviderOperation</code> object in the array to work against a different table. A call to <code>ContentResolver.applyBatch()</code> returns an array of results.</p>

<p>Intents can provide indirect access to a content provider. You allow the user to access data in a provider even if your application doesn&rsquo;t have access permissions, either by getting a result intent back from an application that has permissions, or by activating an application that has permissions and letting the user do work in it.Intent可以间接来获取数据。</p>

<p>You can access data in a content provider, even if you don&rsquo;t have the proper access permissions, by sending an intent to an application that does have the permissions and receiving back a result intent containing &ldquo;URI&rdquo; permissions. These are permissions for a specific content URI that last until the activity that receives them is finished. The application that has permanent permissions grants temporary permissions by setting a flag in the result intent:</p>

<ul>
<li><code>Read permission</code>: <code>FLAG_GRANT_READ_URI_PERMISSION</code></li>
<li><code>Write permission</code>: <code>FLAG_GRANT_WRITE_URI_PERMISSION</code></li>
</ul>


<p>These flags don&rsquo;t give general read or write access to the provider whose authority is contained in the content URI. The access is only for the URI itself.</p>

<p>A provider defines URI permissions for content URIs in its manifest, using the <code>android:grantUriPermission</code> attribute of the <code>&lt;provider&gt;</code> element, as well as the <code>&lt;grant-uri-permission&gt;</code> child element of the <code>&lt;provider&gt;</code> element.
For example, you can retrieve data for a contact in the Contacts Provider, even if you don&rsquo;t have the <code>READ_CONTACTS</code> permission. You might want to do this in an application that sends e-greetings to a contact on his or her birthday. Instead of requesting <code>READ_CONTACTS</code>, which gives you access to all of the user&rsquo;s contacts and all of their information, you prefer to let the user control which contacts are used by your application. To do this, you use the following process:</p>

<ul>
<li>Your application sends an intent containing the action <code>ACTION_PICK</code> and the &ldquo;contacts&rdquo; MIME type <code>CONTENT_ITEM_TYPE</code>, using the method <code>startActivityForResult()</code>.</li>
<li>Because this intent matches the intent filter for the People app&rsquo;s &ldquo;selection&rdquo; activity, the activity will come to the foreground.</li>
<li>In the selection activity, the user selects a contact to update. When this happens, the selection activity calls <code>setResult(resultcode, intent)</code> to set up a intent to give back to your application. The intent contains the content <code>URI</code> of the contact the user selected, and the &ldquo;extras&rdquo; flags <code>FLAG_GRANT_READ_URI_PERMISSION</code>. These flags grant URI permission to your app to read data for the contact pointed to by the content URI. The selection activity then calls <code>finish()</code> to return control to your application.</li>
<li>Your activity returns to the foreground, and the system calls your activity&rsquo;s <code>onActivityResult()</code> method. This method receives the result intent created by the selection activity in the People app.
<strong>With the content URI from the result intent, you can read the contact&rsquo;s data from the Contacts Provider, even though you didn&rsquo;t request permanent read access permission to the provider in your manifest.</strong> You can then get the contact&rsquo;s birthday information or his or her email address and then send the e-greeting.</li>
</ul>


<p>Content providers can return standard MIME media types, or custom MIME type strings, or both.MIME types have the format:<code>type/subtype</code>.Custom MIME type strings, also called &ldquo;vendor-specific&rdquo; MIME types, have more complex type and subtype values. The type value is always <code>vnd.android.cursor.dir</code> for multiple rows, or <code>vnd.android.cursor.item</code>for a single row.</p>

<p>The subtype is provider-specific. The Android built-in providers usually have a simple subtype. For example, the when the Contacts application creates a row for a telephone number, it sets the following MIME type in the row:<code>vnd.android.cursor.item/phone_v2</code>.Notice that the subtype value is simply phone_v2.</p>

<p>Other provider developers may create their own pattern of subtypes based on the provider&rsquo;s authority and table names. For example, consider a provider that contains train timetables. The provider&rsquo;s authority is <code>com.example.trains</code>, and it contains the tables <code>Line1, Line2, and Line3</code>. In response to the content URI <code>content://com.example.trains/Line1</code> for table <code>Line1</code>, the provider returns the MIME type <code>vnd.android.cursor.dir/vnd.example.line1</code>,In response to the content URI <code>content://com.example.trains/Line2/5</code> for row 5 in table Line2, the provider returns the MIME type <code>vnd.android.cursor.item/vnd.example.line2</code>. Most content providers define contract class constants for the MIME types they use. The Contacts Provider contract class <code>ContactsContract.RawContacts</code>, for example, defines the constant <code>CONTENT_ITEM_TYPE</code> for the MIME type of a single raw contact row.</p>

<h3>Creating a Content Provider</h3>

<p>Follow these steps to build your provider:</p>

<ul>
<li><p>Design the raw storage for your data. A content provider offers data in two ways:</p>

<ul>
<li><code>File data</code>:Data that normally goes into files, such as photos, audio, or videos. Store the files in your application&rsquo;s private space. In response to a request for a file from another application, your provider can offer a handle to the file.数据以文件方式保存。</li>
<li><code>"Structured" data</code>:Data that normally goes into a database, array, or similar structure. Store the data in a form that&rsquo;s compatible with tables of rows and columns. A row represents an entity, such as a person or an item in inventory. A column represents some data for the entity, such a person&rsquo;s name or an item&rsquo;s price. A common way to store this type of data is in an SQLite database, but you can use any type of persistent storage. 以数据库方式存储。</li>
</ul>
</li>
<li><p>Define a concrete implementation of the ContentProvider class and its required methods. This class is the interface between your data and the rest of the Android system. 继承<code>ContentProvider</code>并实现方法。</p></li>
<li>Define the provider&rsquo;s authority string, its content URIs, and column names. If you want the provider&rsquo;s application to handle intents, also define intent actions, extras data, and flags. Also define the permissions that you will require for applications that want to access your data. You should consider defining all of these values as constants in a separate contract class; later, you can expose this class to other developers. For more information about content URIs, see the section Designing Content URIs. For more information about intents, see the section Intents and Data Access.</li>
<li>Add other optional pieces, such as sample data or an implementation of AbstractThreadedSyncAdapter that can synchronize data between the provider and cloud-based data.</li>
</ul>


<p>A content provider is the interface to data saved in a structured format. Before you create the interface, you must decide how to store the data. You can store the data in any form you like, and then design the interface to read and write the data as necessary.ContentProvider是数据访问的接口，在创建接口之前先确定如何保存数据然后定义读写数据的接口。These are some of the data storage technologies that are available in Android:</p>

<ul>
<li>The Android system includes an SQLite database API that Android&rsquo;s own providers use to store table-oriented data. The <code>SQLiteOpenHelper</code> class helps you create databases, and the <code>SQLiteDatabase</code> class is the base class for accessing databases.Remember that you don&rsquo;t have to use a database to implement your repository. A provider appears externally as a set of tables, similar to a relational database, but this is not a requirement for the provider&rsquo;s internal implementation.Android系统提供来SQLite支持，可以使用<code>SQLiteOpenHelper</code>来创建数据库，<code>SQLiteDatabase</code>来访问数据库，对外ContentProvider表现为几张表，但并不代表内部一定要以表的形式来存储数据。</li>
<li>For storing file data, Android has a variety of file-oriented APIs. If you&rsquo;re designing a provider that offers media-related data such as music or videos, you can have a provider that combines table data and files.如果需要提供媒体相关的数据，如音乐或者视频可以使用文件来存储数据。</li>
<li>For working with network-based data, use classes in <code>java.net</code> and <code>android.net</code>. You can also synchronize network-based data to a local data store such as a database, and then offer the data as tables or files. 对于网络存储的数据，可以使用<code>java.net</code>和<code>android.net</code>来和本地保存同步。</li>
</ul>


<p>Implementing a content provider involves always the following steps:</p>

<ul>
<li>Create a class that extends ContentProvider</li>
<li>Create a contract class</li>
<li>Create the UriMatcher definition</li>
<li>Implement the onCreate() method</li>
<li>Implement the getType() method</li>
<li>Implement the CRUD methods</li>
<li>Add the content provider to your AndroidManifest.xml</li>
</ul>


<h3>Calendar Provider</h3>

<h3>Contacts Provider</h3>

<h3>Storage Access Framework</h3>

<h2>Intent and Intent Filters</h2>

<p>Three of the core components of an application — <code>activities</code>, <code>services</code>, and <code>broadcast receivers</code> — are activated through messages, called <code>intents</code>. Intent messaging is a facility for late run-time binding between components in the same or different applications. The intent itself, an Intent object, is a passive data structure holding an abstract description of an operation to be performed — or, often in the case of broadcasts, a description of something that has happened and is being announced. There are separate mechanisms for delivering intents to each type of component:</p>

<ul>
<li>An Intent object is passed to <code>Context.startActivity()</code> or <code>Activity.startActivityForResult()</code> to launch an activity or get an existing activity to do something new. (It can also be passed to <code>Activity.setResult()</code> to return information to the activity that called <code>startActivityForResult()</code>.)</li>
<li>An Intent object is passed to <code>Context.startService()</code> to initiate a service or deliver new instructions to an ongoing service. Similarly, an intent can be passed to <code>Context.bindService()</code> to establish a connection between the calling component and a target service. It can optionally initiate the service if it&rsquo;s not already running.</li>
<li>Intent objects passed to any of the broadcast methods (such as <code>Context.sendBroadcast()</code>, <code>Context.sendOrderedBroadcast()</code>, or <code>Context.sendStickyBroadcast()</code>) are delivered to all interested broadcast receivers. Many kinds of broadcasts originate in system code.</li>
</ul>


<p>An Intent object is a bundle of information. It contains information of interest to the component that receives the intent (such as the action to be taken and the data to act on) plus information of interest to the Android system (such as the category of component that should handle the intent and instructions on how to launch a target activity). Principally, it can contain the following:</p>

<ul>
<li><code>Component name</code>:The name of the component that should handle the intent. This field is a ComponentName object — a combination of the fully qualified class name of the target component (for example &ldquo;com.example.project.app.FreneticActivity&rdquo;) and the package name set in the manifest file of the application where the component resides (for example, &ldquo;com.example.project&rdquo;). The package part of the component name and the package name set in the manifest do not necessarily have to match.组件名称The component name is optional. If it is set, the Intent object is delivered to an instance of the designated class. If it is not set, Android uses other information in the Intent object to locate a suitable target — see Intent Resolution, later in this document.The component name is set by <code>setComponent()</code>, <code>setClass()</code>, or <code>setClassName()</code> and read by <code>getComponent(</code>.Component name可以通过<code>Intent</code>方法<code>setComponent</code>，<code>setClass</code>，<code>setClassName</code>来设置，通过<code>getComponent</code>来读取。</li>
<li><code>Action</code>:A string naming the action to be performed — or, in the case of broadcast intents, the action that took place and is being reported. The Intent class defines a number of action constants, including these:<code>ACTION_CALL,ACTION_EDIT,ACTION_MAIN,ACTION_SYNC</code>由activity来接收处理，<code>ACTION_BATTERY_LOW,ACTION_HEADSET_PLUG,ACTION_SCREEN_ON,ACTION_TIMEZONE_CHANGED</code>由Broadcast receiver来接收处理。The action in an Intent object is set by the <code>setAction()</code> method and read by <code>getAction()</code>.Action可以通过Intent方法<code>setAction</code>来设置，<code>getAction</code>来读取。</li>
<li><code>Data</code>:The URI of the data to be acted on and the MIME type of that data. Different actions are paired with different kinds of data specifications. For example, if the action field is <code>ACTION_EDIT</code>, the data field would contain the URI of the document to be displayed for editing. If the action is <code>ACTION_CALL</code>, the data field would be a <code>tel:</code> URI with the number to call. Similarly, if the action is <code>ACTION_VIEW</code> and the data field is an <code>http:</code> URI, the receiving activity would be called upon to download and display whatever data the URI refers to.When matching an intent to a component that is capable of handling the data, it&rsquo;s often important to know the type of data (its MIME type) in addition to its URI. For example, a component able to display image data should not be called upon to play an audio file.在解析应用时，除了URI之外最好知道data的mime类型。In many cases, the data type can be inferred from the URI — particularly content: URIs, which indicate that the data is located on the device and controlled by a content provider .通常情况下，可以从URI来推断出数据类型。 But the type can also be explicitly set in the Intent object. The <code>setData()</code> method specifies data only as a URI, <code>setType()</code> specifies it only as a <code>MIME</code> type, and <code>setDataAndType()</code> specifies it as both a URI and a MIME type. The URI is read by <code>getData()</code> and the type by <code>getType()</code>.</li>
<li><code>Category</code>:A string containing additional information about the kind of component that should handle the intent.指定什么类型的应用可以对Intent作出响应。 Any number of category descriptions can be placed in an Intent object. As it does for actions, the Intent class defines several category constants, including these:<code>CATEGORY_BROWSABLE</code>,<code>CATEGORY_GADGET</code>,<code>CATEGORY_HOME</code>,<code>CATEGORY_LAUNCHER</code>,<code>CATEGORY_PREFERENCE</code>.The <code>addCategory()</code> method places a category in an Intent object, <code>removeCategory()</code> deletes a category previously added, and <code>getCategories()</code> gets the set of all categories currently in the object.</li>
<li><code>Extras</code>:Key-value pairs for additional information that should be delivered to the component handling the intent. Just as some actions are paired with particular kinds of data URIs, some are paired with particular extras.键值对来提供额外的信息。The Intent object has a series of <code>put...()</code> methods for inserting various types of extra data and a similar set of <code>get...()</code> methods for reading the data. These methods parallel those for <code>Bundle</code> objects. In fact, the extras can be installed and read as a <code>Bundle</code> using the <code>putExtras()</code> and <code>getExtras()</code> methods.</li>
<li><code>Flags</code>：Flags of various sorts. Many instruct the Android system how to launch an activity (for example, which task the activity should belong to) and how to treat it after it&rsquo;s launched (for example, whether it belongs in the list of recent activities). All these flags are defined in the Intent class.</li>
</ul>


<p>Android delivers an explicit intent to an instance of the designated target class. Nothing in the Intent object other than the component name matters for determining which component should get the intent.显式Intent</p>

<p>A different strategy is needed for implicit intents. In the absence of a designated target, the Android system must find the best component (or components) to handle the intent — a single activity or service to perform the requested action or the set of broadcast receivers to respond to the broadcast announcement. It does so by comparing the contents of the Intent object to intent filters, structures associated with components that can potentially receive intents. Filters advertise the capabilities of a component and delimit the intents it can handle. They open the component to the possibility of receiving implicit intents of the advertised type. If a component does not have any intent filters, it can receive only explicit intents.处理隐式Intent需要不同的策略。通过比较Intent与应用声明的intent filter来解析Intent。A component with filters can receive both explicit and implicit intents.Only three aspects of an Intent object are consulted when the object is tested against an intent filter:</p>

<ul>
<li>action</li>
<li>data (both URI and data type)</li>
<li>category</li>
</ul>


<p>The <code>extras</code> and <code>flags</code> play no part in resolving which component receives an intent.</p>

<p>For an intent to pass the category test, every category in the Intent object must match a category in the filter. The filter can list additional categories, but it cannot omit any that are in the intent.Intent中只要有一个和intent filter中category相匹配，就可以通过。In principle, therefore, an Intent object with no categories should always pass this test, regardless of what&rsquo;s in the filter. That&rsquo;s mostly true. However, with one exception, Android treats all implicit intents passed to <code>startActivity()</code> as if they contained at least one category: <code>"android.intent.category.DEFAULT"</code> (the <code>CATEGORY_DEFAULT</code> constant). Therefore, activities that are willing to receive implicit intents must include <code>"android.intent.category.DEFAULT"</code> in their intent filters.Activity如果想要通过隐式intent来启动，必须在intent filter中声明<code>android.intent.category.DEFAULT</code>。 (Filters with &ldquo;android.intent.action.MAIN&rdquo; and &ldquo;android.intent.category.LAUNCHER&rdquo; settings are the exception. They mark activities that begin new tasks and that are represented on the launcher screen. They can include &ldquo;android.intent.category.DEFAULT&rdquo; in the list of categories, but don&rsquo;t need to.) <code>android.intent.action.MAIN</code>和<code>android.intent.category.LAUNCHER</code>是例外，有这个intent filter的应用会显示在桌面上，可以包含<code>android.intent.category.DEFAULT</code>在intent filter的category中，但是没必要。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">intent</span><span class="o">-</span><span class="n">filter</span> <span class="o">.</span> <span class="o">.</span> <span class="o">.</span> <span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">data</span> <span class="nl">android:</span><span class="n">mimeType</span><span class="o">=</span><span class="s">&quot;video/mpeg&quot;</span> <span class="nl">android:</span><span class="n">scheme</span><span class="o">=</span><span class="s">&quot;http&quot;</span> <span class="o">.</span> <span class="o">.</span> <span class="o">.</span> <span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">data</span> <span class="nl">android:</span><span class="n">mimeType</span><span class="o">=</span><span class="s">&quot;audio/mpeg&quot;</span> <span class="nl">android:</span><span class="n">scheme</span><span class="o">=</span><span class="s">&quot;http&quot;</span> <span class="o">.</span> <span class="o">.</span> <span class="o">.</span> <span class="o">/&gt;</span>
</span><span class='line'>    <span class="o">.</span> <span class="o">.</span> <span class="o">.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">intent</span><span class="o">-</span><span class="n">filter</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each <code>&lt;data&gt;</code> element can specify a <code>URI</code> and a data type (MIME media type). There are separate attributes — scheme, host, port, and path — for each part of the URI:<code>scheme://host:port/path</code>.For example, in the following URI,<code>content://com.example.project:200/folder/subfolder/etc</code>,the scheme is &ldquo;content&rdquo;, the host is &ldquo;com.example.project&rdquo;, the port is &ldquo;200&rdquo;, and the path is &ldquo;folder/subfolder/etc&rdquo;. The host and port together constitute the URI authority; if a host is not specified, the port is ignored.When the URI in an <code>Intent</code> object is compared to a URI specification in a filter, it&rsquo;s compared only to the parts of the <code>URI</code> actually mentioned in the filter. For example, if a filter specifies only a scheme, all URIs with that scheme match the filter. If a filter specifies a scheme and an authority but no path, all URIs with the same scheme and authority match, regardless of their paths. If a filter specifies a scheme, an authority, and a path, only URIs with the same scheme, authority, and path match. However, a path specification in the filter can contain wildcards to require only a partial match of the path.URI path部分可以使用通配符。</p>

<p>The type attribute of a <code>&lt;data&gt;</code> element specifies the <code>MIME</code> type of the data. It&rsquo;s more common in filters than a URI. Both the Intent object and the filter can use a <code>"*"</code> wildcard for the subtype field — for example, <code>"text/*"</code> or <code>"audio/*"</code> — indicating any subtype matches.The data test compares both the URI and the data type in the <code>Intent</code> object to a <code>URI</code> and data type specified in the filter. The rules are as follows:</p>

<ul>
<li>An Intent object that contains neither a URI nor a data type passes the test only if the filter likewise does not specify any URIs or data types.Intent中不包含URI和data type，只有在intent filter也不包含URI和data type时才能通过intent resolve。</li>
<li>An Intent object that contains a URI but no data type (and a type cannot be inferred from the URI) passes the test only if its URI matches a URI in the filter and the filter likewise does not specify a type. This will be the case only for URIs like <code>mailto:</code> and <code>tel:</code> that do not refer to actual data.Intent中包含有URI但不包含data type时，只有intent filter同样如此时才能通过intent resolve。</li>
<li>An Intent object that contains a data type but not a URI passes the test only if the filter lists the same data type and similarly does not specify a URI.</li>
<li>An Intent object that contains both a URI and a data type (or a data type can be inferred from the URI) passes the data type part of the test only if its type matches a type listed in the filter. It passes the URI part of the test either if its URI matches a URI in the filter or if it has a <code>content:</code> or <code>file:</code> URI and the filter does not specify a URI. In other words, a component is presumed to support <code>content:</code> and <code>file:</code> data if its filter lists only a data type.如果一个Intent中包含有URI和data type，能通过data type解析的条件是和intent filter中类型中的一个相匹配。URI部分匹配要么和intent filter中相匹配，要么Intent中包含有<code>content:</code>或<code>file:</code>类型的URI，而intent filter中没有指定URI，就是说，应用程序假定支持<code>content:</code>和<code>file:</code>类型URI，如果intent filter只列举了data type。</li>
<li>If an intent can pass through the filters of more than one activity or service, the user may be asked which component to activate. An exception is raised if no target can be found.</li>
</ul>


<p>The last rule shown above for the data test, rule (d), reflects the expectation that components are able to get local data from a file or content provider. Therefore, their filters can list just a data type and do not need to explicitly name the <code>content:</code> and <code>file:</code> schemes. This is a typical case. A <code>&lt;data&gt;</code> element like the following, for example, tells Android that the component can get image data from a content provider and display it:<code>&lt;data android:mimeType="image/*" /&gt;</code>.一个应用组件可以从file或者content provider中来获取本地数据。Since most available data is dispensed by content providers, filters that specify a data type but not a URI are perhaps the most common.</p>

<p>Another common configuration is filters with a scheme and a data type. For example, a <code>&lt;data&gt;</code> element like the following tells Android that the component can get video data from the network and display it:<code>&lt;data android:scheme="http" android:type="video/*" /&gt;</code>Consider, for example, what the browser application does when the user follows a link on a web page. It first tries to display the data (as it could if the link was to an HTML page). If it can&rsquo;t display the data, it puts together an implicit intent with the scheme and data type and tries to start an activity that can do the job. If there are no takers, it asks the download manager to download the data. That puts it under the control of a content provider, so a potentially larger pool of activities (those with filters that just name a data type) can respond.点击网页上一个链接时，浏览器首先尝试解析链接数据并展示，如果无法展示，浏览器会把链接中的schema和data type放到一起来组成隐式intent，然后startActivity，如果没有activity能处理这个intent，会由download manager来将数据下载下来，下载完成后，会有能处理这种数据类型的应用来对下载下来的数据进行响应。</p>

<p>Intents are matched against intent filters not only to discover a target component to activate, but also to discover something about the set of components on the device.Intent和intent filter 匹配不仅仅用来找到能响应对应intent的应用，还可以用来发现能对某些action和category进行响应的应用分组。 For example, the Android system populates the application launcher, the top-level screen that shows the applications that are available for the user to launch, by finding all the activities with intent filters that specify the &ldquo;android.intent.action.MAIN&rdquo; action and &ldquo;android.intent.category.LAUNCHER&rdquo; category (as illustrated in the previous section). It then displays the icons and labels of those activities in the launcher.launcher应用程序的获取。 Similarly, it discovers the home screen by looking for the activity with &ldquo;android.intent.category.HOME&rdquo; in its filter. home screen桌面应用。Whenever you press the home button, all the applications installed in your phone which have <code>CATEGORY.HOME</code> category and <code>Action_Main</code> in intent-filter in their AndroidManifest.xml will be listed (unless you have chosen some application as default) in a chooser for the user to select which HOME they want to launch.</p>

<p>Your application can use intent matching is a similar way. The <code>PackageManager</code> has a set of <code>query...()</code> methods that return all components that can accept a particular intent, and a similar series of <code>resolve...()</code> methods that determine the best component to respond to an intent. For example, <code>queryIntentActivities()</code> returns a list of all activities that can perform the intent passed as an argument, and <code>queryIntentServices()</code> returns a similar list of services. Neither method activates the components; they just list the ones that can respond. There&rsquo;s a similar method, <code>queryBroadcastReceivers()</code>, for broadcast receivers.</p>

<h2>Process and Threads</h2>

<p>When an application component starts and the application does not have any other components running, the Android system starts a new Linux process for the application with a single thread of execution. By default, all components of the same application run in the same process and thread (called the &ldquo;main&rdquo; thread). If an application component starts and there already exists a process for that application (because another component from the application exists), then the component is started within that process and uses the same thread of execution. However, you can arrange for different components in your application to run in separate processes, and you can create additional threads for any process.当一个应用组件启动时，如果所在应用没有其他组件在运行，则Android系统会创建一个Linux进程来运行它，这个Linux进程默认是单线程的，又叫做主线程。如果应用组件启动时，它所在应用程序已经有组件在运行，则组件会运行在应用程序所在地进程中。默认如此，不过可以修改这种行为。</p>

<p>By default, all components of the same application run in the same process and most applications should not change this. However, if you find that you need to control which process a certain component belongs to, you can do so in the manifest file.默认应用程序组件运行在同一个进程中。The manifest entry for each type of component element—<code>&lt;activity&gt;</code>, <code>&lt;service&gt;</code>, <code>&lt;receiver&gt;</code>, and <code>&lt;provider&gt;</code>—supports an <code>android:process</code> attribute that can specify a process in which that component should run.四大组件在manifest中支持<code>android:process</code>tag来指定组件运行所在地进程。 You can set this attribute so that each component runs in its own process or so that some components share a process while others do not. You can also set <code>android:process</code> so that components of different applications run in the same process—provided that the applications share the same Linux user ID and are signed with the same certificates.不同应用如果uid相同，签名相同(sharedUid的前提是签名相同)，则可以使不同应用程序运行在同一个进程中。The <code>&lt;application&gt;</code> element also supports an <code>android:process</code> attribute, to set a default value that applies to all components.<code>&lt;application&gt;</code>也支持<code>android:process</code>tag，来将应用程序中各组件运行在同一个进程中。</p>

<p>Android might decide to shut down a process at some point, when memory is low and required by other processes that are more immediately serving the user. Application components running in the process that&rsquo;s killed are consequently destroyed. A process is started again for those components when there&rsquo;s again work for them to do.When deciding which processes to kill, the Android system weighs their relative importance to the user. Android回收内存时会将进程杀死，进程中的各个组件就会被销毁掉。</p>

<p>The Android system tries to maintain an application process for as long as possible, but eventually needs to remove old processes to reclaim memory for new or more important processes. To determine which processes to keep and which to kill, the system places each process into an &ldquo;importance hierarchy&rdquo; based on the components running in the process and the state of those components. Processes with the lowest importance are eliminated first, then those with the next lowest importance, and so on, as necessary to recover system resources.系统杀进程时，会将不那么重要的进程先杀死。</p>

<p>There are five levels in the importance hierarchy. The following list presents the different types of processes in order of importance (the first process is most important and is killed last):进程重要性有5个级别：</p>

<ul>
<li><p><code>Foreground process</code>：A process that is required for what the user is currently doing.正在与用户进行交互的前台进程。 A process is considered to be in the foreground if any of the following conditions are true:如果应用中组件做了以下任何一件事情，则会被视为前台进程。</p>

<ul>
<li>It hosts an Activity that the user is interacting with (the Activity&rsquo;s <code>onResume()</code> method has been called).Activity正处于<code>onResume</code> lifecycle中。</li>
<li>It hosts a <code>Service</code> that&rsquo;s bound to the activity that the user is interacting with.进程中service和一个正在与用户交互的activity在绑定。It hosts a <code>Service</code> that&rsquo;s running &ldquo;in the foreground&#8221;—the service has called <code>startForeground()</code>.进程中的service调用了<code>startForeground</code>。It hosts a Service that&rsquo;s executing one of its lifecycle callbacks (<code>onCreate()</code>, <code>onStart()</code>, or <code>onDestroy()</code>).进程中的service正在执行<code>onCreate</code>，<code>onStart</code>或<code>onDestory</code>生命周期回调方法。</li>
<li>It hosts a <code>BroadcastReceiver</code> that&rsquo;s executing its <code>onReceive()</code> method.进程中的<code>BroadcastReceiver</code>正在执行<code>onReceive()</code>方法。
Generally, only a few foreground processes exist at any given time. They are killed only as a last resort—if memory is so low that they cannot all continue to run. Generally, at that point, the device has reached a memory paging state, so killing some foreground processes is required to keep the user interface responsive.</li>
</ul>
</li>
<li><p><code>Visible process</code>:A process that doesn&rsquo;t have any foreground components, but still can affect what the user sees on screen. A process is considered to be visible if either of the following conditions are true:只要以下几种情况发生一个，一个进程就能被视为visible。</p>

<ul>
<li>It hosts an Activity that is not in the foreground, but is still visible to the user (its <code>onPause()</code> method has been called). This might occur, for example, if the foreground activity started a dialog, which allows the previous activity to be seen behind it.进程中有Activity不在前台，但仍然可见。Activity正在经历<code>onPause</code>生命周期回调函数。</li>
<li>It hosts a <code>Service</code> that&rsquo;s bound to a visible (or foreground) activity.进程中有service 被绑定到一个visible activity。
A visible process is considered extremely important and will not be killed unless doing so is required to keep all foreground processes running.</li>
</ul>
</li>
<li><p><code>Service process</code>：A process that is running a service that has been started with the <code>startService()</code> method and does not fall into either of the two higher categories.进程中有service通过<code>startService</code>来运行并且其他组件没有落入上面的两种情况中。 Although service processes are not directly tied to anything the user sees, they are generally doing things that the user cares about (such as playing music in the background or downloading data on the network), so the system keeps them running unless there&rsquo;s not enough memory to retain them along with all foreground and visible processes.</p></li>
<li><p><code>Background process</code>:A process holding an activity that&rsquo;s not currently visible to the user (the activity&rsquo;s <code>onStop()</code> method has been called). These processes have no direct impact on the user experience, and the system can kill them at any time to reclaim memory for a foreground, visible, or service process. Usually there are many background processes running, so they are kept in an LRU (least recently used) list to ensure that the process with the activity that was most recently seen by the user is the last to be killed. If an activity implements its lifecycle methods correctly, and saves its current state, killing its process will not have a visible effect on the user experience, because when the user navigates back to the activity, the activity restores all of its visible state. 进程中有对用户不可见的activity，很多后台进程在运行，这些对用户不可见的activity被保存在一个LRU队列中。</p></li>
<li><p><code>Empty process</code>:A process that doesn&rsquo;t hold any active application components. The only reason to keep this kind of process alive is for caching purposes, to improve startup time the next time a component needs to run in it. The system often kills these processes in order to balance overall system resources between process caches and the underlying kernel caches.进程中没有任何活动的组件，系统保留这种进程仅仅时为了cache目的。</p></li>
</ul>


<p>Android ranks a process at the highest level it can, based upon the importance of the components currently active in the process. In addition, a process&rsquo;s ranking might be increased because other processes are dependent on it—a process that is serving another process can never be ranked lower than the process it is serving.Because a process running a service is ranked higher than a process with background activities, an activity that initiates a long-running operation might do well to start a service for that operation, rather than simply create a worker thread—particularly if the operation will likely outlast the activity.由于service process 优先级比background process高，如果需要在activity中做长时间的操作，不如start a service来做这些longing-running operation，而不是在activity中创建一个worker thread来做这些操作。For example, an activity that&rsquo;s uploading a picture to a web site should start a service to perform the upload so that the upload can continue in the background even if the user leaves the activity. Using a service guarantees that the operation will have at least &ldquo;service process&rdquo; priority, regardless of what happens to the activity. This is the same reason that broadcast receivers should employ services rather than simply put time-consuming operations in a thread.</p>

<p>When an application is launched, the system creates a thread of execution for the application, called &ldquo;main.&rdquo; This thread is very important because it is in charge of dispatching events to the appropriate user interface widgets, including drawing events. It is also the thread in which your application interacts with components from the Android UI toolkit (components from the android.widget and android.view packages). As such, the main thread is also sometimes called the UI thread.主线程(UI线程)</p>

<p>The system does not create a separate thread for each instance of a component. All components that run in the same process are instantiated in the UI thread, and system calls to each component are dispatched from that thread. Consequently, methods that respond to system callbacks (such as <code>onKeyDown()</code> to report user actions or a lifecycle callback method) always run in the UI thread of the process.应用的每个组件都运行在主线程中。For instance, when the user touches a button on the screen, your app&rsquo;s UI thread dispatches the touch event to the widget, which in turn sets its pressed state and posts an invalidate request to the event queue. The UI thread dequeues the request and notifies the widget that it should redraw itself.</p>

<p>When your app performs intensive work in response to user interaction, this single thread model can yield poor performance unless you implement your application properly. Specifically, if everything is happening in the UI thread, performing long operations such as network access or database queries will block the whole UI. When the thread is blocked, no events can be dispatched, including drawing events.当UI线程被耗时操作阻塞时，事件不会得到分发，包括重绘事件。 From the user&rsquo;s perspective, the application appears to hang.从用户角度看，界面好像卡住了。 Even worse, if the UI thread is blocked for more than a few seconds (about 5 seconds currently) the user is presented with the infamous &ldquo;application not responding&rdquo; (ANR) dialog.如果UI线程被阻塞超过了5s，将会弹给用户一个ANR对话框。 The user might then decide to quit your application and uninstall it if they are unhappy.</p>

<p>Additionally, the Andoid UI toolkit is not thread-safe. So, you must not manipulate your UI from a worker thread—you must do all manipulation to your user interface from the UI thread.必须在UI线程中操作用户界面。 Thus, there are simply two rules to Android&rsquo;s single thread model:Do not block the UI thread,Do not access the Android UI toolkit from outside the UI thread.不要阻塞UI线程，不要在UI线程之外操作UI。</p>

<p>Android offers several ways to access the UI thread from other threads. Here is a list of methods that can help:Android系统提供了几种方式来供其他线程来操作UI线程。</p>

<ul>
<li><code>Activity.runOnUiThread(Runnable)</code></li>
<li><code>View.post(Runnable)</code></li>
<li><code>View.postDelayed(Runnable, long)</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">Bitmap</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="n">loadImageFromNetwork</span><span class="o">(</span><span class="s">&quot;http://example.com/image.png&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mImageView</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">mImageView</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">bitmap</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To handle more complex interactions with a worker thread, you might consider using a <code>Handler</code> in your worker thread, to process messages delivered from the UI thread. Perhaps the best solution, though, is to extend the <code>AsyncTask</code> class, which simplifies the execution of worker thread tasks that need to interact with the UI.</p>

<p><code>AsyncTask</code> allows you to perform asynchronous work on your user interface. It performs the blocking operations in a worker thread and then publishes the results on the UI thread, without requiring you to handle threads and/or handlers yourself.To use it, you must subclass AsyncTask and implement the doInBackground() callback method, which runs in a pool of background threads. To update your UI, you should implement <code>onPostExecute()</code>, which delivers the result from <code>doInBackground()</code> and runs in the UI thread, so you can safely update your UI. You can then run the task by calling <code>execute()</code> from the UI thread.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">DownloadImageTask</span><span class="o">().</span><span class="na">execute</span><span class="o">(</span><span class="s">&quot;http://example.com/image.png&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">class</span> <span class="nc">DownloadImageTask</span> <span class="kd">extends</span> <span class="n">AsyncTask</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Void</span><span class="o">,</span> <span class="n">Bitmap</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="cm">/** The system calls this to perform work in a worker thread and</span>
</span><span class='line'><span class="cm">      * delivers it the parameters given to AsyncTask.execute() */</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">Bitmap</span> <span class="nf">doInBackground</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">urls</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">loadImageFromNetwork</span><span class="o">(</span><span class="n">urls</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/** The system calls this to perform work in the UI thread and delivers</span>
</span><span class='line'><span class="cm">      * the result from doInBackground() */</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPostExecute</span><span class="o">(</span><span class="n">Bitmap</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mImageView</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is a quick overview of how <code>AsyncTask</code> works:</p>

<ul>
<li>You can specify the type of the parameters, the progress values, and the final value of the task, using generics</li>
<li>The method <code>doInBackground()</code> executes automatically on a worker thread</li>
<li><code>onPreExecute()</code>, <code>onPostExecute()</code>, and <code>onProgressUpdate()</code> are all invoked on the UI thread</li>
<li>The value returned by <code>doInBackground()</code> is sent to <code>onPostExecute()</code></li>
<li>You can call <code>publishProgress()</code> at anytime in <code>doInBackground()</code> to execute <code>onProgressUpdate()</code> on the UI thread</li>
<li>You can cancel the task at any time, from any thread</li>
</ul>


<h2>Permissions</h2>

<p>A central design point of the Android security architecture is that no application, by default, has permission to perform any operations that would adversely impact other applications, the operating system, or the user. This includes reading or writing the user&rsquo;s private data (such as contacts or e-mails), reading or writing another application&rsquo;s files, performing network access, keeping the device awake, etc.Android安全架构设计思想是默认没有应用有权限来做对其他应用程序，对系统或者其他用户有影响的操作。</p>

<p>All Android applications (.apk files) must be signed with a certificate whose private key is held by their developer.</p>

<p>At install time, Android gives each package a distinct Linux user ID. Because security enforcement happens at the process level, the code of any two packages can not normally run in the same process, since they need to run as different Linux users. You can use the <code>sharedUserId</code> attribute in the AndroidManifest.xml&rsquo;s manifest tag of each package to have them assigned the same user ID. By doing this, for purposes of security the two packages are then treated as being the same application, with the same user ID and file permissions. Note that in order to retain security, only two applications signed with the same signature (and requesting the same sharedUserId) will be given the same user ID.</p>

<p>A basic Android application has no permissions associated with it by default, meaning it can not do anything that would adversely impact the user experience or any data on the device. To make use of protected features of the device, you must include in your AndroidManifest.xml one or more <code>&lt;uses-permission&gt;</code> tags declaring the permissions that your application needs.默认情况下APP不具有任何权限,如果想要获取设备上的数据或其他必须在安装APP时声明这些权限.</p>

<p>The permissions provided by the Android system can be found at <code>Manifest.permission</code>. Any application may also define and enforce its own permissions, so this is not a comprehensive list of all possible permissions.Android系统提供的权限可以在<code>Manifest.permission</code>中找到,APP也可以自己定义自己的权限.</p>

<p>A particular permission may be enforced at a number of places during your program&rsquo;s operation:</p>

<ul>
<li>At the time of a call into the system, to prevent an application from executing certain functions.</li>
<li>When starting an activity, to prevent applications from launching activities of other applications.</li>
<li>Both sending and receiving broadcasts, to control who can receive your broadcast or who can send a broadcast to you.</li>
<li>When accessing and operating on a content provider.</li>
<li>Binding to or starting a service.</li>
</ul>


<p>Android makes the decision as to whether an app might need the permission based on the value provided for the <code>targetSdkVersion</code> attribute. If the value is lower than the version in which the permission was added, then Android adds the permission.For example, the <code>WRITE_EXTERNAL_STORAGE</code> permission was added in API level 4 to restrict access to the shared storage space. If your <code>targetSdkVersion</code> is 3 or lower, this permission is added to your app on newer versions of Android.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;manifest</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">package=</span><span class="s">&quot;com.me.app.myapp&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;permission</span> <span class="na">android:name=</span><span class="s">&quot;com.me.app.myapp.permission.DEADLY_ACTIVITY&quot;</span>
</span><span class='line'>        <span class="na">android:label=</span><span class="s">&quot;@string/permlab_deadlyActivity&quot;</span>
</span><span class='line'>        <span class="na">android:description=</span><span class="s">&quot;@string/permdesc_deadlyActivity&quot;</span>
</span><span class='line'>        <span class="na">android:permissionGroup=</span><span class="s">&quot;android.permission-group.COST_MONEY&quot;</span>
</span><span class='line'>        <span class="na">android:protectionLevel=</span><span class="s">&quot;dangerous&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    ...
</span><span class='line'><span class="nt">&lt;/manifest&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>adb shell pm list permissions</code>,<code>adb shell pm list permissions -s</code></p>

<p>Activity permissions (applied to the <code>&lt;activity&gt;</code> tag) restrict who can start the associated activity. The permission is checked during <code>Context.startActivity()</code> and <code>Activity.startActivityForResult()</code>; if the caller does not have the required permission then <code>SecurityException</code> is thrown from the call.</p>

<p>Service permissions (applied to the <code>&lt;service&gt;</code> tag) restrict who can start or bind to the associated service. The permission is checked during <code>Context.startService()</code>, <code>Context.stopService()</code> and <code>Context.bindService()</code>; if the caller does not have the required permission then SecurityException is thrown from the call.</p>

<p>BroadcastReceiver permissions (applied to the <code>&lt;receiver&gt;</code> tag) restrict who can send broadcasts to the associated receiver. The permission is checked after <code>Context.sendBroadcast()</code> returns, as the system tries to deliver the submitted broadcast to the given receiver. As a result, a permission failure will not result in an exception being thrown back to the caller; it will just not deliver the intent. In the same way, a permission can be supplied to <code>Context.registerReceiver()</code> to control who can broadcast to a programmatically registered receiver. Going the other way, a permission can be supplied when calling <code>Context.sendBroadcast()</code> to restrict which BroadcastReceiver objects are allowed to receive the broadcast (see below).</p>

<p>ContentProvider permissions (applied to the <code>&lt;provider&gt;</code> tag) restrict who can access the data in a <code>ContentProvider</code>. (Content providers have an important additional security facility available to them called URI permissions which is described later.) Unlike the other components, there are two separate permission attributes you can set: <code>android:readPermission</code> restricts who can read from the provider, and <code>android:writePermission</code> restricts who can write to it. Note that if a provider is protected with both a read and write permission, holding only the write permission does not mean you can read from a provider. The permissions are checked when you first retrieve a provider (if you don&rsquo;t have either permission, a <code>SecurityException</code> will be thrown), and as you perform operations on the provider. Using <code>ContentResolver.query()</code> requires holding the read permission; using <code>ContentResolver.insert()</code>, <code>ContentResolver.update()</code>, <code>ContentResolver.delete()</code> requires the write permission. In all of these cases, not holding the required permission results in a <code>SecurityException</code> being thrown from the call.</p>

<p>Note that both a receiver and a broadcaster can require a permission. When this happens, both permission checks must pass for the Intent to be delivered to the associated target.</p>

<p>The standard permission system described so far is often not sufficient when used with content providers. A content provider may want to protect itself with read and write permissions, while its direct clients also need to hand specific URIs to other applications for them to operate on. A typical example is attachments in a mail application. Access to the mail should be protected by permissions, since this is sensitive user data. However, if a URI to an image attachment is given to an image viewer, that image viewer will not have permission to open the attachment since it has no reason to hold a permission to access all e-mail.</p>

<p>The solution to this problem is <code>per-URI permissions</code>: when starting an activity or returning a result to an activity, the caller can set <code>Intent.FLAG_GRANT_READ_URI_PERMISSION</code> and/or <code>Intent.FLAG_GRANT_WRITE_URI_PERMISSION</code>. This grants the receiving activity permission access the specific data URI in the Intent, regardless of whether it has any permission to access data in the content provider corresponding to the Intent.</p>

<p>The granting of fine-grained URI permissions does, however, require some cooperation with the content provider holding those URIs. It is strongly recommended that content providers implement this facility, and declare that they support it through the <code>android:grantUriPermissions</code> attribute or <code>&lt;grant-uri-permissions&gt;</code> tag.</p>

<h2>App Widgets</h2>

<h2>Android Manifest</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java反射]]></title>
    <link href="http://Solarex.github.io/blog/2014/09/16/java-reflection-tutorial/"/>
    <updated>2014-09-16T14:35:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2014/09/16/java-reflection-tutorial</id>
    <content type="html"><![CDATA[<p><center><img src="http://Solarex.github.io/images/java-reflection-tutorial.png"></center></p>




<!-- more -->


<p>// TODO</p>

<p>Ref:</p>

<ul>
<li><a href="http://www.journaldev.com/1789/java-reflection-tutorial-for-classes-methods-fields-constructors-annotations-and-much-more">Java Reflection Tutorial</a></li>
<li><a href="http://docs.oracle.com/javase/tutorial/reflect/">Trail: The Reflection API</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[跳出浏览器]]></title>
    <link href="http://Solarex.github.io/blog/2014/09/16/zhihu-intent-fileter-schema/"/>
    <updated>2014-09-16T12:52:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2014/09/16/zhihu-intent-fileter-schema</id>
    <content type="html"><![CDATA[<center><p><img src="http://Solarex.github.io/images/zhihu_logo.png" alt="zhihu"></p></center>


<p>之前使用浏览器浏览知乎网站时，网站上会显示打开应用，不同的浏览器点击会有不同的反应(跳转网页或者打开知乎应用)，当时思考了一下具体的实现方式，觉得可能是知乎网站根据UC或者Chrome浏览器不同的UA显示不同的网页代码，在点击应用的时候会触发超链接，知乎客户端根据特定的Schema来在客户端中打开不同的问题页面，最近在网上浏览到一片文章，作者对这种冲浏览器跳转到客户端应用的实现方式进行了具体的分析，我只想到文章中的前两种方式，后面的Chrome浏览器的Chrome Intent以及后台启动http服务来响应网页链接的方式囿于眼界没有想到，不得不佩服文章作者视野之开阔。文章不错，特分享在此。</p>

<p>Ref:<a href="http://zhuanlan.zhihu.com/andlib/19848910">#黑科技# 跳出浏览器</a></p>

<p>当移动浪潮来袭，不论是传统 PC 网站/应用，还是新兴的移动互联网，都一并蜂拥的走进用户的手机。提供一个便于手机浏览的 Web 页面，再造一个功能丰富的移动 App 成了每个产品的标配。提供移动 Web 页面，可以使得用户更易获取产品信息，在微信上、微博中，搜索里点个链接，就可以立刻享用产品功能；而提供移动 App，则可以提供更好的产品体验，使用 native api 能构建更丰富的特色功能，提供更出众的性能表现。</p>

<p>来想象一下这个场景，当别人发给你一个链接，是知乎问题「豌豆荚的员工工作方式是什么样的？」，你在手机浏览器上慢吞吞的加载好了，答案看得特别激动想点个赞。结果发现，还！要！登！录！我明明已经安装了知乎的 App 好吗！为啥不让我愉快的在知乎 App 上操作呐？</p>

<p>这就是本 #黑科技# 的主题，有了移动 Web 页面，又提供了移动 App，如何能让两者更完美的结合在一起呢？当用户已经安装了 App 的前提下，访问移动端 Web 页面时，可以无缝的跳转到 App 中对应的位置去？</p>

<center><p><img src="http://Solarex.github.io/images/zhihu_question_wandoulab.jpg" alt="wandoulabs"></p></center>


<p>依然举上面那个栗子，知乎的同学其实已经有了解决方案，就是「打开应用」那个按钮，如果已经安装了知乎 App，点击后就会从浏览器跳转到应用中了。类似于这样的按钮，背后的技术方案是什么？有哪些局限性？有没有什么一招搞定的必杀技？这就是本文讨论的主要内容。</p>

<h2>第一招：拦截 Http 跳转</h2>

<p>在 Android 中，最标准的方式，就是在应用的配置文件 <code>AndroidManifest.xml</code> 中，通过 <code>&lt;activity&gt;</code> 标签里的 <code>&lt;intent-filter&gt;</code> 来声明：“本应用可以更好的处理某些 url 对应的页面，浏览器你交给我吧”。套在例子上，声明形如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;activity</span> <span class="na">android:name=</span><span class="s">”com.zhihu.android.QuestionActivity”</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'>    <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">”android.intent.action.VIEW”</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">”android.intent.category.DEFAULT”</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">”android.intent.category.BROWSABLE”</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- 关键所在，匹配相应域名和 url 模式 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;data</span> <span class="na">android:scheme=</span><span class="s">”http”</span> <span class="na">android:host=</span><span class="s">”www.zhihu.com”</span>
</span><span class='line'><span class="na">android:pathPattern=</span><span class="s">”/question/.*”</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/intent-filter&gt;</span>
</span><span class='line'><span class="nt">&lt;/activity&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>做了上述的声明之后，在 Chrome 里访问 豌豆荚的员工工作方式是什么样的？，便可以跳转到知乎 Android 客户端，并打开这个问题的页面。不过这个解决方案有挺多问题，最重要的一个原因是：“兼容性”。</p>

<p>除了 Chrome，从豌豆荚上的下载量看，最热门的手机浏览器是这些：</p>

<center><p><img src="http://Solarex.github.io/images/mobile_browser_share.jpg" alt="mobile browser"></p></center>


<p>而以上浏览器，大都不遵守 Android 的协定，不支持通过匹配 url 跳转到更适合的应用中去。臆测其原因，大抵是国内浏览器都不愿将流量导给其他应用吧。</p>

<h2>第二招：自定义 Scheme</h2>

<p>如此，那就另辟蹊径，既然 http 协议的 url 会被很多浏览器拦自行处理掉，那就不用 http 协议而采用自定义的 scheme 试试看。</p>

<p>将 <code>AndroidManifest.xml</code> 中的声明修改如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;activity</span> <span class="na">android:name=</span><span class="s">”com.zhihu.android.QuestionActivity”</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;intent-filter&gt;</span>
</span><span class='line'>    <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">”android.intent.action.VIEW”</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">”android.intent.category.DEFAULT”</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">”android.intent.category.BROWSABLE”</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- 关键所在，匹配相应的 scheme --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;data</span> <span class="na">android:scheme=</span><span class="s">”zhihu”</span> <span class="na">android:host=</span><span class="s">”questions”</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/intent-filter&gt;</span>
</span><span class='line'><span class="nt">&lt;/activity&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>把「打开应用」的跳转链接设置为形如 &ldquo;zhihu://questions/…&rdquo; 的 url，点击后就可以匹配跳转到应用对应的 activity 中去。当然，如果简单的使用 <code>&lt;a&gt;</code> 标签来做这件事情，若手机中未安装知乎客户端，点击后就会跳转到一个错误页面（地址是 zhihu://questions/…）。解决方案也简单，使用 <code>&lt;iframe&gt;</code> 即可，详情就不在此赘述。</p>

<!-- more -->


<h2>第三招：Chrome Intent</h2>

<p>自定义的 scheme 可以搞定很多浏览器，但 Chrome 除外。原因是为了更有序的打通浏览器页面和本地应用，Chrome 25 后不再支持自定义的 scheme，而推出了 <a href="https://developer.chrome.com/multidevice/android/intents">Chrome Intent</a>，作为标准协议进行推广，其格式形如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>intent:
</span><span class='line'>  //scan/
</span><span class='line'>  #Intent;
</span><span class='line'>    package=com.google.zxing.client.android;
</span><span class='line'>    scheme=zxing;
</span><span class='line'>    end;
</span></code></pre></td></tr></table></div></figure>


<p>Chrome Intent 首先将 scheme 统一为 ”intent“，大量信息放到了锚点 ”#“ 之后，称作 ”fragment“（此 fragment 非彼 fragment），它描述了由谁来接收这个 uri。fragment 中可以指定打开这个 uri 的包名，或者是 action、extra，等等。使用 Intent.parseUri 函数可以将这样的 uri 直接转成一个 intent 对象，反之调用 Intent.toUri 函数可将 intent 对象序列化如此格式的 uri。</p>

<p>应用到知乎这个例子里，在 AndroidManifest.xml 中的声明与自定义 scheme 写法完全一致，只是在调用时，需要在跳转链接中写成如下格式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>intent:
</span><span class='line'>  //questions/...
</span><span class='line'>  #Intent;
</span><span class='line'>    package=com.zhihu.android;
</span><span class='line'>    scheme=zhihu;
</span><span class='line'>    end;
</span></code></pre></td></tr></table></div></figure>


<h2>必杀技：内嵌 Http 服务</h2>

<p>至此，只要利用 UA 信息，合理使用自定义 scheme 和 Chrome Intent，就可以搞定市面上几乎全部的浏览器，这就完了吗？当然没有！</p>

<p>随着以微信为代表的社交应用的不断发展，它内嵌的 WebView 已然成为一个轻型浏览器了，坐拥巨大的用户和内容分享量，微信等应用带来的页面访问量是不容忽视的。但这些应用的 WebView 通常是禁止外链的，不论是什么 scheme 在这里一律不好使，这就使得分享到微信的知乎问题，就是再点击「打开应用」都是无效的。</p>

<p>有办法解决么？当然，是有的，”黑科技“ 粉墨登场的时刻到了。大家都知道，web 页面可以发起 ajax 请求用来与服务器交互，如果这个 ”服务器“ 不在云端，而是在本机呢？没错，解决方案就是在应用中绑定本地端口，启动一个 http 服务，来响应发送过来的请求，打开应用或者是做其他事情。</p>

<p>如果，知乎应用在后台启动 http 服务，绑定一个端口，比如：12306 吧。那 web 页面可以发送如下的 ajax 请求来实现打开应用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;http://127.0.0.1:12306/open?intent=...&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="p">}).</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// do what you want</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，要做的足够细致，还需要实现类似于 ”<a href="http://127.0.0.1:12306/is_installed%E2%80%9C">http://127.0.0.1:12306/is_installed%E2%80%9C</a> 这样的 api，如果知乎安装了，返回 200，如果服务未启动或者知乎未安装，自然是会返回 404，由此可以在 web 页面中判断是否安装了知乎应用，进而决定是否要显示「打开应用」的按钮。</p>

<p>通常，必杀技都是有副作用的，如果需要准确的判断是否安装了知乎，就需要这个 http 服务始终存活，否则就没启动和没安装傻傻分不清楚了。至于如何使得 “一个已安装应用在各种情况下都保持后台运行”，则是另一个充满了黑科技的领域，待日后再聊聊这个话题。</p>

<p>PS：启动后台 http 服务的代码，在豌豆荚 git 中保持 review 不通过的状态估计都得有一年了，因为豌豆荚 Android 应用 “用户不主动开启相关功能则不允许后台常驻” 的原则相悖。所以如果有天你在微信页面中突然打开了某个 “安全” 应用、“搜索” 应用，千万别觉得神奇，而是在看看本文，琢磨一下那是付出什么换来的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Annotations]]></title>
    <link href="http://Solarex.github.io/blog/2014/09/12/java-annotations/"/>
    <updated>2014-09-12T12:52:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2014/09/12/java-annotations</id>
    <content type="html"><![CDATA[<center><p><img src="http://Solarex.github.io/images/java-annotations.png" width="210" height="135" alt="java"></p></center>


<p>Ref:<a href="http://docs.oracle.com/javase/tutorial/java/annotations/">Java Annotations tutorial</a>,<a href="https://en.wikipedia.org/wiki/Java_annotation">Wiki</a>,<a href="http://java.dzone.com/articles/how-annotations-work-java">How do Annotations Work In Java?</a>,</p>

<p>Annotation is special kind of Java construct used to decorate a class, method, field, parameter, variable, constructor, or package. It’s the vehicle chosen by JSR-175 to provide metadata.Java annotations are typically used for the following purposes:</p>

<ul>
<li>Compiler instructions</li>
<li>Build-time instructions</li>
<li>Runtime instructions</li>
</ul>


<h2>Basics</h2>

<p>Annotations have a number of uses, among them:</p>

<ul>
<li>Information for the compiler — Annotations can be used by the compiler to detect errors or suppress warnings.</li>
<li>Compile-time and deployment-time processing — Software tools can process annotation information to generate code, XML files, and so forth.</li>
<li>Runtime processing — Some annotations are available to be examined at runtime.</li>
</ul>


<p>The format of an Annotation:In its simplest form, an annotation looks like <code>@Entity</code>,the annotation can include elements, which can be named or unnamed,if there is just one element named value, then the name can be omitted,if the annotation has no elements, then the parentheses can be omitted, as shown in the previous <code>@Override</code> example,it is also possible to use multiple annotations on the same declaration.If the annotations have the same type, then this is called a repeating annotation,repeating annotations are supported as of the Java SE 8 release.</p>

<p>The predefined annotation types defined in java.lang are <code>@Deprecated</code>, <code>@Override</code>, and <code>@SuppressWarnings</code>.Note that the Javadoc tag starts with a lowercase d (<code>deprecated</code>)and the annotation starts with an uppercase D(<code>Deprecated</code>).</p>

<p>Every compiler warning belongs to a category. The Java Language Specification lists two categories: <code>deprecation</code> and <code>unchecked</code>. The unchecked warning can occur when interfacing with legacy code written before the advent of generics. To suppress multiple categories of warnings, use the following syntax:<code>@SuppressWarnings({"unchecked", "deprecation"})</code>.</p>

<p>Annotations can be applied to declarations: declarations of classes, fields, methods, and other program elements. When used on a declaration, each annotation often appears, by convention, on its own line.As of the Java SE 8 release, annotations can also be applied to the use of types.</p>

<h2>Declaring an Annotation Type</h2>

<p>Declaring an annotation type, syntax for doing this is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@interface</span> <span class="n">ClassPreamble</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">String</span> <span class="nf">author</span><span class="o">();</span>
</span><span class='line'>   <span class="n">String</span> <span class="nf">date</span><span class="o">();</span>
</span><span class='line'>   <span class="kt">int</span> <span class="nf">currentRevision</span><span class="o">()</span> <span class="k">default</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>   <span class="n">String</span> <span class="nf">lastModified</span><span class="o">()</span> <span class="k">default</span> <span class="s">&quot;N/A&quot;</span><span class="o">;</span>
</span><span class='line'>   <span class="n">String</span> <span class="nf">lastModifiedBy</span><span class="o">()</span> <span class="k">default</span> <span class="s">&quot;N/A&quot;</span><span class="o">;</span>
</span><span class='line'>   <span class="c1">// Note use of array</span>
</span><span class='line'>   <span class="n">String</span><span class="o">[]</span> <span class="nf">reviewers</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The annotation type definition looks similar to an interface definition where the keyword interface is preceded by the at sign (@) (@ = AT, as in annotation type). Annotation types are a form of interface.The body of the previous annotation definition contains annotation type element declarations, which look a lot like methods. Note that they can define optional default values.Annotations only support primitives, string and enumerations. All attributes of annotations are defined as methods and default values can also be provided.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Target</span><span class="o">(</span><span class="n">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
</span><span class='line'><span class="nd">@interface</span> <span class="n">Todo</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">enum</span> <span class="n">Priority</span> <span class="o">{</span><span class="n">LOW</span><span class="o">,</span> <span class="n">MEDIUM</span><span class="o">,</span> <span class="n">HIGH</span><span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">enum</span> <span class="n">Status</span> <span class="o">{</span><span class="n">STARTED</span><span class="o">,</span> <span class="n">NOT_STARTED</span><span class="o">}</span>
</span><span class='line'>    <span class="n">String</span> <span class="nf">author</span><span class="o">()</span> <span class="k">default</span> <span class="s">&quot;Yash&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Priority</span> <span class="nf">priority</span><span class="o">()</span> <span class="k">default</span> <span class="n">Priority</span><span class="o">.</span><span class="na">LOW</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Status</span> <span class="nf">status</span><span class="o">()</span> <span class="k">default</span> <span class="n">Status</span><span class="o">.</span><span class="na">NOT_STARTED</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note</strong>: To make the information in @ClassPreamble appear in Javadoc-generated documentation, you must annotate the @ClassPreamble definition with the @Documented annotation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// import this to use @Documented</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.lang.annotation.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Documented</span>
</span><span class='line'><span class="nd">@interface</span> <span class="n">ClassPreamble</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Annotation element definitions</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also define that your annotation is a qualifier for the <code>@Inject</code> annotation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@javax.inject.Qualifier</span>
</span><span class='line'><span class="nd">@Documented</span>
</span><span class='line'><span class="nd">@Target</span><span class="o">({</span><span class="n">ElementType</span><span class="o">.</span><span class="na">FIELD</span><span class="o">,</span> <span class="n">ElementType</span><span class="o">.</span><span class="na">PARAMETER</span><span class="o">})</span>
</span><span class='line'><span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">Checker</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>Predefined Annotation Types</h2>

<h3>Annotation Types Used by the Java Language</h3>

<p>Annotation types used by the Java Language include <code>@Deprecated</code>, <code>@Override</code>, <code>@SuppressWarnings</code>, <code>@SafeVarargs</code>, <code>@FunctionalInterface</code>.</p>

<p>A set of annotation types are predefined in the Java SE API. Some annotation types are used by the Java compiler, and some apply to other annotations.The predefined annotation types defined in <code>java.lang</code> are <code>@Deprecated</code>, <code>@Override</code>, and <code>@SuppressWarnings</code>.<code>@SuppressWarnings</code> annotation tells the compiler to suppress specific warnings that it would otherwise generate.<code>@SafeVarargs</code> annotation, when applied to a method or constructor, asserts that the code does not perform potentially unsafe operations on its varargs parameter. When this annotation type is used, unchecked warnings relating to varargs usage are suppressed.<code>@FunctionalInterface</code> annotation, introduced in Java SE 8, indicates that the type declaration is intended to be a functional interface, as defined by the Java Language Specification.</p>

<h3>Annotations That Apply to Other Annotations</h3>

<p>Annotations that apply to other Annotations include <code>@Retention</code>, <code>@Documented</code>, <code>@Target</code>, <code>@Inherited</code>, <code>@Repeatable</code>.</p>

<p><code>@Retention</code>annotation specifies how the marked annotation is stored:</p>

<ul>
<li><code>RetentionPolicy.SOURCE</code> – The marked annotation is retained only in the source level and is ignored by the compiler.</li>
<li><code>RetentionPolicy.CLASS</code> – The marked annotation is retained by the compiler at compile time, but is ignored by the Java Virtual Machine (JVM).</li>
<li><code>RetentionPolicy.RUNTIME</code> – The marked annotation is retained by the JVM so it can be used by the runtime environment.</li>
</ul>


<p><code>@Documented</code> annotation indicates that whenever the specified annotation is used those elements should be documented using the Javadoc tool. (By default, annotations are not included in Javadoc.)</p>

<p><code>@Target</code> annotation marks another annotation to restrict what kind of Java elements the annotation can be applied to. A target annotation specifies one of the following element types as its value:</p>

<ul>
<li><code>ElementType.ANNOTATION_TYPE</code> can be applied to an annotation type.</li>
<li><code>ElementType.CONSTRUCTOR</code> can be applied to a constructor.</li>
<li><code>ElementType.FIELD</code> can be applied to a field or property.</li>
<li><code>ElementType.LOCAL_VARIABLE</code> can be applied to a local variable.</li>
<li><code>ElementType.METHOD</code> can be applied to a method-level annotation.</li>
<li><code>ElementType.PACKAGE</code> can be applied to a package declaration.</li>
<li><code>ElementType.PARAMETER</code> can be applied to the parameters of a method.</li>
<li><code>ElementType.TYPE</code> can be applied to any element of a class.</li>
</ul>


<p><code>@Inherited</code> annotation indicates that the annotation type can be inherited from the super class. (This is not true by default.) When the user queries the annotation type and the class has no annotation for this type, the class&#8217; superclass is queried for the annotation type. This annotation applies only to class declarations.</p>

<p><code>@Repeatable</code> annotation, introduced in Java SE 8, indicates that the marked annotation can be applied more than once to the same declaration or type use.</p>

<h2>Type Annotations and Pluggable Type Systems</h2>

<p>Before the Java SE 8 release, annotations could only be applied to declarations. As of the Java SE 8 release, annotations can also be applied to any type use. This means that annotations can be used anywhere you use a type.</p>

<h2>Repeating Annotations</h2>

<p>There are some situations where you want to apply the same annotation to a declaration or type use. As of the Java SE 8 release, repeating annotations enable you to do this.</p>

<p>For compatibility reasons, repeating annotations are stored in a <code>container</code> annotation that is automatically generated by the Java compiler. In order for the compiler to do this, two declarations are required in your code.</p>

<ul>
<li>Declare a Repeatable Annotation Type</li>
</ul>


<p>The annotation type must be marked with the <code>@Repeatable</code> meta-annotation. The following example defines a custom <code>@Schedule</code> repeatable annotation type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.lang.annotation.Repeatable</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Repeatable</span><span class="o">(</span><span class="n">Schedules</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">Schedule</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="nf">dayOfMonth</span><span class="o">()</span> <span class="k">default</span> <span class="s">&quot;first&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="n">String</span> <span class="nf">dayOfWeek</span><span class="o">()</span> <span class="k">default</span> <span class="s">&quot;Mon&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">hour</span><span class="o">()</span> <span class="k">default</span> <span class="mi">12</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The value of the <code>@Repeatable</code> meta-annotation, in parentheses, is the type of the container annotation that the Java compiler generates to store repeating annotations. In this example, the containing annotation type is <code>Schedules</code>, so repeating <code>@Schedule</code> annotations is stored in an <code>@Schedules</code> annotation.</p>

<p>Applying the same annotation to a declaration without first declaring it to be repeatable results in a compile-time error.</p>

<ul>
<li>Declare the Containing Annotation Type</li>
</ul>


<p>The containing annotation type must have a value element with an array type. The component type of the array type must be the repeatable annotation type. The declaration for the Schedules containing annotation type is the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nd">@interface</span> <span class="n">Schedules</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Schedule</span><span class="o">[]</span> <span class="nf">value</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Retrieving Annotations</h3>

<p>There are several methods available in the Reflection API that can be used to retrieve annotations. The behavior of the methods that return a single annotation, such as <code>AnnotatedElement.getAnnotationByType(Class&lt;T&gt;)</code>, are unchanged in that they only return a single annotation if one annotation of the requested type is present. If more than one annotation of the requested type is present, you can obtain them by first getting their container annotation. In this way, legacy code continues to work. Other methods were introduced in Java SE 8 that scan through the container annotation to return multiple annotations at once, such as <code>AnnotatedElement.getAnnotations(Class&lt;T&gt;)</code>. See the <code>AnnotatedElement</code> class specification for information on all of the available methods.</p>

<p>If you are familiar with Reflection code, you know reflection provides <code>Class</code>, <code>Method</code> and <code>Field</code> objects. All of these have a <code>getAnnotation()</code> method which returns the annotation object. We need to cast this object as our custom annotation (after checking with <code>instanceOf()</code>) and then we can call methods defined in our custom annotation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Class</span> <span class="n">businessLogicClass</span> <span class="o">=</span> <span class="n">BusinessLogic</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
</span><span class='line'><span class="k">for</span><span class="o">(</span><span class="n">Method</span> <span class="n">method</span> <span class="o">:</span> <span class="n">businessLogicClass</span><span class="o">.</span><span class="na">getMethods</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Todo</span> <span class="n">todoAnnotation</span> <span class="o">=</span> <span class="o">(</span><span class="n">Todo</span><span class="o">)</span><span class="n">method</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">Todo</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">todoAnnotation</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot; Method Name : &quot;</span> <span class="o">+</span> <span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot; Author : &quot;</span> <span class="o">+</span> <span class="n">todoAnnotation</span><span class="o">.</span><span class="na">author</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot; Priority : &quot;</span> <span class="o">+</span> <span class="n">todoAnnotation</span><span class="o">.</span><span class="na">priority</span><span class="o">());</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot; Status : &quot;</span> <span class="o">+</span> <span class="n">todoAnnotation</span><span class="o">.</span><span class="na">status</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Design Considerations</h3>

<p>When designing an annotation type, you must consider the cardinality of annotations of that type. It is now possible to use an annotation zero times, once, or, if the annotation&rsquo;s type is marked as <code>@Repeatable</code>, more than once. It is also possible to restrict where an annotation type can be used by using the <code>@Target</code> meta-annotation. For example, you can create a repeatable annotation type that can only be used on methods and fields. It is important to design your annotation type carefully to ensure that the programmer using the annotation finds it to be as flexible and powerful as possible.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java学习备忘]]></title>
    <link href="http://Solarex.github.io/blog/2014/09/04/notes-on-java/"/>
    <updated>2014-09-04T13:05:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2014/09/04/notes-on-java</id>
    <content type="html"><![CDATA[<center><p><img src="http://Solarex.github.io/images/java_logo.svg" width="150" height="275" alt="java"></p></center>


<h2>class loaded and initialized</h2>

<p><code>java -verbose:class -classpath . org.solarex.TestClassLoader</code> get information about each class loaded.The “-verbose:class” option displays information about each class loaded.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">solarex</span><span class="o">.</span><span class="na">test</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">A</span><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method</span><span class="o">(){</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;inside of A&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">solarex</span><span class="o">.</span><span class="na">test</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="n">TestLoader</span><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello,world\n&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="c1">// A aInstance = new A();</span>
</span><span class='line'>      <span class="c1">// aInstance.method();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>  
</span></code></pre></td></tr></table></div></figure>


<p><code>javac -d . *.java</code>,<code>java -verbose:class -classpath . org.solarex.test.TestLoader</code>得到结果:</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#loader.before</span>
</span><span class='line'><span class="o">[</span>Opened /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Object from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.Serializable from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Comparable from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.CharSequence from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.String from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.reflect.GenericDeclaration from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.reflect.Type from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.reflect.AnnotatedElement from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Class from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Cloneable from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.ClassLoader from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.System from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Throwable from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Error from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.ThreadDeath from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Exception from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.RuntimeException from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.security.ProtectionDomain from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.security.AccessControlContext from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.ClassNotFoundException from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.LinkageError from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.NoClassDefFoundError from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.ClassCastException from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.ArrayStoreException from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.VirtualMachineError from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.OutOfMemoryError from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.StackOverflowError from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.IllegalMonitorStateException from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.ref.Reference from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.ref.SoftReference from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.ref.WeakReference from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.ref.FinalReference from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.ref.PhantomReference from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.ref.Finalizer from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Runnable from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Thread from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Thread<span class="nv">$UncaughtExceptionHandler</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.ThreadGroup from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.Map from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.Dictionary from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.Hashtable from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.Properties from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.reflect.AccessibleObject from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.reflect.Member from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.reflect.Field from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.reflect.Method from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.reflect.Constructor from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.reflect.MagicAccessorImpl from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.reflect.MethodAccessor from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.reflect.MethodAccessorImpl from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.reflect.ConstructorAccessor from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.reflect.ConstructorAccessorImpl from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.reflect.DelegatingClassLoader from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.reflect.ConstantPool from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.reflect.FieldAccessor from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.reflect.FieldAccessorImpl from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.reflect.UnsafeFieldAccessorImpl from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.reflect.UnsafeStaticFieldAccessorImpl from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Appendable from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.AbstractStringBuilder from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.StringBuffer from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.StringBuilder from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.StackTraceElement from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.nio.Buffer from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.AtomicLong from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.AtomicLongCSImpl from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.PostVMInitHook from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Boolean from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Character from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Number from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Float from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Double from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Byte from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Short from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Integer from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Long from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.NullPointerException from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.ArithmeticException from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.ObjectStreamField from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.Comparator from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.String<span class="nv">$CaseInsensitiveComparator</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.security.Guard from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.security.Permission from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.security.BasicPermission from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.RuntimePermission from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.AbstractMap from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.SoftCache from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.ref.ReferenceQueue from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.ref.ReferenceQueue<span class="nv">$Null</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.ref.ReferenceQueue<span class="nv">$Lock</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.HashMap from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.Map<span class="nv">$Entry</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.HashMap<span class="nv">$Entry</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.security.AccessController from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.JavaSecurityAccess from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.security.AccessControlContext<span class="nv">$1</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.SharedSecrets from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.Unsafe from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.IncompatibleClassChangeError from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.NoSuchMethodError from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.reflect.Reflection from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.Collections from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Iterable from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.Collection from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.Set from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.AbstractCollection from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.AbstractSet from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.Collections<span class="nv">$EmptySet</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.RandomAccess from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.List from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.AbstractList from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.Collections<span class="nv">$EmptyList</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.Collections<span class="nv">$EmptyMap</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.Collections<span class="nv">$ReverseComparator</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.Collections<span class="nv">$SynchronizedMap</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.reflect.ReflectPermission from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.security.PrivilegedAction from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.reflect.ReflectionFactory<span class="nv">$GetReflectionFactoryAction</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.Vector from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.Stack from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.reflect.ReflectionFactory from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.ref.Reference<span class="nv">$Lock</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.ref.Reference<span class="nv">$ReferenceHandler</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.ref.Finalizer<span class="nv">$FinalizerThread</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.Enumeration from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.Hashtable<span class="nv">$EmptyEnumerator</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.Iterator from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.Hashtable<span class="nv">$EmptyIterator</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.Hashtable<span class="nv">$Entry</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.nio.charset.Charset from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.nio.charset.spi.CharsetProvider from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.nio.cs.FastCharsetProvider from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.nio.cs.StandardCharsets from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.util.PreHashedMap from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.nio.cs.StandardCharsets<span class="nv">$Aliases</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.nio.cs.StandardCharsets<span class="nv">$Classes</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.nio.cs.StandardCharsets<span class="nv">$Cache</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.ThreadLocal from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.concurrent.atomic.AtomicInteger from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Class<span class="nv">$3</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.reflect.Modifier from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.reflect.LangReflectAccess from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.reflect.ReflectAccess from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.StringValue from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.Arrays from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Math from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.nio.cs.HistoricallyNamedCharset from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.nio.cs.Unicode from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.nio.cs.UTF_8 from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Class<span class="nv">$1</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.reflect.ReflectionFactory<span class="nv">$1</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.reflect.NativeConstructorAccessorImpl from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.reflect.DelegatingConstructorAccessorImpl from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.VM from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.StringCoding from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.ThreadLocal<span class="nv">$ThreadLocalMap</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.ThreadLocal<span class="nv">$ThreadLocalMap$Entry</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.StringCoding<span class="nv">$StringDecoder</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.nio.charset.CharsetDecoder from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.nio.cs.UTF_8<span class="nv">$Decoder</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.nio.charset.CodingErrorAction from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.nio.ByteBuffer from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.nio.HeapByteBuffer from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.nio.Bits from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.JavaNioAccess from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.nio.Bits<span class="nv">$1</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.nio.ByteOrder from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Readable from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.nio.CharBuffer from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.nio.HeapCharBuffer from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.nio.charset.CoderResult from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.nio.charset.CoderResult<span class="nv">$Cache</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.nio.charset.CoderResult<span class="nv">$1</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.nio.charset.CoderResult<span class="nv">$2</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.Version from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.JavaLangAccess from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.System<span class="nv">$2</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Runtime from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.File from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.FileSystem from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.UnixFileSystem from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.ExpiringCache from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.LinkedHashMap from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.ExpiringCache<span class="nv">$1</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.LinkedHashMap<span class="nv">$Entry</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.security.action.GetPropertyAction from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.JavaIOFileAccess from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.File<span class="nv">$1</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.jkernel.DownloadManager from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.jkernel.DownloadManager<span class="nv">$1</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.jkernel.DownloadManager<span class="nv">$2</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.StringCoding<span class="nv">$StringEncoder</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.nio.charset.CharsetEncoder from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.nio.cs.UTF_8<span class="nv">$Encoder</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.ClassLoader<span class="nv">$3</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.ExpiringCache<span class="nv">$Entry</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.ClassLoader<span class="nv">$NativeLibrary</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.Closeable from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.InputStream from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.FileInputStream from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.FileDescriptor from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.JavaIOFileDescriptorAccess from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.FileDescriptor<span class="nv">$1</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.Flushable from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.OutputStream from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.FileOutputStream from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.FilterInputStream from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.BufferedInputStream from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.concurrent.atomic.AtomicReferenceFieldUpdater from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.concurrent.atomic.AtomicReferenceFieldUpdater<span class="nv">$AtomicReferenceFieldUpdaterImpl</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.reflect.misc.ReflectUtil from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.FilterOutputStream from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.PrintStream from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.BufferedOutputStream from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.Writer from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.OutputStreamWriter from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.nio.cs.StreamEncoder from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.BufferedWriter from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Terminator from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.SignalHandler from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Terminator<span class="nv">$1</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.Signal from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.NativeSignalHandler from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.OSEnvironment from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Compiler from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Compiler<span class="nv">$1</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.Launcher from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.net.URLStreamHandlerFactory from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.Launcher<span class="nv">$Factory</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.security.SecureClassLoader from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.net.URLClassLoader from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.Launcher<span class="nv">$ExtClassLoader</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.security.util.Debug from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Package from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.net.URL from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.security.CodeSource from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Void from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.security.cert.Certificate from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.ClassFormatError from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.IllegalArgumentException from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.IOException from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.URLClassPath from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.AssertionStatusDirectives from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.JavaNetAccess from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.net.URLClassLoader<span class="nv">$7</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.security.PermissionCollection from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.StringTokenizer from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.security.PrivilegedExceptionAction from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.Launcher<span class="nv">$ExtClassLoader$1</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.MetaIndex from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.Reader from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.BufferedReader from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.InputStreamReader from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.FileReader from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.nio.cs.StreamDecoder from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.ArrayList from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.reflect.Array from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.net.www.ParseUtil from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.BitSet from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.ObjectStreamClass from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.net.URL<span class="nv">$1</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.Locale from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.concurrent.ConcurrentMap from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.concurrent.ConcurrentHashMap from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.concurrent.locks.Lock from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.concurrent.locks.ReentrantLock from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.concurrent.ConcurrentHashMap<span class="nv">$Segment</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.concurrent.locks.AbstractOwnableSynchronizer from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.concurrent.locks.AbstractQueuedSynchronizer from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.concurrent.locks.ReentrantLock<span class="nv">$Sync</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.concurrent.locks.ReentrantLock<span class="nv">$NonfairSync</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="nv">$Node</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.concurrent.ConcurrentHashMap<span class="nv">$HashEntry</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.CharacterDataLatin1 from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.net.Parts from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.net.URLStreamHandler from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.net.www.protocol.file.Handler from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.HashSet from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.net.www.protocol.jar.Handler from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.Launcher<span class="nv">$AppClassLoader</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.Launcher<span class="nv">$AppClassLoader$1</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.SystemClassLoaderAction from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.net.URLClassLoader<span class="nv">$1</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.net.util.URLUtil from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.URLClassPath<span class="nv">$3</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.URLClassPath<span class="nv">$Loader</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.URLClassPath<span class="nv">$JarLoader</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.security.PrivilegedActionException from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.URLClassPath<span class="nv">$FileLoader</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.Resource from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.URLClassPath<span class="nv">$FileLoader$1</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.nio.ByteBuffered from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.security.Permissions from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.net.URLConnection from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.net.www.URLConnection from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.net.www.protocol.file.FileURLConnection from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.net.ContentHandler from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.net.UnknownContentHandler from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.net.www.MessageHeader from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.FilePermission from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.FilePermission<span class="nv">$1</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.security.Policy from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.security.provider.PolicyFile from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.security.Policy<span class="nv">$UnsupportedEmptyCollection</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.util.concurrent.atomic.AtomicReference from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.security.Policy<span class="nv">$PolicyInfo</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.io.FilePermissionCollection from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.security.AllPermission from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.security.UnresolvedPermission from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.security.BasicPermissionCollection from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded sun.misc.JavaSecurityProtectionDomainAccess from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.security.ProtectionDomain<span class="nv">$2</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.security.ProtectionDomain<span class="nv">$Key</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.security.Principal from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded org.solarex.test.TestLoader from file:/home/hrh/tmp/<span class="o">]</span>
</span><span class='line'>Hello,world
</span><span class='line'><span class="o">[</span>Loaded java.lang.Shutdown from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Shutdown<span class="nv">$Lock</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#loader.after</span>
</span><span class='line'><span class="c">#diff loader.before loader.after</span>
</span><span class='line'>...
</span><span class='line'><span class="o">[</span>Loaded java.security.Principal from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded org.solarex.test.TestLoader from file:/home/hrh/tmp/<span class="o">]</span>
</span><span class='line'>Hello,world
</span><span class='line'><span class="o">[</span>Loaded org.solarex.test.A from file:/home/hrh/tmp/<span class="o">]</span>
</span><span class='line'>inside of A
</span><span class='line'><span class="o">[</span>Loaded java.lang.Shutdown from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span><span class='line'><span class="o">[</span>Loaded java.lang.Shutdown<span class="nv">$Lock</span> from /opt/jvm/jdk6u45/jdk1.6.0_45/jre/lib/rt.jar<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>In summary,a class is loaded:</p>

<ul>
<li>when the <code>new</code> bytecode is executed,eg. <code>SomeClass sc = new SomeClass()</code></li>
<li>when the bytecodes make a static reference to a class,eg. <code>System.out</code></li>
</ul>


<p>A class is initialized when a symbol in the class is first used.When a class is loaded it is not initialized.JVM will initialize superclass and fields in textual order, initialize static,final fields first, and give every field a default value before initialization.</p>
]]></content>
  </entry>
  
</feed>
