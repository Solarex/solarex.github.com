<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: algorithm | Solarex's Blog]]></title>
  <link href="http://Solarex.github.io/blog/categories/algorithm/atom.xml" rel="self"/>
  <link href="http://Solarex.github.io/"/>
  <updated>2018-11-02T20:32:54+08:00</updated>
  <id>http://Solarex.github.io/</id>
  <author>
    <name><![CDATA[Solarex]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HashMap源码分析]]></title>
    <link href="http://Solarex.github.io/blog/2018/07/02/analysis-of-hashmap/"/>
    <updated>2018-07-02T19:31:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2018/07/02/analysis-of-hashmap</id>
    <content type="html"><![CDATA[<p><code>HashMap</code>是存储key-value的集合，底层采用<code>Node&lt;K,V&gt;[] table</code>实现，初始大小为2<sup>4</sup>即16。</p>

<!-- more -->


<p>```java
public V put(K key, V value) {</p>

<pre><code>    if (table == EMPTY_TABLE) {
        inflateTable(threshold);
    }
    if (key == null)
        return putForNullKey(value);
    int hash = hash(key);
    int i = indexFor(hash, table.length);
    for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) {
        Object k;
        if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) {
            V oldValue = e.value;
            e.value = value;
            e.recordAccess(this);
            return oldValue;
        }
    }

    modCount++;
    addEntry(hash, key, value, i);
    return null;
}
</code></pre>

<p>```</p>

<p><code>put</code>操作首先根据<code>key</code>的hash值来找到要插入的<code>index</code>，如果存在相同<code>key</code>的元素则替换，否则插入。</p>

<p>```java
final int hash(Object k) {</p>

<pre><code>    int h = hashSeed;
    if (0 != h &amp;&amp; k instanceof String) {
        return sun.misc.Hashing.stringHash32((String) k);
    }

    h ^= k.hashCode();

    // This function ensures that hashCodes that differ only by
    // constant multiples at each bit position have a bounded
    // number of collisions (approximately 8 at default load factor).
    h ^= (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);
    return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);
}
</code></pre>

<p>```</p>

<p><code>hash</code>方法采用的是<code>sun.misc.Hashing</code>中的方法。</p>

<p>```java
void addEntry(int hash, K key, V value, int bucketIndex) {</p>

<pre><code>    if ((size &gt;= threshold) &amp;&amp; (null != table[bucketIndex])) {
        resize(2 * table.length);
        hash = (null != key) ? hash(key) : 0;
        bucketIndex = indexFor(hash, table.length);
    }

    createEntry(hash, key, value, bucketIndex);
}
</code></pre>

<p>```</p>

<p>```java
void resize(int newCapacity) {</p>

<pre><code>    Entry[] oldTable = table;
    int oldCapacity = oldTable.length;
    if (oldCapacity == MAXIMUM_CAPACITY) {
        threshold = Integer.MAX_VALUE;
        return;
    }

    Entry[] newTable = new Entry[newCapacity];
    transfer(newTable, initHashSeedAsNeeded(newCapacity));
    table = newTable;
    threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);
}
</code></pre>

<p>```</p>

<p>添加元素的时候会检查是否需要扩容，如果需要会将数组大小增大一倍，同时进行<code>rehash</code>来将之前的元素转移到现在的数组中来。</p>

<p>如果不需要扩容，直接添加元素</p>

<p>```java
void createEntry(int hash, K key, V value, int bucketIndex) {</p>

<pre><code>    Entry&lt;K,V&gt; e = table[bucketIndex];
    table[bucketIndex] = new Entry&lt;&gt;(hash, key, value, e);
    size++;
}
</code></pre>

<p>```</p>

<p>将<code>table</code>数组<code>index</code>位置元素指向插入元素，插入元素作为链表头。</p>

<p><code>get</code>操作和<code>put</code>操作差不多，根据<code>key</code>查找<code>Entry</code></p>

<p>```java
final Entry&lt;K,V> getEntry(Object key) {</p>

<pre><code>    if (size == 0) {
        return null;
    }

    int hash = (key == null) ? 0 : hash(key);
    for (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];
         e != null;
         e = e.next) {
        Object k;
        if (e.hash == hash &amp;&amp;
            ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))
            return e;
    }
    return null;
}
</code></pre>

<p>```</p>

<p><code>table</code>数组的长度是2<sup>n</sup>，这样2<sup>n</sup>-1的二进制表示每一位都是1，方便进行index计算。</p>

<p>```java
static int indexFor(int h, int length) {</p>

<pre><code>    // assert Integer.bitCount(length) == 1 : "length must be a non-zero power of 2";
    return h &amp; (length-1);
}
</code></pre>

<p>```</p>

<p><code>LinkedHashMap</code>的<code>Entry</code>除了有一个<code>next</code>来处理冲突，还有<code>before</code>和<code>after</code>来将所有元素连接成一个双向循环链表。</p>

<p>```java
// LinkedHashMap
void createEntry(int hash, K key, V value, int bucketIndex) {</p>

<pre><code>    HashMap.Entry&lt;K,V&gt; old = table[bucketIndex];
    Entry&lt;K,V&gt; e = new Entry&lt;&gt;(hash, key, value, old);
    table[bucketIndex] = e;
    e.addBefore(header);
    size++;
}
</code></pre>

<p>```</p>

<p>```java
/**</p>

<pre><code>     * Inserts this entry before the specified existing entry in the list.
     */
    private void addBefore(Entry&lt;K,V&gt; existingEntry) {
        after  = existingEntry;
        before = existingEntry.before;
        before.after = this;
        after.before = this;
    }

    /**
     * This method is invoked by the superclass whenever the value
     * of a pre-existing entry is read by Map.get or modified by Map.set.
     * If the enclosing Map is access-ordered, it moves the entry
     * to the end of the list; otherwise, it does nothing.
     */
    void recordAccess(HashMap&lt;K,V&gt; m) {
        LinkedHashMap&lt;K,V&gt; lm = (LinkedHashMap&lt;K,V&gt;)m;
        if (lm.accessOrder) {
            lm.modCount++;
            remove();
            addBefore(lm.header);
        }
    }
</code></pre>

<p>```</p>

<p><code>Entry</code>的<code>addBefore</code>将元素添加至双向循环链表的尾部，<code>recordAccess</code>将元素从双向循环链表原来的位置移除，重新添加到链表尾部。如果key元素已经存在Map中，在<code>put</code>时会替换value，同时<code>recordAccess</code>，<code>recordAccess</code>在<code>HashMap</code>的<code>Entry</code>中是空实现，在<code>LinkedHashMap</code>中进行移除到链表尾部的操作。<code>recordAccess</code>还在<code>LinkedHashMap</code>的<code>get</code>方法中被调用，这样每次执行<code>get</code>操作返回元素的同时将<code>Entry</code>移动到链表尾部。</p>

<p><code>WeakHashMap</code>的<code>Entry</code>是<code>WeakReference</code>的子类，创建的时候和<code>ReferenceQueue</code>进行关联，referent是key，当key被回收时将移除key对应的entry。</p>

<p>```java
/**</p>

<pre><code> * Expunges stale entries from the table.
 */
private void expungeStaleEntries() {
    for (Object x; (x = queue.poll()) != null; ) {
        synchronized (queue) {
            @SuppressWarnings("unchecked")
                Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;) x;
            int i = indexFor(e.hash, table.length);

            Entry&lt;K,V&gt; prev = table[i];
            Entry&lt;K,V&gt; p = prev;
            while (p != null) {
                Entry&lt;K,V&gt; next = p.next;
                if (p == e) {
                    if (prev == e)
                        table[i] = next;
                    else
                        prev.next = next;
                    // Must not null out e.next;
                    // stale entries may be in use by a HashIterator
                    e.value = null; // Help GC
                    size--;
                    break;
                }
                prev = p;
                p = next;
            }
        }
    }
</code></pre>

<p>```</p>

<p>key被回收时<code>Entry</code>会被放入<code>ReferenceQueue</code>中。在调用<code>size()</code>和<code>resize()</code>方法时会调用<code>expungeStaleEntries</code>方法。</p>

<p>一般情况下，一个对象被标记为垃圾（并不代表被回收了）后会被加入引用队列。</p>

<p>对于虚引用来说，它指向的对象只有被回收后才会加入引用队列，所以可以作为记录该引用指向的对象是否被回收。</p>

<h2>reference</h2>

<ul>
<li><a href="https://android.googlesource.com/platform/libcore/+/8f9c9cae00ad906c39891890f7b9d7a0bc453c0a%5E2..8f9c9cae00ad906c39891890f7b9d7a0bc453c0a/">Android Hashing.java</a></li>
<li><a href="http://hg.openjdk.java.net/jdk7u/jdk7u6/jdk/file/8c2c5d63a17e/src/share/classes/sun/misc/Hashing.java">JDK Hashing.java</a></li>
<li><a href="http://learningviacode.blogspot.com/2014/02/reference-queues.html">Reference Queues</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据结构与算法]]></title>
    <link href="http://Solarex.github.io/blog/2018/07/01/datastructure-and-algorithms/"/>
    <updated>2018-07-01T19:06:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2018/07/01/datastructure-and-algorithms</id>
    <content type="html"><![CDATA[<h2>ArrayList</h2>

<ul>
<li>尾插效率高，支持随机访问</li>
<li>中间插入或者删除效率低</li>
<li>空间不够用时，自动增长为现有空间的1.5倍</li>
<li>底层使用Object数组来存储数据，使用System.arrayCopy来移动元素</li>
</ul>


<h2>LinkedList</h2>

<ul>
<li>头插，中间插，删除效率高</li>
<li>不支持随机访问</li>
<li>MessageQueue中Message根据msg.when来进行插入，mMessages指向头结点</li>
</ul>


<h2>Vector</h2>

<ul>
<li>底层使用数组实现，增长看<code>capacityIncrement</code>，若<code>capacityIncrement</code>小于0，翻倍增长</li>
<li>方法有<code>synchronized</code>修饰，线程安全</li>
<li><code>Stack</code>栈底层实现使用的<code>Vector</code></li>
<li><code>Stack</code>在同一端进行插入和删除，<code>FILO</code></li>
<li>队列<code>Queue</code>是只允许在一端进行插入操作，而在另一端进行删除操作的线性表，插入的一端称为队尾，删除的一端称为队头</li>
<li>把队列的头尾相接的顺序存储结构称为循环队列</li>
<li>双端队列<code>Deque</code>是一种具有队列和栈的性质的数据结构，双端队列中的元素可以从两端弹出，其限定插入和删除操作在队列的两端进行。<code>LinkedList</code>，<code>ArrayDeque</code>实现了<code>Deque</code>接口,<code>LinkedBlockingQueue</code>实现了<code>BlockingDeque</code>接口</li>
<li>优先级队列，<code>PriorityQueue</code>，<code>MessageQueue</code>根据<code>Message.when</code>来进行插入</li>
</ul>

]]></content>
  </entry>
  
</feed>
