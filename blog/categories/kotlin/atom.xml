<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kotlin | Solarex's Blog]]></title>
  <link href="http://Solarex.github.io/blog/categories/kotlin/atom.xml" rel="self"/>
  <link href="http://Solarex.github.io/"/>
  <updated>2019-08-19T22:01:42+08:00</updated>
  <id>http://Solarex.github.io/</id>
  <author>
    <name><![CDATA[Solarex]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kotlin是如何实现方法默认参数的]]></title>
    <link href="http://Solarex.github.io/blog/2019/04/18/how-kotlin-generate-method-default-arguments/"/>
    <updated>2019-04-18T10:36:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2019/04/18/how-kotlin-generate-method-default-arguments</id>
    <content type="html"><![CDATA[<p>学习Kotlin的时候，发现可以给方法设置默认参数，Java是不支持给方法设置默认参数的，那Kotin是如何实现的呢？不妨看下下面的kotlin文件，kotlin允许这样写：</p>

<p>```kotlin
class frob() {</p>

<pre><code>fun fred(x: Int = 300, y: frob = mkfrob(x)) {
    println("${this}${x}${y}")
}
fun mkfrob(x: Int): frob {
    return this;
}
fun boobar() {
    fred();
    fred(100);
    fred(100, frob());
}
</code></pre>

<p>}
```</p>

<p>使用<code>kotlinc</code>编译成class文件之后，我们使用<code>cfr</code>反编译一下class文件看下编译器帮我们做了什么黑魔法。</p>

<!-- more -->


<p>```java
import java.io.PrintStream;
import kotlin.Metadata;
import kotlin.jvm.internal.Intrinsics;
import org.jetbrains.annotations.NotNull;</p>

<p>@Metadata(mv={1, 1, 13}, bv={1, 0, 3}, k=1, d1={&ldquo;\u0000\u001c\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0002\n\u0002\u0010\b\n\u0002\b\u0002\u0018\u00002\u00020\u0001B\u0005\u00a2\u0006\u0002\u0010\u0002J\u0006\u0010\u0003\u001a\u00020\u0004J\u001a\u0010\u0005\u001a\u00020\u00042\b\b\u0002\u0010\u0006\u001a\u00020\u00072\b\b\u0002\u0010\b\u001a\u00020\u0000J\u000e\u0010\t\u001a\u00020\u00002\u0006\u0010\u0006\u001a\u00020\u0007&rdquo;}, d2={&ldquo;Lfrob;&rdquo;, &ldquo;&rdquo;, &ldquo;()V&rdquo;, &ldquo;boobar&rdquo;, &ldquo;&rdquo;, &ldquo;fred&rdquo;, &ldquo;x&rdquo;, &ldquo;&rdquo;, &ldquo;y&rdquo;, &ldquo;mkfrob&rdquo;})
public final class frob {</p>

<pre><code>public final void fred(int x, @NotNull frob y) {
    Intrinsics.checkParameterIsNotNull((Object)y, (String)"y");
    String string = "" + this + x + y;
    System.out.println((Object)string);
}

public static /* synthetic */ void fred$default(frob frob2, int n, frob frob3, int n2, Object object) {
    if ((n2 &amp; 1) != 0) {
        n = 300;
    }
    if ((n2 &amp; 2) != 0) {
        frob3 = frob2.mkfrob(n);
    }
    frob2.fred(n, frob3);
}

@NotNull
public final frob mkfrob(int x) {
    return this;
}

public final void boobar() {
    frob.fred$default(this, 0, null, 3, null);
    frob.fred$default(this, 100, null, 2, null);
    this.fred(100, new frob());
}
</code></pre>

<p>}
```</p>

<p>可以看到编译器底层自动为我们生成了一个<code>static</code>,<code>synthetic</code>的方法，在这个方法中，第一个参数是对象接收者，第二个和第三个参数和我们声明的<code>fred</code>方法相同，第四个参数<code>n2</code>从方法体可以看出是一个bitmask。</p>

<p>从生成的方法<code>fred$default</code>实现来看，每个可以有默认参数的位置的参数有个mask值，为<code>2^x</code>，x为参数出现的顺序，如果方法调用的时候用到了某个位置上的默认参数，<code>fred$default</code>方法的第四个参数<code>n2</code>就会加上<code>2^x</code>。</p>

<p>在Java中是不能使用默认参数调用<code>fred</code>这种方法的，如果想要在Java中调用，需要给方法加上<code>@JvmOverloads</code>注解，我们加上这个注解再去反编译一下看下有什么变化。</p>

<p>```kotlin
class frob() {</p>

<pre><code>@JvmOverloads
fun fred(x: Int = 300, y: frob = mkfrob(x)) {
    println("${this}${x}${y}")
}
fun mkfrob(x: Int): frob {
    return this;
}
fun boobar() {
    fred();
    fred(100);
    fred(100, frob());
}
</code></pre>

<p>}
```</p>

<p>再反编译一下我们看下有什么变化：</p>

<p>```java
import java.io.PrintStream;
import kotlin.Metadata;
import kotlin.jvm.JvmOverloads;
import kotlin.jvm.internal.Intrinsics;
import org.jetbrains.annotations.NotNull;</p>

<p>@Metadata(mv={1, 1, 13}, bv={1, 0, 3}, k=1, d1={&ldquo;\u0000\u001c\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0002\n\u0002\u0010\b\n\u0002\b\u0002\u0018\u00002\u00020\u0001B\u0005\u00a2\u0006\u0002\u0010\u0002J\u0006\u0010\u0003\u001a\u00020\u0004J\u001c\u0010\u0005\u001a\u00020\u00042\b\b\u0002\u0010\u0006\u001a\u00020\u00072\b\b\u0002\u0010\b\u001a\u00020\u0000H\u0007J\u000e\u0010\t\u001a\u00020\u00002\u0006\u0010\u0006\u001a\u00020\u0007&rdquo;}, d2={&ldquo;Lfrob;&rdquo;, &ldquo;&rdquo;, &ldquo;()V&rdquo;, &ldquo;boobar&rdquo;, &ldquo;&rdquo;, &ldquo;fred&rdquo;, &ldquo;x&rdquo;, &ldquo;&rdquo;, &ldquo;y&rdquo;, &ldquo;mkfrob&rdquo;})
public final class frob {</p>

<pre><code>@JvmOverloads
public final void fred(int x, @NotNull frob y) {
    Intrinsics.checkParameterIsNotNull((Object)y, (String)"y");
    String string = "" + this + x + y;
    System.out.println((Object)string);
}

@JvmOverloads
public static /* synthetic */ void fred$default(frob frob2, int n, frob frob3, int n2, Object object) {
    if ((n2 &amp; 1) != 0) {
        n = 300;
    }
    if ((n2 &amp; 2) != 0) {
        frob3 = frob2.mkfrob(n);
    }
    frob2.fred(n, frob3);
}

@JvmOverloads
public final void fred(int x) {
    frob.fred$default(this, x, null, 2, null);
}

@JvmOverloads
public final void fred() {
    frob.fred$default(this, 0, null, 3, null);
}

@NotNull
public final frob mkfrob(int x) {
    return this;
}

public final void boobar() {
    frob.fred$default(this, 0, null, 3, null);
    frob.fred$default(this, 100, null, 2, null);
    this.fred(100, new frob());
}
</code></pre>

<p>}
```</p>

<p>可以看到比上面多生成了几个重载的方法，在重载的方法内部调用了生成方法<code>fred$default</code>。</p>

<h3>reference</h3>

<ul>
<li><a href="https://www.benf.org/other/cfr/kotlin-defaults.html">How does Kotlin generate default arguments?</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
