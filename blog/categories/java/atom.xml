<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Solarex's Blog]]></title>
  <link href="http://Solarex.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://Solarex.github.io/"/>
  <updated>2019-10-06T21:02:58+08:00</updated>
  <id>http://Solarex.github.io/</id>
  <author>
    <name><![CDATA[Solarex]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[单例模式]]></title>
    <link href="http://Solarex.github.io/blog/2019/08/12/singleton-pattern/"/>
    <updated>2019-08-12T07:34:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2019/08/12/singleton-pattern</id>
    <content type="html"><![CDATA[<p>本文主要讲解单例模式的各种实现，以及对反射和反序列化攻击的防御。</p>

<!-- more -->


<p>单例模式的实现主要注意以下几点：</p>

<ul>
<li>私有构造器</li>
<li>线程安全</li>
<li>延迟加载</li>
<li>序列化和反序列化安全</li>
<li>反射攻击</li>
</ul>


<p>下面依次看各种实现：</p>

<h3>饿汉式</h3>

<p>饿汉式顾名思义就是在类加载的时候直接实例化单例。由于是在类加载的时候进行，所以可能拖慢启动速度，而且由于是static变量，生命周期比较长，比较占用内存，特别是如果实例化了而又没有用到的话就白白浪费了内存。</p>

<h4>对反序列化的防御</h4>

<p><code>ObjectInputStream</code>的<code>readObject</code>方法时会判断如果一个类实现了<code>Serializable</code>接口并且定义了<code>readResolve</code>方法的话会调用<code>readResolve</code>方法来进行反序列化，因此可以在<code>readResolve</code>方法里面进行处理。</p>

<h4>对反射的防御</h4>

<p>由于实例在类加载的时候已经实例化，因此可以在构造函数中对实例进行判断，如果不为<code>null</code>直接抛出<code>RuntimeException</code>来阻止反射创建实例。</p>

<p>具体代码可见<a href="https://github.com/flyfire/DesignPatternsLearning/blob/master/src/main/java/com/solarexsoft/designpatterns/pattern/creational/singleton/HungrySingleton.java">HungrySingleton.java</a></p>

<h3>懒汉式</h3>

<p>顾名思义就是在用到的时候再进行实例化，同时使用static synchronized方法来保证线程安全。但是这种实现方式每次进<code>getInstance</code>方法都要获取锁，实际上只有实例化的时候需要获取锁，其他时候直接返回就好了，对这种方案的优化就是下面的双重检查锁方案，现在我们暂时先看这种方案。</p>

<h4>对反序列化的防御</h4>

<p>同样，在<code>readResolve</code>方法中进行处理。</p>

<h4>对反射的防御</h4>

<p>由于实例只有在调用<code>getInstance</code>方法之后才进行实例化，因此无法进行防御。</p>

<p>具体代码见<a href="https://github.com/flyfire/DesignPatternsLearning/blob/master/src/main/java/com/solarexsoft/designpatterns/pattern/creational/singleton/LazySingleton.java">LazySingleton.java</a></p>

<h3>双重检查锁</h3>

<p>如上所说，双重检查锁是为了解决加锁过重问题而产生的方案。这种方案有个问题，就是调用new来实例化一个对象并不是原子操作，其中初始化对象这步和将实例指向分配的内存地址这步可能会重排序，在某种情况下，可能出现其他线程使用一个未完全初始化的对象的问题。解决这个问题有两种方案，一是禁止重排序，通过在变量时加上volatile修饰符来解决，二是允许重排序，但是这种重排序不能对外界线程可见。双重检查锁使用的是volatile修饰变量来解决这种问题，使用第二种方案来解决问题的方式是我们下面要讲的静态内部类方式。</p>

<h4>对反序列化的防御</h4>

<p>同样，在<code>readResolve</code>方法中进行处理。</p>

<h4>对反射的防御</h4>

<p>和懒汉式一样，无法防御。</p>

<p>具体代码见<a href="https://github.com/flyfire/DesignPatternsLearning/blob/master/src/main/java/com/solarexsoft/designpatterns/pattern/creational/singleton/LazyDoubleCheckSingleton.java">LazyDoubleCheckSingleton.java</a></p>

<h3>静态内部类</h3>

<p>这种方式被推荐是因为使用了Class对象的初始化锁来保证指令重排序对外界线程不可见，实现方式很优雅。</p>

<h4>对反序列化的防御</h4>

<p>在<code>readResolve</code>方法中处理即可。</p>

<h4>对反射的防御</h4>

<p>和饿汉式一样，也是在类加载时初始化实例，因此可以在构造函数中进行判断并抛出异常。</p>

<p>具体代码见<a href="https://github.com/flyfire/DesignPatternsLearning/blob/master/src/main/java/com/solarexsoft/designpatterns/pattern/creational/singleton/StaticInnerClassSingleton.java">StaticInnerClassSingleton.java</a></p>

<h3>Enum实现单例</h3>

<p>EffectiveJava中告诉我们可以使用Enum来实现单例，并且这种方式实现的单例天然具有防御反序列化和反射攻击的优势。下面我们看他是如何实现的。</p>

<h4>对反序列化的防御</h4>

<p><code>ObjectInputStream</code>方法中<code>readEnum</code>直接调用了<code>Enum.valueOf</code>方法来进行Enum的反序列化，因此得到的是同样的实例。</p>

<h4>对反射的防御</h4>

<p><code>Constructor</code>的<code>newInstance</code>方法会对要反射类的<code>modifiers</code>进行判断，如果是<code>Enum</code>会直接抛出<code>IllegalArgumentException</code>异常。</p>

<p>具体代码见<a href="https://github.com/flyfire/DesignPatternsLearning/blob/master/src/main/java/com/solarexsoft/designpatterns/pattern/creational/singleton/EnumSingleton.java">EnumSingleton.java</a></p>

<p>从<a href="https://github.com/flyfire/DesignPatternsLearning/blob/master/src/main/java/com/solarexsoft/designpatterns/pattern/creational/singleton/EnumSingleton.jad">反编译后的代码</a>来看，Enum实现单例和饿汉式类似，都是在类加载静态初始化时初始化了实例对象。</p>

<h3>Kotlin简单单例</h3>

<p>kotlin实现单例很简单，声明为<code>object</code>即可。具体代码可见<a href="https://github.com/flyfire/DesignPatternsLearning/blob/master/src/main/java/com/solarexsoft/designpatterns/pattern/creational/singleton/KotlinSimpleSingleton.kt">KotlinSimpleSingleton.kt</a>。反编译代码可以看到，实际实现方式和饿汉式类似。</p>

<p>```java
public final class Solarex {
   public static final Solarex INSTANCE;</p>

<p>   static {</p>

<pre><code>  Solarex var0 = new Solarex();
  INSTANCE = var0;
</code></pre>

<p>   }
}
```</p>

<h3>Kotlin带参数的单例</h3>

<p>一般构造单例对象的时候需要注入一些对象参数，参考<a href="https://medium.com/@BladeCoder/kotlin-singletons-with-argument-194ef06edd9e">这篇文章</a>实现了一下带参数的kotlin单例。具体代码可见<a href="https://github.com/flyfire/DesignPatternsLearning/blob/master/src/main/java/com/solarexsoft/designpatterns/pattern/creational/singleton/KotlinSingletonWithArguments.kt">KotlinSingletonWithArguments.kt</a>。其实实现仍是双重检查+volatile。</p>

<h3>reference</h3>

<ul>
<li><p><a href="https://github.com/flyfire/DesignPatternsLearning/tree/master/src/main/java/com/solarexsoft/designpatterns/pattern/creational/singleton">Singleton</a></p></li>
<li><p><a href="https://medium.com/@BladeCoder/kotlin-singletons-with-argument-194ef06edd9e">Kotlin singletons with argument</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[检测链表中是否有环]]></title>
    <link href="http://Solarex.github.io/blog/2019/08/05/floyd-cycle-detection-in-linkedlist/"/>
    <updated>2019-08-05T17:50:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2019/08/05/floyd-cycle-detection-in-linkedlist</id>
    <content type="html"><![CDATA[<p>本文主要讲解如何检测链表中是否有环，如果有环确定环的起点。</p>

<!-- more -->


<h3>reference</h3>

<ul>
<li><a href="https://www.youtube.com/watch?v=zbozWoMgKW0">Detect loop in linked list(floyd algo / Tortoise and hare algo)</a></li>
<li><a href="https://www.youtube.com/watch?v=LUm2ABqAs1w">Why Floyd&rsquo;s cycle detection algorithm works? Detecting loop in a linked list.</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java线程池解析]]></title>
    <link href="http://Solarex.github.io/blog/2019/08/04/java-threadpoolexecutor/"/>
    <updated>2019-08-04T20:27:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2019/08/04/java-threadpoolexecutor</id>
    <content type="html"><![CDATA[<p>本文主要对Executor框架以及Java平台线程池技术进行分析。</p>

<!-- more -->


<p>Executor框架主要由3大部分组成：</p>

<ul>
<li>任务。包括被执行任务需要实现的接口：Runnable接口或Callable接口</li>
<li>任务的执行。包括任务执行机制的核心接口Executor，以及继承自Executor的ExecutorService接口。Executor框架有两个关键类实现了ExecutorService接口（ThreadPoolExecutor和ScheduledThreadPoolExecutor）</li>
<li>异步计算的结果。包括接口Future和实现Future接口的FutureTask类。</li>
</ul>


<p>通过Executor框架的工具类Executors，可以创建3中类型的ThreadPoolExecutor：</p>

<ul>
<li>FixedThreadPool</li>
<li>SingleThreadPool</li>
<li>CachedThreadPool</li>
</ul>


<p>ThreadPoolExecutor执行execute方法分下面4种情况：</p>

<ul>
<li>如果当前运行的线程少于corePoolSize，则创建新线程来执行任务（注意，执行这一步骤需要获取全局锁）</li>
<li>如果运行的线程等于或多于corePoolSize，则将任务加入BlockingQueue。</li>
<li>如果无法将任务加入BlockingQueue（队列已满），则创建新的线程来处理任务（注意，执行这一步骤需要获取全局锁）</li>
<li>如果创建新线程将使当前运行的线程超出maximumPoolSize，任务将交给饱和策略来处理。</li>
</ul>


<p>RejectExecutionHandler(饱和策略)</p>

<ul>
<li>AbortPolicy：直接抛出异常</li>
<li>CallerRunsPolicy：调用者线程来运行任务</li>
<li>DiscardOldestPolicy：丢弃队列中最近的一个任务，并执行当前任务</li>
<li>DiscardPolicy：不处理，丢弃掉</li>
</ul>


<p>关闭线程池：可以通过调用线程池的shutdown或shutdownNow方法来关闭线程池。它们的原理是遍历线程池中的工作线程，然后逐个调用线程的interrupt方法来中断线程，所以无法响应中断的任务可能永远无法终止。但是它们存在一定的区别，shutdownNow首先将线程池的状态设置成STOP，然后尝试停止所有的正在执行或暂停任务的线程，并返回等待执行任务的列表，而shutdown只是将线程池的状态设置成SHUTDOWN状态，然后中断所有没有正在执行任务的线程。只要调用了这两个关闭方法中的任意一个，isShutdown方法就会返回true，当所有的任务都已关闭后，才表示线程池关闭成功，这时调用isTerminated方法会返回true。</p>

<p>FixedThreadPool的corePoolSize和maximumPoolSize都被设置为创建FixedThreadPool时指定的参数nThreads。当线程池中的线程数大于corePoolSize时，keepAliveTime为多余的空闲线程等待新任务的最长时间，超过这个时间后多余的线程将被终止。keepAliveTime设置为0意味着多余的空闲线程会被立即终止。FixedThreadPool使用无界队列LinkedBlockingQueue作为线程池的工作队列。当线程池的线程数达到corePoolSize后，新任务将在无界队列中等待，因此线程池中线程数不会超过corePoolSize，maximunPoolSize是无效的参数，keepAliveTime也变成了无效参数。</p>

<p>SingleThreadExecutor的corePoolSize和maximumPoolSize被设置成1,其他参数与FixedThreadPool相同。</p>

<p>CachedThreadPool是一个会根据需要创建新线程的线程池。CachedThreadPool的corePoolSize被设置为0，即corePoolSize为空，maximumPoolSize被设置为Integer.MAX_VALUE，即maximumPool是无界的，keepAliveTime被设置为60，意味着CachedThreadPool中的空闲线程等待新任务的最长时间是60s，空闲线程超过60s后将会被终止。CachedThreadPool使用没有容量的SynchronousQueue作为线程池的工作队列，但CachedThreadPool的maximumPool是无界的，这意味着，如果主线程提交任务的速度高于maximumPool中线程处理任务的速度时，CachedThreadPool会不断创建新线程，极端情况下，CachedThreadPool会因为创建过多线程而耗尽CPU和内存资源。</p>

<p>ScheduledThreadPoolExecutor使用DelayQueue作为工作队列，DelayQueue是无界队列，所以maximumPoolSize参数无意义。ScheduledThreadPoolExecutor的执行主要分为两大部分：</p>

<ul>
<li>当调用ScheduledThreadPoolExecutor的scheduleAtFixedRate()方法或者scheduleWithFixedDelay()方法时，会向DelayQueue中添加一个实现了RunnableScheduledFuture接口的ScheduledFutureTask。</li>
<li>线程池的线程从DelayQueue中获取ScheduledFutureTask，然后执行任务。</li>
</ul>


<p>可以自己<a href="https://github.com/flyfire/ReadJCIP/tree/master/src/main/java/com/solarexsoft/jcip/art/ch04">参考</a>着实现一个简陋版的线程池。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java BlockingQueue解析]]></title>
    <link href="http://Solarex.github.io/blog/2019/08/01/java-blockingqueue/"/>
    <updated>2019-08-01T20:26:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2019/08/01/java-blockingqueue</id>
    <content type="html"><![CDATA[<p>本文主要分析Java平台BlockingQueue的各个实现。</p>

<!-- more -->


<p>阻塞队列BlockingQueue是一个支持两个附加操作的队列。这两个附加的操作支持阻塞的插入和移除方法。</p>

<ul>
<li>支持阻塞的插入方法：意思是当队列满时，队列会阻塞插入元素的线程，直到队列不满。</li>
<li>支持阻塞的移除方法：意思是在队列为空时，获取元素的线程会等待队列变为非空。</li>
</ul>


<p>当阻塞队列不可用时，这两个附加操作提供了4种处理方式。</p>

<table>
<thead>
<tr>
<th></th>
<th> 方法/处理方式 </th>
<th> 抛出异常  </th>
<th> 返回特殊值 </th>
<th> 一直阻塞 </th>
<th> 超时退出           </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> 插入方法      </td>
<td> add(e)    </td>
<td> offer(e)   </td>
<td> put(e)   </td>
<td> offer(e,time,unit) |</td>
</tr>
<tr>
<td></td>
<td> 移除方法      </td>
<td> remove(e) </td>
<td> poll()     </td>
<td> take()   </td>
<td> poll(time, unit)   |</td>
</tr>
<tr>
<td></td>
<td> 检查方法      </td>
<td> element() </td>
<td> peek()     </td>
<td> 不可用   </td>
<td> 不可用             |</td>
</tr>
</tbody>
</table>


<ul>
<li>抛出异常：当队列满时，如果再往队列里插入元素，会抛出IllegalStateException(&ldquo;Queue full&rdquo;)异常。当队列空时，从队列里获取元素会抛出NoSuchElementException异常。</li>
<li>返回特殊值：当往队列插入元素时，会返回元素是否插入成功，成功返回true。如果是移除方法，则是从队列里取出一个元素，如果没有则返回null。</li>
<li>一直阻塞：当阻塞队列满时，如果生产者线程往队列里put元素，队列会一直阻塞生产者线程，直到队列可用或者响应中断退出。当队列空时，如果消费者线程从队列里take元素，队列会阻塞住消费者线程，直到队列不为空。</li>
<li>超时退出：当阻塞队列满时，如果生产者线程往队列里插入元素，队列会阻塞生产者线程一段时间，如果超过了指定的时间，生产者线程就会退出。</li>
</ul>


<p>如果是无界阻塞队列，队列不可能会出现满的情况，所以使用put或offer方法永远不会被阻塞，而且offer方法永远返回true。</p>

<p>JDK 7提供了7个阻塞队列：</p>

<ul>
<li>ArrayBlockingQueue：一个由数组结构组成的有界阻塞队列</li>
<li>LinkedBlockingQueue：一个由链表结构组成的有界阻塞队列</li>
<li>PriorityBlockingQueue：一个支持优先级排序的无界阻塞队列</li>
<li>DelayQueue：一个使用优先级队列实现的无界阻塞队列</li>
<li>SynchronousQueue：一个不存储元素的阻塞队列</li>
<li>LinkedTransferQueue：一个由链表结构组成的无界阻塞队列</li>
<li>LinkedBlockingDeque：一个由链表结构组成的双向阻塞队列</li>
</ul>


<p>ArrayBlockingQueue是一个用数组实现的有界阻塞队列。此队列按照FIFO的原则对元素进行排序。访问线程的公平性是使用可重入锁实现的。</p>

<p>LinkedBlockingQueue是一个用链表实现的有界阻塞队列，此队列的默认和最大长度为Integer.MAX_VALUE。此队列按照先进先出的原则对元素进行排序。</p>

<p>PriorityBlockingQueue是一个支持优先级的无界阻塞队列。默认情况下元素采用自然顺序升序排列。也可以自定义类实现compareTo()方法来指定元素排序规则，或者初始化PriorityBlockingQueue时，指定构造参数Comparator来对元素进行排序。需要注意的是不能保证同优先级元素的顺序。</p>

<p>DelayQueue是一个支持延时获取元素的无界阻塞队列。队列使用PriorityQueue来实现。队列中的元素必须实现Delayed接口，在创建元素时可以指定多久才能从队列中获取当前元素。只有在延迟期满时才能从队列中提取元素。DelayQueue非常有用，可以将DelayQueue运用在以下应用场景。</p>

<ul>
<li>缓存系统的设计：可以用DelayQueue保存缓存元素的有效期，使用一个线程循环查询DelayQueue，一旦能从DelayQueue中获取元素时，表示缓存有效期到了。</li>
<li>定时任务调度：使用DelayQueue保存当天将会执行的任务和执行时间，一旦从DelayQueue中获取到任务就开始执行，比如TimerQueue就是使用DelayQueue实现的。</li>
</ul>


<p>延时阻塞队列的实现很简单，当消费者从队列里获取元素时，如果元素没有达到延时时间，就阻塞当前线程。</p>

<p>SyncrhonousQueue是一个不存储元素的阻塞队列。每一个put操作必须等待一个take操作，否则不能继续添加元素。它支持公平访问队列。默认情况下线程采用非公平性策略访问队列。SynchronousQueue可以看成是一个传球手，负责把生产者线程处理的数据直接传递给消费者线程。队列本身并不存储任何元素，非常适合传递性场景。SynchronousQueue的吞吐量高于LinkedBlockingQueue和ArrayBlockingQueue。</p>

<p>LinkedTransferQueue是一个由链表结构组成的无界阻塞TransferQueue队列。相对于其他阻塞队列，LinkedTransferQueue多了tryTransfer和transfer方法。</p>

<ul>
<li>transfer方法：如果当前有消费者正在等待接收元素（消费者使用take()方法或带时间限制的poll()方法时），transfer方法可以把生产者传入的元素立即transfer给消费者。如果没有消费者在等待接收元素，transfer方法会将元素存放在队列tail节点，并等到该元素被消费者消费了才返回。</li>
<li>tryTransfer方法：tryTransfer方法是用来试探生产者传入的元素是否能直接传给消费者。如果没有消费者等待接收元素，则返回false。和transfer方法的区别是tryTransfer方法无论消费者是否接收，方法立即返回，而transfer方法是必须等到消费者消费了才返回。对于带时间限制的tryTransfer(E e,long timeout, TimeUnit unit)方法，试图把生产者传入的元素直接传给消费者，但是如果没有消费者消费该元素则等待指定的时间再返回。如果超时还没消费元素，则返回false，如果在超时时间内消费了元素，则返回true。</li>
</ul>


<p>LinkedBlockingDeque是一个由链表结构组成的双向阻塞队列。所谓双向队列指的是可以从队列的两端插入和移除元素。双向队列因为多了一个操作队列的入口，在多线程同时入队时，也就减少了一半的竞争。相比其他的阻塞队列，LinkedBlockingDeque多了addFirst、addLast、offerFirst、offerLast、peekFirst、peekLast等方法。插入方法add等同于addLast，移除方法remove等同于removeFirst，take方法等同于takeFirst。在初始化LinkedBlockingDeque时可以设置容量防止其过度膨胀。LinkedBlockingDeque可以运用在“工作窃取”模式中。</p>

<p>阻塞队列实现原理：使用通知模式实现。ArrayBlockingQueue使用了Condition来实现。</p>

<p>可以自己<a href="https://github.com/flyfire/ReadJCIP/blob/master/src/main/java/com/solarexsoft/jcip/ch14/ConditionBoundedBuffer.java">参考</a>着实现一下。</p>

<h3>reference</h3>

<ul>
<li><a href="https://javadoop.com/post/java-concurrent-queue">解读 java 并发队列 BlockingQueue</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java AQS解析]]></title>
    <link href="http://Solarex.github.io/blog/2019/07/28/aqs/"/>
    <updated>2019-07-28T16:59:00+08:00</updated>
    <id>http://Solarex.github.io/blog/2019/07/28/aqs</id>
    <content type="html"><![CDATA[<p><code>AbstractQueuedSynchronizer</code>是很多并发工具类如<code>ReentrantLock</code>的实现基础，本文对其进行分析。</p>

<!-- more -->


<p>TL;DR</p>

<p>以下是对<a href="http://gee.cs.oswego.edu/dl/papers/aqs.pdf">aqs.pdf</a>部分内容零散的翻译，其实《Java并发编程实战》中有一章介绍了AQS，我也做了笔记，可以在<a href="https://solarex.github.io/reading-notes/jcip/ch14.html">这里</a>看到，对于AQS模板方法的使用，可以在<a href="https://solarex.github.io/reading-notes/the-art-of-java-concurrency-programming/ch05.html">这篇笔记</a>中看到。翻译很不专业，将就看下吧。如果想深入了解AQS，可以读下<a href="http://gee.cs.oswego.edu/dl/papers/aqs.pdf">aqs.pdf</a>或者看下本文reference部分的几篇文章。</p>

<p>Synchronizers possess two kinds of methods : at least one <code>acquire</code> operation that blocks the calling thread unless/until the synchronization state allows it to proceed, and at least one <code>release</code> operation that changes synchronization state in a way that may allow one or more blocked threads to unblock.</p>

<p>同步器提供两种方法：一个<code>acquire</code>方法在同步状态不允许线程通过运行时阻塞线程，一个<code>release</code>方法改变同步状态来允许一个或多个被阻塞的线程继续运行。</p>

<p>The <code>java.util.concurrent</code> package does not define a single unified API for synchronizers. Some are defined via common interfaces (e.g., <code>Lock</code>), but others contain only specialized versions. So, <code>acquire</code> and <code>release</code> operations take a range of names and forms across different classes. For example, methods <code>Lock.lock</code>,<code>Semaphore.acquire</code>, <code>CountDownLatch.await</code>, and <code>FutureTask.get</code> all map to <code>acquire</code> operations in the framework. However, the package does maintain consistent conventions across classes to support a range of common usage options. When meaningful, each synchronizer supports:
+ Nonblocking synchronization attempts (for example,<code>tryLock</code>) as well as blocking versions.
+ Optional timeouts, so applications can give up waiting.
+ Cancellability via interruption, usually separated into one version of acquire that is cancellable, and one that isn&rsquo;t.</p>

<p>JUC没有为同步器定义一个统一的API。有一些是在通用的接口中定义的，比如<code>Lock</code>，但是其他的包括一些特殊的版本。所以不同同步器的<code>acquire</code>和<code>release</code>方法在名字和形态上表现不同。比如，<code>Lock.lock</code>，<code>Semaphore.acquire</code>，<code>CountDownLatch.await</code>和<code>FutureTask.get</code>和AQS框架中的<code>acquire</code>方法相对应。但是JUC框架在通用操作上保持了一致性。对于同步器来说，一般都支持以下操作：</p>

<ul>
<li>非阻塞尝试和阻塞尝试，比如<code>Lock.tryLock</code>和<code>Lock.lock</code></li>
<li>可选的超时，超时后线程可以放弃等待尝试</li>
<li>在等待获取尝试的时候，对线程中断的响应或不响应</li>
</ul>


<p>Synchronizers may vary according to whether they manage only <code>exclusive</code> states – those in which only one thread at a time may continue past a possible blocking point – versus possible <code>shared</code> states in which multiple threads can at least sometimes proceed.Regular lock classes of course maintain only exclusive state, but counting semaphores, for example, may be acquired by as many threads as the count permits. To be widely useful, the framework must support both modes of operation.</p>

<p>同步器可能会因为共享状态是独占还是可共享的而不同。一般锁维护的是独占状态，同时只能有一个线程持有锁，但是Semaphore可能同时被多个线程获取。AQS对这两种模式都提供了支持。</p>

<p>The <code>java.util.concurrent</code> package also defines interface <code>Condition</code>, supporting monitor-style <code>await/signal</code> operations that may be associated with <code>exclusive Lock</code> classes, and whose implementations are intrinsically intertwined with their associated Lock classes.</p>

<p>JUC框架还定义了<code>Condition</code>接口，来提供和内置锁<code>wait/notify</code>类似的操作，<code>Condition</code>的<code>await/signal</code>方法和独占锁绑定在一起。</p>

<p>The basic ideas behind a synchronizer are quite straightforward.
An acquire operation proceeds as:</p>

<p>```java
while (synchronization state does not allow acquire) {</p>

<pre><code>enqueue current thread if not already queued;
possibly block current thread;
</code></pre>

<p>}
dequeue current thread if it was queued;
```</p>

<p>And a release operation is:</p>

<p><code>java
update synchronization state;
if (state may permit a blocked thread to acquire)
unblock one or more queued threads;
</code></p>

<p>Support for these operations requires the coordination of three basic components:
+ Atomically managing synchronization state
+ Blocking and unblocking threads
+ Maintaining queues</p>

<p>同步器背后的思想很简单，三个基本的部分构成了对同步器的支持：</p>

<ul>
<li>原子更新同步状态</li>
<li>线程的阻塞和唤醒</li>
<li>线程等待队列</li>
</ul>


<p>Class <code>AbstractQueuedSynchronizer</code> maintains synchronization state using only a single (32bit) int, and exports <code>getState</code>, <code>setState</code>, and <code>compareAndSetState</code> operations to access and update this state. These methods in turn rely on <code>java.util.concurrent.atomic</code> support providing JSR133 (Java Memory Model) compliant <code>volatile</code> semantics on <code>reads and writes</code>, and access to native <code>compare-and-swap</code> or <code>loadlinked/store-conditional</code> instructions to implement <code>compareAndSetState</code>, that atomically sets state to a given new value only if it holds a given expected value.</p>

<p><code>AbstractQueuedSynchronizer</code>用一个32位的int值来表示同步状态，暴露了<code>getState</code>, <code>setState</code>和<code>compareAndSetState</code> 方法来获取和更新同步状态。这些方法依赖JMM底层模型对<code>volatile</code>变量的语义支持，依赖CPU的<code>compare-and-swap</code> 或 <code>loadlinked/store-conditional</code> 指令来完成<code>compareAndSetState</code>操作。CAS操作原子地设置同步状态为新的值，只有同步状态等于期待的原值时才会成功。</p>

<p>Restricting synchronization state to a 32bit <code>int</code> was a pragmatic decision. While JSR166 also provides atomic operations on 64bit <code>long</code> fields, these must still be emulated using internal locks on enough platforms that the resulting synchronizers would not perform well. In the future, it seems likely that a second base class, specialized for use with 64bit state (i.e., with long control arguments), will be added. However, there is not now a compelling reason to include it in the package. Currently, 32 bits suffice for most applications. Only one <code>java.util.concurrent</code> synchronizer class, <code>CyclicBarrier</code>, would require more bits to maintain state, so instead uses locks (as do most higher-level utilities in the package).</p>

<p>JUC已经提供了<code>AbstractQueuedLongSynchronizer</code>，<code>AbstractQueuedLongSynchronizer</code>用<code>long</code>来表示同步状态。</p>

<p>Concrete classes based on <code>AbstractQueuedSynchronizer</code> must define methods <code>tryAcquire</code> and <code>tryRelease</code> in terms of these exported state methods in order to control the <code>acquire</code> and <code>release</code> operations. The <code>tryAcquire</code> method must return <code>true</code> if synchronization was acquired, and the <code>tryRelease</code> method must return <code>true</code> if the new synchronization state may allow future acquires. These methods accept a single <code>int</code> argument that can be used to communicate desired state; for example in a reentrant lock, to re-establish the recursion count when re-acquiring the lock after returning from a condition wait.Many synchronizers do not need such an argument, and so just ignore it.</p>

<p>AQS的具体实现类必须实现<code>tryAcquire</code> 和 <code>tryRelease</code>以便获得AQS提供的 <code>acquire</code> 和 <code>release</code> 操作。如果同步状态允许线程通过，<code>tryAcquire</code>方法必须返回<code>true</code>，<code>tryRelease</code>必须返回<code>true</code>如果新的同步状态允许阻塞的线程通过。<code>tryAcquire</code>和<code>tryRelease</code>接受一个<code>int</code>类型的参数，很多同步器不需要这个参数，直接忽略了它。</p>

<p>Until JSR166, there was no Java API available to block and unblock threads for purposes of creating synchronizers that are not based on built-in monitors. The only candidates were <code>Thread.suspend</code> and <code>Thread.resume</code>, which are unusable because they encounter an unsolvable race problem: If an unblocking thread invokes <code>resume</code> before the blocking thread has executed <code>suspend</code>, the <code>resume</code> operation will have no effect.</p>

<p>在JSR166之前，没有Java API来提供除了基于内置锁之外的线程阻塞唤醒同步操作。可选的有<code>Thread.suspend</code>和<code>Thread.resume</code>，但是如果一个线程在<code>suspend</code>之前先调用了<code>resume</code>，<code>resume</code>将无效。</p>

<p>The <code>java.util.concurrent.locks</code> package includes a <code>LockSupport</code> class with methods that address this problem. Method <code>LockSupport.park</code> blocks the current thread unless or until a <code>LockSupport.unpark</code> has been issued. (Spurious wakeups are also permitted.) Calls to <code>unpark</code> are not &ldquo;counted&rdquo;, so multiple unparks before a park only unblock a single park.Additionally, this applies per-thread, not per-synchronizer. A thread invoking park on a new synchronizer might return immediately because of a &ldquo;leftover&rdquo; unpark from a previous usage. However, in the absence of an unpark, its next invocation will block. While it would be possible to explicitly clear this state, it is not worth doing so. It is more efficient to invoke park multiple times when it happens to be necessary.This simple mechanism is similar to those used, at some level, in the Solaris-9 thread library, in WIN32 &ldquo;consumable events&rdquo;,and in the Linux NPTL thread library, and so maps efficiently to each of these on the most common platforms Java runs on.(However, the current Sun Hotspot JVM reference implementation on Solaris and Linux actually uses a pthread condvar in order to fit into the existing runtime design.) The park method also supports optional relative and absolute timeouts, and is integrated with JVM <code>Thread.interrupt</code> support — interrupting a thread unparks it.</p>

<p>JUC提供了<code>LockSupport</code>来解决这个问题。<code>LockSupport</code>还支持可选的超时，而且提供了对线程中断的支持。</p>

<p>The heart of the framework is maintenance of queues of blocked threads, which are restricted here to FIFO queues. Thus, the framework does not support priority-based synchronization.These days, there is little controversy that the most appropriate choices for synchronization queues are non-blocking data structures that do not themselves need to be constructed using lower-level locks. And of these, there are two main candidates: variants of Mellor-Crummey and Scott (MCS) locks, and variants of Craig, Landin, and Hagersten (CLH) locks.Historically, CLH locks have been used only in spinlocks.However, they appeared more amenable than MCS for use in the synchronizer framework because they are more easily adapted to handle cancellation and timeouts, so were chosen as a basis. The resulting design is far enough removed from the original CLH structure to require explanation.A CLH queue is not very queue-like, because its enqueuing and dequeuing operations are intimately tied to its uses as a lock. It is a linked queue accessed via two atomically updatable fields,head and tail, both initially pointing to a dummy node.</p>

<p>AQS的等待队列是CLH队列的变种。</p>

<p>A new node, node, is enqueued using an atomic operation:</p>

<p><code>java
do { pred = tail;
} while(!tail.compareAndSet(pred, node));
</code></p>

<p>The <code>release</code> status for each node is kept in its predecessor node.So, the &ldquo;spin&rdquo; of a spinlock looks like:</p>

<p><code>java
while (pred.status != RELEASED) ; // spin
</code></p>

<p>A dequeue operation after this spin simply entails setting the head field to the node that just got the lock:</p>

<p><code>java
head = node;
</code></p>

<p>新节点入队通过CAS设置<code>tail</code>来实现，当前节点的释放状态取决于前驱节点的状态。自旋结束后出队一个节点会把<code>head</code>设置为这个节点。</p>

<p>AQS的等待队列使用<code>next</code>指针保存了后继节点，用<code>status</code>保存了节点代表的线程的状态，比如可能线程已经取消了等待。</p>

<p>Omitting such details, the general form of the resulting implementation of the basic acquire operation (exclusive,noninterruptible, untimed case only) is:</p>

<p>```java
if (!tryAcquire(arg)) {</p>

<pre><code>node = create and enqueue new node;
pred = node's effective predecessor;
while (pred is not head node || !tryAcquire(arg)) {
    if (pred's signal bit is set)
        park();
    else
        compareAndSet pred's signal bit to true;
    pred = node's effective predecessor;
}
head = node;
</code></pre>

<p>}
```</p>

<p>And the release operation is:</p>

<p>```java
if (tryRelease(arg) &amp;&amp; head node&rsquo;s signal bit is set) {</p>

<pre><code>compareAndSet head's signal bit to false;
unpark head's successor, if one exists
</code></pre>

<p>}
```</p>

<p>The synchronizer framework provides a <code>ConditionObject</code> class for use by synchronizers that maintain exclusive synchronization and conform to the Lock interface. Any number of condition objects may be attached to a lock object, providing classic monitor-style <code>await</code>, <code>signal</code>, and <code>signalAll</code> operations, including those with timeouts, along with some inspection and monitoring methods.</p>

<p>AQS框架还提供了<code>ConditionObject</code>来提供和内置锁<code>wait/notify/notifyAll</code>类似的<code>await/signal/signalAll</code>功能。</p>

<p>The <code>ConditionObject</code> class enables conditions to be efficiently integrated with other synchronization operations,again by fixing some design decisions. This class supports only Java-style monitor access rules in which condition operations are legal only when the lock owning the condition is held by the current thread. Thus, a <code>ConditionObject</code> attached to a ReentrantLock acts in the same way as do built-in monitors (via <code>Object.wait</code> etc), differing only in method names, extra functionality, and the fact that users can declare multiple conditions per lock.A <code>ConditionObject</code> uses the same internal queue nodes as synchronizers, but maintains them on a separate condition queue.The signal operation is implemented as a queue transfer from the condition queue to the lock queue, without necessarily waking up the signalled thread before it has re-acquired its lock.</p>

<p>The basic await operation is:</p>

<p><code>java
 create and add new node to condition queue;
 release lock;
 block until node is on lock queue;
 re-acquire lock;
</code></p>

<p>And the signal operation is:</p>

<p><code>java
 transfer the first node from condition queue to lock queue;
</code></p>

<p><code>ConditionObject</code>提供和内置锁类似的功能，在一个<code>Lock</code>上可以声明多个<code>ConditionObject</code>。<code>ConditionObject</code>使用condition queue来维护等待队列，condition queue上的节点和lock queue中的节点相同，<code>await</code>是入condition queue，<code>signal</code>是从condition queue中转移到lock queue中。</p>

<p>Because these operations are performed only when the lock is held, they can use sequential linked queue operations (using a <code>nextWaiter</code> field in nodes) to maintain the condition queue.The transfer operation simply unlinks the first node from the condition queue, and then uses CLH insertion to attach it to the lock queue. The main complication in implementing these operations is dealing with cancellation of condition waits due to timeouts or <code>Thread.interrupt</code>. A cancellation and signal occuring at approximately the same time encounter a race whose outcome conforms to the specifications for built-in monitors. As revised in JSR133, these require that if an interrupt occurs before a signal, then the <code>await</code> method must, after re-acquiring the lock, throw <code>InterruptedException</code>. But if it is interrupted after a signal, then the method must return without throwing an exception, but with its thread interrupt status set.</p>

<p>transfer操作是从将condition queue里的第一个节点从condition queue中移除，插入到lock queue中去。如果在<code>signal</code>之前发生了线程中断，那么<code>await</code>必须在重新获取锁之后抛出<code>InterruptedException</code>。如果在<code>signal</code>之后发生了中断，那么线程中断状态将被设置，但是不会抛出异常。</p>

<p>Here are sketches of how java.util.concurrent synchronizer classes are defined using this framework:</p>

<ul>
<li>The <code>ReentrantLock</code> class uses synchronization state to hold the (recursive) lock count. When a lock is acquired, it also records the identity of the current thread to check recursions and detect illegal state exceptions when the wrong thread tries to unlock. The class also uses the provided <code>ConditionObject</code>, and exports other monitoring and inspection methods. The class supports an optional &ldquo;fair&rdquo; mode by internally declaring two different <code>AbstractQueuedSynchronizer</code> subclasses (the fair one disabling barging) and setting each <code>ReentrantLock</code> instance to use the appropriate one upon construction.</li>
<li>The <code>ReentrantReadWriteLock</code> class uses 16 bits of the synchronization state to hold the write lock count, and the remaining 16 bits to hold the read lock count. The <code>WriteLock</code> is otherwise structured in the same way as <code>ReentrantLock</code>.The <code>ReadLock</code> uses the <code>acquireShared</code> methods to enable multiple readers.</li>
<li>The <code>Semaphore</code> class (a counting semaphore) uses the synchronization state to hold the current count. It defines <code>acquireShared</code> to decrement the count or block if nonpositive, and <code>tryRelease</code> to increment the count, possibly unblocking threads if it is now positive.</li>
<li>The <code>CountDownLatch</code> class uses the synchronization state to represent the count. All acquires pass when it reaches zero.</li>
<li>The <code>FutureTask</code> class uses the synchronization state to represent the run-state of a future (initial, running, cancelled,done). Setting or cancelling a future invokes <code>release</code>,unblocking threads waiting for its computed value via <code>acquire</code>.</li>
<li>The <code>SynchronousQueue</code> class (a CSP-style handoff) uses internal wait-nodes that match up producers and consumers. It uses the synchronization state to allow a producer to proceed when a consumer takes the item, and vice-versa.</li>
</ul>


<p>JUC框架中几个使用AQS的同步器类的内部实现。</p>

<h3>reference</h3>

<ul>
<li><a href="https://javadoop.com/post/AbstractQueuedSynchronizer">一行一行源码分析清楚 AbstractQueuedSynchronizer</a></li>
<li><a href="https://javadoop.com/post/AbstractQueuedSynchronizer-2">一行一行源码分析清楚 AbstractQueuedSynchronizer（二）</a></li>
<li><a href="https://javadoop.com/post/AbstractQueuedSynchronizer-3">一行一行源码分析清楚 AbstractQueuedSynchronizer（三）</a></li>
<li><a href="http://ifeve.com/introduce-abstractqueuedsynchronizer/">AbstractQueuedSynchronizer的介绍和原理分析</a></li>
<li><a href="https://www.infoq.cn/article/jdk1.8-abstractqueuedsynchronizer">深度解析 Java 8：JDK1.8 AbstractQueuedSynchronizer 的实现分析（上）</a></li>
<li><a href="https://www.infoq.cn/article/java8-abstractqueuedsynchronizer">深度解析 Java 8：AbstractQueuedSynchronizer 的实现分析（下）</a></li>
<li><a href="https://juejin.im/post/5aeb07ab6fb9a07ac36350c8">深入理解AbstractQueuedSynchronizer(AQS)</a></li>
<li><a href="https://liuzhengyang.github.io/2017/05/12/aqs/">AbstractQueuedSynchronizer使用和源码分析</a></li>
<li><a href="https://www.jianshu.com/p/e7659436538b">AbstractQueuedSynchronizer 源码分析 (基于Java 8)</a></li>
<li><a href="https://segmentfault.com/a/1190000014221325">源码分析JDK8之AbstractQueuedSynchronizer</a></li>
<li><a href="http://gee.cs.oswego.edu/dl/papers/aqs.pdf">aqs.pdf</a></li>
<li><a href="http://www.cs.tau.ac.il/~shanir/nir-pubs-web/Papers/CLH.pdf">CLH.pdf</a></li>
<li><a href="https://coderbee.net/index.php/concurrent/20131115/577">自旋锁、排队自旋锁、MCS锁、CLH锁</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
